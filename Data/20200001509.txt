b'Robotic Specialization in Autonomous Robotic\nStructural Assembly\nBorbala Bernus, Green\xef\xac\x81eld Trinh, Christine Gregg,\nOlivia Formoso, Kenneth Cheung\nCoded Structures Laboratory\nNASA Ames Research Center\nMoffett Field, CA\nkenny@nasa.gov\n\n1. I NTRODUCTION\n\nAbstract\xe2\x80\x94Robotic in-space assembly of large space structures\nis a long-term NASA goal to reduce launch costs and enable\nlarger scale missions. Recently, researchers have proposed using\ndiscrete lattice building blocks and co-designed robots to build\nhigh-performance, scalable primary structure for various onorbit and surface applications. These robots would locomote\non the lattice and work in teams to build and recon\xef\xac\x81gure\nbuilding-blocks into functional structure. However, the most\nreliable and ef\xef\xac\x81cient robotic system architecture, characterized\nby the number of different robotic \xe2\x80\x99species\xe2\x80\x99 and the allocation\nof functionality between species, is an open question. To address\nthis problem, we decompose the robotic building-block assembly\ntask into functional primitives and, in simulation, study the performance of the the variety of possible resulting architectures.\nFor a set consisting of \xef\xac\x81ve process types (move self, move block,\nmove friend, align bock, fasten block), we describe a method\nof feature space exploration and ranking based on energy and\nreliability cost functions. The solution space is enumerated,\n\xef\xac\x81ltered for unique solutions, and evaluated against energy and\nreliability cost functions for various simulated build sizes. We\n\xef\xac\x81nd that a 2 species system, dividing the \xef\xac\x81ve mentioned process\ntypes between one unit cell transport robot and one fastening\nrobot, results in the lowest energy cost system, at some cost to\nreliability. This system enables fastening functionality to occupy\nthe build front while reducing the need for that functional mass\nto travel back and forth from a feed station. Because the details\nof a robot design affect the weighting and \xef\xac\x81nal allocation of\nfunctionality, a sensitivity analysis was conducted to evaluate the\neffect of changing mass allocations on architecture performance.\nFuture systems with additional functionalities such as repair,\ninspection, and others may use this process to analyze and\ndetermine alternative robot architectures.\n\nLow-density lattices are appealing as primary structure for a\nwide variety of applications such as spacecraft [1], aircraft,\nand ground infrastructure. Recent work has shown that\nsuch structures can be constructed from ef\xef\xac\x81ciently manufactured building blocks by relatively simple mobile robots [2].\nEspecially for space applications, this structure and robot\nsystem has the potential for recon\xef\xac\x81gurability, scalabity, and\nef\xef\xac\x81ciency that could reduce launch energy, enhance mission\nadaptability, and provide long term system life-cycle bene\xef\xac\x81ts.\nIn order to design such systems, we wish to describe a\nmethod for dividing functional primitives of a building block\nassembly system into individual robot types and assessing\nvarious architectures and their effect on the energy cost and\nreliability of the system.\nIn this paper, we de\xef\xac\x81ne the functional primitives and assess\nall possible enumerations to determine an optimal con\xef\xac\x81guration. To achieve this, we develop an energy cost function\nbased on rearrangement cost of the robot mass and a reliability cost function based on degrees of freedom of the robot. A\nbrief overview of in-space assembly and building-block based\nassembly is presented, followed by the study methodology\nand results. A discussion of the \xef\xac\x81ndings and lessons learned\nare presented.\n\n2. BACKGROUND\nIn-space assembly allows space structures to bypass volume\nlimitations of launch vehicle capacity and enables the construction of large-scale space infrastructure such as habitats,\nsolar arrays, and large-aperture instrumentation. Legacy\nexamples of in-space assemblies relied on EVA and the\ndexterity of human operators to construct example trusses and\nthe ISS [3]. Due to hazards associated with EVA, current\nsystems seek to utilize robotic operators, human-controlled\nor fully autonomous, to assemble and additively manufacture\nspace structures [4] [5] [6].\n\nTABLE OF C ONTENTS\n1. I NTRODUCTION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n2. BACKGROUND . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n3. M ETHODOLOGY . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\n4. R ESULTS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n5. D ISCUSSION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n6. C ONCLUSION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\nA PPENDICES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\nA. W EIGHTING D ISTRIBUTION . . . . . . . . . . . . . . . . . . . . . . . . 8\nACKNOWLEDGMENTS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\nR EFERENCES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\nB IOGRAPHY . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n\nRobotic assembly technologies enable more ef\xef\xac\x81cient and cost\neffective systems. They are particularly suited for repetitive,\nwell-structured tasks and can operate in environments that\nare dangerous for humans. Distributed robot systems are\na major area of robotics research [7] seeking to determine\nhow teams of robots can work together to accomplish joint\ntasks, enabling task parallelization and enhanced functionality beyond single robots. These teams can range from\nhomogeneous swarm robots [8] to heterogeneous robot systems with specialized robots for each task [9], they can also\nhave centralized or decentralized control [10]. In the \xef\xac\x81eld of\nrobotic construction, there has been much work in assembling\ntruss type structures [11][12] and bricks [13]. Challenges and\n\nU.S. Government work not protected by U.S. copyright\n\n1\n\ncurrent research include coordinating and localizing multiple\nrobots [14] with enough precision to reliably complete tasks.\n\nularly for mass estimates, but should not affect the validity\nof the methodology. In this initial work, we focus on a one\ndimensional build case with a single material depot. Though\nunlikely in application, this case represents one of several\npossible worst-case build scenarios, especially if system reliability and energy consumption is limited by robot locomotion.\nExtension of this methodology to 2D and 3D cases, important\nworst-case scenarios for gravity environments and bolting\ndominated energy consumption, is straightforward and left to\nfuture investigation.\n\nRecent advances in architected materials have shown that\nultra-light structures high performance structures can be\nproduced that exceed the speci\xef\xac\x81c stiffness and strength of\ntraditional stochastic cellular solids [15]. Such structures can\nbe discretely assembled from building blocks that may be\nmanufactured from state of the art materials [16] and highly\nef\xef\xac\x81cient manufacturing techniques such as injection molding\n[17]. These structures can be assembled and recon\xef\xac\x81gured\ninto different mission pro\xef\xac\x81les as needed [18], potentially\nreducing overall mission mass. These building blocks have\nbeen robotically assembled by both mobile [2] and gantry\ntype assemblers [19][20], and optimization of unit cell geometries for ease of robotic assembly has been studied [21].\nThe periodic nature of the structure is well suited to robotic\nassembly, and mobile robots that locomote on the structure,\ntermed relative robots, can use this repetition for metrology\nand increased reliability [2].\n\nSolution Space De\xef\xac\x81nition\nFunctional Primitives\xe2\x80\x94The functional primitives of a robotic\nsystem are the most basic abstracted tasks that a system must\nperform to achieve prescribed goals and requirements. In\nthis robotic assembly system, the functional primitives are\nderived from the system need to manage assembly material,\nor voxels, across the structure and join each voxel to the\nexisting structure (generically termed \xe2\x80\x99bolting\xe2\x80\x99 in this study).\nStated another way, voxels must move from a material depot\nto the evolving build front and be bolted to existing structures.\n\nThough single examples of relative robot discrete assembly\nsystems exist, prior art has not identi\xef\xac\x81ed a methodology for\ndetermining the optimal robotic system architecture for a\ngiven application. Before designing a robotic system, which\ncould contain one or more types of robots, a designer must\nknow the functional requirements of each robot based on\noverall system requirements. But in such a system, it is not\nalways obvious which robots should carry which functionality. For example, is it more ef\xef\xac\x81cient to have a single robot\ntype that can move, place, and connect build material, or\nshould multiple robot types each specialize in one or more\ntasks? While prior art suggests robotic assembly of discrete\nbuilding blocks is a scalable assembly solution, how system\nfunctionality should be split between robot types for optimal\nef\xef\xac\x81ciency and reliability is an open question.\n\nThis results in a set of 5 basic functional primitives for an\nautonomous assembly system, de\xef\xac\x81ned in Table 1. Robots\nmust be able to move voxels to the build front (PM v ) and\nattach those new unit cells to existing structure (PV b ). To\naccomplish this, with a few exceptions discussed later, robots\nwill need to be able to move themselves (PM s ) or be moved\nby other robots. By including the ability to move another\nrobot (a \xe2\x80\x99friend\xe2\x80\x99 )(PM f ), a robot species can lack selflocomotion and rely on other robots for movement necessary\nto ful\xef\xac\x81ll system requirements. The alignment and placement\nof components ( PV a ) in this system is also critical to\nits success. The alignment of a robot-structure interface\nis assumed to be included into the PM s primitive, and the\nrobot-robot interface is assumed to be included in the PM f\nprimitive. The reason why the PV a primitive (voxel-voxel\ninterface) is considered separately is because it can be paired\nwith either the PM v or the PV b functional primitives.\n\n3. M ETHODOLOGY\nIn a distributed robotic assembly system, the functional tasks\nthe system must perform may be separated into different\ntypes of robots, or species, to optimize overall ef\xef\xac\x81ciency,\nperformance, and cost. In this exercise, we consider a\nsystem of one or more species of robots performing tasks that\nenable the system to manage the supply of assembly materials\nacross the structure and perform fastening tasks. A robot\nsystem architecture can therefore be de\xef\xac\x81ned as a system of\nn tasks or operations that must be divided among k robot\ntypes. In this study, we enumerate the full solution space\nof possible architectures and selected feasible solutions. We\nthen compare the remaining architectures using cost functions\ndeveloped to represent relative system energy ef\xef\xac\x81ciency and\nreliability. The result of this analysis will offer insight into the\nadvantages, disadvantages and risks of each architecture. The\nend goal of this study is to identify an optimal distribution of\nn-functionalities into k-types of robots. This methodology is\nintended to serve as an example for current and future distributed robotic assembly system designers to make informed\ndesign decisions.\n\nTable 1. List of Functional Primitives\nPrimitive\nMove Self (PM s )\nMove Voxel (PM v )\nMove Friend (PM f )\nAlign/ Place Voxel Pair (PV a )\n\nBolt Voxel Pair (PV b )\n\nThe assembly materials are cubic unit cells termed voxels\nthat may be assembled 3-dimensionally in a simple cubic\ntiling pattern, orthogonal to each face. In this study, the unit\ncells are 1\xe2\x80\x99x1\xe2\x80\x99x1\xe2\x80\x99 in dimension. Assumptions and design\napproximations to be made are for robots designed at this\nscale. Unit cells at scales of magnitude much larger or smaller\nmay result in different robotic designs assumptions, partic-\n\nDe\xef\xac\x81nition\nFunctionality of robot to\nmove itself across a lattice\nFunctionality of robot to\nmove a voxel to an adjacent\ncell\nFunctionality of robot to\nmove another robot to an adjacent cell\nFunctionality of robot to\nalign a voxel in a position\nto be joined to an existing\nstructure\nFunctionality of robot to join\na voxel to the existing structure\n\n.\nEnumeration\xe2\x80\x94The number of possible system architectures\ncan be bounded by the Stirling partition number S(n, k),\nwhich gives us the number of ways to partition a set of n\nobjects into k non-empty subsets. The full design space is\n2\n\ngiven as the Bell number series Bn . In a system with 5\nfunctional primitives, the Sterling partition number gives us\na distribution as shown in Table 2, with a total of 52 unique\nsolutions.\n\nThe robots considered here are understood to be relative\nrobots, meaning that they operate and locomote on the structure, occupying one or more unit cells. All robots are assumed to occupy two unit cells (based on inch-worm bipedal\nrobot prior art [2], but extend into an adjacent cell when\ntaking a step. We wish to reiterate here that the term \xe2\x80\x99step\xe2\x80\x99\nwas inherited from prior art, but should be understood as a\ngeneralized term for moving from one voxel to another. A\nrobot needs to return to the start location to pick up additional\nassembly material (a moving depot was not considered in this\nevaluation). For this 1D case, bolting was assumed to only\nneed to secure one face for each additional voxel. Extension\nof this work to 3D would require that an additional rotational\ncapacity of the bolting function since two or three faces would\nneed to be bolted per voxel addition.\n\nTable 2. Number of Possible Architectures\nSpecies of Robots\n\nNumber of Architectures\n\n1\n2\n3\n4\n5\n\n1\n15\n25\n10\n1\n\nEnergy Cost Function\xe2\x80\x94The energy cost function is formulated as a proxy measurement of the work/energy required\nto construct a 1D simulated discrete building block structure.\nIt can be thought of as a \xe2\x80\x9cfunctionality rearrangement cost,\xe2\x80\x9d\nwhere moving functionalities (mass) longer distances results\nin a higher cost. In a zero-gravity environment, this energy\ncost represents the acceleration/ deceleration requirements\n(i.e. going from rest to rest) associated with moving mass.\n\nSolution Space Pruning\xe2\x80\x94Not every solution enumerated by\nthe Sterling partition number yields a meaningful, distinct\nsolution. A \xef\xac\x81ltering criteria is used to reduce possible\ncandidates for further evaluation and comparison. Architectures with robot species that do not provide meaningful\nfunctionality by themselves are not considered. For example,\nrobots with just a PM s functionality do not enable ful\xef\xac\x81llment\nof system requirements and would need to be paired with a\nPM f , PV a , or PV b primitive. This reduces the solution space\nto 5 distinct and viable architectures.\n\nEach functional primitive is composed of two or more basic\ncomponent mechanisms shown in Table 4. To determine\nthe associated mass, each basic component mechanism was\nassigned a nominal, upper, and lower bound mass allocation\nde\xef\xac\x81ned in Table 5. These bounds and nominal values were\nintended to encompass the range of mass allocations estimated from prototyping and prior art. Unique among these\nprimitive formulations is the \xe2\x80\x99move friend\xe2\x80\x99 mass allocation.\nThis formulation accounts for the varying additional mass\nrequired in order to be able to transport \xe2\x80\x99friends\xe2\x80\x99 of different\nmass. A percentage weight of the friend was therefore\nused. This was taken as 0.25 nominal based on prototyping\nexperience and was varied from 0.25 to 0.7 in the sensitivity\nanalysis. A unique \xe2\x80\x99move friend\xe2\x80\x99 allocation was calculated\nfor each architecture, since the component functionality of\nthe \xe2\x80\x99friend\xe2\x80\x99 robot necessarily changed across architectures.\nExtended rationale supporting each mass estimate can be\nfound in Appendix A.\n\nWe also consider two special cases that include empty and duplicated subsets. There is an instance when including empty\nsubsets where removing the PM s primitive still enables the\narchitecture to satisfy the system requirements. This gives us\nan architecture with a robot of {PM v + PM f + PV b + PV a }\nfunctionality, which we call a \xe2\x80\x99bucket brigade\xe2\x80\x99, or \xe2\x80\x99train\xe2\x80\x99\narchitecture. In this architecture, the robots have the ability to\npass voxels as well as robots to an adjacent cell, which allow\n\xef\xac\x82ow of assembly material to the build area. We also consider\nthe case of duplicate functionality for the PM s function.\nIn this case, the architecture {PM s + PM v } + {PM s +\nPV b + PV a } also satis\xef\xac\x81es system requirements. The PM f\nfunction is removed in this architecture due to redundancy\nfor locomotion. The \xef\xac\x81nal 7 distinct architectures that satis\xef\xac\x81ed\nbasic system requirements are shown in Table 3.\n\nAfter assignment of primitive weightings, the energy cost\nwas calculated as the summation of the energy cost to place\neach sequential voxel in construction of a beam of length b.\nEvery time a functional primitive moved, its mass allocation\nwas added to the \xef\xac\x81nal energy cost. The energy cost metric\nwas determined using the pseudocode provided in Algorithm\n1. This formulation assumed an arbitrary seed of voxels\nwith the structure that is built from the seeded location. It\nwas assumed that no step is required to place the 1st voxel.\nThus, a (x-1) term appears throughout the formulas presented.\nThe \xef\xac\x81nal removal of the robots from the build structure was\nhandled as a one off occurrence.\n\nSimulation and Analysis\nWe compared architectures by simulating one-dimensional\nbuilds of 100 voxels and evaluating performance based on\napplication-speci\xef\xac\x81c system metrics. Since our application\nprioritizes ef\xef\xac\x81ciency and reliability, we de\xef\xac\x81ne the cost functions as abstracted, proxy representations for the energy cost\nand reliability of the system, dependent on mass, degrees of\nfreedom, and functionality distribution. Detailed formulation\nof each cost function is described below.\nAssumptions\xe2\x80\x94The goal of this study is to establish performance trends of architectures independent from a particular robot design. However, the evaluation of metrics such\nas energy cost have a strong, inescapable dependence on\nmass and degrees of freedom, which are necessarily robot\ndesign speci\xef\xac\x81c. To address this, we established assumptions and simpli\xef\xac\x81cations regarding abstract robot designs,\ngrounding mass estimates where possible on prior relative\nrobot prototypes and examples [2]. A sensitivity analysis\nis included in our analysis to evaluate the robustness of the\nstudy\xe2\x80\x99s conclusions to variation in these assumptions. For all\nmass estimates, simulations were conducted that evaluated a\nnominal, minimum, and maximum estimated value.\n\nIn the formulation of Algorithm 1, numeric values are intended to only be used for comparison between architectures.\nTherefore, a mass has not been allocated to the actual voxel\nitself. The mass movement of the voxel will be the same\nfor all architectures because no architectures have been considered which result in redundant voxel transfers. In this\nformulation the focus has been on the movement of mass\nrequired. Therefore, the additional mass associated with the\nstiffness and strength required to move a \xe2\x80\x99friend\xe2\x80\x99 has been\nincluded, and this allocation varies based on the type of\n\xe2\x80\x99friend\xe2\x80\x99 that needs to be moved. When a stepping robot is\n3\n\nTable 3. Selected Architectures\nArch. Num.\n\n# of Species\n\nFunctionality\n\n1\n2\n3\n4\n5\n6\n7\n\n1\n2\n2\n3\n3\n1\n2\n\n{PM s + PM v + PV a + PV b }\n{PM s + PM v + PM f + PV a } + {PV b }\n{PM s + PM v + PM f } + {PV b + PV a }\n{PM s + PM f } + {PM v + PV a } + {PV b }\n{PM s + PM f } + {PM v } + {PV b + PV a }\n{PM v + PM f + PV b + PV a }\n{PM s + PM v } + {PM s + PV b + PV a }\n\nNotes\n\xe2\x80\x99Omnibot\xe2\x80\x99\nSpecial Case - \xe2\x80\x99Bucket Brigade/Train\xe2\x80\x99\nSpecial Case - \xe2\x80\x99Self Moving Bolter\xe2\x80\x99\n\nTable 4. Mechanisms Mass Contributions for Functional Primitives\nPrimitive Mass\n\nMass Contribution\n\nNotes\n\nMove Self (MM s )\n\nMstep + 2 \xe2\x88\x97 Mgrip\n\nThis breakdown can be generalized\nto represent many possible locomotion implementations.\n\nMove Voxel (MM v )\nMove Friend (MM f 1 )\n\nMgrip\nMgrip + 0.25 \xe2\x88\x97 (2 \xe2\x88\x97 Mgrip + Mbolt )\n\nMove Friend (MM f 2 )\n\nMgrip + 0.25 \xe2\x88\x97 (2 \xe2\x88\x97 Mgrip + Mbolt + Mplacement )\n\nMove Friend (MM f 3 )\n\nMgrip + 0.25 \xe2\x88\x97 (2 \xe2\x88\x97 (MM v + MV b + MV a ))\n\nAlign/ Place Voxel Pair\n(MV a )\nBolt Voxel Pair (MV b )\n\nMplacement\n2 \xe2\x88\x97 Mgrip + Mbolt\n\nArch. 2 and 4 have been simpli\xef\xac\x81ed\nto use the same PM f allocation,\nmoving a robot with only PV b functionality.\nArch. 3 and 5 have been simpli\xef\xac\x81ed\nto use the same PM f allocation,\nmoving a robot with only PV b &\nPV a functionality.\nArch. 6 PM f allocation, moving an\nArch. 6 robot (estimated mass).\n\nGripping functionality is assumed\nto be required to hold on to the\nvoxel face in some way to enable\nbolting to occur.\n\nTable 5. Mechanism Mass Allocations\nName\nMstep\nMgrip\nMplacement\nMbolt\n\nDescription\n\nNominal\n\nMin\n\nMax\n\nMass of locomotion mechanism\nMass of components for face gripper mechanism\nMass of voxel placement mechanism\nMass of bolting mechanism\n\n1\n0.5\n0.2\n1\n\n0.5\n0.25\n0.1\n1\n\n1.5\n0.75\n1\n1.5\n\nTable 6. Mechanism Degree of Freedom Contribution for Functional Primitives\nMovements associated with\nFunctional Primitive\n\nFormulation\n\nNotes\n\nMove Self (NM s )\n\n2* (Nstep + 2 \xe2\x88\x97 Ngrip )\n\nOne step is considered as two movements\ni.e. actuation of a motor.\n\nMove Voxel (NM v )\nMove Friend (NM f )\n\n2* Npass + 2 \xe2\x88\x97 Ngrip\nNM v\n\nAlign/ Place Voxel Pair (NV a )\nBolt Voxel Pair (NV b )\n\nNplacement\n2* (Nbolt + Ngrip )\n\nSame movements considered for moving a\nfriend as to move a voxel.\nBolting requires two movements to bolt\nand retract mechanism.\n\n4\n\nAlgorithm 1 Algorithm to estimate an energy cost metric\nInput: Number of voxels in string (b)\nOutput: Energy cost for selected architecture to build\nstructure of length (b)\nDe\xef\xac\x81ne Variables:\nEarchitecture \xe2\x86\x90 The energy cost to place the xth voxel\nand return the stepping robot to the depot to pick up the next\nvoxel.\nER \xe2\x86\x90 A one off energy allocation for the \xef\xac\x81nal removal\ncost for all robots to be removed from the structure.\nEtotal \xe2\x86\x90 Energy cost to lay all voxels and remove robots\nfrom structure.\n\n13:\n14:\n15:\n16:\n17:\n18:\n19:\n20:\n21:\n22:\n23:\n24:\n25:\n\nInitialize Esum = 0\nfor StringLength = 1, 2, ..., . . . , b do\nif Architecture 1 - \xe2\x80\x99Omnibot\xe2\x80\x99 then\nE1 = (x \xe2\x88\x92 1) \xe2\x88\x97 2 \xe2\x88\x97 (MM s + MM v + MV a + MV b )\nE1R = 0\nend if\nif Architecture 2 then\nE2 = (x \xe2\x88\x92 1) \xe2\x88\x97 2 \xe2\x88\x97 (MM s + MM v + MM f 1 +\nMV a ) + MV b\n9:\nE2R = b \xe2\x88\x97 MV b\n10:\nend if\n11:\nif Architecture 3 then\n12:\nE3 = (x \xe2\x88\x92 1) \xe2\x88\x97 2 \xe2\x88\x97 (MM s + MM v + MM f 2 ) +\n1:\n2:\n3:\n4:\n5:\n6:\n7:\n8:\n\n26:\n27:\n28:\n29:\n30:\n31:\n32:\n33:\n\n(MV b + MV a )\nE3R = b \xe2\x88\x97 (MV a + MV b )\nend if\nif Architecture 4 then\nE4 = (x \xe2\x88\x92 1) \xe2\x88\x97 2 \xe2\x88\x97 ((MM s + MM f 1 ) + (MM v +\nMV a )) + MV b\nE4R = b \xe2\x88\x97 MV b\nend if\nif Architecture 5 then\nE5 = (x \xe2\x88\x92 1) \xe2\x88\x97 2 \xe2\x88\x97 (MM s + MM f 2 + MM v ) +\nMV b + MV a\nE5R = b \xe2\x88\x97 (MV a + MV b )\nend if\nif Architecture 6 - \xe2\x80\x99Train\xe2\x80\x99 then\nE6 = (x \xe2\x88\x92 1) \xe2\x88\x97 (MM v + MM f 3 + MV b + MV a )\nE6R = b \xe2\x88\x97 (b + 1)/2 \xe2\x88\x97 (MM v + MM f 3 + MV b +\nMV a )\nend if\nif Architecture 7 - \xe2\x80\x9dMoveable Bolter\xe2\x80\x9d then\nE7 = (x \xe2\x88\x92 1) \xe2\x88\x97 2 \xe2\x88\x97 (MM s + MM v ) + (MV a +\nMV b + M M s )\nE7R = b \xe2\x88\x97 (MV a + MV b + MM s )\nend if\nEsum = Earchitecture + Esum\nend for\nReturn Etotal = Esum + ER for selected architecture\n\nTable 7. Mechanism Degrees of Freedom Allocations\nName\nNstep\nNgrip\nNplacement\nNbolt\nNpass /Nmove\n\nDescription\n\nDOF (nom)\n\nMin\n\nMax\n\nDOF of locomotion mechanism\nDOF of components for face gripper mechanism\nDOF of voxel placement mechanism\nDOF of bolting mechanism\nDOF of mechanism to pass voxel or friend\n\n4\n1\n1\n1\n1\n\n2\n1\n0\n1\n1\n\n6\n4\n3\n8\n1\n\ncarrying a \xe2\x80\x99friend\xe2\x80\x99 in addition to its functional ability, there\nwill be an additional energy/power requirement. This energy\ncost was considered to be incorporated into the \xe2\x80\x99friends\xe2\x80\x99\nmass allocation and therefore the stepping robot energy cost\nallocation makes no difference between if it is or is not\ncarrying a \xe2\x80\x99friend\xe2\x80\x99. If this study is repeated with more\ndetailed mass allocation reference data, the energy associated\nwith additional power requirement when a \xe2\x80\x99friend\xe2\x80\x99 is being\ncarried could be decoupled from the \xe2\x80\x99friend\xe2\x80\x99 mass allocation,\nbut this granularity is beyond the scope of this initial study.\n\na generalized, non-robot speci\xef\xac\x81c con\xef\xac\x81guration is preferred,\nthis inch-worm robot example has been used as a means to\nprovide a baseline expectation of the number of movements.\nThe reliability cost function formulation was similar to the\nenergy cost function and is detailed in Algorithm 2. The\ncontribution of movements from each mechanism to the\nfunctional primitives are shown in Table 6. The number of\nmovements allocated to each mechanism can be seen in Table\n7, with additional details in Appendix A. Only the DOF to\nactuate the self moving functional primitive is multiplied by\nthe number of voxel units moved. The bolting, alignment,\nvoxel movement and move friend primitives were then added\nonce per voxel placement. A removal cost function that\nrepresents the \xef\xac\x81nal removal of all robots from the structure\nwas also incorporated .\n\nReliability Cost Function\xe2\x80\x94The number of movements is used\nas a proxy measurement of reliability since it can be related\nto number of motor start/stop operations. In addition, each\nmovement provides the potential for damage or failure of a\nmechanism. Therefore, fewer movements are expected to\nresult in a more reliable system. For the purpose of evaluating\nthe number of motions/movements required to complete a\nbuild, one movement was de\xef\xac\x81ned as the actuation of one\ndegree of freedom.\n\n4. R ESULTS\nThis section presents the results of the energy cost and\nreliability metric compared between the 7 architectures. A\nsensitivity analysis is also presented to help determine the\nsigni\xef\xac\x81cance of each input on the system.\n\nOne stepping motion was based on an inch-worm type robot\n[2] from relative robot prior art and includes the motions:\nun-grip with front foot, move front foot, grip front foot, ungrip back foot, move back foot, grip back foot. Though\n5\n\nAlgorithm 2 Algorithm to calculate reliability cost function\nInput: Number of voxels in string (b)\nOutput: Total reliability cost for a selected architecture\nto build structure of length b\nDe\xef\xac\x81ne Variables:\nNarchitecture \xe2\x86\x90 The number of movements to place the\nxth voxel and return the stepping robot to the depot to pick\nup the next voxel.\nNR \xe2\x86\x90 A one off allocation for the number of movements\nrequired to remove all robots from the structure.\nNtotal \xe2\x86\x90 Total movements to lay all voxels and remove\nrobots from structure.\n1:\n2:\n3:\n4:\n5:\n6:\n7:\n8:\n9:\n10:\n11:\n12:\n13:\n14:\n15:\n16:\n17:\n18:\n19:\n20:\n21:\n22:\n23:\n24:\n25:\n26:\n27:\n28:\n29:\n\nInitialize Nsum = 0\nfor StringLength = 1, 2, ..., . . . , b do\nif Architecture 1 - \xe2\x80\x99Omnibot\xe2\x80\x99 then\nN1 = (x\xe2\x88\x921)\xe2\x88\x972\xe2\x88\x97(NM s )+2\xe2\x88\x97NM v +NV a +NV b\nN1R = 0\nend if\nif Architecture 2,3 then\nN23 = (x \xe2\x88\x92 1) \xe2\x88\x97 2 \xe2\x88\x97 (NM s ) + 2 \xe2\x88\x97 NM v + NM f +\nNV a + NV b\nN23R = b \xe2\x88\x97 NM f\nend if\nif Architecture 4 then\nN4 = (x \xe2\x88\x92 1) \xe2\x88\x97 2 \xe2\x88\x97 (NM s + NM f ) + (2 \xe2\x88\x97 NM v +\nNV a ) + (NV b )\nN4R = 2 \xe2\x88\x97 b \xe2\x88\x97 NM f\nend if\nif Architecture 5 then\nN5 = (x \xe2\x88\x92 1) \xe2\x88\x97 2 \xe2\x88\x97 (NM s + NM f ) + (NM v ) +\n(NV b + NV a )\nN5R = 2 \xe2\x88\x97 b \xe2\x88\x97 NM f\nend if\nif Architecture 6 - \xe2\x80\x99Train\xe2\x80\x99 then\nN6 = (x \xe2\x88\x92 1) \xe2\x88\x97 (NM v + NM f ) + NV b + NV a\nN6R = b \xe2\x88\x97 (b + 1)/2 \xe2\x88\x97 NM f\nend if\nif Architecture 7 - \xe2\x80\x99Self Moving Bolter\xe2\x80\x99 then\nN7 = (x \xe2\x88\x92 1) \xe2\x88\x97 2 \xe2\x88\x97 (NM s ) + NM v + (NV a +\nNV b + NM s )\nN7R = b \xe2\x88\x97 NM s\nend if\nNsum = Narchitecture + Nsum\nend for\nReturn: Ntotal = Nsum + NR for selected Architecture\n\nFigure 1. Energy cost of selected architectures with\nstructure length of 100 voxels. The bars represent the\nenergy cost function value based on the nominal\nfunctional primitive mass allocations. The error bars\nshow the range based on the minimum and maximum\nfunctional primitive mass allocations.\n\nFigure 2. Number of movements of selected\narchitectures with structure length of 100 voxels, based\non the nominal functional primitive degree of freedom\nallocations. The error bars show the range based on the\nminimum and maximum functional primitive degree of\nfreedom allocations.\n\nEnergy Cost\xe2\x80\x94The energy costs of the selected architectures\nare shown in Figure 1. The cost of each is shown at 100\nvoxel structural build length, but relative costs between architectures are stable at build levels above 10 voxels. The\nresults indicate that Architecture 7, the \xe2\x80\x99Self Moving Bolter\xe2\x80\x99\nsolution, results in the lowest energy cost. The reduction in\nrequired energy cost is about 50% of Arch 1, the \xe2\x80\x99Omnibot\xe2\x80\x99\nsolution where one robot carries all of the system functionality. The design space of the robots as shown by the error bars\nis greatly affected by the variation mass allocations of various\ncomponents, but do show relative trends.\n\nments) have a higher number of movements than Architecture\n6, which requires fewer stepping motions and has the best\nreliability. These results indicate a strong dependence on\nthe number of degrees of freedom required to conduct grip\nand un-grip actions during an inchworm type robot stepping\nmotion. In the nominal formulation, The \xe2\x80\x99Omnibot\xe2\x80\x99 (Arch.\n1) and \xe2\x80\x99Self Moving Bolter\xe2\x80\x99 (Arch. 7) have similar values\nto Architectures 2 & 3. However, inspecting the lower\nbounds of these architectures shows that as the robots are\nsimpli\xef\xac\x81ed in regards to the DOF, the bene\xef\xac\x81t of an \xe2\x80\x99Omnibot\xe2\x80\x99\nor \xe2\x80\x99Moveable Bolter\xe2\x80\x99 robot compared to other architectures\nis reduced. Architectures 4 & 5 have the highest number of\nmovements because they 3 robot species that add complexity\n\nReliability Cost\xe2\x80\x94 The results in Figure 2 show that if the\npassing motion between robots in Architecture 6 is ef\xef\xac\x81cient\n(modelled as 1 DOF in this analysis), this should reduce the\noverall number of movements, though at the cost of an ever\nincreasing mass to orbit as build size increases. Architectures\n2 & 3 (which have the same formulation for number of move6\n\nFigure 3. Energy cost (relative units) for a 100 voxel build. The bars represent the energy cost metric based on the\nnominal functional primitive mass allocations with a 25% friend mass allocation in MM f . The error bars show the\nrange based on the minimum and maximum mass allocations.\n\nFigure 4. Energy cost (relative units) for a 100 voxel build. The bars represent the energy cost metric based on the\nnominal functional primitive mass allocations with a 70% friend mass allocation in MM f . The error bars show the\nrange based on the minimum and maximum mass allocations.\nto operations by requiring many moves to rearrange voxels\nand robot friends.\n\nArchitectures 2-5.\nThe uncertainty in the gripping mass allocation is one of the\ngreatest contributors to the overall uncertainty of the energy\ncost metric. This is expected, as for the purpose of this\nstudy the method of \xe2\x80\x99gripping\xe2\x80\x99 has been left open in order\nto encompass a greater set of robot designs. De\xef\xac\x81ning the\ngripping mechanism in order to reduce the range between the\nminimum and maximum bound would have the greatest impact on reducing the overall variation in cost (represented by\nerror bars). This also suggests that from a design perspective,\n\nSensitivity Analysis\xe2\x80\x94A sensitivity analysis was performed by\nvarying the mass distribution of the MM f primitive at 25%\nand 70% of the mass of a robot friend while holding the other\nmass allocations at their nominal value.\nThe effect of this change can be seen in Figures 3 and 4. The\nmass allocation required to move a friend shows the greatest\nimpact on the overall uncertainty of the energy cost metric for\n7\n\n6. C ONCLUSION\n\nminimizing the gripping mechanism mass should have a large\nimpact on system energy ef\xef\xac\x81ciency.\n\nLarge-scale, robust robotic assembly of space structures is a\nparadigm shifting capability that has the potential to decrease\nlaunch mass, increase mission \xef\xac\x82exibility, and enable larger\nscale space missions and infrastructure. Discrete lattice building blocks and relative mobile robots offer an ef\xef\xac\x81cient and\nrobust strategy towards this goal. This work laid theoretical\ngroundwork for understanding the most ef\xef\xac\x81cient and robust\nsystem architecture for a relative robot and discrete lattice\nassembly system. Using representative energy and reliability\ncost functions, we simulated one dimensional builds to evaluate several system architectures that split robotic capabilities\nbetween one or more robot types. Results showed that a 2\nspecies robot assembly system will result in the lowest energy\ncost to build a structure, speci\xef\xac\x81cally one that divides the\ntasks of material movement and material joining. This system\nenables fastening functionality to occupy the build front while\nreducing the need for that functional mass to travel back and\nforth from a feed station. The most reliable architecture was\nthe \xe2\x80\x99train\xe2\x80\x99 architecture, but at the cost of signi\xef\xac\x81cantly higher\noverall system mass. The next most reliable architectures\nwere the 2 species architectures. Sensitivity analysis was\nconducted to show the effect of changing mass assumptions\nand allocations on system performance. This can can guide\nsystem developers as more detailed mass allocations associated with speci\xef\xac\x81c robot designs become available. This work\nprovides ground work to be expanded into a 3D case, which\nwill incorporate path planning elements and more detailed\nsimulations.\n\n5. D ISCUSSION\nArchitecture 7, the \xe2\x80\x99Self Moving Bolter\xe2\x80\x99 architecture, appears to have the lowest energy cost, with average reliability\nperformance. This architecture saves energy by avoiding\ncarrying the weight of bolting and aligning/placing functions\nto and from the material depot. In contrast, the \xe2\x80\x99Omnibot\xe2\x80\x99\narchitecture requires twice as much energy since it carries\nthe mass of all functionalities on every depot stop. Though\nnot captured in our study since only a single \xe2\x80\x99Omnibot\xe2\x80\x99 robot\nwould be used, in an application with tolerance for higher\nenergy consumption, this architecture could represent a more\nresilient system by incorporating duplicate robots.\nArchitectures 2-5 also enable energy savings by keeping the\nbolting functionality at the build front, but do so by leveraging\nthe PM f primitive. These architectures depend heavily on\nreducing the weight of additional hardware needed to enable\nthe PM f functions. The PM f primitive has the potential\nto increase the mass allocation of the PM s primitive due to\nhigher motor requirements. From the sensitivity study in\nFigures 3 and 4, one can see that changing the MM f mass\nallocation can affect the overall performance of an architecture. Increasing the mass of the PM f functionality negates\nenergy costs savings of leaving functionality at the build\nfront and brings energy cost up to par with an \xe2\x80\x99Omnibot\xe2\x80\x99.\nThe PM f primitive would be more bene\xef\xac\x81cial in a mission\nscenario where a robot needs to perform a higher number of\nspecialized tasks that could be developed as \xe2\x80\x99friend\xe2\x80\x99 modules.\nFor example, a single robot design with just the PM s and\nPM f primitives could be used to drop off and place sensing,\nactuation, or structural reinforcement modules for long-term\nuse.\n\nA PPENDICES\nA. W EIGHTING D ISTRIBUTION\nMechanism Mass\nThis section provides rationale on allocation of mechanism\nmass nominal and min/max values.\n\nArchitecture 6, or the \xe2\x80\x99bucket brigade/train\xe2\x80\x99 architecture,\nrequires the robot to be able to have the ability to both pass\na voxel or friend to an adjacent cell. This architecture has\nan advantage of ef\xef\xac\x81ciently transporting assembly material to\nthe build front, but that advantage is negated when adding the\ncost needed for robots to return to the start location. There\nis also a much higher overall mass requirement to be able to\nsustain this system. This architecture may be more useful and\nef\xef\xac\x81cient as a long term/permanent supply line that works in\nconjunction with other assembly robots to assemble a larger\nstructure.\n\nMstep - Due to the large variation in locomotion techniques\nthat can be implemented, a +/-50% variation is stated.\n\xe2\x80\xa2 Mgrip - This includes mass of robot-structure interface\nmaterial on which the gripper is mounted. It is considered\nto add approximately half of the locomotion mass. This is\nlinked to take account for the load on the interface due to the\nweight of the robot.\n\xe2\x80\xa2 Mplacement - Nominal value is estimated. Depending on\nthe accuracy of placement/ alignment required, this value can\nvary considerably. Torque required to actuate mechanism can\nvary signi\xef\xac\x81cantly depending on the mechanism placement.\n\xe2\x80\xa2 Mbolt - Potentially signi\xef\xac\x81cant torques are required to perform this action, therefore this metric is considered to add\nsimilar mass to that of locomotion and is not considered to be\ndependant on the mass of the robot.\n\xe2\x80\xa2\n\nIn Figures 3 and 4, the error bars show the range that each\nmechanism can have on the energy cost outcome. This is\ninteresting because it can help identify which mechanisms\ncontribute the most to the overall energy cost. It can be\nseen that the effects of reducing the mass of the gripping\nmechanisms greatly reduce the total energy cost, where as\nreducing the mass of the bolting mechanism would give a\nsmaller bene\xef\xac\x81t. It should be noted that in each of these\ngraphs, Architecture 7 remains the lowest energy cost. In\ngeneral, to minimize energy, the mass sensitivity analysis\nsupports the intuition that robots that must move back and\nforth many times should minimize their functionality, while\nrobots which don\xe2\x80\x99t need to move back and forth as many\ntimes can afford the mass associated with more functionality.\n\nMechanism DOF\nThis section provides rationale on allocation of mechanism\nDOF nominal and min/max values.\n\xe2\x80\xa2 Nstep - The nominal degrees of freedom are based on\nan inch-worm walker type robot design [2]. 3 knuckle\ntype movements have been included plus one rotation stage.\nLocomotion can vary from a 1 DOF rolling robot to a full 6\nDOF robot.\n\xe2\x80\xa2 Ngrip - The nominal value assumes that each robot can grip\nonto a voxel face using 1 DOF. This could also be distributed;\na limit of 4 actuators is considered.\n\n8\n\nNplacement - One DOF is assumed suf\xef\xac\x81cient in a hinge\ntype application, however can be up to a 3 DOF robotic arm.\nThis mechanism can also be incorporated into the locomotion\nsystem, so a minimum of 0 is considered for that case.\n\xe2\x80\xa2 Nbolt - It is assumed that each face can be bolted using one\ncentral actuator to move 4 bolters. At the opposite extreme,\none actuator could be needed on each of the four corners of\na face, from each side of the face. This would results in 8\nactuators.\n\xe2\x80\xa2 Npass /Nmove - One DOF is assumed to be used to pass a\nvoxel between robots.\n\nstrength and stability in a distributed robotic construction system,\xe2\x80\x9d Swarm Intelligence, vol. 12, no. 2, pp.\n129\xe2\x80\x93153, 2018.\n\n\xe2\x80\xa2\n\n[12] F. Nigl, S. Li, J. E. Blum, and H. Lipson, \xe2\x80\x9cStructurerecon\xef\xac\x81guring robots: Autonomous truss recon\xef\xac\x81guration\nand manipulation,\xe2\x80\x9d IEEE Robotics & Automation Magazine, vol. 20, no. 3, pp. 60\xe2\x80\x9371, 2013.\n[13] K. H. Petersen, R. Nagpal, and J. K. Werfel, \xe2\x80\x9cTermes:\nAn autonomous robotic system for three-dimensional\ncollective construction,\xe2\x80\x9d Robotics: science and systems\nVII, 2011.\n\nACKNOWLEDGMENTS\nThe authors thank the NASA STMD Game Changing Development (GCD) Program for supporting the Automated\nRecon\xef\xac\x81gurable Mission Adaptive Digital Assembly Systems\n(ARMADAS) Project. We also thank Megan Ochalek, Bennet Caraher, Raymond Jow, Rina Zhang, and Miriam Lennig\nfor critical discussions.\n\n[14] J. D. Sweeney, H. Li, R. A. Grupen, and K. Ramamritham, \xe2\x80\x9cScalability and schedulability in large,\ncoordinated, distributed robot systems,\xe2\x80\x9d in 2003 IEEE\nInternational Conference on Robotics and Automation\n(Cat. No. 03CH37422), vol. 3. IEEE, 2003, pp. 4074\xe2\x80\x93\n4079.\n\nR EFERENCES\n[1]\n\n[2]\n\n[3]\n\n[4]\n\n[5]\n\n[6]\n\n[7]\n[8]\n\n[9]\n\n[10]\n\n[11]\n\n[15] L. Montemayor, V. Chernow, and J. R. Greer, \xe2\x80\x9cMaterials\nby design: Using architecture in material design to reach\nnew property spaces,\xe2\x80\x9d MRS Bulletin, vol. 40, no. 12,\n2015.\n\nB. Jenett, C. Gregg, D. Cellucci, and K. Cheung, \xe2\x80\x9cDesign of multifunctional hierarchical space structures,\xe2\x80\x9d in\n2017 IEEE Aerospace Conference. IEEE, 2017, pp.\n1\xe2\x80\x9310.\nB. Jenett and K. Cheung, \xe2\x80\x9cBill-e: Robotic platform\nfor locomotion and manipulation of lightweight space\nstructures,\xe2\x80\x9d in 25th AIAA/AHS Adaptive Structures Conference, 2017, p. 1876.\nI. Bekey, \xe2\x80\x9cSpace construction results:\nThe\nEASE/ACCESS \xef\xac\x82ight experiment,\xe2\x80\x9d Acta Astronautica,\nvol. 17, no. 9, pp. 987\xe2\x80\x93996, 1988.\nW. R. Doggett, J. Dorsey, J. Teter, D. Paddock,\nT. Jones, E. E. Komendera, L. Bowman, C. Taylor,\nand M. Mikulas, \xe2\x80\x9cPersistent Assets in Zero-G\nand on Planetary Surfaces: Enabled by Modular\nTechnology and Robotic Operations,\xe2\x80\x9d 2018 AIAA\nSPACE and Astronautics Forum and Exposition, no.\nSeptember, pp. 1\xe2\x80\x9333, 2018. [Online]. Available:\nhttps://arc.aiaa.org/doi/10.2514/6.2018-5305\nR. P. Hoyt, \xe2\x80\x9cSpiderfab: An architecture for selffabricating space systems,\xe2\x80\x9d in AIAA Space 2013 conference and exposition, 2013, p. 5509.\nS. Patane, E. R. Joyce, M. P. Snyder, and P. Shestople,\n\xe2\x80\x9cArchinaut: In-space manufacturing and assembly for\nnext-generation space habitats,\xe2\x80\x9d in AIAA SPACE and\nastronautics forum and exposition, 2017, p. 5227.\nL. E. Parker, \xe2\x80\x9cMultiple mobile robot systems,\xe2\x80\x9d Springer\nHandbook of Robotics, pp. 921\xe2\x80\x93941, 2008.\nM. Rubenstein, A. Cornejo, and R. Nagpal, \xe2\x80\x9cProgrammable self-assembly in a thousand-robot swarm,\xe2\x80\x9d\nScience, vol. 345, pp. 795\xe2\x80\x93799, 2014.\nR. Simmons, S. Singh, D. Hershberger, J. Ramos, and\nT. Smith, \xe2\x80\x9cFirst results in the coordination of heterogeneous robots for large-scale assembly,\xe2\x80\x9d in Experimental\nRobotics VII. Springer, 2001, pp. 323\xe2\x80\x93332.\nA. Costa, B. Jenett, N. Gershenfeld, K. Cheung, and\nI. Kostitsyna, \xe2\x80\x9cAlgorithmic Approaches to Recon\xef\xac\x81gurable Assembly Systems,\xe2\x80\x9d 2019.\nN. Melenbrink and J. Werfel, \xe2\x80\x9cLocal force cues for\n\n[16] K.\nC.\nCheung\nand\nN.\nGershenfeld,\n\xe2\x80\x9cReversibly\nassembled\ncellular\ncomposite\nmaterials,\xe2\x80\x9d Science, vol. 341, no. September,\npp. 1219\xe2\x80\x931221,\n2013. [Online]. Available:\nhttp://www.sciencemag.org/cgi/doi/10.1126/science.1240889\n[17] C. E. Gregg, J. H. Kim, and K. C. Cheung, \xe2\x80\x9cUltra-light\nand scalable composite lattice materials,\xe2\x80\x9d Advanced\nEngineering Materials, vol. 1800213, pp. 1\xe2\x80\x936, 2018.\n[18] B. Jenett, D. Cellucci, C. Gregg, and K. Cheung,\n\xe2\x80\x9cMeso-scale digital materials: modular, recon\xef\xac\x81gurable,\nlattice-based structures,\xe2\x80\x9d in ASME 2016 11th International Manufacturing Science and Engineering Conference. American Society of Mechanical Engineers\nDigital Collection, 2016.\n[19] G. Trinh, G. Copplestone, M. O\xe2\x80\x99Connor, S. Hu,\nS. Nowak, K. Cheung, B. Jenett, and D. Cellucci,\n\xe2\x80\x9cRobotically assembled aerospace structures: Digital\nmaterial assembly using a gantry-type assembler,\xe2\x80\x9d IEEE\nAerospace Conference Proceedings, pp. 1\xe2\x80\x937, 2017.\n[20] W. Langford, A. Ghassaei, and N. Gershenfeld, \xe2\x80\x9cAutomated assembly of electronic digital materials,\xe2\x80\x9d ASME\n2016 11th International Manufacturing Science and\nEngineering Conference, MSEC 2016, vol. 2, pp. 1\xe2\x80\x9310,\n2016.\n[21] M. Ochalek, B. Jenett, O. Formoso, C. Gregg, G. Trinh,\nand K. Cheung, \xe2\x80\x9cGeometry systems for lattice-based recon\xef\xac\x81gurable space structures,\xe2\x80\x9d in 2019 IEEE Aerospace\nConference. IEEE, 2019, pp. 1\xe2\x80\x9310.\n\n9\n\nB IOGRAPHY [\nBorbala Bernus received her B.Eng degree in Mechanical & Space Engineering and B.S. degree from the University\nof Queensland in 2008. She worked\nas a Senior Mechanical Engineer as a\nCPEng, and is currently completing an\naerospace masters at KTH Royal Institute of Technology. She recently interned at the Coded Structures Lab at\nNASA Ames Research Center and aims\nto conduct research in environmentally sustainable aerospace\nsolutions.\nGreen\xef\xac\x81eld Trinh is a research engineer\nin the Coded Structures Lab at NASA\nAmes Research Center. His current research activities include automated assembly of digital material structures\nand robotics. He received his B.S. in\nPhysics from UC Riverside and M.S. in\nAerospace Engineering from San Jose\nState University.\nChristine Gregg received her Ph.D.\nfrom the Department of Mechanical Engineering at UC Berkeley, where she\nwas a NASA Space Technology Research\nFellow. Her thesis focused on digital\nlattice structures and lattice fracture mechanics. She works in the ARC Coded\nStructures Laboratory (CSL).\nOlivia Formoso received her B.S. degree in Chemical Engineering from the\nUniversity of Florida in 2016. Currently,\nshe is a research engineer at the Coded\nStructures Lab at NASA Ames Research\nCenter and is pursuing her M.S. in Mechanical Engineering at San Jose State\nUniversity. Her research is focused on\ndigital material structures and robotics.\nKenneth Cheung received his Ph.D.\nfrom the Center for Bits and Atoms at the\nMassachusetts Institute of Technology.\nHe helps to run the ARC Coded Structures Laboratory (CSL), which conducts\nresearch on the application of building\nblock based materials and algorithms\nto aeronautical and space systems. As\na member of the NASA ARC Intelligent\nSystems Division and af\xef\xac\x81liate of the of\xef\xac\x81ce of the Center Chief Technologist, he serves as a technical\nlead on advanced materials and manufacturing.\n\n10\n\n'