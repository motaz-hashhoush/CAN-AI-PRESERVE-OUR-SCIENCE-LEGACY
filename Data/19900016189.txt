b'N90-25505\nMobile\n\nTransporter\n\nPath\n\nPaul Baffes\n\nLui Wang\n\nand\n\nPlanning\n\nArtificial Intelligence Section, FM72\nJohnson Space Center, Houston, Texas 77058\noptimization\nproblems known as trajectory\nplanning problems. Typically\nthe solution\nspaces for these problems are multimodal,\ni.e., they are characterized\nby many local\nmaxima at which acceptable solutions may\nbe found. Classical gradient techniques for\nsolving\nsuch optimization\nproblems\nhave\nnot proven effective due to difficulties\nin\nselecting relevant features from the domain\nfrom which\nto build a hill climbing\nalgorithm.\nSeveral\nstudies\nsuch as one\nconducted\nby\nGomez-Tierno\n1 have\nsuggested\nthat genetic\nalgorithms\n(GA)\noffer more promise due to the algorithm\'s\nglobal approach to problem domains. These\nstudies also suggest that more theoretical\nwork on GAs needs to be done before the\ntechnique can be satisfactorily\napplied to\ntrajectory\nplanning.\nHowever,\nrecent\nadvances\nin GA theory have directly\naddressed problems, such as path planning,\nwhose solutions are order-dependent.\nWhat\nfollows is an examination of the application\nof current\nGA theory\nto the mobile\ntransporter problem. The following specific\nissues are addressed:\n(1) the details\nof\ncasting the mobile transporter problem into\na genetic algorithm format, (2) predictions\nof pitfalls or enhancements\nwhich can be\nderived\nfrom\nGA\ntheory,\nand\n(3)\ndiscussions\nof some issues still open for\nusing a GA to perform path planning for\nthe mobile transporter.\n\n1. ABSTRACT\n(The work presented here is a copy of a\npresentation\ngiven at the SPIE cambridge\nsymposium in November 1988). The use of\na genetic algorithm for solving the mobile\ntransporter\npath\nplanning\nproblem\nis\ninvestigated.\nThe mobile transporter\nis a\ntraveling robotic vehicle proposed for the\nspace station which must be able to reach\nany point of the structure\nautonomously.\nElements\nof the genetic\nalgorithm\nare\nexplored\nin both\na theoretical\nand\nexperimental\nsense. Specifically,\ndouble\ncrossover,\ngreedy\ncrossover,\nand\ntournament\nselection\ntechniques\nare\nexamined.\nAdditionally,\nthe use of local\noptimization techniques working in concert\nwith the GA are also explored.\nRecent\ndevelopments\nin genetic algorithm theory\nare shown to be particularly\neffective in a\npath planning\nproblem\ndomain,\nthough\nproblem areas can be cited which require\nmore research.\n2.INTRODUCTION\nThe current design of the proposed space\nstation involves a rather large, skeletal truss\nstructure to which various living modules,\nlaboratories, and equipment will be attached\n(see\nFigure\n1). To\nfacilitate\nthe\nperformance\nof maintenance\ntasks and the\ntransportation\nof materials\naround\nthe\nstation, a mobile transporter (MT) system is\nbeing designed which will be capable of\ntraversing the truss structure. At the very\nleast, as the MT moves it must be able to\navoid collisions with the objects attached to\nthe truss, and it is obviously desirable that a\npath of shortest distance be selected before\nmoving the MT between any two points.\nSince the configuration\nof the space station\nis modifiable\nand the MT must be able to\nbegin its trek from any point on the truss\nstructure, the selection of a good path for\nthe general case is a difficult task.\nPlanning\ntransporter\n\na\n\n3. BACKGROUND\n3.1 GENETIC\n\nALGORITHMS\n\nIt is assumed that the reader is familiar\nwith the various elements\nof the genetic\nalgorithm\nand an introduction\nis not\nprovided here. However, a short review of\nsome of the theory and terminology of GAs\nis presented as background\nmaterial for the\nsections\nwhich follow.\nRecall\nthat the\nrecombination\nprocess of a GA typically\ninvolves\ntwo operators:\ncrossover\nand\nmutation.\nA crossover occurs between two\nsolutions,\ncalled\nparents,\nwhich\nare\nprobabilistically\nselected\nfrom\nthe\n\npath\nfor\nthe\nmobile\nfalls\ninto a category\nof\n\n51\n\nPRECEDING\n\nPAGE BLANK\n\nNOT\n\nFILMED\n\nFigure 1. Empty space station truss structure\npopulation based upon their fitness values.\nA crossover\npoint is chosen at random\nbetween zero and the length of a solution\nstring, and the two parents are split at that\npoint into front and back ends. The back\nends\nof the\ntwo\nparents\nare\nthen\ninterchanged\nand reconnected,\ncreating two\nnew solutions which have roughly half of\ntheir values from each parent. Mutation, on\nthe other hand, occurs\nwithin a single\nparent and operates locus by locus. Should a\nmutation occur at a particular locus point, a\nnew allele value for that point is randomly\nchosen. The result is a new solution which\ndiffers\nonly slightly\nfrom the original.\nWhile\nother\ngenetic\noperators\nare\nsometimes\nused, these two represent\nthe\nminimum\nnecessary\nfor\nthe correct\noperation of a GA and are the most widely\nused.\n\nof allele-locus combinations.\nSchemata have\ntwo important\ncharacteristics,\ntheir order\nand their defining\nlength. The order of a\nschema\nis the number\nof its specified\nelements; the above schema has an order of\n3. The defining length is defined as the\ndistance between\nthe outermost\nspecified\nelements\nof a schema.\nIn the above\n\nTheoretical\nformulations\nof genetic\nalgorithms have been developed around the\nconcept of a schema\nwhich represents\na\npartition\nof the solution\nspace. Roughly\nspeaking, a schema can be thought of as a\nsubstring of a solution with some elements\ngiven\nspecific\nvalues\nand some\nleft\nundetermined.\nFor example, given a binary\nset_e\nvalues 0.e. 0 and 1) a typical\nschema might look like the following:\n\nHolland\'s 2 work showed that, given the\nproper problem domain, genetic algorithms\nwill evolve toward nearly optimal solutions\nby building up complicated\nstructures out\nof small\ncomponents\nwhich\ncan be\ndescribed as schemata. A typical expression\nof this phenomenon\nas described\nby\nGoldberg_would\nlook like the following:\n\nexample,\nif we were to number the loci\nshown we would have 9 loci with the two\n"1" values occurring at positions 2 and 7.\nTaking the difference\nof these yields a\ndefining length of 7 - 2 or 5. Note that this\nis one less than what might normally\nbe\nconsidered\nthe size\nof the schema,\nsometimes calIed the length of the schema,\nwhich here would be 6. In this paper the\ndefining\nlength\nwill be specified\nby\n(delta) and the length will be specified by D\nsuch that D = _ + 1.\n\nn (H,t\xc3\xb7l)\n\n*10"**1"*\n\n_\n\nn (H,t) f(H)___=__ - Pc -1\nf\nL-1\n\nwhere the "*" symbol indicates that either\nallele value may occur at the given locus.\nConsequently,\nthe schema may be thought\nof as representing\ngroups or hyperplanes\nof\nsubstrings which specify particular patterns\n\n- Pm o(H)\n\n(1)\nwhere H stands for a particular\nn(H,t) is a measure of the number\n\n52\n\nschema,\nof copies\n\nof the schema in the population at time t, f\nis the fitness function, L is the length of a\nsolution, Pc and Pm are the probabilities\nof\ncrossover and mutation, and O(H) and o(H)\nare the defining length and order of the\nschema. The fractional term indicates that\nthe number of schema in the population will\nchange\nproportional\nto the fitness\nof\nsolutions containing the schema relative to\nthe average fitness of the population.\nOf\nparticular\ninterest is the last term of the\nequation which is a measure of the extent to\nwhich a crossover or mutation is likely to\ndisrupt the schema. Note that the greater\nthe defining length or order of the schema,\nthe greater\nthe chances\nthat it will be\naltered by a crossover\nor mutation,\nthus\ndriving down the number of schema in the\npopulation.\nConsequently,\nschemata which\nare short\nand of low\norder\nare\nprobabilistically\nfavored\nby the genetic\nalgorithm,\nand any GA which is to work\neffectively\nmust contain operators\nwhich\nprefer\nsuch small, low order building\nblocks.\nRecent theoretical work by Ooldberg and\nLingle 4 is centered around the idea of a\ndouble\ncrossover\ntechnique\ntermed\na\npartially matched\ncrossover\n(PMX). The\nPMX operator is particularly\neffective for\ndomains in which ordering\nof values is\nessential. In such problems, both the allele\nvalues and their positioning\nrelative\nto\nother alleles contribute to the overall fitness\nof a solution. An example of an ordering\nproblem cited by Goldberg\nand Lingle is\nthe traveling salesman\nproblem (TSP) in\nwhich a salesman must visit some number\nof cities in a circuit\nwhile taking the\nminimum distance to do so. Crossing over\ntwo solutions\nusing the PMX operator\nbegins by selecting\ntwo crossover\npoints,\ninstead of just one, which define a cut of\nlength K covering\nall alleles occurring\nbetween the two crossover points. The cut\nregions of the two solutions to be crossed\nare then exchanged. Any duplications which\nmay result outside of the cut regions are\nswapped between the two new solutions to\nenforce\nthe constraint\nof exactly\none\noccurrence\nof each city. Note that no\nswapping\nis allowed\nto occur inside of\neither cut, thus preserving\nwhatever order\nexisted among the alleles within that region.\nGoldberg and Lingle present the survival\nchances of a schema using the PMX as\n53\n\nP(S) -\n\nK-D(H)+I\nL\n\nL-K-D(H)+I\nL\n\n+\n\n[1 " KL\nl__]o(H)\n\n(2)\n\nwhere K is the length of the cut, D(H) is the\nlength (not defining length) of the schema,\no(H) is the order of the schema, and L is\nthe length of a solution. The two terms of\nthis equation represent the two conditions\nunder\nwhich a schema\nmay survive\na\ncrossover: entirely within the cut region or\nentirely outside of the cut region. Schemata\nwhich span either of the two crossover\npoints are assumed to be disrupted.\nThe\nfirst term of the equation, for schema inside\nthe cut, is only dependent upon the length\nof the schema. Again, short schema are\nfavored.\nThe second term, for schema\noutside of the cut, is dependent upon both\nthe length and the order of the schema. The\nsecond factor of this term is a measure of\nthe chances that any single locus outside of\nthe cut will survive the swapping phase of\nthe PMX. Since this chance is the same for\nall specified bits of the schema, the more\nspecified bits the schema has the lower its\nchances of survival. Thus the lower order\nschema\nare also favored\nby the PMX\noperator.\nTo summarize, this review has presented\ntwo formulas which show the probability of\nschema survival.\nThe first covers single\ncrossover cases and the second can be used\nfor the PMX crossover\noperator.\nThe\nanalysis section which follows (section 4)\nwill discuss how these formulas relate to the\napplication\nof GAs\nto the\nmobile\ntransporter problem.\n3.2 THE MOBILE\n\nTRANSPORTER\n\nSeveral features\nunique to the mobile\ntransporter\'s\ndesign\nand\noperating\nenvironment\nare salient to the use of genetic\nalgorithms as a modeling approach. As it is\ncurrently envisioned, the MT will be able to\ntransport heavy loads (up to 300,000 lbs.),\nwhich will substantially\nhinder its rate of\ntravel. It is estimated\nthat the travel time\nbetween the two most remote points of the\nstation may be as much\nas 6 hours.\nFurthermore,\nsince the truss structure\nof\nthe space station is 3-dimensional,\nthe MT\nwill have at least two types of movement:\n\nalongthesurface oneplane,or between\nof\ntwo planes.The latter is a much more\ncomplexmaneuverasting approximately\nl\nfive timesthedurationneeded travelan\nto\nequivalent istancealonga singleplane.\nd\nDueto theseconstraints,\npathplanningfor\ntheMT mustbe efficientandadaptableo\ns\nthatchanges the scheduled sesof the\nin\nu\nMT may be quickly addressed an\nby\nappropriatehange path.\nc\nof\nHowever,\ntrajectory\nplanningfor theMT\ndoes not map directly into a genetic\nalgorithm\nformat.Oneof thefirst obstacles\nencountered theneedfor a variability of\nis\nsolution length which does not occur in a\nclassical GA design. The paths developed\nfor the MT vary in length not only between\nproblems\nas the MT is assigned different\nstarting and ending points, but also within a\nsingle problem\nas the GA is running.\nFurthermore,\nthe existence\nof variable\nlength solutions complicates the structure of\nthe crossover\noperator, since some strings\nwill have more crossover opportunities than\nothers and since randomly chosen crossover\npoints will almost certainly produce invalid\nsolution paths. To ensure that a crossover\nproduces\na valid result, one can use an\nintersection\ncrossover.\nAn intersection\ncrossover\nis identical\nto the traditional\ncrossover\nexcept for a preceding\nstep to\ncompute the set of intersecting\npoints for\nthe two parents\nto be crossed.\nOnce\ncalculated, this set is used as the basis for\nthe selection\nof a crossover\npoint, thus\nensuring\nthat the substrings\nof the two\nparents used to make the new solution will\nbe rejoined at a common point, Note that\nthe use of the intersection crossover has two\npotentially adverse effects: the selection of a\ncrossover\npoint is no longer a uniformly\nrandom choice (those points that are more\nlikely to be present in a path will be chosen\nmore often)\nand the probability\nof a\ncrossover occurrence is diminished because\nsome parent\npairs may have an empty\nintersection set. Finally, observe that double\ncrossovers\nperformed\nusing the set of\nintersecting points can produce cycles in the\nresulting solutions, even if the parent paths\nof the initial population\nof solutions are\nconstrained to be free of cycles. Such loops\nin the resulting solutions must be removed\nif the constraint of no-cycle paths is to be\nmaintained in subsequent generations.\n\nA delooping\nprocedure\nwhich\nwill\naccomplish\nthis can be defined as follows.\nStarting with the beginning\nof the path, a\ncandidate\npoint is chosen and all points\nfollowing the candidate are visited in tum.\nIf any of these following points matches the\ncandidate, all elements of the path between\nthe candidate\nand the matching\npoint are\nremoved from the path. The checking then\ncontinues with the same candidate until the\nend of the path is reached, at which time the\npoint currently following\nthe candidate\nis\nchosen as the new candidate. The process is\nrepeated for all points until the end of the\npath is reached. Note that no more than two\nmatches\nwill be found for any given\ndelooping operation. This is due to the fact\nthat both the original path and the region\nspliced\nin from\nthe other\nparent\nare\nguaranteed\nto have\nno cycles.\nAs a\nconsequence, no two matches in the crossed\nover solution will be identical and all such\nmatches will occur between a point inside\nof the cut region and a point outside of the\ncut region.\nSince\ndelooping\nremoves\neverything between two matched points, a\nsingle delooping\naction must cross one of\nthe two crossover points thereby removing\nit from\nthe solution.\nWith\nonly two\ncrossover points in a double crossover, only\ntwo such delooping actions can occur.\nThus, several\nfeatures\nof the mobile\ntransporter\npath planning problem make it\nincompatible with classical GA techniques.\nIn particular,\nthe existence\nof varying\nlength paths gives rise to a need for a\ndifferent\nmechanism\nfor the crossover\noperator.\nAn intersection\ncrossover\nis\ndefined to ensure that crossing\nover will\nproduce valid paths, but this in tum gives\nrise to a cycling\nproblem\nwhen\ntwo\ncrossover points are used. Consequently,\na\ndelooping\nprocedure\nhas\nalso\nbeen\ndeveloped\nto rid a path of cycles. The\nresulting\ncrossover\noperation\nbecomes\na\ncombination\nof intersection\ncrossover\nfollowed\nby the delooping\nprocedure.\nHowever, a question remains open as to the\npossible\nadverse\neffects\nof these new\noperators\non the functioning\nof the\nresulting GA.\n4, APPROACH\nA twofold\napproach\ninvestigate\nthe translation\n\n54\n\nwas taken\nto\nof the mobile\n\nof the only order-dependent term of the\nequation. If a mutation operator could\nbe devised which would return such a\nfactor to the equation, the question then\nbecame whether to allow mutations to\noccur within\nthe cut region\nof the\ndouble\ncrossover\nor to force\nall\nsuch.changes to occur outside the region\nas is done with the PMX operator.\n\ntransporter\nproblem into the format of a\ngenetic algorithm. First, an examination of\nthe current\nGA theory was made in an\neffort to predict\nthe behavior\nof the\nresultant\nsystem.\nSecond,\nseveral\nsimulations\nwere\nwritten\nto collect\nexperimental\ndata on the various\nGA\nmethods under question. The focus of these\ntwo approaches was aimed at the following\ntopics:\n1.\n\n5.\n\n2.\n\nEffects of intersection\ncrossover\nand\ndelooping.\nGiven that a new crossover\noperator\nwas needed\nfor performing\ndouble\ncrossovers,\nit\nwas\nnot\nimmediately\nclear what effect\nthis\nwould have on the GA\'s performance.\nThe question arose as to whether the\nnew crossover operator might adversely\neffect the diversity of the population\ndue to some points in the domain being\nmore likely candidates\nas crossover\npoints.\n\n3.\n\nUse of a greedy crossover. Liebens et\na15 describe a process whereby a greedy\nalgorithm\ntechnique\nwas employed\nduring the selection of crossover points\nwhich greatly enhanced the conversion\nof the GA to an optimal answer. The\nextent to which this idea would help in\nthe MT problem\nwas an intriguing\nquestion.\n\n4.\n\nLocal\noptimization.\nDuring\nour\nsimulations,\nwe found that the GA\nseemed to converge before the last few\n"kinks" of a path could be straightened\nout. Consequently, our analysis included\nan examination\nof the extent to which\nlocal optimization\ntechniques\ncould be\nused\nto\nenhance\nthe\noverall\nperformance\nof the GA.\n\n6.\n\nSingle vs double crossover. It was felt\nthat the MT path planning problem was\nsignificantly\norder-dependent,\nbut the\ndegree to which this was true was\nunknown. It was questionable whether a\nsingle crossover would be sufficient for\na problem which exhibited only a small\ndegree of dependence upon the order of\nits values and, conversely,\nwhether or\nnot a double\ncrossover\nin such a\nsituation would be disruptive.\n\nTournament\nselection.\nNormally,\nparents are chosen for recom-bination\nbased on a roulette-like approach where\neach parent occupies a percentage of an\nimaginary\nroulette wheel proportional\nto its fitness. Parents with the highest\nfitness values are chosen most often.\nHowever, this method of selection has\ntwo disadvantages.\nIf fitness values vary\nwidely, a super-fit\nparent can easily\ndominate the population and drive the\nGA to premature convergence.\nON the\nother\nhand,\nif fitness\nvalues\nare\nclustered, small differences which may\nbe important\nare not emphasized\nenough. Tournament\nselection provides\nan alternative\nto roulette\nselection\nwhich avoids both of these problems.\n_, EXPI_RIMENTAL\n\nRESULTS\n\nMuch of what was expected was borne\nout by the simulation\nresults.\nThree\ndifferent simulations were developed to test\nthe issues cited in section\n4 above: a\nsimulation\nof the mobile transporter,\na\nreproduction\nof the experiment\nperformed\nby Goldberg\nand Lingle\nfor the TSP\nproblem,\nand\na simple\nscheduling\nsimulation.\nThe results\nfor crossover\noperators are presented first, then the tests\ninvolving the mutation operator, and f\'maUy\nthe results of using local optimization\nand\ntournament selection.\n\nNeed for a mutation operator. Because\nthe GA described here used a delooping\nprocedure\nrather than the swapping\nprocedure of the PMX, it was unclear\nto what extent this might effect the\npreference\nfor low order\nschema.\nRecall\nthe presence\nof an orderdependent factor in the second term of\nequation\n(2). Since\nswapping\nwas\nreplaced\nby delooping,\nthis factor\nwould not present in the GA for the\nmobile transporter, resulting in the loss\n55\n\n5.1 Crossover\n\n400\n\nFigure\n2 shows\na comparison\nbetween typical single and double\ncrossover\nruns\nfor\nthe mobile\ntransporter\ngenetic\nalgorithm.\nThe\ncrossover\ntechnique\nused for this\nsimulation\nwas the intersection\ncrossover followed by the delooping\nprocedure\ndescribed\nin section 3.2.\nNote that the descending\nfitness\nvalues\nof subsequent\ngenerations\nindicate\nthat the path length\nis\nimproving\nby getting\nshorter.\nAs\nexpected,\nthe MT problem exhibits\nenough order-dependence\nto benefit\nfrom the use of a double crossover.\n\n300\n\n111\n\n100\n\nI\n\nCrossover\n\nMutation\n\n!\n\n20\n\n30\n\nallowed to run until it converged\non a\nsingle fitness value for all members of its\npopulation. While Table 1 may not show\nany significant advantage gained by using a\ndouble crossover, it is clear that nothing\nwas lost by its use, as was expected.\nLastly, Figure 3 shows that the greedy\ncrossover method proved to be an excellent\nchoice. To implement a greedy crossover,\nthe double crossover operation was altered\nto select\nfrom among\na given\nset of\nintersection points the two elements which\nwould create the shortest resulting possible\nsolution.\nThe result produced\nonly one\nchild for each parent pair, thus twice as\nmany crossover operations were performed\nper generation. By adding a greedy method\nto the crossover,\nthe GA tended to find\nequivalent path lengths 5 to l0 generations\nearlier than was possible without the greedy\ncrossover.\nEven though the computation\nneeded to perform a crossover\nincreased,\nthe overall\nexecution\nof the GA was\nlessened\nby lowering\nthe number\nof\ngenerations required to solve the problem.\n\nfor simple\nNo. runs\n\nsingle crossover\ndouble crossover\n\nTable2.\n\na\n\nI0\nGeneration\n\nFigure2, Best fitness for slngle/double crossovers\n\ncomparison\nused\n\n\'\n\n0\n\nMoreover,\nthe double crossover\nproved\nto have no adverse effect in the simple\nscheduling problem. In this simulation, four\nfictitious employees\nwere to be scheduled\nover a three\nweek\nperiod\nwith\none\nemployee working per day. Each employee\nwas required\nto work\nbetween\nsome\nminimum and maximum number of days,\nwith some employees\nworking less than\nothers. Also, no employee was allowed to\nwork two days in a row. The only ordering\nconstraint introduced into the problem was\na requirement\nthat one particular employee\nalways work before another employee each\nweek, though no specification\nwas made as\nto how far apart the two employees had to\nwork. Fitness values were determined\nby\ncounting the number of constraints violated\nby a solution,\nthus lower fitness values\nrepresented\nbetter\nsolutions\n(fewer\nconstraint\nviolations).\nTable 1 shows the\naverage fitness of 96 runs using both single\ncrossover\nand double crossover\nGAs to\nsolve the problem. Note that each GA was\n\nTable 1. Crossover\n\nDouble X-over\nSingle X-over\n\nscheduling\nAverage\n\n96\n96\n\noperators\n\nfitness\n1 4.2\n1 1.0\n\nand the PMX crossover\n\nMutation used\nNo. runs\nBest fitness\nno mutation\n44\n1266\nlimited mutation\n44\n1240\nunlimited mutation\n44\n1224\nS6\n\nproblem\n\nAverage\n\nfitness\n1311.2\n1291.8\n1283.9\n\nswapping\nmutation operation\nsuch as the\none used with the PMX crossover could not\nbe used since the result would, in general,\nproduce an invalid path. In fact no singlelocus mutation operator could be devised.\nThe scheme finally adopted was to select a\ncut region similar to the double crossover\ncut by randomly picking two points of the\nsolution string. All elements between the\nmutation points were removed and a new\nrandom path was generated\nto bridge the\ngap. The mutation probability\nalso had to\nbe changed since it now referred\nto the\nwhole\nsolution\nrather\nthan each locus\nindividually.\nWith each solution averaging\napproximately\n50 elements,\nthis yielded\nabout a 5 percent (50 x 0.001 for each\nlocus) total chance that any given string\nshould mutate. Figure 4 shows that the use\nof this mutation operator had no effect on\nthe performance\nof the mobile transporter\nGA.\n\nThe consequences\nof using the mutation\noperator\nwere\nmore\ndifficult\nto\ncharacterize.\nTwo\ndifferent\ntypes\nof\nsimulations\nwere\nrun\nwhich\ntested\nmutations with both constant and variable\nlength strings. The first simulation,\nbuilt\nusing the PMX operator and the swapping\nmutation\ndescribed\nin the latter part of\nsection 3.1, was run on a traveling salesman\nproblem covering 40 cities. Three types of\nruns were made: one with no mutation, one\nwith a limited mutation which was allowed\nonly outside of the cut region, and one with\nan unlimited mutation which could occur\nanywhere\nin the solution.\nAll runs were\nallowed to converge and a total of 44 runs\nof each type were recorded. Table 2 shows\nthe results of these simulations. Though the\nprediction\nof better performance\nusing a\nmutation that could effect the inside of a cut\nregion was shown to be true, its effects\nwere not as large as expected.\nThis may\nhave been due, in part, to the fact that\nrelatively small population sizes were used\n(30 to 50 members), but the extent to which\npopulation size has an effect upon mutation\nwas not investigated. More statistical results\nwill have to be presented on such data. The\nconclusion drawn here was that mutations\nwhich could occur inside the cut region\ncertainly had no adverse effects upon the\norder-dependence\nof the solution strings,\nand may have enhanced the search for a\nmore optimal solution.\n\nPart\nof the reason\nfor this\npoor\nperformance\nmay be explained by the fact\nthat the mutation operator chosen was not\ndependent upon the order of a schema. By\nchoosing a region for mutation, rather than\nsome point-by-point\noperation,\nschema\nwhich survive the mutation\nprocess will\nmost likely be short in length. But this is\nexactly the situation already enforced by a\ndouble\ncrossover,\nthus\nno\nfurther\npreferences\nresult from the use of the\nmutation\noperator.\nConsequently,\nas is\nshown by Figure 4, nothing is gained by\nadding the mutation operator. However, it\nis important to note that this is only true for\nthe mutation operator defined here; it may\nbe possible\nto define\nother\nmutation\ntechniques\nwhich would have a beneficial\n\nThe second\nsimulation,\nin which an\nattempted was made to translate the benefits\nof mutating inside the cut region to the MT\ngenetic algorithm, proved to be fruitless. A\n400\n\n400\n[]\n:\n\n3O0\n\nno mu_a_on\n5% mutation\n\n3OO\n\n200\n\nJ\n\n2OO\n1O0\n\no\n\n!\n\n0\n\n10\nGen,_mtion\n\n1O0\n\n!\n\n0\n\n20\n\n10\n\n20\n\n30\n\nGeneraUon\nFi&ure 4. Mua_on\n\nFil_uze Double _nd greedy crossovers\n3.\n\n57\n\nintheMT\n\ngene_\n\ndgozithm\n\neffect on the GA.\n500\'\n5.3 Local Optimization\nWithout an effective mutation operator\nwhich could keep the diversity\nof the\npopulation high, it became important to\nlook for a means of directing the GA\nmore\nquickly\ntowards\nan optimal\nsolution.\nBoth the local optimization\nmethod\nwe employed\nand the use of\ntournament\nselection\nhelped\nin this\nregard.\nLocal\noptimization\nwas\nimplemented by taking advantage of the\ninherent geometric\nregularities\nof the\nSpace Station truss structure. Referring\nback to Figure 1, note that large sections\nof the truss structure form contiguous\nplanes. These planes can be thought of as\nsingle units or "blocks,"\nbroken apart\nonly when some obstacle attached to the\ntruss structure divides the plane, or when\ntone plane intersects another. Rather than\nforming a path point by point, one can\nwork block\nby block,\nwhere a block\nrepresents a contiguous length of unbroken\nspace along some plane of the truss\nstructure.\nFigure 5 is a dramatic\nexample of the\neffects of using this local optimization\ntechnique on the MT path planner problem.\nNot only does the average fitness of the\npopulation\nstart out much better, but the\noverall performance\nof the GA is twice as\ngood by the time the population converges\nto a single answer. In some sense this is not\ntoo surprizing\nsince\nthe optimization\ntechnique used greatly reduces the search\nspace for the GA. However, it is clear that\nsuch techniques can enhance the f\'mal output\nof a GA when features\nof the problem\n\n600\n\nnon local\ne\n\nlocal\n\n100\n\xe2\x80\xa2\n\n!\n\n0\n\n!\n\n10\n\n20\n\nGeneration\nFigure 5. Effects\n\ndomain\n\nof local optimization\n\npermit their use.\n\nFinally,\nFigures\n6 and 7 illustrate\na\ncomparison\nof roulette\nand tournament\nselection methods. Tournaments\nof 2 were\nused for these experiments.\nAs expected,\ntournament selection slows the rate at which\na super-fit, parent is allowed to proliferate\nthrough\nthe population.\nThe result is a\nhigher diversity\nfor a longer period of\ntime, as can be clearly seen in Figure 7.\nBecause\nno mutation\noperator\ncould be\ndesigned\nfor the MT path planner,\nthis\nprolonged\ndiversity\nbecame important\nto\nthe overall\nperformance\nof the GA.\nWithout\ntournament\nselection,\nthe GA\nconverged\nupon a solution\ntoo quickly,\nmissing\nbetter\nsolutions\nlatent\nin the\npopulation.\n6. SUMMARY\nThe genetic algorithm\napproach\nto be an effective means for quickly\n1.0\n\nI\n\nTournament\n\n_\n\n300\n\nI\n_\n\n\'_\n\n400\n\n400\n\n0.6\n\n500\n\n10.8\n\n300\n200\n\n0,4\n0.2\n\n100\no\n\n,\n10\nOe_ration\n\nFibre 6. Tourtameat tv\xc2\xa2. fl_ss\n\n,\n20\n\n0.0\n0\nF_,\n\n10\nOe_mtlon\n7. Tomaumaent\ndi_:lty\n\n20\n\nproved\nsolving\n\nthe mobile transporter path planning\nproblem. venthough\nE\ntheMT problem\ndid\nnot mapdirectlyinto a GA formatbecause\nof thevariable\nlengthOfits solutions, GA\na\nwassuccessfully\nappliedwhich produced\noptimal results within relatively few\niterations thealgorithm. hisGA used\nof\nT\na\ngreedy double crossover, tournament\nselection,\nlocaloptimization hichgrouped\nw\ncontiguousointsof thetrussstructure\np\ninto\n"blocks," and a deloopingprocedureto\nremove\ncyclesfromoffspring.Thegreatest\nimprovement performance with the\nin\ncame\nadditionof local optimization\nandgreedy\ncrossover.Neither the presenceof the\ndelooping\nprocedure,\nnorthefactthatsome\npoints of the domain spacewere more\nlikely to bechosen\nascrossover\npoints, ad\nh\nanyadverse ffects\ne\nupontheefficacyof the\nalgorithm. o mutationoperator asused\nN\nw\nsince none could be devisedto effect\nsolutionson a point-by-point asis.More\nb\nresearchtill needs bedoneon boththe\ns\nto\nmutationoperator ndtheeffectsof using\na\nan intersection set for the choice of\ncrossover\npoints.\nUltimately, noperational\na\nsolutionto the\nMT path planning problem may be\nimplemented\nusing an exhaustive\ncoding\ntechnique ueto therelativelysmallsizeof\nd\nits problem domain. However, since\ntrajectory\nplanning a common\nis\nproblem\nin\nspacesystemswhich havemuch larger\ndomains,\nthegenetic\nalgorithm\nwill remain\nan attractivealternativeto the classical\ntechniques tosolvesuchproblems.\nused\n7. ACKNOWLEDGMENTS\nThe authors\nwould like to thank Dr.\nDavid Goldberg and Robert Smith of the\nUniversity\nof\nAlabama\nfor\ntheir\nexplanations\nof\ngenetic\nalgorithm\ntechniques and their helpful discussions.\n\n59\n\n8, REFERENCES\n1. M. A. Gomez-Tiemo,\nStudy on the use\nof the genetic algo.rithrn for the solution of\nglobal optimization\nproblems, Government\nReport #GMV-204/85-V2/85,\n151 pages\n(1985).\n2. J. H. Holland, Adaptation\nin Natural\nand Artificial\nSystems,\nUniversity\nof\nMichigan Press, Ann Arbor (1975).\n3. D. E. Goldberg,\n"Simple\ngenetic\nalgorithms\nand the minimal,\ndeceptive\nproblem,"\nin Genetic\nAlgorithms\nand\nSimulated Annealing. Lawrence Davis, ed.,\nMorgan Kaufmann\nPublishers,\nInc., Los\nAltos, 74 - 88 (1987).\n4. D. E. Goldberg\nand R. Lingle,\n"Alleles, loci, and the traveling salesman\nproblem,"\nin Proc. Intl. Conf. on Genetic\nAlgorithms\nand their Applications,\n154 159 (1985).\n5. G. E. Liebens,\nM. R. Hilliard,\nM.\nPalmer,\nand\nM.\nMorrow,\n"Greedy\ngenetics,"\nin Proc. Intl. Conf. on Genetic\nAlgorthims\nand their Applications,\n90-99\n(1987).\n\n'