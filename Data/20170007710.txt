b'SSC17-II-1\n\nOpenSatKit Enables Quick Startup for CubeSat Missions\nDavid McComas\nNASA Goddard Space Flight Center\n8800 Greenbelt Road Greenbelt, MD 20771\n301-286-9038\ndavid.c.mccomas@nasa.gov\nRyan Melton\nBall Aerospace & Technologies Corp.\n1600 Commerce St., Boulder, CO 80301; 303-939-6771\nrmelton@ball.com\n\nABSTRACT\nThe software required to develop, integrate, and operate a spacecraft is substantial regardless of whether it\xe2\x80\x99s a large\nor small satellite. Even getting started can be a monumental task. Every satellite mission requires three primary\ncategories of software to function. The first is Flight Software (FSW) which provides the onboard control of the\nsatellites and its payload(s). Second, while developing a satellite on earth, it is necessary to simulate the satellite\xe2\x80\x99s\norbit, attitude, and actuators, to ensure that the systems that control these aspects will work correctly in the real\nenvironment. Finally, the ground has to be able to communicate with the satellite, monitor its performance and\nhealth, and display its data.\nOpenSatKit provides these three software components in an open source software package. It combines NASA\xe2\x80\x99s\nCore Flight System (cFS)1,2, NASA\xe2\x80\x99s 423 spacecraft dynamics simulator, and Ball Aerospace\xe2\x80\x99s COSMOS4 ground\nsystem into a system that can be deployed and operational within hours. OpenSatKit is designed to simplify the task\nof integrating new FSW applications and an example Raspberry Pi target is included so users can gain experience\nworking with a low-cost embedded hardware target. All users can benefit from OpenSatKit but the greatest impact\nand benefits will be to SmallSat missions with constrained budgets and small software teams.\nOPENSATKIT OVERVIEW\nThe Core Flight System (cFS) is an open flight software\n(FSW) architecture that provides a portable and\nextendable platform with a product line deployment\nmodel1,2. As the cFS is designed for flexibility with\nmany tunable parameters, it can be challenging for new\nusers to configure and deploy. The OpenSatKit\naddresses these issues by providing a fully functioning\nflight-ground system that runs on a desktop computer.\nThe starter kit components are shown in Figure 1. Ball\nAerospace\xe2\x80\x99s COSMOS, a user interface for command\nand control of embedded systems, is used as the ground\nsystem. The cFS running on Linux provides a desktop\nFSW component.\nThe 42 Simulator provides a\nsimulation of spacecraft attitude and orbit dynamics and\ncontrol. All of these components are freely available as\nopen source software.\n\nMcComas\n\nFigure 1 \xe2\x80\x93 Starter Kit Block Diagram\nStarting with an operational flight-ground system\nmakes the FSW developer\xe2\x80\x99s job much easier.\nDevelopers can focus on tailoring the kit\xe2\x80\x99s cFS\ncomponents to their needs, adding new mission-specific\napplications, and porting the cFS to their target\nplatform.\n\n1\n\n31st Annual AIAA/USU\nConference on Small Satellites\n\nTime Management, Event Messages (Alerts), Table\nManagement (runtime parameters), and Executive\nServices (startup and runtime resource management).\n\nFLIGHT SOFTWARE\nThe cFS provides a significant portion of a mission\xe2\x80\x99s\nFSW. On recent National Aeronautics and Space\nAdministration (NASA) Goddard Space Flight Center\n(GSFC) missions using source lines of code (SLOC) as\na metric and excluding the operating system, the cFS\nhas provided about a third of the FSW. Much of the\nfunctionality provided by the cFS is based on decades\nof FSW experience. This functionality can be very\nbeneficial to inexperienced teams because they may not\neven recognize that they may need some of the\nfunctionality provided by the cFS, especially the\ninflight diagnostic and maintenance features.\n\nThe Software Bus provides a publish-and-subscribe\nConsultative Committee for Space Data Systems\n(CCSDS) 6 standards-based inter application messaging\nsystem that supports single and multi-processor\nconfigurations. Time Management provides time\nservices for applications. The Event Message service\nallows applications to send time-stamped parameterized\ntext messages. Four message classes based on severity\nare defined and filtering can be applied on a per-class\nbasis. Tables are binary files containing groups of\napplication defined parameters that can be changed\nduring runtime. The table service provides a ground\ninterface for loading and dumping an application\xe2\x80\x99s\ntables. Executive Services provides the runtime\nenvironment that allows applications to be managed as\nan architectural component. All of the services contain\ntunable compile-time parameters allowing developers\nto scale the cFE to their needs.\n\nThe starter kit can also serve as a cFS training platform.\nIt provides demonstrations to highlight common cFS\nfeatures and it contains a tool for automatically creating\na \xe2\x80\x9cHello World\xe2\x80\x9d application. Since it is freely available\nand easy to install, it can be used as a platform for\nacademic projects.\nCORE FLIGHT SYSTEM\nFigure 2 shows the cFS architecture. Two prominent\nfeatures are the Application Program Interface (API)based layers and the definition of an application as a\ndistinct well-defined architectural component.\n\nThe APIs in Layers 1 and 2 have been instrumental in\nthe cFS\xe2\x80\x99 success across multiple platforms and the cFE\nAPI has remained unchanged since the launch of the\nLunar Reconnaissance Orbiter in 2009. The APIs,\ntheir underlying services, and the cFS build tool chain\nprovide the architectural infrastructure that make\napplications an explicit architectural component. A cFS\ncompliant application will run unchanged regardless of\nthe host platform. The application layer contains threadbased applications as well as libraries (e.g. linear\nalgebra math library) which can be shared among\nmultiple applications. New applications can easily be\nintegrated into the build system and even dynamically\nadded/removed during runtime.\nAs shown in Figure 2 all of the source code has been\nreleased as open source. The code is managed by a\nmulti-NASA Center configuration control board (CCB)\nthat ensures that the application context will evolved in\na controlled manner.\n\nFigure 2 \xe2\x80\x93 cFS Layered Architecture\n\ncFS Application Context\n\nThe cFS defines 3 layers with an API between each\nlayer. Layer 1 supports portability by decoupling the\nhigher levels from hardware and operating system\nimplementation details. All access to the platform is\ncontrolled through two APIs: the Operating System\nAbstraction Layer (OSAL) and the Platform Support\nPackage (PSP).\n\nThe application layer is where the bulk of the cFS\nscalability and extendibility occurs. Users create new\nmissions using a combination of existing cFS compliant\napps (partial or complete reuse) and new missionspecific apps. Just as the cFE provides common FSW\nservices there is a set of apps that provide common\nhigher level functional services. Figure 3 shows the\nminimal context for a user app on a single processor\nsystem. Three \xe2\x80\x98kit\xe2\x80\x99 apps provide the higher level\nservices.\n\nLayer 2 contains the core Flight Executive (cFE) that\nprovides five services that were determined to be\ncommon across most GSFC FSW projects. The core\nservices include a Software Bus (inter-app messaging),\nMcComas\n\n2\n\n31st Annual AIAA/USU\nConference on Small Satellites\n\n(spacecraft, sun, earth, etc.) positions and velocities in a\nparticular reference frame. This information is input to\nthe Environmental Models that computes the forces and\ntorques exerted on each object. The ephemeris and\nenvironmental data is read by the Sensor Models. The\nFSW algorithms read the sensor data, estimate states,\nrun control laws, and output actuator commands. The\nActuator Models compute control forces and torques.\nThe forces and torques from Environmental Models and\nActuator Models are input the Dynamics Model that\nintegrates the dynamic equations of motion over a time\nstep. The new states are fed back to the Ephemeris\nModels and the simulation process is repeated.\n\nFigure 3 \xe2\x80\x93 User Application Context\n\nApps must have the ability to receive commands from\nand send telemetry to the ground systems. The\nCommand Ingest app receives commands from the\nground and sends them on the software bus. The\nsoftware bus uses the command message identifier to\nroute the command to the app that has subscribed to the\nmessage id. An app also generates one or more\ntelemetry packets and sends them on the software bus.\nThe Telemetry Output app uses a table to determine\nwhich message ids to subscribe to and how often to\nforward them to the ground system.\nUsers have multiple mechanisms for how to control the\nexecution of an application.\nThe scheduler app\nprovides a time synchronized mechanism for\nscheduling application activities. The Scheduler app\nuses a table to define time slots for when to send a\nmessage that users can use to initiate an activity.\nActivities can be scheduled to occur faster or slower\nthan 1 second. Even if an app\xe2\x80\x99s execution is data driven\n(.i.e. pends for one or more data packets to start its\nexecution) it is often convenient to use the scheduler as\ncontrol mechanism for when to send time-based\nhousekeeping telemetry.\n\nFigure 4 \xe2\x80\x93 42 Simulator\nThe dashed Socket Interface box in Figure 5 has been\nadded to the 42 simulator for the OpenSatKit and\nreplaces the FSW Algorithm box. The FSW Algorithm\nApp running on the cFS implements the 42 FSW\nalgorithms. The I/O App communicates with the new\n42 Socket Interface to transfer sensor and actuator data\nbetween 42 and the cFS platform. 42 is command line\ndriven which allows it to be controlled by and external\nprogram such as COSMOS. This control is not shown\nin Figure 4.\n\n42 SIMULATOR\n42 is an open source software package that simulates\nspacecraft attitude and orbital dynamics and control. 42\nis design to be both powerful and easy to configure and\nrun. It supports multiple spacecraft anywhere in the\nsolar system and each spacecraft is a multi-body model\nthat can be a combination of rigid and flexible bodies.\n42 consists of a dynamics engine and a visualization\nfront end. The two components can run on the same\nprocessor, different processors, or just the dynamics can\nbe run without visualization.\n\nCOSMOS\nBall Aerospace COSMOS is an open source command\nand control system that can be used to test and operate\nany embedded system, from a single board to a\ncomplete satellite.\nCOSMOS is made up of a\ncollection of 15 tools that provide functionality such as\nautomated procedures, real-time and offline telemetry\ndisplay and graphing, logged data analysis and comma\nseparated variables (CSV) extraction, limits monitoring,\ncommand and telemetry handbook creation, and binary\nfile editing.\n\nFigure 4 shows the processing flow of the 42 simulation\nmodels. The Ephemeris Models determine object\n\nMcComas\n\n3\n\n31st Annual AIAA/USU\nConference on Small Satellites\n\nThe following diagram shows how the COSMOS\nsystem is organized.\nAt the heart of the real-time\nsystem is the Command and Telemetry Server. All\ncommands and telemetry packets flow through the\nserver to/from the other modularly designed tools that\nmake up COSMOS. This ensures that all interaction\nwith the targets (typically a satellite and a set of GSE\nhardware), is logged.\n\nFigure 5 \xe2\x80\x93 COSMOS Architecture\n\nFigure 6 \xe2\x80\x93 COSMOS Tools\n\nFor more information, please see http://cosmosrb.com.\nOPENSATKIT FEATURES\nFor OpenSatKit, COSMOS has been preconfigured to\ncommunicate with the cFS and the 42 Simulator over\nTCP/IP. Out of the box, you have a set of COSMOS\ntest procedures ready to execute, telemetry screens to\ndisplay data from both systems, and the ability to\nmonitor and analyze all the telemetry in the system.\nThe full COSMOS functionality is ready to go and\nyou\xe2\x80\x99ll immediately have a working user interface for\nthe system you are designing.\n\nMcComas\n\nThe OpenSatKit is distributed with instructions for\ncreating a Linux virtual machine1. OpenSatKit is started\nby launching COSMOS from the cfs-kit/cosmos\ndirectory. A customized COSMOS Launcher GUI\nappears that is the standard COSMOS Launcher with\nthe addition of a cFS Starter Kit button as shown in\nFigure 7. When you click the cFS Starter Kit icon\nCOSMOS\xe2\x80\x99 Command and Telemetry Server and\nTelemetry Viewer tools are launched since they are\nrequired by the kit. The OpenSatKit main page shown\nin Figure 8 is also opened.\n\n4\n\n31st Annual AIAA/USU\nConference on Small Satellites\n\ncFS to a new platform. The main page has two tabs:\nHome and Demo. The Home tab provides buttons to\nperform all of the kit\xe2\x80\x99s functions. The Demo tab\nprovides pre-configured demonstrations for most of the\nHome tab\xe2\x80\x99s functions.\nThe Home tab is divided into four sections: System,\ncFS-Functions, Kit-Tools, and Event Messages. The\nSystem section allows the user to start the cFS and\nperform some simple system level operations to ensure\nthat the system is functioning properly. Each button in\nthe cFS-Function section opens a command and\ntelemetry page that allows the user to focus on a\nparticular cFS functional activity that requires one or\nmore apps. For example, the File Management page\n(see Figure 9) is used to manage onboard\ndirectories/files using the File Manager (FM) app and\ntransfer files between COSMOS and the cFS using the\nTrivial File Transfer Protocol (TFTP) app. The Demo\ntab contains a demo for each of these functional areas.\nThe cFS-Function pages and corresponding demos help\nuser\xe2\x80\x99s conquer the cFS learning curve. In addition the\npage definitions and underlying Ruby scripts provide\nexamples that users can build upon for their missionspecific applications.\n\nFigure 7 \xe2\x80\x93 Custom COSMOS Launcher\n\nFigure 8\xe2\x80\x93 Starter Kit Main Page\n\nThe main page layout reflects the primary goals of the\nkit: provide a complete cFS system to simplify cFS\xe2\x80\x99\nlearning curve, simplify application development and\nintegration into a cFS system, and assist in porting the\nMcComas\n\n5\n\n31st Annual AIAA/USU\nConference on Small Satellites\n\nReferences\n1.\n\n\xe2\x80\x9cCore Flight System\xe2\x80\x9d\nRetrieved\nhttp://coreflightsystem.org June 12th 2017.\n\n2.\n\n\xe2\x80\x9cNational Aeronautics and Space Administration,\nFlight Software Systems Branch, cFS Overview\xe2\x80\x9d\nRetrieved\nfrom\nhttp://cfs.gsfc.nasa.gov/Introduction.html. June\n12th 2017.\n\n3.\n\nStoneking, Eric, \xe2\x80\x9c42 Simulator\xe2\x80\x9d Retrieved from\nhttps://sourceforge.net/projects/fortytwospacecra\nftsimulation/ June 12th 2017.\n\n4.\n\nMelton, Ryan, \xe2\x80\x9cBall Aerospace COSMOS\xe2\x80\x9d\nRetrieved from http://cosmosrb.com/ June 12th\n2017.\n\n5.\n\nNational Aeronautics and Space Administration,\nOnline Directives Information System, Software\nEngineering\nRequirements\nNPR-7150.2B,\nhttp://nodis3.gsfc.nasa.gov/displayDir.cfm?t=NP\nR&c=7150&s=2\n\n6.\n\n\xe2\x80\x9cThe Consultative Committee for Space Data\nSystems\xe2\x80\x9d\nRetrieved\nfrom\nhttps://public.ccsds.org/default.aspx June 12th\n2017\n\nfrom\n\nFigure 9\xe2\x80\x93 File Management Page\nThe Kit-Tools section provides tools that assist the user\nwith verifying a platform, evaluation a platform\xe2\x80\x99s\nperformance, integrating additional applications to the\nkit, and porting the cFS to a new target. The current kit\nincludes a Raspberry Pi target.\n\nSummary\nOpenSatKit is a freely available open source toolkit that\nprovides users with a complete cFS hosted on a Linux\nplatform. The cFS is a very mature and highly reliable\nFSW system that has been used on several NASA Class\nB missions5. We hope that this kit will greatly benefit\nSmallSat missions that often have constrained budgets\nand small software teams. In additional we\xe2\x80\x99d like to\ncontinue to grow the cFS community in an open\nmanner allowing additional assets to be developed and\nshared among cFS-based missions.\nAcknowledgments\nThe authors would like to acknowledge and thank the\ncFS community for all the hard work and dedication in\nmaturing the cFS and contributing ideas, applications\nand tools.\nMcComas\n\n6\n\n31st Annual AIAA/USU\nConference on Small Satellites\n\n'