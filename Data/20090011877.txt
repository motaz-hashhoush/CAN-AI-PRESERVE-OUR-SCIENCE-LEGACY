b'Software\nSupport for Diagnosis of\nCustom Computer Hardware\nThe Coldfire SDN Diagnostics software is a flexible means of exercising,\ntesting, and debugging custom computer hardware. The software is a set of\nroutines that, collectively, serve as a common software interface through which\none can gain access to various parts of\nthe hardware under test and/or cause\nthe hardware to perform various functions. The routines can be used to construct tests to exercise, and verify the operation of, various processors and\nhardware interfaces. More specifically,\nthe software can be used to gain access\nto memory, to execute timer delays, to\nconfigure interrupts, and configure\nprocessor cache, floating-point, and direct-memory-access units.\nThe software is designed to be used\non diverse NASA projects, and can be\ncustomized for use with different\nprocessors and interfaces. The routines\nare supported, regardless of the architecture of a processor that one seeks to\ndiagnose. The present version of the\nsoftware is configured for Coldfire\nprocessors on the Subsystem Data Node\nprocessor boards of the Solar Dynamics\nObservatory. There is also support for\nthe software with respect to Mongoose\nV, RAD750, and PPC405 processors or\ntheir equivalents.\nThis program was written by Dwaine S.\nMolock of Goddard Space Flight Center. For\nfurther information, contact the Goddard Innovative Partnerships Office at (301) 2865810. GSC-15478-1\n\nProviding Goal-Based Autonomy for Commanding a\nSpacecraft\nA computer program for use aboard a\nscientific-exploration spacecraft autonomously selects among goals specified in high-level requests and generates\ncorresponding sequences of low-level\ncommands, understandable by spacecraft systems. (As used here, \xe2\x80\x9cgoals\xe2\x80\x9d signifies specific scientific observations.)\nFrom a dynamic, onboard set of goals\nthat could oversubscribe spacecraft resources, the program selects a non-oversubscribing subset that maximizes a\n\nNASA Tech Briefs, August 2008\n\nquality metric. In an early version of the\nprogram, the requested goals are assumed to have fixed starting times and\ndurations. Goals can conflict by exceeding a limit on either the number of separate goals or the number of overlapping goals making demands on the\nsame resource.\nThe quality metric used in this version\nis chosen to ensure that a goal will never\nbe replaced by another having lower priority. At any time, goals can be added or\nremoved, or their priorities can be\nchanged, and the \xe2\x80\x9cbest\xe2\x80\x9d goal will be selected. Once a goal has been selected,\nthe program implements a robust, flexible approach to generation of low-level\ncommands: Rather than generate rigid\nsequences with fixed starting times, the\nprogram specifies flexible sequences\nthat can be altered to accommodate run\ntime variations.\nThis program was written by Gregg Rabideau, Steve Chien, and Ning Liu of Caltech\nfor NASA\xe2\x80\x99s Jet Propulsion Laboratory. Further\ninformation is contained in a TSP (see page 1).\nThis software is available for commercial licensing. Please contact Karina Edmonds of\nthe California Institute of Technology at\n(626) 395-2322. Refer to NPO-44541.\n\nDynamic Method for Identifying Collected Sample\nMass\nG-Sample is designed for sample collection missions to identify the presence\nand quantity of sample material gathered by spacecraft equipped with end effectors. The software method uses a\nmaximum-likelihood estimator to identify the collected sample\xe2\x80\x99s mass based on\nonboard force-sensor measurements,\nthruster firings, and a dynamics model\nof the spacecraft. This makes sample\nmass identification a computation\nrather than a process requiring additional hardware.\nSimulation examples of G-Sample are\nprovided for spacecraft model configurations with a sample collection device\nmounted on the end of an extended\nboom. In the absence of thrust knowledge errors, the results indicate that GSample can identify the amount of collected sample mass to within 10 grams\n(with 95-percent confidence) by using a\nforce sensor with a noise and quantiza-\n\ntion floor of 50 micrometers. These results hold even in the presence of realistic parametric uncertainty in actual\nspacecraft inertia, center-of-mass offset,\nand first flexibility modes.\nThrust profile knowledge is shown to\nbe a dominant sensitivity for G-Sample,\nentering in a nearly one-to-one relationship with the final mass estimation error.\nThis means thrust profiles should be\nwell characterized with onboard accelerometers prior to sample collection.\nAn overall sample-mass estimation error\nbudget has been developed to approximate the effect of model uncertainty,\nsensor noise, data rate, and thrust profile error on the expected estimate of\ncollected sample mass.\nThis program was written by John Carson\nof Caltech for NASA\xe2\x80\x99s Jet Propulsion Laboratory. Further information is contained in a TSP\n(see page 1).\nThis software is available for commercial licensing. Please contact Karina Edmonds of\nthe California Institute of Technology at\n(626) 395-2322. Refer to NPO-44403.\n\nOptimal Planning and Problem-Solving\nCTAEMS MDP Optimal Planner is a\nproblem-solving software designed to\ncommand a single spacecraft/rover, or\na team of spacecraft/rovers, to perform the best action possible at all\ntimes according to an abstract model of\nthe spacecraft/rover and its environment. It also may be useful in solving\nlogistical problems encountered in\ncommercial applications such as shipping and manufacturing.\nThe planner reasons around uncertainty according to specified probabilities of outcomes using a plan hierarchy\nto avoid exploring certain kinds of suboptimal actions. Also, planned actions\nare calculated as the state-action space is\nexpanded, rather than afterward, to reduce by an order of magnitude the processing time and memory used. The software solves planning problems with\nactions that can execute concurrently,\nthat have uncertain duration and quality, and that have functional dependencies on others that affect quality. These\nproblems are modeled in a hierarchical\nplanning language called C_TAEMS, a\nderivative of the TAEMS language for\n\n19\n\n'