b'(Preprint) AAS 15-662\n\nCOMBINING SIMULATION TOOLS FOR END-TO-END\nTRAJECTORY OPTIMIZATION\nRyan Whitley \xe2\x88\x97 Jeffrey Gutkowski \xe2\x80\xa0 Scott Craig \xe2\x80\xa1 Tim Dawn \xe2\x80\xa0 Jacob Williams\xc2\xa7\n,\n,\n,\n,\n,\nWilliam B. Stein \xe2\x80\xa1 Daniel Litton \xc2\xb6 Rafael Lugo, and Min Qu\n,\n,\nTrajectory simulations with advanced optimization algorithms are invaluable tools\nin the process of designing spacecraft. Due to the need for complex models, simulations are often highly tailored to the needs of the particular program or mission.\nNASA\xe2\x80\x99s Orion and SLS programs are no exception. While independent analyses\nare valuable to assess individual spacecraft capabilities, a complete end-to-end trajectory from launch to splashdown maximizes potential performance and ensures a\ncontinuous solution. In order to obtain end-to-end capability, Orion\xe2\x80\x99s in-space tool\n(Copernicus) was made to interface directly with the SLS\xe2\x80\x99s ascent tool (POST2)\nand a new tool to optimize the full problem by operating both simulations simultaneously was born.\n\nINTRODUCTION\nUp to this point, Orion and SLS have maintained separate toolsets to conduct their optimization\nanalyses. Orion primarily focuses on the in-space phase of \xef\xac\x82ight and thus uses an advanced astrodynamics tool known as Copernicus1 to design maneuvers and conduct trajectory optimization for\na problem that often features multiple gravitational bodies. SLS deals primarily with ascent and\nEarth departure sequences thus requiring both advanced Earth models to predict gravitational forces\nand atmospheric properties as well as complex propulsion and structural system models. SLS uses\nthe simulation tool POST2 (Program to Optimize Simulated Trajectories)2 which contains built in\nmodels suited for ascent optimization.\nAs performance of the combined system has become critical, it is vital to construct a complete\nend-to-end trajectory from launch to splashdown in order to maximize overall performance and ensure a continuous solution. For instance, if the ascent is optimized to a \xef\xac\x81xed main engine cutoff\n(MECO) state independent of that state\xe2\x80\x99s effect on in-space cost, vital performance gains that could\nresult from optimizing the MECO state for both the ascent and in-space phases could remain unrealized. Figure 1 displays an example of the independently optimized components of a sub-optimal\nmission trajectory. Unfortunately, the tools most equipped to do the individual optimization analyses cannot simulate the end-to-end trajectory. Copernicus is not currently equipped to model ascent\nwhile POST2 is not suited for modeling complex in-space maneuvers. Instead of embarking on a\n\xe2\x88\x97\n\nAerospace Engineer, Exploration Mission Planning Of\xef\xac\x81ce, NASA JSC, Houston, TX, 77058\nAerospace Engineer, Flight Mechanics and Trajectory Design Branch, NASA JSC, Houston, TX, 77058\n\xe2\x80\xa1\nAerospace Engineer, ERC Inc./Jacobs ESSSA Group, Huntsville, AL, 35812\n\xc2\xa7\nAerospace Engineer, ERC Inc. (JSC Engineering, Science, and Technology Contract), Houston, TX, 77058\n\xc2\xb6\nAerospace Engineer, Atmospheric Flight & Systems Branch, NASA LaRC, Hampton, VA, 23681.\nAerospace Engineer, Analytical Mechanics Associates, 21 Enterprise Parkway, Suite 300, Hampton, VA 23666.\n\xe2\x80\xa0\n\n1\n\nnew development program to create a single simulation tool that can handle optimizing both phases\nof \xef\xac\x82ight in the manner required to obtain the best performance estimates, a path was pursued to allow Copernicus to interface directly with POST2 and become the full problem optimization engine\nto operate both simulations simultaneously.\n\nLiftoff\n\nOptimized InSpace Trajectory\n\nOptimized Parking\nOrbit\n\nOptimized Ascent\nTrajectory\n\nFigure 1: Example of independently optimized trajectory segments\n\nIn this paper, the ability for a new approach to end-to-end trajectory optimization will be evaluated. First, a decision matrix of options will be shown that gives an overview of the many ways\nexisting tools could be used as a framework for end-to-end optimization. An overview of Copernicus and POST2 will then provide the context for how these tools can be merged into one overall\noptimization simulation. One of the options pursued required signi\xef\xac\x81cant modi\xef\xac\x81cations to Copernicus with the addition of a generalized plugin feature. The plugin feature is described in detail in a\nseparate paper.3 The plugin feature allows Copernicus to seamlessly interface not only with POST2\nbut any other simulation tool that has input and output capability. In addition, the Copernicus plugin\nenables other approaches to trajectory optimization including the use of curve-\xef\xac\x81itted datasets and\nother ascent or entry simulation tools. A second method for merging the simulations that utilizes a\nthird party optimizer known as Isight will then be discussed. Preliminary results showing increased\noptimality in the production of actual SLS and Orion trajectories for both methods will be given,\nfocusing on the relative performance improvement due to the use of an end-to-end optimizer. While\nthe pros and cons of these two methods will not be compared directly, ample discussion regarding\nthe operation challenges of each approach will provide insight into the different end-to-end optimization implementations including quantitative metrics associated with time spent and relative\nquality of the results. The performance gain showed in the results along with the challenges of\nimplementing the optimizer will provide a benchmark for future work to improve the end-to-end\n\n2\n\ntool.\nEND-TO-END SIMULATION OPTIONS\nSimulation tools currently available for trajectory design come in various forms and meet varying\nanalysis needs. There are many commercial available software tools as well as tools built in-house\nfor NASA or privately for use solely by independent aerospace contractors. Some tools feature\ncomplex models while some focus on optimization capability with less complex subroutines. With\nso many tools available to use, it can be a daunting task to choose the best simulators to use to build\nan end-to-end tool with combined optimization capability. To aid in this process from the onset, the\nnumber of tools was reduced to focus on those familiar to the team or which were readily available\nto NASA. In the end, it was this familiarity that was the driving force behind the choices made for\nthe optimizer. Those were: 1) Copernicus,1 2) POST2,2 3) OTIS,4 4) SORT,5 and 5) MALTO.6\nThere are many ways to combine these sims, so to simplify the selection process the methods were\ndownselected a priori to the 10 combinations shown in Figure 1.\nAscent\nSim\n\nOrbit\nSim\n\nPrimary\n(ETE)\nOptimizer\n\nPrimary\nCoders\n\nMatlab\n\nEither\nMSFC or\nJSC\n\nNone\n\nGRC\n\n# of Optimizers\n\n1\n\nLinux or\nWindows\n\n3\n\n2\n\nLinux or\nWindows\n\n1\n\n3\n\nLinux\n\n1\xe2\x80\x933\n\nSeveral\nOptions\n\nIsight\n\n4\n\nLinux or\nWindows\n\n2\n\nCopernicus\nOptimizers\n\nNone\n\n5\n\nLinux or\nWindows\n\n1\xe2\x80\x932\n\nCopernicus\nOptimizers\n\nNone\n\n6\n\nWindows\n\n1\n\nCopernicus\nOptimizers\n\nNone\n\nJSC\n\nLinux or\nWindows\n\n3\n\nHuman in\nthe Loop\n\nNone\n\nIndividual\nAnalyst\n\n8\n\nWindows\n\n2\n\nCopernicus\nOptimizers\n\nNone\n\nJSC/MSFC\n\n9\n\nLinux\n\n1\n\nNPSOL\nand others\n\nNone\n\nLaRC\n\nLinux\n\n2\n\nSeveral\nOptions\n\nNone\n\nJSC with\nJPL\nSupport\n\nHuman in\nthe Loop\n\n7\n\n10\n\nMALTO\n\nMALTO\n\nType of\nOptimizers\n\nThird\nParty\nCode\n\nPlatform(s)\n\n#\n\nE.G.\nNewton\xe2\x80\x99s\nMethod\nSNOPT\n(other\noptions...)\n\nNESC (w/\nMSFC/JSC\nsupport)\nJSC (some\nMSFC)\nJSC,\nMSFC, and\nLaRC\n\nTable 1: Initial Set of ETE Options Considered\nFrom these 10, a number of metrics were evaluated to determine which option to select including\na) Effort to Implement, b) Quality of Solution, c) Ease of Use and d) Analyst Time. While all 10\noptions were viable, the emphasis on effort to implement narrowed the choices signi\xef\xac\x81cantly. For\nexample, the ideal end-to-end optimizer would have all phases of \xef\xac\x82ight in the same simulation, but\nthis was not viable without creating either an ascent or in-space sim in another tool. The only tool\n\n3\n\nthat could do both from the list was OTIS and OTIS was not ready to do either the SLS or Orion\nanalyses. Thus, it is no surprise that in the end methods to combine POST2 and Copernicus were\nselected listed as options 5 and 3 respectively in Figure 1. Option 5 has been constructed by the SLS\nand Orion teams as part of the overall program core analysis capability, referred in this paper as the\nEnd-to-End Plugin Optimizer (ETE Plugin Optimizer). In addition, Option 3 has been adopted by\nthe NASA Engineering & Safety Center (NESC) for use in independent comparative analysis and\nis referred to as the ETE Isight Optimizer in this paper.\nCOPERNICUS AND POST2 OVERVIEW\nTo get a sense of the challenges of merging two separate and quite disparate simulation tools,\na brief discussion of each base simulation is given below. Copernicus is primarily an in-space\ntrajectory tool and POST2 is primarily an atmospheric ascent and entry tool. A discussion of these\ntools will demonstrate how the type of problem has shaped the architecture of each simulation and\nwhy merging the optimization processes together is challenging.\nCopernicus\nCopernicus is a generalized spacecraft trajectory design and optimization application.1, 7 The\noriginal prorotype was developed at the University of Texas at Austin, and subsequent releases have\nbeen developed and maintained at the NASA Johnson Space Center (JSC). The most recent release\nwas version 4.2 (July 2015). Copernicus is actively developed, and has become one of the main\nsoftware tools at JSC for advanced mission design for future manned missions.8, 9\nCopernicus is capable of solving a wide range of 3-DOF trajectory design and optimization problems. These include trajectories centered about any planet or moon in the solar system, trajectories\nin\xef\xac\x82uenced by two or more celestial bodies such as libration point trajectories (halo orbits), distant retrograde orbits or other trajectories that exist only in at least a restricted three body model,\nEarth-Moon and interplanetary transfers, asteroid and comet missions, and more.\nA core element of the program is the \xe2\x80\x9csegment\xe2\x80\x9d, which is the fundamental building block of\nmission design in Copernicus.10 Copernicus assumes that all trajectory problems can be modeled\nusing a combination of segments, which can include a set of optimization variables that can be\nvaried, along with an associated set of constraints to be achieved, and a cost function that can be\nminimized or maximized. Any number of segments can be de\xef\xac\x81ned in a mission, and can represent\nmultiple spacecraft or multiple stages of a single spacecraft. In support of the studies described in\nthis report, a recent release also introduced a new \xe2\x80\x9cplugin\xe2\x80\x9d mission attribute in order to enable the\nincorporation of external tools and user-created algorithms into the optimization problem.3\nProgram to Optimize Simulated Trajectories II (POST2)\nPOST22 is a trajectory optimization program initially developed by Lockheed Martin and maintained at the Langley Research Center. Originally POST2 was two programs, POST3D for 3-DOF\n(Degree of Freedom) and POST6D for 6-DOF, but the release of a new version of POST, appropriately called POST2, successfully combined the two variants into one tool. POST2 shapes the\ntrajectory through a list of independent variables, the combination of which was known as a uvector in POST3D. In normal operations, POST2 will optimize a given parameter by changing the\nindependent variables, while meeting one or more constraints. However, for most of the Copernicus\n\n4\n\nplugin related analysis, the POST2 optimizer is disabled and the simulation is run as a trajectory\npropagator.\nPOST2 has seen heavy use in the SLS programs as the primary 3-DOF optimization tool for\nascent trajectories. Its strength lies in the \xef\xac\x81delity that can be applied to the launch vehicle. At the\ntime of this paper, the SLS Block 1 vehicle is at the CDR level of maturity, which requires fairly\ndetailed modeling of the subsystems. For example, the Core propellant tanks require repressuration,\nthe thrust vector control system requires power, and design constraints may limit the acceleration of\nthe vehicle through certain regimes of \xef\xac\x82ight. All of these constraints require advanced models that\nexist within the POST2 framework. Without these details, the trajectory may not be feasible and\nresult in inaccurate predictions of performance, launch time, or some other \xef\xac\x82ight critical parameter\nsuch as the i-loads for the guidance system. Before the development of the end-to-end tools, POST\nwould be run only to a given ascent target that was de\xef\xac\x81ned by the program. The ascent target can\nnow be optimized to get the most performance out of the launch vehicle for a given \xef\xac\x82ight.\nEND-TO-END PLUGIN OPTIMIZATION METHOD\nBy selecting the two simulations that the teams were already using in detailed Orion and SLS\nanalyses, there was no need to develop advanced new spacecraft models to directly match the current trajectories and resultant performance. Instead the primary challenge of creating a new optimizer was in allowing the tools to talk to each other and the ability to solve a much more complex\noptimization problem. For the ETE Plugin Optimizer the complexity was minimized by focusing on\nthe two tools and their respective suite of optimizers. The goal is to maximize the types of problems\nthat can be solved by giving the advanced optimization tools within Copernicus direct access to the\ndata coming out of POST2, the ascent simulation. To this end, Copernicus was modi\xef\xac\x81ed to be able\nto call any tool directly through the use of an interface with established function calling and a \xef\xac\x81xed\ndata \xef\xac\x81le format.3 The solution \xef\xac\x82ow is given in Figure 2.\n\nRead once when plugin is loaded\n\nConfig\n\n.json\n\nORIG\nInput\n\n.inp\n\nPOST2 Plugin\n\n4.\nRead\n1. Generate\n\nInput\n\n.json\n\n\tModule\n\n2. Execute\n\nCopernicus\n\n12. Read Output\n\n.json\n\n5. Modify Select Vars\n\n3. Read\n\n11. Generate\n\nMOD\nInput\n\n.inp\n7.\nRead\n\n6. Run\n\n10.\nRead\n\nOutput\n\n.out\n\n9. Generate\n8. POST2 Executes\n\nFigure 2: End-to-End Plugin Optimization Method Solution Flow\n\nEssentially Copernicus runs the overall optimization problem by generating data \xef\xac\x81les from which\nan executable script manages the \xef\xac\x82ow of data to POST2 including its execution and output data\nrepackaging. Copernicus will call the POST2 Plugin as frequently as needed to get the required\ngradients and trajectory data. As a result, there are two modes currently available to run the tool,\n1) Single-level Optimization mode (S-OPT) where POST2 is simply a propagator and 2) Bi-level\nOptimization (B-OPT) mode where POST2 completes its own optimization cycle and feed backs\n\n5\n\ndata into the subsequent combined problem. Both methods are iterative and have pros and cons as\ndiscussed below.\nThe two main features of the end-to-end simulation are thus the Copernicus plugin and ETE\nPython scripts. The structure of the Copernicus plugin feature is documented in detail in a companion paper.3 To provide needed context for the operation of the end-to-end simulation, an overview\nof Copernicus and the relevant plugin capabilities are given below followed by a discussion of the\npython scripts that established the input/output data connections.\nCopernicus Plugin Overview\nThe Copernicus 4.1 release (March 2015) included a new capability for user-created plugins,\nwhich can be used to extend the capabilities of the tool.3 The Copernicus-Plugin interface allows\nfor the transfer of variables in both directions (from Copernicus to the plugin, and from the plugin back to Copernicus). Various types of plugins are allowed. Plugins can be used to enable\nCopernicus to call an external tool (in this case, POST) as part of an overall optimization problem.\nFor the application described in this study, the plugin is a Python script, and data is exchanged by\nreading and writing JSON11 data \xef\xac\x81les. Plugins allow Copernicus to be used to handle an overall\noptimization problem that can include both Copernicus-native segments, as well as external mission\nphases produced by other means. The emphETE Plugin Optimizer is one example of this capability,\nwith Copernicus calling a plugin (which in turn calls POST). The POST run is a \xe2\x80\x9cblack box\xe2\x80\x9d to\nCopernicus, which is only concerned with the input and outputs to and from the plugin.\nPython Bridge Interface\nThe ETE Plugin Optimizer utilizes a python module which serves as a communication interface\nbetween both Copernicus and POST and forms the core of the ETE plugin. This module consists of\nfour separate functions, breaking down the Python Module box in Figure 2:\n1. cop to post(): Loads JSON \xef\xac\x81le provided by Copernicus and writes a new POST input \xef\xac\x81le\nusing a template POST input \xef\xac\x81le and the JSON information.\n2. runPOST(): Executes POST.\n3. post to cop(): Reads copernicus.out and reformats state data and dependent variables into a\nJSON format for reading by copernicus.\n4. load post data(): Loads time history data of the POST trajectory for trajectory visualization.\nCopernicus loads the python module using the plugin interface and executes it as a script; executing the functions cop to post(), runPOST(), and post to cop() in order. Copernicus initially writes\na JSON \xef\xac\x81le to the working directory, which cop to post() loads along with a template POST input\ndeck. The function then updates the POST template \xef\xac\x81le text with the new independent and dependent variables provided in the JSON \xef\xac\x81le, writing a new input deck for use during PSOT execution.\nPOST then executes through the function runPOST(), resulting in both a copernicus.out \xef\xac\x81le as well\nas CSV \xef\xac\x81le containing the time histories of given variables throughout the simulation. The python\nscript \xef\xac\x81nally executes post to cop() in order to parse the copernicus.out \xef\xac\x81le into a JSON format\nfrom which copernicus reads in data and continues the simulation.\n\n6\n\nThe plugin allows for POST execution using POST milestone (binary) \xef\xac\x81les as well, which facilitates faster \xef\xac\x81le I/O. The plugin also can execute POST in two different modes, in a single\nrun/propagation mode which allows Copernicus and SNOPT12 to provide the optimization, or in\nan targeting/optimization mode which utilizes the native optimizer included in POST. As described\npreviously, the \xef\xac\x81rst mode is referred to as Single-level Optimization mode (S-OPT) and the second\nmode as Bi-level Optimization mode (B-OPT).\nUsing this plugin structure for Copernicus also provides future \xef\xac\x82exibility for integrating other\nanalysis and trajectory simulations using a similar set of functions which interface with Copernicus\nusing the JSON format.\nEND-TO-END ISIGHT OPTIMIZATION METHOD\nAnother way to implement an end-to-end optimizer is through a third party tool. To that end,\nanother portion of the team used Isight,13 a commercial software package capable of combining\nmulti-disciplinary models and applications in a process \xef\xac\x82ow, in this case trajectories from POST2\nand Copernicus. In fact, while the Copernicus based tool in the \xef\xac\x81rst implementation has only\nsuccessfully combined two phases, ascent and on-orbit, the Isight implementation (referred to as\nETE Isight Optimizer in this paper) has taken it a step further by connecting an entry trajectory\nalso modeled in POST2. In this method, each segment is its own optimization problem, with Isight\ndoing a combined optimization problem on a set of global optimization variables. Figure 3 shows\nthe iterative process \xef\xac\x82ow.\n\nFigure 3: Overview of Isight Architecture\n\nThe set of global optimization variables depend on the type of problem being solved, but generally speaking the target state between the ascent and the on-orbit trajectory is included to give the\noptimizer the most possible \xef\xac\x82exibility. The primary constraint between on-orbit and entry is the\nEntry Interface (EI) target line that constrains \xef\xac\x82ight path angle, azimuth and longitude based on a\ngiven latitude.\nETE PLUGIN OPTIMIZER RESULTS\nAs both new ETE optimizers were built to maximize the combined Orion and SLS performance,\nvarious planning analyses used to asses the feasibility of upcoming NASA Exploration Missions\n(EM), in particular EM-1 and EM-2, are serving as the testbed for the different methods. The\n\n7\n\ndata in this paper conveys relative performance increases but is not intended to provide \xef\xac\x81nal results\nrepresenting the of\xef\xac\x81cial NASA programs.\nSLS Block 1 Launch Window Study\nThe ETE Plugin Optimizer was \xef\xac\x81rst validated by reproducing a launch window analysis for SLS.\nBy combining ascent and on-orbit trajectories into one optimization problem, the construction of a\nlaunch window that optimizes the orbit altitude and inclination of the Earth Parking Orbit (EPO)\nis enabled. While an actual mission might \xef\xac\x81x the parking orbit to simplify the guidance targeting is suf\xef\xac\x81cient performance margin was available, the ETE optimized the parking orbit targets at\neach launch time to show the relative gain if the problem is fully optimized. Figure 4 shows a net\ngain in propellant margin (propellant above what is required for the mission) when comparing the\nmaximums of a given launch window to the original analysis completed.\n\n(a) Launch Window Period\n\n(b) Launch Window Performance Difference\n\nFigure 4: ETE Results for EM-1 Launch Window Analysis\n\nSLS Block 1 TLI Performance Study\nThe ETE Plugin Optimizer was then used to produce performance analysis for SLS and Orion\xe2\x80\x99s\n\xef\xac\x81rst two missions: Exploration Mission 1 (EM-1) and Exploration Mission 2 (EM-2). This performance analysis assessed the maximum payload capability through the Trans-Lunar Injection (TLI)\nburn of the SLS Block 1 con\xef\xac\x81guration over a monthly launch period. For both missions, the SLS\nBlock 1 con\xef\xac\x81guration is required to send Orion on a lunar intercept trajectory. Orion then performs\nthe remaining burns to complete the desired mission. Payload was maximized through TLI and\nOrion propellant usage was minimized in order to complete the mission. Any mass above the mass\nof Orion would be considered additional payload. It was conservatively assumed that the respective\nEM-1 or EM-2 control mass of Orion was used for the post-TLI portion of each trajectory. By tying\nthe ascent and on-orbit phases of the mission the tool affords analysts the ability to optimize the\nascent and on-orbit phases at the same time. This produces a valid optimal mission that can be\n\xef\xac\x82own end to end.\nThe reference trajectory for EM-1 assumes that after Main Engine Cut-Off (MECO) of the SLS\ncore stage, the Interim Cryogenic Propulsion Stage (ICPS) and Orion are placed into a 28.5\xe2\x97\xa6 inclined, 22 x 975 nmi altitude orbit. For EM-2 the post MECO orbit is also inclined at 28.5\xe2\x97\xa6 but with\n\n8\n\na larger relative altitude at 19 x 1175 nmi. The combined spacecraft stack then propagates up to\napogee and ICPS performs the Perigee Raise Maneuver (PRM) to increase the perigee of the orbit\nto 100 nmi placing the stack into a closed orbit above the atmosphere which is referred to as the\nEarth Parking Orbit (EPO). Then TLI is performed near the second perigee passage by the ICPS to\nplace Orion on a trajectory towards the moon. The mission pro\xef\xac\x81les post-TLI differ for EM-1 and\nEM-2; however the maximum payload study was primarily focused on the common EPO portion of\nthe two missions.\nFigure 5 shows the results of various cases run with the ETE Plugin Optimizer for EM-1 and\nEM-2 respectively. Each point on the plots that are above the lightest Orion mass (horizontal lines)\nindicates a valid mission that allows a particular mass of Orion to perform its mission and return\nback to Earth via an acceptable Entry Interface (EI) condition. All the points shown are above the\nlowest Orion mass line, however the optimizer could be run on more launch days on either side of\nthe current launch dates with decreasing payload performance through TLI. The points shown on\nthe plots were suf\xef\xac\x81cient for the purposes of these studies. Each study discussed below assessed\nthree different cases:\n\xe2\x80\xa2 Case 1: Assumes a \xef\xac\x81xed orbit altitude and inclination.\n\xe2\x80\xa2 Case 2: Assumes a \xef\xac\x81xed orbit altitude and an optimized inclination.\n\xe2\x80\xa2 Case 3: Assumes an optimized orbit altitude and inclination.\nCase 1 for both missions show a variation in the performance through TLI even though the orbit\nparameters are \xef\xac\x81xed. This is due to the change in Earth-Moon geometry throughout the lunar\nmonth. All of the EPOs are elliptical and therefore the Moon has to be in the southern hemisphere\nin order to do a TLI burn near perigee instead of at apogee. This is because perigee will always be\nin the northern hemisphere since the primary launch site, Kennedy Space Center, is in the northern\nhemisphere. This effectively cuts out at least half of the lunar month to perform a mission that is\nwithin reasonable performance requirements.\nCase 2 has a different effect for both EM-1 and EM-2. This is due to the lunar declination\ndifference between launching in 2017 and 2021. The optimal inclination for EM-1 in 2017 is closer\nto 32\xe2\x97\xa6 instead of 28.5\xe2\x97\xa6 . However, for EM-2 in 2021 the optimal inclination is 28.5\xe2\x97\xa6 , which is\nthe inclination for the reference EPO for both EM-1 and EM-2. Therefore in the middle of the\nmonthly opportunity window there is minimal difference in performance through TLI. The edges\nof the window do see an increase in performance relative to Case 1 because a higher inclination is\nmore optimal. The edges of the opportunity window have inclinations close to 45\xe2\x97\xa6 . This might be\ntoo high of an inclination for the SLS to \xef\xac\x82y due to launch pad constraints, but for the purposes of\nthis study the middle of the window is the most important comparison.\nCase 3 is where the full power of the optimizer can be realized. By allowing the EPO (both the\nperigee and apogee) to be optimized as well as the inclination the launch day speci\xef\xac\x81c optimal orbit can be found. This allows the full performance margin of the SLS core stage to be applied to\nthe ICPS and through TLI by adjusting the EPO into an optimal orientation relative to the Moon\xe2\x80\x99s\ngeometry on that day. It is true that this performance gain could be derived by using POST2 and\nCopernicus separately, but a large amount of manual iteration would be required on the part of the\nanalyst. Using the optimizer also ensures that the optimal trajectory found in Copernicus also corresponds to a \xef\xac\x82yable SLS ascent trajectory and disposal conditions for both the core state and ICPS.\n\n9\n\n(a) EM-1 Results\n\n(b) EM-2 Results\nFigure 5: ETE EM-1 and EM-2 Launch Period Analyses\n\n10\n\nFully optimizing the EPO with Case 3 provides the most payload through TLI and extends high\npayload capability farther through the opportunity window in addition to lengthening the opportunity window as well. From an operations/real-time perspective having a different EPO each day\nonly requires a new set of i-loads to be uploaded to the vehicles prior to that day\xe2\x80\x99s launch attempt.\nThe apogee altitude of the EPO increased to nearly 1300 nmi for both EM-1 and EM-2, but the optimizer maxed out there. Also, an ICPS vehicle propellant penalty was applied to all Case 3 results\nto protect for other vehicle considerations due to the variation in EPO orbit altitude. This causes\nsome of the Case 3 TLI payload results to be slightly below the Case 2 payload results. This can be\nseen directly in Figure 5b.\nISIGHT ETE OPTIMIZER RESULTS\nLaunch Period Analysis\nSimilar to the results described in detail in the ETE Plugin Optimizer results section, the ETE\nIsight Optimizer also analyzed EM-1 cases using the Block 1 SLS. The \xef\xac\x81rst analysis consisted of\ndetermining the availability of daily opportunities within a given launch period. The optimization\nproblem consisted of determining the optimal MECO time for a given day within a given launch\nperiod and was solved using the MMFD14 solver. The control variables included launch azimuth\nand apogee with the overall optimization objective to minimize TLI propellant. In Figure 6 launch\ndays 4-7 demonstrate the best TLI performance, with over 25 higher TLI propellant remaining\ncompared to the rest of the 11 day period shown. These particular days maintain enough of an\noptimal alignment within the con\xef\xac\x81nes of the Earth-moon geometry that allows maximizing the\nperformance by aligning the TLI burn closely with the perigee of the intermediate parking orbit.\n\nFigure 6: Isight Results for EM-1 Launch Period Analysis\n\nLaunch Window Analysis\nWhile the launch period analysis produced macro results, a more detailed launch window analysis\nin which the optimal value was re\xef\xac\x81ned within a given time of day, required a more suitable optimizer.\n\n11\n\nThus, for the launch window analysis, in which the ability to maintain a two-hour launch window\nwas to be determined, the MISQP15 optimizer was used. Once again the control variables were\nlaunch azimuth and apogee and the objective was to minimize total TLI propellant with a \xef\xac\x81xed SM\npropellant load. As the earth-moon geometry comes out of perfect alignment the TLI cost increases\nsubstantially and thus the window peaks in the middle of the period, as shown in Figure 7a.\nIn order to compare the effect of different control variables, the analysis was rerun, but with\na \xef\xac\x81xed apogee target while azimuth remained free. As would be expected, \xef\xac\x81xing a control variable reduced the performance, but not necessarily signi\xef\xac\x81cantly. In Figure 7b it can be seen that\nthe performance gain with a free apogee maxes out at 60 kg. Sensitivities to individual variables\nsuch as these are important to understand to maximize performance for missions where multiple\nindependent parameters can contribute to a combined net increase in performance.\n\n(a) Launch Window Period\n\n(b) Launch Window Performance Difference\n\nFigure 7: Isight Results for EM-1 Launch Window Analysis\n\nETE OPERATION & CHALLENGES\nEach method implemented provided unique challenges for the analysts to tackle. The ability to\nachieve convergence still varies from case to case and the techniques to overcome the convergence\nchallenges are detailed in the following sections for each optimization method. Lessons learned\nfrom these early test cases will aid signi\xef\xac\x81cantly in solving future optimization problems.\nUsing the ETE Plugin Optimizer\nWhile the optimization algorithms for the ETE Plugin Optimizer are fairly established, it is the\ntuning of the decks that remains a challenge and the lengthy run times that are currently measured\nin hours. Up to this point, two types of problems have been solved using the ETE Plugin Optimizer\nwith varying degrees of success. The \xef\xac\x81rst features the Block 1 con\xef\xac\x81guration of the SLS using\nthe Interim Cryogenic Propulsion Module (ICPS) upper stage and the second features Block 1B\nof the SLS using the Exploration Upper Stage (EUS). The Block 1 results have been successfully\ngenerated while Block 1B results are still being developed.\nSLS Block 1: ICPS Con\xef\xac\x81guration The implementation used the Copernicus v4.1 program, the\nPOST2 DAC3 executable, and the Python Module in S-OPT mode. Missions analyzed were the\n\n12\n\nEM-1 Distant Retrograde Orbit (DRO) mission and the EM-2 High Lunar Orbit (HLO) mission.\nFor both missions, POST2 is used to model the ascent from launch to MECO with Copernicus\ndriving the optimization. For the in-space portion of EM-1, Copernicus models the complete DRO\nmission from MECO to EI while minimizing the Orion total \xe2\x88\x86V and maximizing the post-TLI\nmass. For EM-2, Copernicus models the \xef\xac\x81rst phase of the HLO mission, which is a free return \xef\xac\x82yby\naround the Moon to EI, while maximizing the post-TLI mass. For both cases, EI is a point along a\ntargetline that ensures a water landing off the coast of southern California.\nDepending on the particular problem being solved for Block 1 SLS, Copernicus was programmed\nto optimize between 30 and 60 optimization variables along with 25 to 55 constraints and between 1\nto 4 variables for the overall objective function. Of these optimization variables, Copernicus passes\n13 independent variables and 12 dependent variables (for the constraints) as input to the POST2\nsim via the plugin module scripts. POST2 runs and sends back a state vector (with 6 geographic\nparameters) and mass at MECO + 20 seconds. These values are then pushed into the initial segment\nof the in-space trajectory simulation. This cycle is repeated until an optimal solution is found.\nSolution convergence is dependent on the type of problem, how many controls and constraints there\nare, as well as the solution tolerance. For example, as the number of modeled maneuvers decreases,\nthe optimizer will converge faster to a solution. Also, reducing the number of variations to the orbits\n(i.e, the orbital elements) can also help the optimizer converge faster. As the tolerance decreases,\nthe optimizer tends to work harder and longer to converge to a solution.\nThe EM-1 mission is more complicated than the \xef\xac\x81rst phase of the EM-2 mission. To meet this\nchallenge, one must constrain the problem to help the ETE Plugin Optimizer \xef\xac\x81nd a non-optimal\nsolution, then release the constraints to \xef\xac\x81nd an optimal solution. Two ways to constrain the problem\nis to freeze the POST2 plugin and the other is to freeze the DRO insertion state and epoch. When\nthe POST2 plugin is frozen, only the in-space trajectory is optimized. When the DRO is frozen,\nthe outbound trajectory has a consistent target and usually the remaining part of the mission from\nDRO insertion to EI does not change much. Since SNOPT is used as the optimizer, one must ensure\nthat the optimization variables are scaled properly. Most of the time, 1:1 scaling is used so that all\nvariables will be tweaked to \xef\xac\x81nd a feasible and optimal solution. Also, loosening the feasibility or\noptimality tolerances has been bene\xef\xac\x81cial in \xef\xac\x81nding an initial solution, and then tightening it back\nto get the real solution. Thus, optimizing a run requires quite a bit of user intervention, especially\nstopping and restarting a run that is drifting away from a solution. The total run time can vary from\naround 30 minutes to 2 hours. In comparison, doing this manually (running each tool separately)\nwill take several days in order to arrive at a reasonable solution.\nSLS Block 1B: EUS Con\xef\xac\x81guration While the SLS Block 1B con\xef\xac\x81guration is not as mature as\nthe Block 1, there is suf\xef\xac\x81cient data to start modeling the newest con\xef\xac\x81guration in the optimizer.\nThe Block 1B Core and Solid Rocket Boosters (SRBs) are identical to the Block 1 and the only\ndifference is the upper stage. The Block 1B is planned to use a larger 4-engine stage Exploration\nUpper Stage (EUS) that will perform a signi\xef\xac\x81cant portion of the ascent to the parking orbit as well\nas the TLI burn. This is in contrast to the Block 1 where the upper stage only performs a short burn\nto raise perigee to at least 100 nmi.\nIn modeling the Block 1B, the initial approach was similar to the Block 1; \xef\xac\x82y the Core and\nSRB\xe2\x80\x99s in POST and then model the EUS in Copernicus. This was possible because the EUS is at a\nsuf\xef\xac\x81cient altitude at its \xef\xac\x81rst ignition that atmospheric effects are negligible. Even though the EUS\nis only approaching the PDR level, parser plugins in Copernicus were required to adequately model\nthe propellant boiloff and total fuel consumption. Another challenge was calculating the Flight\n\n13\n\nFigure 8: Plugin List for the SLS Block 1B\n\nPropellant Reserve (FPR), which is typically calculated as a percentage of mission ideal delta-V for\npreliminary analysis. All of this was accomplished through the use of the parser plugins and linking\nthose plugins through the Copernicus GUI. An example of this can be seen in Figure 8 with the\nPOST2 plugin highlighted to show the inputs to POST and outputs back to Copernicus. To date,\nonly a handful of point cases have been produced to show that the Block 1B can also be optimized\nutilizing the POST-Copernicus combo.\nAfter the preliminary setup, an initial trajectory for a DRO type mission took approximately 5\nhours to converge with a signi\xef\xac\x81cant amount of user intervention required. At times, the gradients can\nbe very \xef\xac\x82at and the problem may go beyond the vicinity of the local optimal so the analyst must push\nit back closer to a feasible solution. This can either done mathematically or visually depending on\nwhat constraints are being violated. For example, time and mass continuity can typically be \xef\xac\x81xed\nmathematically, but states are easier to match up by using the Copernicus GUI and adjusting the\nmaneuvers manually until the solution is close.\nThe launch date was then moved 1 day later and the solution converged in just over an hour\nwith only limited user intervention. Both trajectories met all constraints and were stated as optimal\nby SNOPT. One downside to this optimization and similar to what was seen with the Block 1\ntrajectories was the inability to fully optimize the launch time of day. To work around this, the\nPOST plugin was initially frozen and all other segments were optimized to include the launch time\nof day. Once that converged to a solution, the POST2 plugin was reactivated and the launch time\nwas frozen to optimize from liftoff to Earth entry interface.\nFuture work on the Block 1B includes a full weekly launch period and daily launch window\n\n14\n\nanalysis for EM-2 and trading running POST open-loop vs closed-loop in the optimization. The\ndaily launch window analysis will determine if the launch time was truly optimal or if the launch\ntime would need to be shifted to take advantage of more better Earth-Moon alignment.\nUsing the ETE Isight Optimizer\nThrough the course of setting up a new tool it always takes some time to work out the best set\nof optimization algorithms, processes and other problem speci\xef\xac\x81c characteristics to achieve convergence. To that end, each phase of the ETE Isight Optimizer had independent optimization algorithms. For the ascent problem while POST2 offers internal optimizers, the Large Scale Generalized Reduced Gradient (LSGRG) optimizer within Isight was selected due to its rapid convergence to the optimal MECO state. For the on-orbit phase the internal Sparse Nonlinear OPTimizer\n(SNOPT)12 was used to minimize the amount of TLI propellant required. For the entry phase, the\ninternal POST2 Projected Gradient Method (PGM) optimizer was used to converge on a landing\nlocation. At this point the entry simulation does not feedback into the global optimization problem, so Copernicus fed data to Isight for the overall optimization loop directly to minimize the\ntotal propellant. For the overall optimization problem two different optimizers were employed: the\nModi\xef\xac\x81ed Method of Feasible Dimensions (MMFD)14 and the Mixed Integer Sequential Quadratic\nProgramming (MISQP)15 optimizer.\nThe ETE Isight Optimizer process is designed to be easily modi\xef\xac\x81ed to handle changing program\nrequirements and trade studies during design cycles. One of the key aspects of this process was for\nit to be automatic, as the hallmark of an end-to-end sim should make it easier to use. In order to\ndo this, it was necessary to use previous Copernicus solutions as seeds for the next iteration. While\nCopernicus has global search capabilities, an on-orbit problem should have an initial guess in the\nvicinity of the desired local extrema, as gradient or quadratic based methods hone in on these local\npoints. The branching capability inherent to Isight was useful in making this possible.\nCONCLUSION\nAn end-to-end optimization capability combining simulations designed to run independently has\nbeen demonstrated. Concurrent optimization with a large number of independent variables and\nconstraints can achieve convergence when the optimization problem is well de\xef\xac\x81ned and an initial\nguess is in the vicinity of the optimal. The biggest challenge for these large optimization problems\nis establishing good initial guesses; to that end a process for building initial guesses is beginning\nto form for the problems described. Future analyses will continue to explore the capability of an\nend-to-end tool as well as an expansion of the problem to include other phases of \xef\xac\x82ight.\nREFERENCES\n[1] J. Williams, Copernicus Version 4.2 User Guide. NASA Johnson Space Center, July 2015. JETS-JE2315-AFGNC-DOC-0052.\n[2] S. Striepe, Program to Optimize Simulated Trajectories (POST2), Vol. 2: Utiilization Manual, Ver 3.0.\nNESC, NASA Langley Research Center, May 2014.\n[3] J. Williams, \xe2\x80\x9cA New Plugin Architecture for the Copernicus Spacecraft Trajectory Optimization Program,\xe2\x80\x9d AAS/AIAA Astrodynamics Specialist Conference, August 2015. AAS 15-606.\n[4] C. Hargraves and S. Paris, \xe2\x80\x9cDirect Trajectory Optimization Using Nonlinear Programming and Collocation,\xe2\x80\x9d AIAA Journal of Guidance, Control, and Dynamics, Vol. 10, No. 4, 1987, pp. 338 \xe2\x80\x93 342.\n[5] Simulation and Optimization of Rocket Trajectories, Version 9.0. Houston, TX: Lockheed Engineering\nand Sciences Company, 2008. Contract NAS 9-17900.\n\n15\n\n[6] J. Sims, P. Finlayson, E. Rinderle, M. Vavrina, and T. Kowalkowski, \xe2\x80\x9cImplementation of a Low-Thrust\nTrajectory Optimization Algorithm for Preliminary Design,\xe2\x80\x9d AAS/AIAA Astrodynamics Specialist Conference, August 2006. AIAA 2006-6746.\n[7] J. Williams, J. S. Senent, and D. E. Lee., \xe2\x80\x9cRecent Improvements to the Copernicus Trajectory Design\nand Optimization System,\xe2\x80\x9d Advances in the Astronautical Sciences, Vol. 143, January 2012. AAS 12236.\n[8] J. P. Gutkowski, T. F. Dawn, and R. M. Jedrey, \xe2\x80\x9cTrajectory Design Analysis over the Lunar Nodal\nCycle for the Multi-Purpose Crew Vehicle (MPCV) Exploration Mission 2 (EM-2),\xe2\x80\x9d Advances in the\nAstronautical Sciences: Guidance, Navigation and Control, Vol. 151, 2014. AAS 14-096.\n[9] J. Williams and G. L. Condon, \xe2\x80\x9cContingency Trajectory Planning for the Asteroid Redirect Crewed\nMission,\xe2\x80\x9d AIAA SpaceOps 2014, May 2014. AIAA 2014-1697.\n[10] C. Ocampo, \xe2\x80\x9cAn Architecture for a Generalized Trajectory Design and Optimization System,\xe2\x80\x9d Proceedings of the Conference: Libration Point Orbits and Applications (G. G\xc2\xb4 mez, M. W. Lo, and J. J.\no\nMasdemont, eds.), World Scienti\xef\xac\x81c Publishing Company, June 2003, pp. 529\xe2\x80\x93572. Aiguablava, Spain.\n[11] The JSON Data Interchange Format. ECMA International, October 2013.\n[12] P. E. Gill, W. Murray, and M. A. Saunders, \xe2\x80\x9cSNOPT: An SQP Algorithm for Large-Scaled Constrained\nOptimization,\xe2\x80\x9d SIAM Review, Society for Industrial and Applied Mathematics, Vol. 47, No. 1, 2005,\npp. 91\xe2\x80\x93131.\n[13] Isight 5.0. Providence, RI: Dassault Syst` mes Simulia Corp., 2014. Release 5.9-1.\ne\n[14] G. N. Vanderplaats, \xe2\x80\x9cAn Ef\xef\xac\x81cient Feasible Directions Algorithm for Design Synthesis,\xe2\x80\x9d AIAA Journal,\nVol. 22, No. 11, 1984, pp. 1633\xe2\x80\x931640.\n[15] O. Exler, T. Lehmann, and K. Schittkowski, \xe2\x80\x9cA Comparative Study of SQP-Type Algorithms for Nonlinear and Nonconvex Mixed-Integer Optimization,\xe2\x80\x9d Mathematical Programming Computation, Vol. 4,\nNo. 4, 2012, pp. 383\xe2\x80\x93412.\n\n16\n\n'