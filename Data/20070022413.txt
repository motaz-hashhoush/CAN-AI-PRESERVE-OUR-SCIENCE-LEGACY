b'JTRS/SCA AND CUSTOM/SDR WAVEFORM COMPARISION\nDaniel R. Oldham Ph.D.\nMaximilian C. Scardelletti\nNASA Glenn Research Center\nBrookpark, OH 44135\nSystem (JTRS) provides the Software Communication\nArchitecture (SCA) as a software specification on an\nSDR development system.\n\nABSTRACT\nThis paper compares two waveform implementations\ngenerating the same RF signal using the same SDR\ndevelopment system. Both waveforms implement a\nsatellite modem using QPSK modulation at 1M BPS data\nrates with one half rate convolutional encoding. Both\nwaveforms are partitioned the same across the general\npurpose processor (GPP) and the field programmable\ngate array (FPGA). Both waveforms implement the same\nequivalent set of radio functions on the GPP and FPGA.\nThe GPP implements the majority of the radio functions\nand the FPGA implements the final digital RF modulator\nstage. One waveform is implemented directly on the SDR\ndevelopment system and the second waveform is\nimplemented using the JTRS/SCA model. This paper\ncontrasts the amount of resources to implement both\nwaveforms and demonstrates the importance of\nwaveform partitioning across the SDR development\nsystem.\n\nThis paper compares two waveform implementations\ngenerating the same RF signal using the same SDR\ndevelopment system. One waveform is implemented\ndirectly on the SDR development system and the second\nwaveform is implemented using the JTRS/SCA model.\nThe waveforms are partitioned the same across the GPPs\nand FPGAs devices. The majority of the waveform\nimplementation is on the GPPs with only the final digital\nRF modulator stage implemented on the FPGA. Both\nwaveforms implement an equivalent set of radio\nfunctions on the GPPs and use an equivalent FPGA bit\nfile. This paper contrasts the amount of resources to\nimplement both waveforms and demonstrates the\nimportance of waveform partitioning across the SDR\ndevelopment system.\n.\nSDR DEVELOPMENT SYSTEM\n\nINTRODUCTION\nThe SDR development system for this waveform\nimplementation comparison is from Spectrum Signal\nProcessing and is the SDR-3000. [2] The SDR-3000\nTransceiver is broken into two parts: the base band\nprocessing and the channelizer subsystem. The base\nband processing subsystem (PRO3500 module) has two\nPPC7410 and one PPC405 processors running at 250\nMHZ and 200 MHZ respectively. The channelizer is\nbroken into two parts: the input module (TM3150\nmodule) and the IF processing engine (PRO3100\nmodule). The input module has four ADCs and DACs\nrunning at 80 MHZ. The IF processing engine has one\nPPC405 processor running at 200 MHZ and four Xilinx\nVirtex II FPGAs running at 100 MHZ. The two\nPPC7410 processors have 128M bytes of RAM and the\ntwo PPC405 processors have 64M bytes of RAM. The\nSDR-3000 uses flexFabric interfaces for high speed data\ntransfers between the hardware nodes. There are external\ndigital interfaces on the PRO3100 module and Ethernet\nand RS232 ports on both boards. For the SDR-3000 the\ntheoretical full duplex communication rate over each\nlink is defined at 320M BPS. Spectrum Signal\nProcessing provides a communication library\n(quicComm) as a standard interface to the hardware\ndevices.\n\nNASA requires space radios to meet communication\nneeds for future missions. NASA normally contracts\nwith radio vendors to build and supply space radios\nbased on mission requirements. While this method\nworks for NASA, there is also a high cost with each\nradio development and the radio\xe2\x80\x99s architecture\nintellectual property is retained with the radio vendor.\nNASA needs to accumulate space radio technology to\nallow for reuse, lower cost and provide for reliable\noperations in the development of future space based\nradio systems.\nNASA is considering Software Define Radios (SDR) as\na possible solution for future communication systems.\nThere are a number of SDR development systems\ncurrently available for waveform development and\ntesting. The SDR development systems provide many\nfeatures to increase portability of waveforms by using\nstandard component interfaces, common operating\nsystems (OS) and common board support packages\n(BSP). Waveforms can be developed directly on these\nSDR development systems and some support the Joint\nTactical Radio System, Software Communication\nArchitecture (JTRS/SCA) [1]. The Joint Tactical Radio\n\n-1-\n\nmodulator stage are digital RF vectors to feed the DAC\nto create a 70 MHZ IF. The 70 MHZ IF is then available\nto several fixed satellite modems to verify correct\nwaveform operations.\n\nThe SDR3000 architecture provides many possible\nwaveform implementation opportunities. The flexFabric\ninterfaces allow data routing between any of the\nhardware devices. Spectrum Signal Processing provides\na board support package (BSP) and the processors use\nVxWorks for the real time operating system (RTOS).\nThe two PPC7410s and four Xilinx FPGAs provide the\nnormal digital RF signal processing paths for the\nSDR3000 development system. The PPC405 processors\nprovide external Ethernet connections and control paths\nfor the hardware devices. The SDR3000 development\nsystem includes a PC host running Windows 2000 OS\nwith the Tornado cross compiler for VxWorks and\nXilinx ISE software for programming the FPGA devices.\n\nOPERATING ENVIROMENT\nThe minimum operating environment (OE) for the\nSDR3000 development system is VxWorks RTOS and\nSpectrum Signal Processing\xe2\x80\x99s quicComm library. The\nCustom/SDR waveform is implemented directly on the\nminimum OE. The JTRS/SCA waveform OE requires\nthe addition of the Harris Core Framework and SCA\nCORBA software. The Harris Core Framework and SCA\nsoftware both sit on top of the RTOS and BSP for each\nprocessor. The footprint sizes for the files for Harris\nCore Framework and SCA software are shown in the\ntables below. The output file names are shown for only\nthe PRO3100 PPC405 processor and the configuration\nfiles are the same for the other processors. All tables\nshow file sizes in bytes.\n\nWAVEFORM PARTITIONING\nThe JTRS/SCA model requires partitioning the majority\nof the waveform onto the GPP to allow for software\nimplementations of waveforms. For this paper the QPSK\nwaveform data source, framing and encoding stages are\nall implemented on the GPP (PPC7410) and only the\nfinal modulator stage is implemented on the Xilinx\nFPGA (Virtex II).\n\nTable 1 Harris Core Framework Footprint Sizes\nHarris Core Framework\ndmtkCFBase.out\ndmtkCosEventBase.out\ndmtkCosNamingBase.out\ndmtkDeviceManager.out\ndmtkDevice.out\ndmtkDomainProfile.out\ndmtkEventServices.out\ndmtkFileServices.out\ndmtkLogServiceBase.out\ndmtkUtility.out\nTotal bytes\n\nPRO3100 PPC405\n6,567,326\n935,688\n510,390\n2,912,030\n3,407,170\n3,211,660\n614,945\n901,411\n1,832,400\n1,401,437\n22,294,457\n\nTable 2 SCA Software Footprint Sizes\nSCA software\nsca_devicemanager.out\nsca_fabric_access_manager.out\nsca_fabric_channel.out\nsca_fpga_dev.out\nsca_load_sdks.out\nsca_partnum2target.out\nsca_ppc_dev.out\nsca_sdr3000_dev.out\nsca_sync_manager_dev.out\nTotal bytes\n\nFigure 1 QPSK Waveform Partitioning\nThe QPSK waveform is broken into four parts: the data\nsource, framing, encoding and the modulator stages. The\ndata source stage switches input data streams between\nidle, fixed, bit error rate sequences (PRBS), file or\nsocket based data. The framing stage is off or on using\nHDLC framing. The encoding stage includes turning on\nor off the scrambler, Differential Phase Shift Keying\n(DPSK), \xc2\xbd rate Convolutional encoding and the\nmodulator mapper functions. The modulator mapper\nfunction provides vectors to the modulator stage. The\nmodulator stage is QPSK modulation using 2M BPS\nsymbol rate or a 1M BPS data rate. The output of the\n\nPRO3100 PPC405\n2,912,030\n149,976\n1,540,400\n1,975,751\n5,925\n5,655\n1,805,549\n744,663\n2,341,779\n11,481,728\n\nThe footprint size for the OE for each of the processors\nis defined in the tables below. The sizes of the files vary\nslightly and depend on the configuration options selected\nfor each processor.\n\n2\n\nThe total OE footprint resources for all processors are\nshown in the table below.\n\nTable 3 OE Footprint Sizes PRO3100 PPC405\nSpectrum Signal SDR3000\nDynamic RAM bytes\nVxWorks OS\nQuicComm Library\nSub Total RTOS\nPercent RTOS to RAM\nSCA Software\nHarris Core Framework\nSub Total SCA\nPercent SCA OE to RAM\nTotal RTOS+SCA\n\nPRO3100 PPC405\n67,107,840\n1,840,105\n1,447,241\n3,287,346\n5%\n11,481,728\n22,294,457\n33,776,185\n50%\n37,063,531\n\nTable 7 Total OE Footprint Sizes for SDR3000\nSpectrum Signal SDR3000\nDynamic RAM\nVxWorks OS\nQuicComm Library\nSub Total RTOS\nPercent RTOS to RAM\nSCA Software\nHarris Core Framework\nSub Total SCA\nPercent SCA OE to RAM\nTotal RTOS+SCA\n\nTable 4 OE Footprint Sizes PRO3500 PPC405\nSpectrum Signal SDR3000\nDynamic RAM bytes\nVxWorks OS\nQuicComm Library\nSub Total RTOS\nPercent RTOS to RAM\nSCA Software\nHarris Core Framework\nSub Total SCA\nPercent SCA OE to RAM\nTotal RTOS+SCA\n\nPRO3500 PPC405\n67,107,840\n1,877,699\n1,292,759\n3,170,458\n5%\n10,738,249\n22,294,457\n33,032,706\n49%\n36,203,164\n\nWAVEFORM RESOURCES\nThe JTRS/SCA waveform is broken into seven\nexecutable images defined in the table below.\nTable 8 JTRS/SCA QPSK Waveform Footprint Sizes\nQPSK Waveform\nstrsAppController.out\nstrsCommon.out\nstrsDataGenerator.out\nstrsFilterUpConv.out\nstrsEncoder.out\nstrsFramer.out\nstrsModMapper.out\nTotal bytes\n\nTable 5 OE Footprint Sizes PRO3500 PPC7410-A\nSpectrum Signal SDR3000\nDynamic RAM bytes\nVxWorks OS\nQuicComm Library\nSub Total RTOS\nPercent RTOS to RAM\nSCA Software\nHarris Core Framework\nSub Total SCA\nPercent SCA OE to RAM\nTotal RTOS+SCA\n\nPRO3500 PPC7410-A\n134,215,680\n1,747,205\n1,384,515\n3,131,720\n2%\n7,363,541\n22,703,137\n30,066,678\n22%\n33,198,398\n\nJTRS/SCA\n1,675,772\n794,404\n701,965\n1,080,384\n772,947\n701,233\n929,569\n6,656,274\n\nA number of XML files are used to configure the\nsoftware parameters for the JTRS/SCA waveform. The\nXML files are defined in the table below.\nTable 9 JTRS/SCA XML Waveform Footprint Sizes\nQPSK Waveform\nstrs405QC.spd.xml\nstrs405TM13300.spd.xml\nstrs7410QC.spd.xml\nstrsAppController.prf.xml\nstrsAppController.scd.xml\nstrsAppController.spd.xml\nstrsCommon_405.spd.xml\nstrsCommon_604.spd.xml\nstrsDataGenerator.scd.xml\nstrsDataGenerator.spd.xml\nstrsEncoder.scd.xml\nstrsEncoder.spd.xml\nstrsFilterUpConv.scd.xml\nstrsFilterUpConv.spd.xml\nstrsFramer.scd.xml\nstrsFramer.spd.xml\nstrsModMapper.scd.xml\nstrsModMapper.spd.xml\n\nTable 6 OE Footprint Sizes PRO3500 PPC7410-B\nSpectrum Signal SDR3000\nDynamic RAM bytes\nVxWorks OS\nQuicComm Library\nSub Total RTOS\nPercent RTOS to RAM\nSCA Software\nHarris Core Framework\nSub Total SCA\nPercent SCA OE to RAM\nTotal RTOS+SCA\n\nTotal Bytes\n402,647,040\n7,212,214\n5,509,030\n12,721,244\n3%\n36,947,059\n89,995,188\n126,942,247\n32%\n139,663,491\n\nPRO3500 PCC7410-B\n134,215,680\n1,747,205\n1,384,515\n3,131,720\n2%\n7,363,541\n22,703,137\n30,066,678\n22%\n33,198,398\n\n3\n\nJTRS/SCA\n477\n491\n483\n11,902\n1,178\n1,672\n484\n484\n1,072\n1,445\n1,185\n1,423\n1,211\n1,415\n1,185\n1,418\n1,185\n1,433\n\nstrsTelemetryWFT.sad.xml\nstrsWFTXFPGA.spd.xml\nTotal bytes\n\n13,113\n2,014\n45,270\n\nMAXIMUM PERFORMANCE\nThe performance of the PPC7410 processor at 250 MHZ\nis measured to determine the maximum possible data\nrate. The maximum data rate depends on the size of the\ntransfer buffer between the PPC7410 and the FPGA. The\nsmallest transfer size is 8 bytes and is constrained by the\nflexFabric interface. The largest transfer size is 16K\nbytes and is constrained by the DMA on the SDR3000.\nThe metric is to measure the control loop data rate on the\nprocessor for different size buffers with no output data to\nthe flexFabric interface. The results are shown in the\ntable below.\n\nThe Custom/SDR waveform uses one executable image\nand is shown in the comparison table below. The\nwaveforms use the same FPGA bit file with one small\nchange to the JTRS/SCA version. The difference is to\nhandle a change in the data packet header when the\nJTRS/SCA OE is loaded onto the SDR development\nsystem. In this case the digital logic and the interfaces\nare the same for both FPGA bit files.\nTable 10 Comparison of Waveform Footprint Sizes\nWaveform resources bytes\nTotal Xilinx FPGA bit file\nTotal XML configuration\nTotal GPP executable size\n\nJTRS/SCA\n2,733,252\n45,270\n6,656,274\n\nTable 12 Maximum PPC7410 Data Rates BPS\n\nCustom/SDR\n2,733,252\n0\n509,380\n\nBuffer Size in Bytes\n8\n16\n32\n64\n128\n256\n512\n1,024\n2,048\n4,096\n8,192\n16,384\n\nOPERATIONS\nBoth QPSK waveforms are loaded onto the SDR\ndevelopment system; started; stopped and unloaded. The\nJTRS/SCA model requires loading the Harris Core\nFramework and SCA software before the SCA\nwaveform is loaded. The table below compares the\nJTRS/SCA to Custom/SDR implementations.\nTable 11 Comparison of SCA to SDR Operations\nOperation\nStart\nName\nService\n\nStart\nDevice\nManagers\nInstall\nWaveform\n\nStart/Stop\nWaveform\n\nUnload\nWaveform\n\nJTRS/SCA\nUses unique name\nIDs for each object\nin the system and\nXML\nfiles\nfor\nconfiguration.\nStart SCA device\nmanager on each\nprocessor.\nOpen\nHarris\nDomain Manager\nMonitor\nsoftware\nand use Application\nFactory to install\nwaveform.\nUse menu from\nApplication Factory\nto start and stop the\nwaveform.\nUse\nApplication\nFactory to unload\nwaveform.\n\nAverage Data Rate in BPS\n\nCustom/SDR\nNone, uses static\ndata tables for RF\nequipment, fixed IP\naddresses\nand\nhardware resources.\nStart SDR device\nmanager on each\nprocessor.\nWaveform is built\ninto SDR software\nand included with\nSDR\ndevice\nmanager.\n\n24,031,568\n15,782,160\n21,733,088\n27,407,744\n31,108,096\n33,878,528\n35,005,440\n36,057,088\n36,147,200\n36,638,720\n36,298,752\n36,470,784\n\nOn average, the performance of the PPC7410 at 250\nMHZ for all buffer sizes is within the real time\nrequirements for the 1M BPS QPSK waveform data rate.\nThe maximum data rate for the FPGA is determined by\nthe maximum clock rate for the device. The FPGA is\nclocked at 100 MHZ and therefore has about three times\nthe maximum performance of the PPC7410 processors.\nCONCLUSION\nTwo equivalent waveform implementations have been\ncharacterized using the Custom/SDR and the JTRS/SCA\nmodels. The implementations use the same SDR\ndevelopment system with the same hardware\npartitioning, and generated the same RF signal. Both\nwaveform configurations use the same RTOS and BSP.\nThe average RTOS and BSP footprint is 3% of available\nmemory on the SDR development system. The\nJTRS/SCA model uses CORBA and Harris Core\nFramework on top of the RTOS and BSP. The average\nJTRS/SCA operating environment footprint is 32% of\navailable memory. The JTRS/SCA OE footprint is about\nten times larger than the Custom/SDR RTOS\ndevelopment footprint. The waveform application\n\nUse\nexternal\ncommand interface\nto start and stop the\nwaveform.\nNone, waveforms\nare part of SDR\ndevice\nmanager\nsoftware.\n\n4\n\nfootprint for the custom/SDR model is 495K bytes and\nthe JTRS/SCA model is 6,500K bytes. JTRS/SCA\nwaveforms must conform to the specifications so the\nmajority of the waveform partitioning is onto the GPP.\nThe waveform application for the JTRS/SCA model is\nabout 12 times larger than the optimized custom/SDR\nversion. As a result, the waveform performance limit is\nreached at 1M BPS on the GPP for the SDR\ndevelopment system and achieving higher levels of\nperformance requires partitioning the waveform onto the\nFPGA devices.\nREFERENCES\n[1] Military & Aerospace Electronics by John McHale,\nDecember 2004.\n[2] Spectrum Signal Processing Product Specifications,\nSDR-3000 Series Software Defined Radio Transceiver\nPlatform, 2006.\nBIOGRAPHY\nDr. Daniel R. Oldham is a computer engineer at NASA\nGlenn Research Center working in the Satellite\nNetworks and Architectures Branch. Dr. Oldham is also\nan adjunct professor for Digital Logic Design at Case\nWestern Reserve University. Dr. Oldham received his\nM.S. and Ph.D. degrees in Computer Engineering and\nScience from Case Western Reserve University,\nCleveland, Ohio, in 1993 and 2001, respectively. Dr.\nOldham received his B.S. degree in Computer Science\nand Engineering from the University of Toledo, Ohio, in\n1984. From 1984 to 1998 he was a research and design\nengineer for Rockwell Automation and developed a\nnumber of real time control products (PLC-5, Control\nLogix). From 1973 to 1979 he served as an electronic\ntechnician, in the U.S. Navy Fleet Ballistic Missile\nSubmarine service.\n\n5\n\n'