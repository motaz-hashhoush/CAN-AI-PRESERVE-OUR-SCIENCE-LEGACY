b'1991 NASA/ASEE SUMMER FACULlY FELLOWSHIP PROGRAM\n\nJOHNF.KENNEDYSPACECENTER\nUNIVERSI1Y OF CENTRAL FLORIDA\n\nKATE\'S MODEL VERIFICATION TOOLS\n\nPREPARED BY:\n\nSteve Morgan, Ph.D., P.E.\n\nACADEMIC RANK:\n\nAssociate Professor\n\nUNIVERSITY AND DEPARTMENT:\n\nBaylor University\nDepartment of Engineering and\nComputer Science\n\nNASAjKSC\n\nDIVISION:\n\nEngineering Development Laboratories\n\nBRANCH:\n\nArtificial Intelligence Laboratory\n\nNASA COLLEAGUE:\n\nCarrie Parrish, Ph.D.\n\nDATE:\n\nAugust 9, 1991\n\nCONTRACT NUMBER:\n\nUniversity of Central Florida\nNASA-NGT-60002 Supplement: 6\n\n261\n\nAcknowleqgements,\n,\n\',\',\n;\n\n"\n\n"\n\n\'.\\\n\nThank you, Carrie Parrish, for helping define and execute the Model Veri ficationTools project this summer. Than\'ks;espeC1allv to fou.r of KATE\'s modelers,\nCharlie, Goodrich, Bob Merchant, Steve Beltzi;an~ Scott: Budzowski, for tell1nQ\nhow modelstwolve, wha,ttaol$ they use, C!lnd \\ti!haill.,t.oolis. tihey r1eed.\n1il:lC~nkti\nto\nNASA\'s Mark Beymer and\' li)ennf$\' Arms,t.rongt, Q/ilGt~ to,UCF\'s R$llY Hosler fc:>1" mQk1in9 t.he\nNASA/ASEE Summer Faculty Fel10wst1ip\' Pr0g,I"\'Om, po,sstoile.\n\nKennedy Space Center\'s I(now.ledge-i:>as.ed Al,ltonomous Test Engineer (KATE) is ~apa\xc2\xad\nble of monit.oring electromechanicall sys:tems\', ~,lagnosing. tl;leir errors, and even\nrepQiring, thenl\' wheR,th.ey Cilrasl:rc. A $4\'~ve\'f o,f KATE~s:. deve,loper/modelefs\' revealed\nthat the\'y weF"e already usj;ng;a SG>ph:ts,t1coted\' set off p,rQllh,101\'.1vity e,..!\'lgncing\ntools. They did request five, more, however, Q!Fld\' \\t:loisemak,e, up the body 0:1\' this\nreport.\nInside is the tested code of their new: 1) transfer function curve\nfitter\' and 2) ForVan--L:Lsp tr"Qn\xc2\xb7$}:ator\'. ~) 10 Q1d\' Hi syntq~ f;hec~ing their\nmodeled dev,1ce fromes, thr"ee edst1ngstrU\'ctural cOr\\isistency cheqkefs Qr~ also\ndocumented here.\n4) An automa,ted procedure: for coUbraiting. knowledge bose\nadmittances is destgned\' here to prot,eot KATE\'s hordware mock ups from inadvertent\nhand valve tWiddl:ling. 5) And tt:lr"eealternat,1ves ore, desoribed, for tile "pseudo\nobject," a programming patch thq,t \xc2\xa2urr-ently oppr1$e~ K~TE\'$ m()de).e~ deVice,,, of\ntheir operational environments.\nSlJmmary\nWhen KATE\'s modelers revealed their need of five new productiVity aids this\nsummer, I set about the task of creqUng them. They now have 0 new lisp pro~ram\nthat fits straight. l1nes or exponentiQl curves to random time functions, and\nanother that translates transfer functions written in Fortran into Lisp\'S stilted prefiX format. When I started to streamline their favorite syntax checker, I\ndiscovered that some modelers alrea~y ha~ w.hat others needed, so I ended up\ndocumenting three existing ,checkers insteQ~. Ol,liclect ~y a modeler whO$e hardware\nmocklJP keeps changing, I designed a cont.rol. prQcedure by which KATE alJtomatical.",\nl.y recal1brates ad.mittances in hts knowledge bQ~e. An essential programming\npatch that the model.ers call a "psel,ldo object" hasn\'t fit neQtl.y into either\nKATE\'s knowledge bases or her shell. Three alternatives are c:>ffered here.\nSolving modeled fluid dynamics equQtions off-line could provide KATE the necessary fl.ow time functions when she needs them. If these complicated equations\nmust be reconfigured and solved on-line, a signQl processing analog computer\nmodel offers a fast way of doing it. Mo~el1ng KATE\'s devices as Thevenin\'s\nequivalent two-port networks could enable each object to reveal its remote\nenvironment (much as a transformer reflects its load resistance to its input)\nwithout the need of extra pseudo objects or equation solVing. KATE is about to\nget a much needed pass through the Software Developmen~ life Cycle as part of\nher forthcoming translation to the C languQge.\n\nTable of Contents\n("\n!\n\nI\n\nINTRODUCTION\n\n1 .1\n1.2\n\nKATE\nKATE\'S Model Verificotion Tools\n\nII\n\nBUILDING KATE\'S MODELS\n\n2.1\n2.2\n2.3\n\nKATE\'s Current Applicotions\nThe Model Building Process\nModel Builders\' Problems\n\nIII\n\nKATE\'S MODEL VERIFICATION TOOLS\n\n3.1\n3.2\n3.3\n3.4\n3.5\n3.6\n\nModel Verification Perspective\nLeast-Squores Curve Fitter\nFortran-to-Lisp Transfer Function Translator\nBetter Structural Consistency Checking\nAutomated Admittance Measurement\nBetter Pseudo Objects\n\nIV\n\nRESULTS AND DISCUSSION\n\n4.1\n4.2\n\nMore Productive Modeling\nKATE\'s History and Future\n\nV\n\nCONCLUSION\n\nAPPENDIX A\n\nMODEL VERIFICATION TOOLS SURVEY\n\nAPPENDIX B\n\nLEAST-SQUARES CURVE FITTER\n\nAPPENDIX C\n\nFORTRAN-TO-LISP TRANSFER FUNCTION TRANSLATOR\n\nAPPENDIX D\n\nADMITTANCE DISCOVERY TEST PROCEDURE\n\nAPPENDIX E\n\nALO-H20 ADMITTANCE DEFINITIONS\n\nAPPENDIX F\n\nTWO-PORT PSEUDO OBJECT ALTERNATIVE CODING SUGGESTION\n\nREFERENCES\n\n263\n\nlIST OF IllUSTRATIONS\nFigure\n1-1\n2-1\n\n3-1\n\n3-2\n3-3\n3-\'4\n3-5\n\n3-6\n3-7\n3-8\n\n3-9\n3-111J\n,4-1\n\nTitle\n\nKATE\'s Overview Sc:reen (LOX Model.)\nKATE\'s Model BuHdlng \'Process\':arsCh\'ema\'t,ic \'Ohdt\xc2\xbb foul t tree\nCons istencyCh.ecM.,rig.F11eH1el"\'a r.ehYiChart\nConsistency Checkers\' Print.outs: a) Mondo\'s, b)Check-KB\'s\nThe AlO-H20 Model\'s Admittances\nThe Si",plified Slow Fill Model\nFour Flow loops in AlO-H20 During Slow Fill\nAn Analog Computer Designed to Solve ALO-H20\'s Equations\nThevenin\'sEquivalent Of A Two-Port Device\nThevenin\'s EqulvalentOfAP1peTe~\nTwo-Por.t ModellngAn ALO-\'H20 \'Pressure\nNo Infinite Recursions in MUlt1ple loops\nThe Software Development L1feCycle\nLIST OF TABLES\n\nTable\n3-1\n3-2\n\nT1~le\n\nWhat KATE\'s Consistency Checkers Test\nErrors Detected By CHECK-All-FRAMES\n\n264\n\nI\n\nINTRODUCTION\n1.1\n\nKATE\n\nKe,nnedy Spoce Center\'s Knowledge-bosed Autonomous Test Engineer (KATE) mimics\nhumon engineers os they test ond repoir electromechon1cal systems. Work1ng 1n\nKSC\'s Artificiol Intelligence Laborotory, KATE\'s modelers painstakingly create\nsoftwore simulotions of the hordwore thot KATE monitors. (KATE\'s models typicolly\'toke on on oppeoronce like thot shown in Figure 1-1.) KATE loter delivers\nthe same inputs to this software model thot the hordware sees, ond she compores\ntheir outputs.\nShowing complete confidence in her software, she bIomes the\nhardware for any deviations in modeled and actual outputs. Her diognoser then\nexperimentolly . foils selected software "devices" in on effort to dup11cote the\ndeviant hardware outputs. Thus KATE is able to isolate the one failed device\nthat 1s responsible for the errors. She may then odv1se her user to bring up a\nredundant device, or she may moke the repair herself, if the user hos seen f1t\nto give her thot much control ohead of time. Lotely, users hove not seen fit to\ngive her that much control in her only product10napplicotion, the shuttle\'s\nliquid oxygen tanking operotion. In foct, firing room personnel ore unwilling\nto hear KATE\'s odvice when real problems ~rise. NASA is conservative.\nSystems\xc2\xb7\nmust log hundreds of hours of trouble-free service or show some sort of quality\nassuronce pedigree before being ploced in a critical position.\nKATE is not\nthere yet.\n1.2\n\nKATE\'S MODEL VERIFICATION TOOLS\n\nLike 011 Knowledge Base Engineers, KATE\'s model bUilders have difficulty\nmixing human-like reasoning with computer speed and thoroughness in their soft,.\nwore product. My Job this summer has been make those modelers more prOductive,\nsothot KATE\'s models may go forth and multiply throughout KSC. I become intimately ocquainted with KATE by observing her mOdelers and streamlin1ng their\ntools.\nI coded two new tools for them from scratch in Symbol1cs ZMAC$ lisp.\nAlso intending to enhance the code of on eXisting syntox checker, I ended up\ndocumenting three modelers\' favorite checkers for use by all. I also designed\nan automated calibration procedure for one of KATE\'s knowledge bases, and I\noffered three deSign olternatives to KATE\'s philosophically awkward "pseudo\nobject."\nThough not immediately executable, these designs helped train me for\nnext summer\'s project, and they may well provide proposal content for some\nproductivity enhancing projects this fall.\n\n265\n\nKA TE ALD System\n\n"essage s\nSchea.tic\n\nControl\nSPFR\n\nSlow Fill\n\nTree\nFO Browser\n\n, \xe2\x80\xa2\xe2\x80\xa2 \' ..4\'\n\nOie9noser\n\nSiaul.te local\nDia9noser 0"\n\nPlot\n\n"-I"\n\n~,.~\n\n,.,n ....\n\n..\nFigure 1-1.\n\nKATE\'s Overview Screen (AlO Model).\n\nII\nBUILDING KATE\'S MODELS\n2.1\n\nKATE\'S CURRENT APPLICATIONS\n\nKATE\'s most visible application today is LOX, her shuttle liquid oxygen\ntanking advisor. (KATE does not actually advise firing room personnel, but she\nis tested as if she were advising them on every shuttle launch.) With 10~0 to\n1~00\ndevice frames in her knowledge base and 50- to 75-thousand lines of Lisp\ncod~ in her shell, KATE\'s LOX model is as complicated as her models will\nlikely\never get. Figure 1-1 shows LOX (actually this is a schematic overview of another very similar KATE model) to be essentially a cryogenic fluid dynamics model,\nwith a large number of sensors and actuators. Because the oxygen tanking equipment is critical to any launch, failed devices in it can be replaced quickly by\nbringing up standby pumps, valves, and sensors along redundant pathways.\nA variety of KATE\'s earlier feasibility demonstrations can be found around\nKSC.\nAn air purge system with redundant air compressors and power supplies\nintroduced the new-born KATE to KSC about eight years ago. A mockup of the\nSpace Station\'s Environmental Control System (fully equipped with heaters,\nblowers, and temperature sensors) is attached to KATE\'s ECS model.\nA Launch\nProcessing System mockup (called "LPS" and "The Little Red Wagon," because it is\nmounted on a heavy red cart) is attached toa TI Lisp machine version of KATE.\nKATE has been translated into ADA, Common Lisp for the IBM PC, a generic version\nfor quickly prototyping new models, and it will soon be translated into C for\nthe IBM PC (more on KATE\'s future later).\nKATE\'s Autonomous Launch Operations (ALO) application suggests her intended\nfuture.\nCreated to supervise unmanned Air Force launches, the ALO model features goal-directed control and unsupervised repair. A hardware mockup at KSC\'s\nLaunch Equipment Test Facility has demonstrated KATE\'s ability to complete all\n12 LOX tanking procedure steps typically pursued by shuttle firing room personnel, even when devices foil. Water in the hardware mockup will be replaced with\nliqUid nitrogen in a forthcoming demonstration. (Liquid oxygen is not used for\nobvious safety reasons.) The ALO-H20 model now includes some 472 frames, and\nthe number grows With each requirement for greater modeling precision.\n2.2\n\nTHE MODEL BUILDING PROCESS\n\nDeveloping a new application consists of building a software model of the\nhardware that KATE is to monitor, and then improving it until it works.\nThe\nmodel builder usually gets started by stUdying a ten-pound stack of printed\nschematic diagrams (see Figure 2-1). He draws fault trees of the devices he\nsees there to appreciate the impact of every device failure upon the whole\nmodel. Finally he types a Lisp frame into the Symbolics ZMACS editor for every\'\ndevice that can fail, every input, and every measurement. The frames look like\ndatabase records, in which named slots describe every aspect of the part and its\nconnections to other parts [1]. Coding a device transfer function can be as\n\n267\n\nfuse2\n\nfusel\nQl\n\n+24v\n\nprimary\n\nselect\n\nsecon~ary\n\n02\ni,\n\n~~l)\n\nPRIMARY\n\nCOMMAND\n\n~:;-Ei-EO-L~., . \'.~-.\'~-\'R\n....\n\nFUSE I\n1\n\nt-\n\n......\nY\n\n-\n\n-\n\nI\n\nFtJSE2\\\n\n;\'\n\n\xc2\xa2l~~ED/1\n\n1 \\ ,., . "\',.,...,.s-w.....\nj,.,...,.I\',,\n\n/-\xc2\xb712N D\n\n\xc2\xb7-\xc2\xb7,IRE~ yl- \xc2\xb7, -.IvdJI\n\n\\t Q~~~I\n\n\'.;t"Zl,J-.-,\n\n: / /\n\nSECONDARY\nCOMMANPI-\n\nI\n\n"\\\n\n\'\n\nI\n\n\\\' "\n\n.,...\n\n.I\n\n\'12~D"\n\n-\n\n-\n\n---t......\nFigure 2-1.\n\nKATE\'s\n\n268\n\nmod~l\n\nbuilding process.\n\n. logic levels\nelectric current\nmechanical force\ngas flow\n\nf~"\n\nsimple as transcribing a pressure/flow curve off a printed pump specification or\nvery complicated indeed. Its original electronic designer may have drawn a\nhardware controller as a tangled feedback network of filters and amplifiers.\nTen years later, the KATE modeler is compelled to lisp-code the simplest possible transfer function for the controller, considered as a single line-replaceable unit.\nBefore KATE executes a model the first time, the modeler tries to remove\nframe errors that are obvious by inspection (white box testing) but would be\nvery hard to isolate during execution (black box testing). Automated structural\nconsistency checkers find or repair simple frame syntax errors (e.g., frame A\noutputs to frame B, but B does not input from A). They may also identify frames\nthat have not been coded yet. Subtle semantic errors (e.g., relays do not\naccept input from water pipes) generally are obvious in a visual inspection of\nKATE-generated schematics.\nWhen the frames all look pretty, verification testing begins. The first time\nKATE runs a new model, actual (hardware) measurements often deviate from modeled\nvalues, and KATE blames innocent hardware devices for errors in the model.\nKATE\'s diagnoser thus functions as a system-level model verification tester.\nTaking a closer look at the offending measurement, the modeler often finds a\nvariety of transfer function errors. He may have assumed the wrong time constant in an exponential decay. Perhaps he failed to consider the affect of\nullage (the air above the flUid) pressure that impedes flow into a tank. In his\nzeal to model very accurately, he may have modeled quantizing error that appeared on a prior launch data broadcast. (It has happened!)\nIn the latter\nstages of knowledge base development, subtle timing errors sometimes occupy the\nmodeler.\nFor example, KATE must guess when firing room personnel transition\nfrom stage to stage in the lOX filling procedure (e.g., nobody tells KATE when\nfast fill ceases and slow fill begins), and her ways of dealing with these\nambiguities can be obscure.\n2.3\n\nMODEL BUILDERS\' PROBLEMS\n\nKATE\'s developer/modelers face problems that range from clerical to very\nsophisticated.\n(See modelers\' testimonies in Appendix A.) Typing frames into\nthe LISP machine ZMACS editor is tedious, compared With using an interactivegraphics Computer-Aided Design terminal. It is difficult to write the equations\nof lines that approximate random time functions. It is just as difficult to\nreg ode Fortran transfer functions in LiSP Without a few errors, even for bilingual programmers. Thousand-frame knowledge bases often start out full of syntax\nerrors.\nThe structural consistency checkers used to find these errors never\nfind them all. Modelers.that use hardware mockups need to recal1brate admittances in their knowledge bases each time valves on the mockup change.\nWhen\ncomputing input pressure of a device, a modeler sometimes needs more information\nthan the device model can provide (e.g., upstream driving pressure and downstream back pressure in its external environment). That may lead him to create\na "pseudo Object," having no structural relationship With modeled devices and\nno relationship with generic objects in KATE\'s shell either (because it is\napplication-specific).\nKATE\'s modelers have invented "soft landing," which\n\n269\n\nwiggles\n\nall modeled measurements to ease the pain of errors that the modeler\ntolerable, and "external influence," which accounts for measurement\ntrends arising outside the declared model domain. With each shuttle\nlaunch\nKATE shows her developers a few new errors, and her design or code changes a\nlittle to accommodate an unforeseen operational cgndition.\ncons~ders\n\n270\n\nIII\nKATE\'S MODEL VERIFICATION TOOLS\n3.1\n\nMODEL VERIFICATION PERSPECTIVE\n\nSomeday, KATE\'s very graphical Knowledge Base Editor will make creating\nframes easy even for the novice end user. Like a CAD terminal, the editor\nprovides a library of device icons that can be picked and placed, moved and\ninterconnected without ever touching the keyboard. Most knowledge about a\ndevice will be supplied by the editor. If desired, the user can modify default\ntransfer functions, time delays,units, etc. at the keyboard via a databdse-like\nfill-in-the-blanks editor interface. KATE\'s Model Verification ~ools are that\npart of her Knowledge Bose Editor that helps find errors in completed knowledge\nbases.\nToday. KATE\'s Model Verification Tools already are u.sed to find errors in\ncompleted knowledge bose frames that are typed in manually using Symbolics\'\nZMACS editor. (See Appendix A for the details.) Structural consistency checkers find simple frame syntax errors. A family of interactive plotters clarify\ntroublesome deviations in actual and mOdeled time functions. KATE\'s overview,\nschematic, and fault tree graphic displays clarify fr-ame mismatch errors.\nCleverly conceived as KATE\'s Model Verification Tools are, her modelers agree\nthat\na few good tools are missing. More insightful frame syntax checkers are\nalways needed. Coding transfer functions would be much easier if a curve fitter\ncould ~ecite the equations of straight line and exponential plotted data.\nAnd\ncareless errors could be prevented if a program could convert transfer functions\nfrom familiar algebraic (infix) notation into Lisp\'s stilted prefix notation.\nTedious calibration of KATE\'s ALO-H20 knowledge base admittances (which happens\nfrequently) should be automated. Clever as KATE\'s pseudo objects may be, they\ndo not fit well into either her application-specific knowledge bases nor her\ngeneric shell. Solutions ore offered for all of these model verification tool\nproblems below.\nThey range from executable code to proposal-ready design to\nwhite papers on a better pseudo object.\n\n3.2\n\nLEAST-SQUARES CURVE FITTER\n\nModelers frequently need a transfer function equation that mimics a plotted\nmeasurement time function. Though random variables, the time functions generally are approximately straight lines or exponentials that rise or fall toward\nsome asymptote.\nSymbolics\' Generra 8.1 operating system fits least-squares\nstraight lines to plotted random variables, but it does not reveal their equations.\nKATE\'s modelers need a least-squares curve fitter with an optional\ncapability of taking the log of its time coordinates.\nSuch a program appears in AppendiX B [2]. Given two lists of x and y coordinates, it returns three parameters: the slope. the y-aXis intercept, and the\nsample correlation coefficient of the given points. First the program computes\nmeans, variances. and covariances of all of the x and y coordinates:\n\n271\n\n+ ~n)\n\nXinean =(xl +\nXvar = {)(,"2 +\n\nI n,\n\n+ xri"2)\n\nIn,\n\n)(Vcovar = (Xl * yl + ... + xn* vn) I n.\nThe equation\nslope,\n\nof the least-squares line, y .. a +bx, is then\nXVcovor - Xmean\nb\n\ndefined\n\nby th$\n\n* Ymean\n\n= ------------------------XV,ar .,.. Xmean"2\n\nthe\' v-axis intercept,\na = Ymeah - b * Xmean.\nThe.samplecorrelatioh coefficient,\nXYcovar\nr\n\n~\n\nXmean\n\n* Ymean\n\n--------------------------------------------\n\nSORT{Xvor ,;. Xmeon"2)\n\n*\n\nSORT{Vvar - Vmean"2)\n\napproa9hes 1~~~ when the stroight line fits the dato well or falls\nWhen it fits poorlV.\n\nbeiowe~%\n\nNo deSign diagram is attached to this program,which i~ obviously crafted to\nbe more readable than efficient. Ab~lson and Sussman [3] contend thbt, Lisp is\nso powerfUl\nthat it may be used Cis 0 design ianguage to describe Li$p code.\nEspecially in cases like this one, where control flow is o~VioU$, carefully\ncrafted Lisp can be almost English-like. To the Simple tesi crises \'or thi~\ncurve fitter, its modeler-customer (Scott BUdzowski) added a graphical ouiput.\nHe composed this enhancement at the keyboard, testing eoch module as he completed it; in about 1~ minutes -- it was d lot of fun to watch.\n3.3\n\nFORTRAN-TO-LIS~ TRANSFER\n\nFuNCTION TRANSLATOR\n\nMost good Lispers con translate a device transfer\nalgebraic (iOfiX) notation,\n\nfunction\n\nfrom\n\nordinary\n\ninto lisp\'S prefix notation,\n\nwith very few c.areless errors. . .aut KATE\'s targeted end users are not Lisper$.\nThey are ord\'inary Electrical Engineering graduates Whose first computer language\nis Fortran. Both KATE\'s AI LOb developer~ and her end users can benefit from a\n\n272\n\n,~\\\n\ntool that translates functions from infix (algebraic, Fortran) to prefix\nnotation.\n\n(LiSp)\n\nSuch a translator appears in Appendix C. The simple first version insists\nthat binary operators be in the middle of three-item lists. (It also accepts\nunary operators in two-item lists.) This list length constraint frees it from\nhaving to handle operator precedence (e.g., multiplying before adding in w + x *\ny},but it forces the user to add a lot of parentheses to a valid Fortran function. The modeler that requested this program thought this burden too great.\nThe more complicated second translator in Appendix C handles operator precedence very nicely, allowing the user to string any number of operations together\nin each parenthetical expression. Taken from Winston and Horn\'s LISP textbook\n[4], this more complicated version does not handle unary operators gracefully.\nThey must be mode to look like binary operators by adding a nil to their lists\nbefore translation, and removing the nil after translation.\nA Warnier-Orr Data Structured System Design Diagram precedes the second pr-ogram\'s Lisp code as documentation. The design shows in plain English that the\ntranslator is fiercely recursive; in fact,it hard to follow without a design.\nDesigning code makes i t readable to its coder and other code auditors, such as\nmodule test engineers, and thus makes code more error free and reliable.\nThe\nseveral test cases attached to the translator complete its documentation package, further enhancing its reliability by demonstrating its capabilities and\nlimitations. Sound configuration management requires that design and test data\nbe attached to every coded module in a production software system.\n3.4\n\nA BETTER STRUCTURAL CONSISTENCY CHECKER\nPerhaps\n\nthe reader can tell from the survey in AppendiX A that a structural\n(i.e., frame syntax) checker means several different things to\nseveral different modelers. Bob prefers to repair his errors one category at a\ntim~. so he needs a syntax checker that can be modified to check one frame\nslot\nat a time. Charlie\'s syntax checker keeps him apprised of what frames remain to\nbe coded in his evolving knowledge base, so he doesn\'t care which slot it\nchecks. Steve wants to be told about as many kinds of syntax errors as possible\nin his complete and,almost perfect knowledge base, with a minimum of user interaction. Mark wants his Mondo syntax checker to qUietly fix the errors it finds.\n\n~onsistency\n\nInitially, I understood that KATE\'s consistenc9 checkin~ file contained just\ntwo programs. Mondo-Consistency-Checker repairs five kinds of syntax errors (see\nTable 3-1), and wimpy but modifiable Check-KB points out all syntax errors of\none kind.\nMost modelers wonted the greater power of Mondo, but without its\nrepair feature, which tended to add unpredictable errors to their already fragile knowledge bases. Intent upon defanging Mondo to satisfy the needs of all, I\nfirst drew a module hierarchy chart to document its performance (see Figure 31).\nAs I drew, I discovered a third program,Check-All-Frames, which is much\nmore powerful (see Table 3-1 again) than the other two but dusty from disuse. I\nended up documenting all three of KATE\'s unmodified syntax checkers to better\nserve the diverse needs of KATE\'s several modelers.\n\n273\n\nTABL\xc2\xa3 3-".\n\nWhat KATE\n\nI\n\nS\n\nStructJrol Consistency Checkers Test.\n\n\'CHECK-KB tests only instance-level frames for input/output reciprocity (now):\ninstance-level frame A\ninputs slot: B\n\nrev/:jl . fraffle a\noutputs S16t: A\n\nf(1~tdfi8ij-\n\n(===)\n\n<,;;==)\n\n~~\'~-;:\')\n\ntop-iElvel fr6fne [)\n, \'i~4~ \'16t: C\n\njri:lcl-leve\'i frbme C\nbkd slot:\' 0\n\n<"\'.~>\n\niI1;fd-I~\'v~i\n\nfrdlne S\'\n1hstan6es slot: A\n\n<...... >\n\n<;l,=;i;>\n\ninstance-level frame B\naid slot: a\n\n<;;;~.~>\n\niristdn~e-ievel\n\nmid-levet frcirne F\n~a\'rts \'lot: E\n\n<.. ,;,;,>\n\ninstOnce-ievelfrdnie G\ndrow-cOnrj~ets slot: Ii\n\n<,;;=,;;>\n\ninstdnce-level frdme H\ndrdW-connects slot:\n\n<,;,==>\n\nframes fof\n\nCHECk-ALL-FRAMES tests\n\nfrciffle E\n\nripB slot: F\nG\n\nthe foilowing (optionally interdctively):\n\nlop-:1Eilvei Frdiri\'E!s:\n1. DOElS a pdrts, apo, iristt:inces, ell" Oio \xc2\xa7Hit accidentally appstlr her-f)?\nMid-levEH i=~ori\\;~s:\n2. Wrc>"g ty~e of inpLit or ig()rinaWl~ (f)\'~:; rii1Hi\'~Fr~)1\n~. I ~ dJtpuU, .\xe2\x80\xa2 outpUt-furicH6ri~; oruiH t~ s16t ifiU~in\xc2\xa7?\n4. it bH\'ottheseffii~s{hgiii~tiiUI~\n5. ISQry \xc2\xb7\xc2\xb7output . ret~rred ,,~6tn . an6at~ut-turl6ti&n~ i ...\xe2\x80\xa2 unit~. t~ie:rohce, dr\n, ".\n., Cl~iay slot hOt deriHed iii th:tl:i ffHirllFt6Utputs ~i()t?\ntnst:an6~Ffdme\xc2\xa7:\n\nS. wl"oni;j\xc2\xb7t.ype of i.riput or outpUt n(jni~?\n7. Icon plotting coordinates mi.~sing or not. in\nAli Frames:\n\nIs it hot d\n9. No slots?\n\n8.\n\n1~.\n\nIs\n\n\'; -\';.\n\n.-\'. \'. ,\'., \':-\' ,-\n\n($y~tem\n\nX y) forfu1\n\nfrci~~?\n\na.sHjt.~ri1pty?\n\nIs riS~ericldtUrij ~is$ing?\n12. Slots of an unknown type?\nDoes tHot frtime reh~rFea t.o lila \xc2\xa7i&t. Sf tH~ tvp~ B~ibwnat refer bock?\n13. tdp-i~v(H kinds 516t.\n<~=.>\nmid-level oko slot\n~=.,;>\nihstdnbij~ievei bio slot\n14. ffiia~ieviji i~stances slot\n~.~~~ fuid/initonce~leVel outpUt sl6t\n15. mid/instance-level input slot\n<;;\';;\';\'$\nihst,6Iice-level opo slot\n16. lhstanc~-levei pb,..t$si6t\nti:",~~\nihstdnCe~level draw-co~hects\n17. instance-level draw-connects\n11.\n\n\' \'. ...\n\n.J;. ..,\'.,.\n\n.".,.\n\nj.\n\n,\'.\n\nc.;,\' ..\n\n\'.\n\ni -\n\n"-.~ -_\n\n\'.\n\n274\n\nIsetuP-fd-types\n\nI\n..\n\ncheck -top-l eve l-fram e\n\ncheck-mld-level-frame\n\nIcheck-all-frames I\n\n(ctl;Ck -\'-o-ut-s-l\n\ncheck-lnst-level-frame\n\nIcheck-frame-l\n\n1\n\nIgenerlc-check-all-frames\n\nT\nIcheck-frame I\nI\nI\n\nI\nN\n-..J\nU1\n\nIcheck-lnstance-slot\n\nI\n\nIcheck-lnstance-lnout-value\n\nICheck-mld-slotl\n\n(Level 3)\n\nI\n\nICheck-mld-ln~ut-value I 1-ICheck-mld-output-value I\n\nI--\n\nIc hec k- 1ns t ance-ou t pu t -va 1ue I\n\nI--\n\n\'check-lnstance-coordlnates-facet\nI I-I-Icheck-units-facet I\n\nI\n\n\'cheek-delay-facet\nICheck-current-value-value\n\nI\n[check-too-slotl\n\nl~\n\nIcheck-mld-lcon-value I\n,\n1 ~\ncheck-mld-output-functlons-facet\n\'check-mld-unl ts-facetl 1-0[check-mld-delav-facet\nI\'check-mld-tolerance-facet I\n\nI\n\nMan~\n\nmodules at all levels also\nImatch-facets\ncall ~o print error messages.\nAll Level-3 modules also calr-l_-,_\nICheck-lnverse-value. and lCheck-nomenclature-value\n\nI\n\nI\n\nFigure 3-1.\n\n]\n\nConsistency Checking file hierarchy chart.\n\nI\n\nMondo\'s typical printout appears in Figure 3...20. It counts five l<indsof\nerrors (printing the tallies on the termindl screen), and repairs them,but does\nnot point them out to the Use... ; As sUch; it is iess bfa tester mo";e of\' cl\ncOlTlpH.er, ciccepUngo mere skeleton of the 1ntendedframes tiii~.\xc2\xb7. producing Q\nworklh~ knowledge base :\nChanges Mondo rildkes In thekh()wledg~\' tU:ise are fiot\npermanent, arid the of\'igintll knowledgl9 base can b\'e Nn6dcJed t)ver the repbii"eClOhf5\nif detar-ed.\nCheck...l<Si s typical prlhtoutappears iI\'lFigure3-2b. Hpoints out syntax\nerror\'s so that the lilser car\'l correct them himself (.dndledrn hot tb i\'I1akEJ the stime\nmiStakes hext time). Changing j iJstdHne dr\' two of \'cGdiiriGHeck"\'K13 rEJdireets\nits ottent:L6ri to any slot of intere"st in the fr\'ames bEHnllJ tested.\n\xe2\x82\xach\'eck\'"\'KS\' s\npriritout isofteh lengthy ,so i t is written to file l<B..;LISTiN$1risteati of the\nuser i S screen. ItS input nominol lycomes from tile Au)... ~B>ALb+1\'l20. both file\nnames can be readily changed; of course. by madHy1ng its lisp code;\n.\nWritten \'. iri1988 for ari earlier\' "erS1onof KATE; check";Aii-F~omes appareNtly\ndoesn\'t work cit all now. But its db:Uity td point out 32 differ\'ent kinds of\nfrtmie tiyntdx eSrors piques mdny modelers; inUrests . (See Tobie 3-1ohd PoI"..;\nriSh\' .\' cHsserttitiot1 [5 j f6r more detailed dbeumehtCiUon;) lipg~~din9CheCk-All";\nFrames to work wi ttl toddy\'s . KATE .. wc>uld re~liypay premiUitisin. mc>d6iers ~ .produe..;\ntivity, ond it shc>tild be COnsidered :Hi any futUre KATE contract hegdtitit~ons.\nWhen. it is ready, the test pian of Ai\'pendbOwiil veHfy its. performance;\nKATE\'s cotlfigurdUon managers . ShOUld. keetpti.cioSEW ~ve on such p6WtH~iuimbdeiirig\ntools. 1n the future andj>t"event their obsolescence.\n\n3.5 AUTOMATED\n\nADMITTANCE\n\nMEASUREMENT\n\nWO\'rkmen frequent! y upset kATE\',S .\xe2\x80\xa2 AL()-"\'H20 model l>y 6\'dj tlsHng . hand.\\ltJlves in i t8\nhardware md6klifj .. Whetlbctucilddiri1ttCinees diSagree Wit~modeie(j admittances in\nher\' kt1owle8ge\' f:)dse, kMi::\'ssfiTi\'Ulatecl pressures aHd tlO\'W8 tJ\'iff\'er\' frorn ttios~ in\nthe real world, brld she bldni\'es a hdrdW\'ci\'re deviCE! fdiliJfe.\nMilior admittance\ndif\'fefencesctiih lead KAlE to make subtie reosoriirlg &rr\'ors that cost her mbdater\nsigrU. ff6Q\'n\'t . dejj~ggih9. ~ffoft. Att~r diSedveHng. thetour\'ce. of\' .tHEtscJ ol)scur\'e\nerr6\'rs, tilt tt;1l1 Has t6 ri\\\'bntiCii fEJm\'eastir~ vdiVe adm1HartcH!h~ brid ~dH them trito\ntHekri6~ledgeb6$~LkATEj$Alo-k20 Modeler needs a way of aut6moticaiiy 8011brc:ating these ffol1\\\'e tiamH.tances beforee\\;erV demonstrbt1dn,\nkATE:\' s c6ritrdl fot:Hiity Can set tip the s6lerioid valves in the J.lO,,;H20 heir\'d\'"\nwar\'a m\'Ocktip:Hr c6i1ffgtiralions that enable mea~Wdng key \'floWs dnd pressure\'.\nThen KATE: cdn Lisettu:HI~ p\'fe-ssores dnd flows t6 calculate aU a\'dmi ttCln\'ces in the\nknowle\'dge Base atJtoW\\cH:i6dl1y.\nthe iest procedure in Ap\'pendix E: \'t\'iables kATE to d:HicoV\'er oU 22 adini ttances\n(see Table $-2 drid\' tfgure3\'~~ for iJl\'EJ1f de\'ffHH-ioris\' tJi\'Otdpp~afintt1eAlO-Hi20\nknowledge bdseffdrifes. . It olift b\'e ej(eeuted ~\xc2\xa76cdntr~tp\\fO\'cedur~ (s4J\' S11\'1lHar\ne)(amples in. the kn\'owledge base. file\' Gi >KAtE>AlO...KB>C\'ON\'tROl-PRocErMRES) 6\'f6re\neach furl of the mO\'del. The adrnittorices 8m, Grl, Q\'nd Gp\' must be updotEfd foY. ever\'y\nPump\npt"oc:edure dur1ng model execuHc)h,Si6Ce they ch,tpin\'d upon valv~ position\'s.\n\n,r\'\n\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nPlacing ITERATE-IT into\nAIO errors: 27\nINSTANCES errors: 133\nAKO errors: 12\nKINDS errors: 45\nAPOerrors: 1\nPARTS errors: 4\nOTHERS errors: l1J\nCONNECTION errors: 42\n\non\nan\non\nan\nan\nan\nan\nan\nan\nan\nan\nan\nan\n\ninversion\ninversion\ninversion\ninversion\ninversion\ninversion\ninversion\ninversion\ninversion\ninversion\ninversion\ninversion\ninversion\n\nslot!\nslot!\nslot!\nslot!\nslot!\nslot!\nslot!\nslot!\nslot!\nslot!\nslot!\nslot!\nslot!\n\nAIO errors:l1J\nINSTANCES errors: l1J\nAKO errors: III\nKINDS errors: "\nAPO errors: III\nPARTS errors: l1J\nOTHERS errors: l1J\nCONNECTION errors: l1J\n(a)\n\nFrame RV1l1J2\'s input P-IN doesn\'t jibe with frame NIL\'s output NIL.\nFrame CV1l1J4\'s input P-IN doesn\'t jibe with frame NIL\'s output NIL.\nFrame TX1\'1\'s input TEMP-IN doesn\'t jibe with frame NIL\'s output NIL.\nFrame RV1l1J1\'s input P-IN doesn\'t jibe with frame NIL\'s output NIL.\n(b)\n\nFigure 3-2.\n\nConsistency Checkers\xc2\xb7 printouts: oj Mondo\'s, b) Check-KB\'s.\n\n\'277\n\nTABLE 3-2.\nADMITTANCE DtFINIT!ONS\nFig.\n\nName[l]\n\nDefinition[l]\n\nALO-H~O[2]\n\nTank~ressurization circuits\n\nAt st_vent_admit\nA2 $t_up_admit\nA3 vt~vent_admit\nA4 vt._up_c1dmit\n\n....\nstorage tank ullage vent admittance\n" " " pressurizCltion ne,twork "\nvehicle tank ullage ve\'n\'t adrri:l.t.tarioe\n" "" pressurization H.two~k "\n\nFlowRatePres[3]\n\np.7\np.9\n13\'.24\np.25\n\nPum~cifcuits....\n\nA5\nA6\nA7\nA8\nA9\nAa\nAb\nAs\nAr\n\npump_circuit_admit\npumps_admit\npump_to_4_way_admit\nsuction_line_admit\nrecirculation_admit\nrecirc - line- admit\nNo name.\nNo name.\nNo name.\n\nFrom 8T to Pxilll6. use.d by SVll1J4.\np. 11 \xe2\x80\xa2 12\nNonlinear flow change with pressure.p.11.12\nFrom pumpl{or 2) to PX11ll5.\nFrom ST -to PX115.\nfrom PXilll6 to ST.\np.13\nFrom Pl to GAiIll3.\n= A9 -Aa, from above.\n= A6 + A7, from above.\nFrom PX1~5 to PXll1J6.\n\nVehicle tank fill circuits ....\nAc transfer_line_oomit\nLong piping & FC\xc2\xa511ll3.\np.14\nAd fast_fil~~circuit_admit\nSV11ll7(8) arid FMll1J2.\np.1S\nAe final f1l1circuit admit MCV11ll1 0 33~ and FM11ll1.\np.1S\nAf reple~ish_tircuit_~dmit\nDitto, adjust ~ to hold VT level. 1\'.17\nVehicle tonk drain circuits .. ,.\nAg tsm_drairl....CJssist_admit\nFrom PRU1QJ3 thru SYl12 & SVl16\nAh draln_odm:i.t\nFrom PX111l8 thruSVl16 t() otmosphere\nAi No nome.\nNegligible wrt H20-c()rrying drain.\nAj nozzle_admit\n" " " SVlllll " " (a 2.5)\nAk bleed admit\n" , " $Vl1119 " fl\n(NOTE: "tsm" = tail service mast.)\n\np.2\np.l\n\np.6\np.i\n\np.E>\n\np.6\np.4\np.4\np.4\n\ntootiTi()S p. 2(6 p.1S\np.2l/J.21\np.21\n\nMiscellany ....\nrv_admit_mox\n;: 11ll (nota measl,lrement)\np.24\nAm tank_fiil_admit\nPXll1l6 to VT or drain, whichever open p.2.4\nAn upper_f~1i_circuit_admit PXll1 to VT or drain, "\np.6\nAp skid~adrnit\nFrom PX11ll8 to PXlll.\n(NOTE: tank_fill, upper_fill, and skid admittances vary with procedure.)\n\nNOTE: Comments in the following listings provided these defin:j. tions:\n1 . G:>KATE>ALO-KB>CONTROL-PROCEDURES\n2. G:>KATE>ALO-KB>ALO-H20\n3. G:>KATE>ALO-KB>FLOW-RATE-PRESSURES\n\n278\n\n-")\n\n)\nPXIOS\nSV107(8)\n\nFNI02\n\n.........\nPXIOl(2).\nOPXIO\'!(S)\n\nHVIOS RPNIOI(2)\n12gpm\n(J600)\n\nI\n\no__ , ______ __\n\npiping\n\nFIOI\nCVIO\'!\nFN I OJ\n\nPXI09(110)\xc2\xb7\nOPXIIJI\'!)\n\nSVI01(2)\n\n~\n\nJO\npSI\n\nPRU102\n\nI\nSTIOI\n\n~\n\nSVI06\n\n~\n\nt\n\n\'t\n\nSVIOJ\nHVIO\'!\nFCVIOI\n\nGAIOJ\n\npiping\n\nPX 106\n\n200\ngal\n\nvent\n\ndrain\n\n--.J\n\nI.D\n\nbl~~d\n\nnozzl~\n\nSVII\'!(S)\n\n~----\n\npiping\n\n100\ngal\n\n(a)\n\nA8\n\n!\'V\n\nl\n\nr\n\n70\npSI\n\nI\n\nvent\n\nVTlOI\n\nPRUIOJ\n\nAO\nrast_flll_c \'rculLaOm\' t\n\n----\n\n_way_admit\n\nA2\nst_up\n_aOmlt\n\nAC\n\nAl\n\nV\'---+--~V\'\n\nI lOW_110m It\n\n,/\'\nAb\n\nAa\n\n~A?_admlt\n\n\'- _\n\nV(\'I\n\nAr\n\nI r.rY\n. 1.\n\nA\'!\nvt_up_admtt\n\n____\n\n~\n\n-\n\n(var\'abl~)\n\nrep I.n ISILc IrCUI t_aam It\nAh\n\nA, (JJ\'U\nrlnaLrIILc\'rcult_aomlt\n\nr.clrculatlOR-JIdmlt\nAl\nst_ventJdmlt\n\norallL\nadmit\n\n100\n\noal\n\nAp\nI\nskld_aoml~\n\nv~nt\n\ndrain\n\n(b)\n\n..\n\nI-\n\nble.d\n\nnOZZle\n\nAn, UPlltr_rIILclrcult_admlt\nAm, tank_rIILadmlt\n\nI\n\nv~nt\n\n-\'\nJ\n\nFigure 3-3. The ALO model\'s admittances: a) perspective (compare with Figur~ 11), b) admittances labeled as they appear in ALO\'s knowledge base frames.\n\n70\nPSI\n\nadmittances must be measured in isolation or gleaned from pump specifications\nbefore the admittance measuring procedure begins. This test procedure should be\ncoded in Lisp and added to the procedures file above to enhance the ALO-H20,\nmodel and modeler productivity.\nBy the way. the admittance meosurement prdcedure was deSigned eorlier to\nmeasure only the admittances of the nine hand valves. This deSign was abandoned\nwhen the modeler realized upon inspection that it would not help him calibrate\nhis 22 knowledge base admittances, Am ~ glgdI completed a design before coding!\nThe aborted design succeeded in pOinting out a serious error, and thus\nserved a very useful purpose. The design we abandoned also mistakenly assumed\nthat pipe admittances are negligible compared with valve admittances. Laboratory researchers at Marshall Space Flight Center apparently still think that is\ntrue [6];\n\n3.6\n\nBETTER PSEUDO OBJECTS\n\nKATE\'s modelers invented pseudp objects to apprise ordinary objects of remote\npressures and flows in a complicated fluid flow circuit. The fluid flow output\nof a valve, for example, depends not only upon that valve itself but also upon\nthe back pressure of its downstream load and the driving pressure of its upstream\nfluid supply.\nIn KATE\'s ALO-H20 model, PX-106 is called the "all knowing"\npressure.\nThe rather complicated frame of thiS, pseudo object evidences influence of for ranging pump flows and admittances. All other pressures and f l o w s - \' \\ ,\nin the circuit can be readily computed from the keystone pressure PX-106, without the necessity of solving multiple simultaneous differential equations.\nEquation solving takes too much time, and it would interfere with KATE\'s failure\ndiagnosis process. ,[6]\nA pseudo object typically starts out looking like any ordinary object (i.e.,\na frame-modeled device), but then it ,starts growing like a cancer.\nInitially\nthe flow through a device may be specified as a function of only local pressures.\nWhen modeled flows or pressures deviate from actuals, the modeler\nsearches for any measurable time function which correlates well With actual\nflow, and then "mixes it in" with his original transfer function. These -incremental improvements continue until the pseudo object\'s transfer function becomes\na sort of multiple regression equation, combining the weighted contributions of\nmany remote flow and pressure measurements throughout the circuit. A part of\nthe speCifiC application\'S knowledge base, the pseudo object describes the\nfunctioning of only one fluid flow cirCUit. But i t is distinctly different from\nthose true objects in the knowledge base which define the structure of the\ncircuit.\nStepchildren of the modeling process, pseudo objects do not fit well\ninto either KATE\'s knowledge bases nor her shell. Furthermore. a Single keystone pressure cannot be found in circuits that have multiple flow loops.\nI resolved to find some alternatives to pseudo objects that would not run\naground of the limitations imposed by on-line equation solving. Three alternatives are advanced below as proposal-ready philosophical white papers.\nThe\nmodelers\' evaluations follow each description.\n\n280\n\n3.6.1\n\nOFF-LINE EQUATION SOLVER ALTERNATIVE\n\nIf KATE needs on equation solver, but the equations aren\'t soluble 1n real\ntime, why not solve all the equations KATE will need off-line and\xc2\xb7 feed their\nanalytic solutions to KATE as she needs them? A different solved equation is\nplaced into the modeled knowledge base for every configuration of valves (e.g.,\nevery .ubprocedure in the LOX tanking procedure). Mathematica easily solves\nthese simultaneous differential equations for all modeled flows and pressures as\nfunctions of time.\nConsider the application of this technique to KATE\'s ALO-H20 model.\nDuring\nthis model\'s slow fill subprocedure, only 12 of the 26 valves are open, producing the rather simple two-loop circuit of Figure 3-4. The modeler writes the\ntwo flow equations:\nf1~2 (1/aHV1~5~2+1/aHV1~7~2+1/0SV1~5~2+1/aF1~1~2+1/aCV1~4~2\n+1/aFM1~3~2)\n\n+\n\n(f1-f2)~2 (1/aFCV1~1~2+1/aHV1~4~2)\n\n.j\'f2 dt I\n+\n\naVT1~1\n\nf2~2\n\n\xe2\x80\xa2\n\n\xe2\x80\xa2 k *\n\nRPM1~2,\n\n(1)\n\n(f2-f1)~2 (1/aHV1~4~2+1/aFV1~1)\n\n(1/aFCV1~3~2+1/aFM1~1~2+1/aSV111~2+1/aSV113~2).\n\n(2)\n\nOff-line, Mathematica solves these for the time functions, f1 and f2, in terms\nof the circuit constants. The modeler codes f1 and f2 as pseudo abject transfer\nfunctions for KATE to use throughout the slow fill procedure. Other objects in\nthe knowledge base may refer to these flows in computing their own output pressures:\n\nor even these time functions can be computed off-line.\nSolving systems of simultaneous differential equations off-line moves the\ncomplexity out of KATE\'s shell that Whitlow found she couldn\'t bear [8].\nThis\ntechnique handles multiple loop flow models well. Constraining the valve closuresof a particular modeled procedure also simplifies off-line equation solving.\nA small fraction of the original complexity (i.e., the flow time functions) moves into \'the knowledge base, where the modeler can handle it more\ncleverly than KATE could in her shell. Steve laments, however, that KATE\'s\ndiagnoser would have to been modified to accommodate this procedure. The diagnoser currently twiddles valves, in on effort to duplicate erred hardware measurements, thus invalidating the simplified model and its off-line solution.\nApparently these equations must be solved on-line.\n3.6.2\n\nANALOG COMPUTER ALTERNATIVE\n\nIs there a novel way to solve these equations on-line very rapidly?\nVes,\nAbelson and Sussman suggest that the equations be solved by a signal processing\nanalog computer [3]. Including the tonk pressurization circuits, the ALO-H20\n\n281\n\nRPM102\n\nPX105\n\nt\n\nPX106\n\n.\n\nFIOl\n\n~/,-,/,\n\nCV104\n\n,/,\n\nt\n\nFM103\n\n,\n\ntv\n\nco\ntv\n\nFigure 3-4.\n\nFM10l\n\nSV 111\n\n,/,\n\n,\n\nMCV10l\nSV113\n\nFCV101\n\n1-\n\n1-\n\nt\n\n/\'~/\'\nFCV103\n\nSV105\n\n0)\n\nPX 111\n\n0)\n\nThe simplified slow fill model.\n\nVT101\n\nI\n\nmodel in $low fill include$ four flow loop$. Kirchoff\'$ Law $tate$ that the $um\nof all the pressures around a loop must be zero. Four simultaneous equations\nstate these sums in terms of the four flow rates around the loops of Figure 3-5.\n\nSf1\n\ndt I Cst .. f1"\'2 / A1"\'2,\n\n(1)\n\nk .. RPMHl1 .. (f2"\'2)(1/AS"\'2+1/AS"\'21/A7"\'2+1/Ar"\'2) + (f2-f3)"\'2 (1/Aa"\'2+1/Ab"\'2),\n(2)\n(f3-f2)"\'2 (1/A1"\'2+1/Ab"\'2+1/Aa"\'2) + f3"\'2 (1/Ac"\'2+1/Ae"\'2) + (f3-f4)"\'2/A3""2 .. S,\n(3) .\n\n(f4-f3)"\'2 / A3"\'2 .. Jrf4 dt / Cvt.\n\n(4)\n\nAfter these equations are differentiated, a fast signal processing analog\nputer can solve them simultaneously.\ndf1/dt .. A1 / 2 Cst.\n\ncom(1)\n\ndf2\n\ndf3\n\ndt\n\ndt\n\ndf3\n\n[ df1 f3-f1\ndf2\ndf4\n]\n(f3-f4)/A3"\'2 ] x\n[\n----- +\n(f3-f2) (1/Ab"\'2+1/Ao"\'2) +\n[dt A1"\'2\ndt\ndt\n]\n\ndt\n\n(f2-f3) (1/Aa"\'2+1/Ab"\'2)\n----------------------------------------------------------\n\nf2 (1/AS""2+1/AS"\'2+1/A7"\'2+1/Ar"\'2) + (f2-f3) (1/Ao"\'2+1/Ab""2)\n\n(2)\n\n[(f3-f1)(1/A1"\'2+1/Ab"\'2+1/Ao"\'2)+ f3(1/Ac"\'2+1/Ae"\'2)+ (f3-f4)/A3"\'2]""-1,(3)\ndf4/dt .. 2 df3/dt + (A3"\'2 / Cvt) .. f4 / (f4 - f3)\n\n(4)\n\nFigure 3-S renders these equations graphically as an analog computer block\ndiagram.\nAbelson and Sussman tell how to code signal processors that have\ntroublesome feedback loops like these. Essentiolly they recommend thot the\nfedback input be a global, given some initial value. That value is used to\ncompute on output, and the output thus provides a new fedback value for the next\nsampling period.\nThe simple multiply-accumulate operations inherent in these signal processor\ndifference equations run much foster than a general purpose simultaneous equation solver. Thus KATE\'s diagnoser can freely reconfigure valves on-line and\ncan expect to harvest accurate flows and pressure values in real time. Integrators in the analog computer are inherently stable, thus combatting the convergence problem Whitlow encountered with his flow solver [a].\nExperiments with\nGensym"s G2 program, however, indicate that any equation solver obscures device\nfailures to some extent [6]. Is there a compromise between equation solving and\nour current pseudo objects?\n\n283\n\nPXI15(6)\n\nA6\n\nPX105\n\n!~~\n\n\'\n\n~-~~/\'---..\nA\n\nA8\n\nk*RPM102\n\nA7\n\nAr\n\nPX 10 1(2)+\nDPX104(5)\n\nt\n_-----0---,/\'.. . .- ------...,\nAb\n\nI\n\nAe(33~)\n\nAc\n\n\xe2\x80\xa2\nGAl03\n\nAa\n\n\xe2\x80\xa2\n\nPX106\n\nPX 107(8)\n\nt\n\n\xe2\x80\xa2\n\nPX 111(2)\n\nAl\n\nCst\n\nFigure 3-5.\n\nPX 109( 10)+\nDPX 113(4)\n\nFour flow loops in ALO during slow fill.\n\n- ...\n\nAI\n2cii\n\ndll/Ot\n\n...~.\n\n-~-\n\n.. _--.--.-----_ ....\n\n~.. _~\n\n--=\';\':\':~--W-----Il\n\ndt]/ot\n\nconSl,n,\n\n\\-....:::.::.::.:--~I ~ \\-1 ">------~ -12\n\n13\n\n\'4\n\ntun\'tlnt\n\nfJ\n\n1-.--=d:.:.;13:.:./.:;dt:..-_--I~-------.\n-13\n\n14\n\n12\n\n14\n\n\\-.....:::..::.::.:....--lITY-----\xe2\x80\xa2\xe2\x80\xa2 -I"\xc2\xb7\n:onstant\n\ndl3/0t\n\nFigure 3-6.\n\nAn analog computer designed to solve ALD\'s equations.\n\n285\n\n3.6.2\n\nTWO-PORT ALTERNATIVE\n\nThe final alternative strives to distribute the complexity of KATE\'s pseudo\nobjects over all the trueobjects, without requiring equation solving. The frame\nof every object describes the device itself, as well as all downstream (upstream) objects viewed through its input (output) port. Modeied objects are\nlike a series of dirty windows, through which a viewer sees both the nearest\nwindow and other windows ~eyond. We obtain a Thevenin\'s equivalent circuit (to\nembody both local and remote devices) for each viewing port of every modeled\ndevice.\nJust the equivalent circuits of the two devices on either side of it\nare sufficient for computing any modeled pressure.\nThevenin\'s Law reduces a hydraulic network of any complexity to a Single\npressure source and a series admittance. It states that the equivalent pressure\nis the pressure that can be measured at the network\'s output. Furthermore, the\nequivalent admittance is that measured at the output when all network pressure\nand flow sources set to zero. (The admittance of a pressure source alone is\nzero. )\nFigures 3-7 and 3-8 show how Thevenin\'s Law is applied to two-terminal devices and pipe tees in a hydraulic circuit. Looking into the input port of a\ntwo-port device in Figure 3-7a reveals the admittance itself and the equivalent\ncircuit of all devices connected to its output.\nFurthermore, its internal\nadmittance and the equivalent circuit of all devices connected to its input are\nvisible at its output port. Thus, the device may be rendered as the equivalent\ncircuit in Figure 3-7b, in which its input and output admittances and pressures\nmay be computed.\nAin\n\n= An +\nPin\n\nAo, Aout\n\n= Po,\n\nPout\n\nAn + Ai,\n\nPi.\n\nSimilarly, the equivalent circuit of a pipe tee connected to the three devices\nshown in Figure 3-8a can be redrawn as the equivalent circuit of Figure 3-8b\nwith the following parameter definitions.\nAin\n\n1 (1/Ao + 11 Ab),\n\nAout\n\n1 (1/Ai + 11 Ab),\n\nAby\n\n=1 1\n\n(1/Ai + 11 Ao),\n\nPin\n\nPo + ( Pb - Po) * (Ao +\n\nAb)~2\n\n1\n\nAo~2,\n\nPout\n\nPb + (Pi - Pb) * (Ab +\n\nAi)~2\n\n1\n\nAb~2,\n\nPby\n\nPi + (Po\'- Pi) * {Ai +\n\nAo)~2\n\n1\n\nAi~2.\n\nWith these definitions, we can model pressures and flows anywhere in a hydraulic circuit simply by referring to their adjacent devices. The affects of\nall remote devices are handled recursively by equivalent circuit formulas in the\n\n286\n\n(\n\n(a)\nIntrInsIc\nAdmIttance\n\n,\'-\n\n,\'-\n\n..... _---.-J/\n\nV\n\nConnected Devl ces\n\n.....\n\n,.\n\n...J/\n\nV\n\n(b)\n\nPout\n\nPin\n\nAout\n---..... IN\n~\n\nOUT .......\n----\n\nFigure 3-7. Thevenin\'s equivalent of a two-port device: a) device environment, b)\neqUivalent device model.\n\n287\n\nConnected Dev1ces\nA \'-_ _--....,\n\n,.._ _- - . J\n\n/\n\nP1\n\n...\n\n/\n\nA1\n\n_---A\'-----..,...\nPo\n\nAo\n\nAo\nConnected\nDev1ce\n\n(a)\n\nPout\n\nP1n\n-\n\nAout\n\n.....\n-IN\n\nOUT ....\n~----\n\nPby\n\nAby\n\nBY\n\n(b)\n\nt\n\nFigure 3-8. Thevenln\'s equivalent of a pipe tee: 0) device environment, b)\nequivalent device model.\n\n288\n\n/~\n\nPX101\n\nP40ut\n\nP51n\n\nA40ut\n\nA51n\n\n~\n\nFlow\n\nFigure 3-9.\n\nTwo-port modeling an ALO-H20 pressure.\n\nconnected frames. For example, fluid flowing from tee 4 to tee 5 in a\nof KATE\'s ALO-H20 model (see Figures ~-9 and 1-1),\nFlow\n\nsection\n\nSQRT(P4out - P5in) * (A4out + A5in).\n\nAnd the pressure PX101 at that node,\nPX101\n\n= P40ut\n\n+ (Flow\n\nI A40ut)"\'2.\n\nCan the two-port object model flows and pressures in multiple loop circuits,\nor do infinite recursions result? No problem. Every remote device is viewed in\nthe same direction as the local device for which an equivalent circuit is\nsought.\nShown in Figure ~-1QJ is the former example in which we viewed tee 40\'s\noutput port. Looking into tee 4\'s output port, we see the output ports of SV102\nand tee~. Looking into tee ~\'s output port reveals the output ports of SV101\nand HV10~. Viewing HV10~, SV10\', and SV102\'s output ports reveals the output\nports of tee 2 and tee 1 and the bypass port of tee 2. Finally, looking into\nthe bypass and output ports of tee 1 reveals the output port of PRU102, which is\ndefined.\nNo viewing step reflects back upon the viewer; no infinite recursion\noccurs in the equivalent circuit modeling process. A coding suggestion appears\nin Appendix F.\nThe two-port alternative is attractive because it is so similar to the original pseudo object idea. Thus it would be the easiest alternative to implement\nunder KATE\'s current architecture. It offers more precision than the ALO~H20\nmodel\'s all-knowing P1, because it exactly reflects the affects of remote devices (it is not the trial-and-error result of "mixing in" correlated measurements).\nA two-port object truly is an "object," retaining the devices\' structural position in the circuit. Vet 1n its greater complexity, it accounts for\nthe modeled device\'s environment, without need to resort to all-function pseudo\nobjects. Like a neural network, each device is aware of its only nearest neighbors, yet that is enough to model the whole circuit, as viewed in one direction\nfrom a single point. This alternative does not obscure the affects of failed\ndevices as an equation solver does; thus it is more compatible with KATE\'s\ndiagnoser. It is hard to say in detail Just how diagnosis might be affected by\nimplementing the two-port pseudo object alternative.\n\n290\n\n/\'-\',\n:\n\nHV103\n\n(b)\n\nrout\nE?bY\n\nt\n\nI HVI03 lout\n\n...-1 SV10l\n\n~\nout\n\nt\n\nby\n\n!PRU(02Iout _\n\nlout ....... - 1\n\nL\n\nCDout-lsV102 lout .....\n~II-- &:lout ~ ~\nK\n\n-\n\nFigure 3-10. No infinite recursions in multiple loops: a) ALO circuit\nb) views always leftward.\n\n291\n\nsegment,\n\nIV\nRESULTS AND DISCUSSION\n4.1\n\nMY MODEL VERIFICATION TOOLS\n\nI added five useful tools to KATE\'s Model Verification Toolkit this summer.\nThe already coded transfer function curve fitter and translator will make building new models easier, starting imme~iately. Documentation of KATE\'s three\nstructural consistency checkers makes two of them available right away to all\nmodelers, and the more powerful third will be useful as soon as it can be enhanced to match KATE\'s new knowledge bases. Bob has already decided to code the\nmy automated admittance calibrator design in his spare time, with or without\nfunding. Evidently he expects it to boost his productivity. Several stimulating discussions of the three pseudo object alternative white papers revealed\nsome useful ideas in the first two, even if they are not altogether workable.\nThe third alternative may enable KATE to embrace multiple flow applications that\npreviously could not be modeled.\n4.2\n\nKATE\'S FUTURE\n\nHow else can we make KATE\'s modelers more productive? There are two answers\nto that question. Traditional computer-automation aids, such as Computer Aided\nDesign terminals, serve the end user. Mostly clerical, this modeler\'s task can\nbe described in a series of very predictable steps for which KATE\'s responses\nare (hopefully) well known. KATE\'s end user needs a highly interactive graphical Knowledge Base Editor for creating frames, a Check-AlI-Frames syntax checker\nthat doesn\'t miss a thing, and more refined on-line plotting facilities for\ndebugging transfer functions. But KATE\'s end user hasn\'t shown up for work yet.\nAnd it\'s a good thing, because his Knowledge Base Editor isn\'t ready.\nKATE\'s\ndeveloper/modelers have more difficult productivity problems.\nRedesign and\nrecoding efforts (e.g., softlanding and external influences) spring up regularly\nin response to modeling problems that are currently beyond KATE\'s grasp. Weekly\nreports of these incremental changes in KATE provide evidence that she is a\nprototype, not a production program.\nProduction programs always pass through a Software Development Life Cycle\n(see Figure 4-1) before their release to end users. The development steps along\nthe left of this "waterfall" chart start with a proposal phase, and proceed to a\nrapid prototyping sessions with the new customer if the proposal is successful.\nThe rapid prototype uses powerful computers (like Symbolics) and powerful languages (like lisp) to qUickly define required system performance and user interactions before design begins. Design occurs in three top-down phases: system\ndesign to allocate jobs to subsystems, preliminary design to find the best path\nto module implementation, and detailed design to specify the performance of\nevery software module. Coding follows. According to plans written during the\ndesign phases, testing proceeds from the bottom-up along the right side of the\nwaterfall chart.\nModule testers diligently seek errors in modules, so that\ncoders can remove them and increase product quality. Errors repaired here are\n\n292\n\ncan\'t meet NEW requ1rements\n\nProposal\n\nco ntra,;:.c..:.t-1-_ _- - .\ncontract. v1olat1on\n\nRap1d\nPrototype\n-.:.;;......Lcustomer\'s ok\n\n__\nuser 1nterface problem\n\nSystem\nDes1gn\npeers\'o\n~k~~\n\n_\n\nPrel1m\nDes1gn\npeers\'\n\ncan\'t meet runc rqmts\n\n__\n\no~k~....L-\n\nDetalled\nDes1gn\npeers\'\n\n1ntrrac m1smatch\n\no~k~~\n\n~\n\nCod1ng\n\nwalkthru\n\ndes1gn\n\ntest1ng\nL-_-I\n\nDebugg1ng\n\n...for repa1r\n\nFigure 4-1.\n\ndoesn\'t meet specs\n\nThe Software Development life Cycle.\n\n293\n\n27~\n\ntimes cheaper to fix than those found during production use. [7]\nIn the\nsoftware integration phose, modules. are odded to the evolving system, one at a\ntime from the bottom-up, as module interface errors ore discovered ond eHminated.\nThe hardware/software integration phase sees working subsystems being\njoined together with a similar testin~ goal. The system testing phase scrutinizesthe complete system\'s responses to user commands, looking \'for errors the\nsystem engineer inadvertently designed in. Acceptance tests convince the customer that the system is ready for\xc2\xb7 production use. Installation tests qualify\neach copy of the system for work at the user\'s site, or ... they may provide\ncontent for a new proposal. Thus begins another trip through the Software\nDevelopment life Cycle.\nFor the post several years, KATE has been stuck in one proposal and rapid\nprototyping cycle after another. Her errors have been costly to fiX, but her\nconceptual design has gradually matured to the point of convincing some that she\nwill be oble to handle critieal tasks at KSC someday. Soon KATE will win her\nlong-awaited ride through the Software Development life Cycle. Folks here refer\nto the event as "recoding KATE in the C language for higher speed and lower\ncost," but you and I realize that Symbolics\' lisp machines are for prototyping\nand that C-programmed PCs are KATE\'s logical target system.\nGiven an alert\nComputer Scientist as Configuration Manager, KATE will soon be as error free and\nincr~dibly reliable as KSC\'s other launch equipment.\nShe will have the pedigree\nthat she needs to win positions of responsibility and respect around KSC.\n\n294\n\nIV\n\nCONCLUSIONS\nKATE had some wonderful Model Verification Tools before I ca~e, and now she\nhas a few more (transfer function curve fittet, translator, and three documented\nsyntax checkers). She has the prospect of some even more powerful ones 1n the\nforeseeable future (automated admittance calibrator and better pseudo objects).\nHer forthcoming "recoding in C" promises a error-purging turn through the Software Development life Cycle.\nWith NASA ond Boeing\'s able leadership, I have trained\ndevelopment work next summer by:\n1. Surveying KATE\'s modelers.\n2. Coding two new Model Verification Tools.\n3. Enhancing some existing tools.\n4. Oesignirg a new tool.\n5. Writing white papers on a better modeling technique.\nI\'m already looking forward to next Summer.\n\nmyself\n\nfor\n\nKATE\n\nKATE is on incredibly clever artificially intelligent computer program whose\ntime has come. It is, thrilling to be counted part of her development team just\nas she begins to turn a profit.\n\n295\n\n'