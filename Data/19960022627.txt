b'A Distributed Telerobotics Construction Set\nJames D. Wise\nDepartment of Electrical and Computer Engineering\nRice University, Houston, Texas 77251\nFebruary 1, 1994\n\n2.\n\nABSTRACT\n\nFigure 1is a block diagram of one of our basic wnfigurations for teleoperation: a robot worksite with two remote\noperator control sites. It consists of a number of clearly\ndefined functional blocks communicating via streams of\ndata packets using a few well defined formats.\n\nDuring the course of our research on distributed\ntelerobotic systems, we have assembled a collection of generic, reusable software modules and\nan infrastructure for connecting them to form a\nvariety of telerobotic configurations. This paper describes the structure of this \xe2\x80\x9c\xe2\x80\x98Telerobotics\nConstruction Set\xe2\x80\x9d and lists some of the components which comprise it.\n\n1.\n\nThe Construction Set Approach\n\nO r experience with these diagrams has been that simply\nu\ndrawing the modules is enough to define the system: the\ninterconnections largely draw themselves. Each module\naccepts a particular type of input data and produces another type as output. By matching the data types, we\nform the required connections.\n\nThis idea of letting the data define the connections, rather\nthan imposing them externally gives rise to what we call\na data centered approach to modularity using undirected\nmessages. In such a system, consumer processes declare\nthe types of data they are interested in and producer processes declare the type of data they distribute. Based on\nthis data centered approach, we have developed a data\nexchange mechanism that we call the Telerobotics Interconnection Protocol, or TelRIP.\n\nIntroduction\n\nThe Universities Space Automation and Robotics Consortium (USARC) was formed in 1989 to promote research into robotics and telerobotics for spawbased applications. It consists of five universities (Rice University,\nTexas A&M University, the University of Texas at Arlington, the University of Texas at Austin, and the University\nof Texas at El Paso) in conjunction with NASA\xe2\x80\x99s John- TelRTP is described in detail elsewhere [l]. Here ia a\nson Space Center. One of our major areas of research brief summary of the key points:\nhas been teleoperation over long distances, typically involving long delays, low bandwidth, and possible loss of\n0 It supports a uniform interface to a variety of underdata. In the course of this research we have assembled an\nlying communications media.\nexperimental telerobotics system which connects robots\n0 Processes communicate by exchanging Data Objects.\nand control sites at the universities and JSC.\n\nIn order to conduct research efficiently in this distributed\n0 Byte order and format translation are handled autoenvironment we have built our system using a construcmatically.\ntion set approach: it consists of a number of independent\nm Undirected messaging provides data distribution\nmodules which may be connected together in any (reasonbased on properties of the Data Objects.\nable) configuration. This independence allows each group\nof researchers to concentrate on their own area of expertise and have their work immediatly integratable into the The last item is the key to the successful modularity of\noverall system.\nour system. Rather than data being sent to a specific\n\n523\n\nn\n\nI\nt\n\nI\nI\nI\nI\nI\nI\nI\nI\n\nI\nI\nI\n\n-------r-\n\nI\n\nI\n\nI\nI\nI\nI\nI\n\nFigure 1: A distributed Telerobotics System\n\n524\n\ndestination, resulting in a hard wired\xe2\x80\x9d connection, mod- or Properties which are used in classifying and directing\nules specify the types and other characteristics of the data objects.\nthey wish to receive. An \xe2\x80\x9dautomatic connection\xe2\x80\x9d will be\nThese properties include:\nmade to whichever other modules provide the required\ndata. Since this connection is dynamic, modules may be\nA timestamp, which gives the time at which an obadded to or removed from the configuration at any time\nject was distributed. TelRIP maintains synchronkawith minimalimpact on the rest of the system. This gives\ntion Of thestamps among System.\nthe system a high degree of both flexibility, and robustness.\ne A source identifier or address.\nConceptually, our construction set consists of three come An intended destination address.\nponents:\ne\n\nQualifying properties (e.g.\ngenerated, etcl.\n\ncompressed, operator\n\ne\n\nA set of Functional Modules which perform fairly\nnarrowly defined, hopefully generic, functions.\n\ne\n\nA standard, minimal vocabulary of data objects Although there is no explicit class hierarchy, it is convewhich encapsulate the information communicated nient to group the object types into classes. Table 1 is\namong the modules.\na brief description of the major object types used in our\nsystem.\nA data exchange mechanism which delivers the data\nobjects from the producers to the consumers, that is,\nit forms the connections between modules.\n\ne\n\n3.2.\n\nFunctional Modules\n\nEach of these conceptual components has a physical real- Like the data object types, the functional modules may\nization:\nbe grouped into classes:\ne\n\nThe functional modules are implemented as programs, or \xe2\x80\x9dProcessing Modules\xe2\x80\x9d\n\ne\n\nA common vocabulary is achieved by defining standards for data objects which are used by all programs. These standards define both the format of\nthe data, and the semantics.\n\ne\n\nData exchange among modules is handled by TelRIP.\n\n3\n.\n\nSystem Components\n\nTelRIP provides the framework, or building board, for our\nconstruction set. The remaining components are a set of\nprograms to implement the required functional modules,\nand a common data object vocabulary.\n\n3.1.\n\nData Object Vocabulary\n\nThe atomic unit of communication between modules is\nthe TelRIP Data Object. A data object is similar to an\nobject oriented programming object in that it contains a\nself identifying data record. TelRIP data objects lack an\nexplicit class hierarchy and imbedded method code. HOWever, they incorporate additional ancillary information,\n\n525\n\nClass\n\nFunctionality\n\nHand Controller Interface\nController Semantics\nSimulation Display\nVideo Image Display\nControl Panels\nInteroperator Communication\nAudio Response\nRobot Interface\none for each type of robot\nMotion Control\nMotion Semantics\nTransform Generator\nForce Control\nVideo\nFrame Grabber\nImage Compressor\nMonitoring\nHuman Performance\nSystem Analysis/Debugging\nUtilities\nVideo Recorder\nAudio Recorder\nTable 2: Functional Modules\n\nFunction\ntransmit a video image\n\nContents\nimage size\npixels\nfx I fy 1\nnx, ny,71%\n\nCOHMAND\n\ntransmit force and\ntorque data\nsend a general command\n\nHAND-CTLRSTATE\n\nClass\nsensor\n\nType\n\ntransmit raw hand controller\n\nIMAGE\nFORCE-TORQUE\n\ncontrol\n\ndata\n\nparameters\n\ncommunication\n\nTEXTXESSAGE\nAUDIORECORD\n\ncommand code\noptional arguments\naxis values\nbutton states\n\nreturn an error condkion\nJOINTSTATE\nspecify joint angles\nJOINT-TRAJECTORY\nspecify a path in joint space\nCARTESIANSTATE\nspecify position and orientation\nof end effector\nCARTESIAN-TRAJECTORY\nspecify a path in Cartesian\nspace\nHOMOG -TRANS FORM\nspecify viewpoint to\neffector transformation\nMOTIONSEMANTICS-CONFIG specify mapping from hand\ncontroller to end effector\nHAND-CTLRDESCRIPTION\ncharacterize a specific\nhand controller\nCANIXADESCRIPTION\ndescribe camera view\nERROR\n\nmotion\n\nf%\n\nerror code\n81, --,&\narray of joint states\nX,Y,Z\n\nroll,pitch,yaw\narray of Cartesian states\nmatrix coefficients\n\naxis modes\nreference frame\ngains\naxis assignments\ncamera location\nfield of view\nprinted interoperator communication text characters\nspoken interoperator communication, sample rate\naudio command response\naudio samples\n\nTable 1: Data Object Types\n\n3 3 Processing Modules\n..\n\nconnections among modules to be displayed and modified\nwhile the configuration is running.\n\nThe functional modules are implemented by a set of programs or Processing Modules. Table 3 lists the major\nprograms in our construction set. The origins of some of VCP Currently the largest class of modules is what we\ncall the Operator Interface Components. By implementthe program names are, as they say, lost in antiquity.\ning these as a set of narrowly scoped components rather\nA few of these will be described in more detail:\nthan a single monolithic entity, we can construct a Vitual Workstation (VWS), where the operator interface for\na variety of configurations can be assembled on a single\nTSM Although the automatic interconnections pro- physical workstation.\nvided by data type matching are adequate for most single\nrobot, single controller scenarios, when multiple instances We have extended the system independence concepts of\nof a particular functional module are present in a config- TelRIP to the construction of operator interfaces with a\nuration, it is necessary to be able to distinguish them. system called the Virtual Control Program (VCP). VCP\nThis is done using the address property mechanism: each allows a user interface to be defined in a very straightinstance of a duplicated module has a unique value of the forward way, independent of the system on which it will\naddress property. This property may be specified either be displayed. This allows a programmer to write a single\nas a physical address or a functional address.\nprogram with a graphical user interface which will run on\nOpen Look, Motif, Windows, or any other window system\nTo simplify the dynamic management of these properties without having to know how to program any of them.\nin situations where control is passed from one robot or\ncontroller to another, we have developed a program called Interfaces are defined in terms of commands, parameters,\nthe Telerobotics Session Manager (TSM). TSM allows the adjustments, etc. aud are implemented using buttons,\n\n526\n\nProgram\nspaceball\nhciobot\n\nTDM\ntdmsim\ndisplayx\ncmdks\n\n\xe2\x80\x9cP\nchat\nphone\naudioresp\nremot e-*\nf orcedsp\n\nmot ion\ntf b\npcgrab\nvcompress\nsggrab\nts m\n\nrmonitor\nxmon\nvcr\ndat\nsiggen\n\nFunction\nconvert device specific codes into\ngeneric hand controller objects\ngenerate robot control objects\nfrom hand controller objects\ngraphical simulation display\ninterface TDM to TCS\ndisplay a video image on a workstation screen\ngeneric command line interface\ngeneric graphical user interface\nprinted interoperator communication\naudio interoperator communication\nvoice response to commands\ntranslate robot control objects\ninto device specific commands\ndisplay forces and moments\nmotion semantics controller\ntool frame builder\ndigitize one frame of video\ncompress a frame of video for long\nhaul transmission\ngrab and compress video with remote pan and zoom\nTelerobotic Session Manager\ngather human performance data\nnetwork monitor\nvideo recorder\naudio recorder\naudio signal generator\n\n4.1.\n\nManual Controller Performance\n\nA standardized task was performed by a number of operators using several different manual controllers. The data\nstreams were analyzed to determine the human performance parameters of each session.\n\n4.2.\n\nMultiple Robots,\ntrollers\n\nMultiple Con-\n\nThis configuration demonstrates the interoperability and\ndynamic reconfigurability of our system modules. Two\nrobot worksites (A and B) and two robot control sites (Y\nand Z) performed the following scenarios:\n0\n\nA task at site A was begun by controller Y. Midway\nthrough the task control was switched to site Z, who\ncompleted the task.\n\n0\n\n0\n\nController Y performed a task at site A. Using the\nsame control components, he performed a second\ntask at site B.\nController Y performed a task at site A simultaneous\nwith controller Z performing a task at site B.\n\n4.3.\n\nExtended Teleautonomous Control\n\nModules intended to increase the performance of an operator controlling a remote manipulator under adverse\ncircumstances (delays, restricted visibility, etc) will be\nadded to the basic configuration. These include: Time\nand position clutches, time brake, voice control, and force\ncontrol.\n\nTable 3: Processing Modules\n\ntext items, sliders, or whatever appropriate constructs\nare available from the target windowing environment. A 4.4.\n\nNetwork Stress Testing\n\nsystem dependent program (VCP main) runs on the target display and communicates with the client Processing The reliability and robustwss of the system are examined\nModule to generate the GUI display and updates and by increasing the stress (typically an increased data rate)\ncommands between the PM and the display.\non various components.\n\n4.5.\n\n4.\n\nDemonstration Configurations\n\nWorkload Analysis in Shared\nHuman-Autonomous Tasks\n\nReal-time measurement of human workload and overall\nWe have built or are currently building a number of system performance will be made on a set of tasks having\ndemonstration configurations using these components. varying degrees of operator involvement and autonomous\nThese include:\ncontrol.\n\n527\n\n5.\n\nAcknowledgments\n\nThis work has been supported by NASA under grant\nNAG9-461 and by the State of Texas under TATP grant\n999903-267\xe2\x80\x99.\n\nReferences\n[l] J.D. Wise and L.A. Ciscon, TeleRobotics Interconnection Protocol Operating Manual,\xe2\x80\x9d Tech. Rep.\n9103, Universities Space & Automation Research\nConsortium, 1991.\n\n528\n\n'