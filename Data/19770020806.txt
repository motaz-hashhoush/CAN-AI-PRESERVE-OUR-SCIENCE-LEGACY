b'General Disclaimer\nOne or more of the Following Statements may affect this Document\n\nThis document has been reproduced from the best copy furnished by the\norganizational source. It is being released in the interest of making available as\nmuch information as possible.\n\nThis document may contain data, which exceeds the sheet parameters. It was\nfurnished in this condition by the organizational source and is the best copy\navailable.\n\nThis document may contain tone-on-tone or color graphs, charts and/or pictures,\nwhich have been reproduced in black and white.\n\nThis document is paginated as submitted by the original source.\n\nPortions of this document are not fully legible due to the historical nature of some\nof the material. However, it is the best reproduction available from the original\nsubmission.\n\nProduced by the NASA Center for Aerospace Information (CASI)\n\nii\n\nReport No. 77-048\nContract No. NAS8-32047\n\nPAYLOAD.SOFTWARE TECHNOLOGY\nSOFTWARE TECHNOLOGY DEVELOPMENT PLAN\n{ N ASA-CR-150143) PAYLOAD SOFTWARE \t\n/\t\nTECHNOLOGY: SOFTWARE TECHNOLOGY DEVEZOPEENT\nPLAN ("S COMPUting, Inc.- Huntsville, Ala.)\n133 p HC A07/MF A01 \t\nCSCZ 09H\t\n\nN77-27750\nHnclas\nG3/61 36694\n\nJune 22, 1977\t\n\nPrepared. far:\nG.eo:rge C. Marshall Space Flight Center\nNational Aeronautics Space Administration\nMarshall Space Flight Center, Alabama 35812\n\nM&S OMPUTIt-4G, INC.\n\n`{=\n\nTABLE OF CONTENTS\nSection\n\nPage\n\nLIST OF FIGURES\n\nvi\n1\n\nPurpose\n\n1\n\n1.2\n\nScope\n\n1\n\n1.3\n\nOrganization\n\n3\n\n1.4\n2.\n\nINTRODUCTION\n1.1\n\n1.\n\nReferences\n\n6\n\nSUMMARY\n\n7\n\nZ. 1\n2.2\n\nRelation to Other Technology Development\n\n11\n\n2.3\n\nIdentification of Priorities\n\n13\n\n2.4\n3.\n\nDescription of Software Technology Development\nItems\n\nDevelopment Schedule\n\n15\n\n7\n\nSOFTWARE TECHNOLOGY ITEM DEVELOPMENT PLANS\n\n19\n\nRequirements Decomposition and Structuring\nGuidelines (TI-01)\n\n19\n\n3. 1. 1\t Problem Definition\n3. 1. 2 Technology Development Requirements\n3. 1. 3\t Suggested .App-roaclh\n3. 1.4 Schedule and Resources\n3. 1. 5\t Verification of Results\n3. 1.6\t Related Studies\n\n19\n19\n19\n20\n20\n20\n\nRequirements-to-Code Translation Aids (TI-02)\n\nZ3\n\n3. 2. 1 Problem Definition\n3. Z. 2 Technology Development Requirements\n3. 2. 3 Suggested Approach\n3.2.4 Schedule and Resources\n3. 2.5\t Verification of Results\n3.2.6\t Related Studies\ni\n\n23\n23\n23\n24\n24\nZ4\n\n3.1\n\n3.2\n\n\t\n\nTABLE OF CONTENTS\n(Continued)\nFagg\n\nSection\n\n3.3\t\n\nSimplified Development System Demonstration\nModel (TI-03)\n3.3.1 Problem Definition\n3.3.2 Technology Development Requirements\n3.3.3 Suggested Approach\n3.3.4 Schedule and Resources\n3.3.5 Verification of Results\n3.3.6 Related Studies\n\n3.4\t\n\nQuery -Guided Implementation Methods (T1-04)\n\n27\n\nProblem Definition\nTechnology Development. Requirements\nSuggested Approach\nSchedule and Resources\nVerification. of Results\nRelated Studies\n\n27\n27\n27\n28\n\n3.4.1\n3.4.2\n3.4.3\n3.4.4\n3.4.5\n3.4.6\n\n28\n28\n\n3.6\t\n\n\t3.7\t\n\nStandardization Criteria for NASA Soft-ware (TI-05)\n\n29\n\n3.5.1 Problem Definition\n3.5.2 Technology Development Requirements\n3.5.3 Suggested Approach\n3. 5.4 Schedule and Resources\n3.5.5 Verification of Results\n3.5.6 Related Studies\n\n\t3.5\t\n\n29\n29\n29\n30\n30\n30\n\nAO L De sign Guideline s /Standards (TI-06)\n\n31\n\n3.6.1 Problem Definition\n3.6.2 Technology Development. Requirements\n3.6.3 Suggested Approach\n3.6.4 Schedule and Resources\n3. 6.5 Verification of Results\n.3.6.6 Related Studies\n\n31\n31\n31\n31\n32\n32\n\nAOL Compiler Generator Cost Factors (TI-07)\t\n\n33\n\n3.7. 1 Problem Definition\t\n3.7.2 Technology Development-Requirements\t\n\n33\n33\n\nILI\n\nTABLE OF CONTENTS\n(Continued)\no\n\nA\n\nPage\n\nSection\n3. 7. 3 Suggested Approach\n3. 7. 4 Schedule and Resources\n3. 7. 5\t V.erification of Results\n3. 7. 6\t Related Studies\n\nffia\n\n3.9\n\nvs\nA\n\n3.10\n\n3.11\n\n35\n35\n35\n35\n36\n\nTask Control Structures for Distributed Processor\nEnvironments (TI-09)\n\n37\n37\n31\n37\n38\n38\n38\n\nProgram Organization Methods for Real-Time\nFault Recovery (TI-10)\n\n41\n\n3. 10.1\t Problem Definition\n3. 10.2 Tedhnology Development Requirements\n3. 10.3 Suggested Approach\n3. 10.4 Schedule and Resources\n3. 10.5\t Verification of Results\n3. 10.6\t Related Studie s\n\nRP\n\nIr\'erface Criteria for NASA- Distributed Processor\nApplications (TI-08)\n\n3. 9. 1\t Problem Definition\n3.9.2 Technology Development Requirements\n3.9.3 Suggested Approach\n3. 9.4 Schedule and Resources\n3. 9.5\t Verification of Results\n3.9.6 Related Studies\n\n3.8\n\n33\n34\n34\n34\n\n3. 8. 1\t Problem Definition\n3. 8. 2 Technology Development Requirements\n3. 8. 3 Suggested Approach\n3. 8 4 Schedule and Resources\n3. 8. 5\t Verification of Results\n3.8.6\t Related Studies\n\nIsm\n\n41\n41\n41\n41\n42\n42\n\nAdaptive Highm-Speed Buffering Techniques for\nDynamic Ne-tworks (TI-1.1)\n\n43\n\n3. 11.1\t Problem Definition\n3. 11.2 Technology Development Requirements\n3. 11.3 Suggested Approach\n3. 11.4 Schedule and Resources\n3. 11.5\t Verification of Results\n3. 11.6\t Related Studie s\n\n43\n43\n43\n44\n44\n44\n\niii\n\n36\n\n36\n\na\n\nTABLE OF CONTENTS\n(Continued)\n\nSection\n\nPmt\n\n3. 13\n\nControl Structures for Adaptive Systems (TI -12)\t\n\n45\n\n3. 12.1\n3. 12.2\n3. 12.3\n3. 1.2.4\n3. 12.5\n3. 12.6\n\n3. 12\n\n45\n45\n45\n4.5\n46\n46\n\nProblem Definition\nTechnology Development Requirements\nSugge sted Approach\nSchedule and Resources\nVerification of Results\nRelated Studies\n\nImpacts of Natural Communication Methods on NASA\nPayload Systems (TI-13)\n\n47\n\n3. 13.1\n3. 13.2\n\n47\n\n3. 1.3.3\n3. 13.4\n3. 13.5\n3. 13.6\n\n3.14\n\nProblem Definition\nTechnology Development R.equirexneats\nSuggested Approach\nSchedule and Resources\nVerification of Results\nRelated Studies\n\nAdaptive Search and\n\nSort Routines (TI-14)\n\n3. 14.1\n3. 14.2\n3. 14.3\n3. 14.4\n\n47\n47\n48\n48\n48\n49\n\nProblem Definition\nTechnology Development Requirements\nSugge stet Approach\nSchedule and Resources\n3. 14..5 Verification of Results\n3. 14.6 Related Studies\n\n3.15\n\n49\n49\n49\n\nRestructed Image Analysis\nProcessing (TI-15)\n\n53\n\nSoftware for Parallel\n\n3. 15. 1 Problem Definition\n3. 15.2 Technology Development Requirements\n3. 15. 3 Suggested Approach\n3. 15.4 Schedule and Resources\nVerification of Results\n3. 15. 6 Related Studies\n3..1.6\t\n\nOptima L Large\n(TZ-16)\n\nArray Partitioning Procedures\n\n3. 16. 1 Problem Definition\n3. 16. 2 Technology Development Requirements\niv\n\n50\n\n50\n51\n\n53\n53\n\nIL\n,g\n\nTABLE OF CONTENTS\n(Continued)\n\ny^\n;-\n\nSection\n\npage\n\nWU\n\n3. 16.3 Suggested Approach\n3. 16.4 Schedule and Resources\n3. 16.5 Verification of Result s\n3. 16. 6 Related Studie s\n\n3.17\n\n\'\n\n3.18\n\n59\n\nClassification of Error Mechanisms (Tr-17)\n\n61\n\n3. 17. l\n3. 17.2\n3. 17.3\n3. 17.4\n3. 17.5\n3. 17.6\n\n\'\nY\n\n57\n58\n58\n\n61\n\nGuidelines for Design Doctmentation Consistency\n(TI-18)\n3. 18.1\n3. 18.2\n3. 18.3\n3. 18.4\n3. 18.5\n3. 18.6\n\n3.19\n\nProblem Definition\nTechnology Development Requirements\nSuggested Approach\nSchedule and Resources\nVerification of Results\nRelated Studies\n\nProblem Definition\nTechnology Development Requirements\nSugge ste d Approach\nSchedule and Resources\nVerification of Results\nRelated Studies\n\n61\n61\n62\n62\n62\n\n63\n63\n63\n63\n\n64\n64\n64\n\n65\n65\n65\n\n3. 19.4 Schedule and Resources\n\n66\n\n3. 19.5 Verification of\n3. 19.6 Related Studie s\n\n\'.\n3.20\n\naL\n\n65\n\n3. 19.1 Problem Definition\n3. 19.2 Technology Development R.equirement.s\n3. 19.3 Suggested Approach.\n\niF\n\nSoftware Prototypng Methods (\'TI-19)\n\nResul ts\n\n66\n66\n\nSoftware Technology Monitoring (TI-20)\n\n67\n\n3. 20.1\n3.20.2\n3.20.3\n3. 20.4\n3. 20.5\n3. 20.6\n\n67\n67\n67\n68\n68\n\nProblem Definition\nTechnology Development Requirements\nSuggested Approach\nSchedule and. Resources\nVerification of Results\nRe lated Studies\nv\n\n68\n\np,^\n\n{\n\ni"\' ,\ns\n\n\t\n\n1\t\n\n.l\t\n\nl\t\n\nR\n\nLIST OF FIGURES\nPage\n\nFigure No._\n1-1\t\n\nPayload Software Technology Study Plan\n\n2-1\t\n2-2\t\n2-3\t\n\nTechnology Driver-Item Correlation Table\nSoftware Technology Item -to -Item Correlation\nTechnology Item Priority\nPriority Evaluation\n\n2-4\t\n\n4\n\nS\n\ns;\n\nvi\n\n2\n10\n12\n14\n16\n\nj\n\nz.\t\n\nINTRODUCTION\n\nThe Software Technology Development Plan is the prime end-!tern\nof the basic Payload Software Technology Study (NASA Contract NAS8-32047).\nThis plan was prepared by M&S Computing, Inc., for Mr. John Capps,\nCOE, EF-15, Marshall Space Flight Center. As shown in Figure 1-1, the\nSoftware Technology Development Plan was derived from a study composed\nof three consecutive phases. The purpose of the first phase was to identify\nsoftware technology drivers. The second phase consisted of a detailed\nanalysis of the technology drivers, from which came a list of potential\nsolutions - Technology Items. Phase III provided a critical assessment of\nthe technology items, in terms of development cost, time and priority. The\nmost promising (or urgent) items were subsequently expanded into individual\ntechnology development plans for incorporation into this report.\n1. 1\t\n\nPurpo s e\n\nThe Software Technology Development Plan was formulated to define\nprogrammatic requirements for the advancement of Software Technology.\nThe initial study was designed to identify drivers and suggest solutions to\nmeet the require, m ents of space flight in the 1980-1990 time period, and to\nproject potential technological needs frown 1990 through the end of the century.\nAll identified software technology requirements were reviewed to\nestablish the following: which requirements can be fulfilled within current\nstate-of-the-art technology; which technology requirements can be developed\nwith a high probabiiity\'of success and a significant payoff in benefits; and\nwhich requirements pose risks (in cost and success) but are considered\nmandatory for other .reasons. The resulting software technology development\nitems are compiled into this development plain. The plan describes\njustification, cost and schedule, potential payoff benefits, measurable\nmilestones, methods of approach, and methods for verification of results.\nA large number of Software Technology Items were identified;\nhowever, it does not make sense for NASA to duplicate technology development which is being satisfactorily performed by industry or other government\nagencies. Therefore, this plan is dedicated to fresh ideas or known items\nwhich are not being worked on. Goals have been established by the Outlook\n.For Space (OZ`S) and the Office of Aero-nautics and Space Technology (OAST)\nWorkshops. This plan can only identify the next step toward these goals.\nHopefully, it will be a major step..\n1.2\t\n\nIT\t\n\nSeo: =\n\ne\n\nThe primary emphasis in the Software Technology Development Plan\nis onboard. processing in a real-time environment. Payload analysis was\nbased on projected Space. Transportation System (STS) payloads as described\n\n\t\n\nPAYLOAD SOFTWARE TECHNOLOGY\nSTUDY PLAN\n\nPHASE 1,\n\nPAYLOAD\t\n\nF SELECTION\t\n\nEXPERIMENT\nANA L -SIS\nY\nPAY 1juAli 11,\n\nI\n\nSOFT WARE\'\n\nRIZA\nOM\ntil)\nREASSESS\n\nAND SMINC\n.1 PHASE It\n\nACOMPELE\t\nly\n.\nSU RvE OF\nT LOGY\nECHNO\n\nREVIEW OF\n1 TECHNOLOGY\t\nFORECASTS\t\nITECTINOLOGY]i\n\nit r\nMIDTERM\n!\n_P\nREPORTT\n\nAR EA\nIXEGMNOLOG^Y\n,\n\nPIlAsr- m\nDE T\n\n,\nMLE 0\t\n\n.\nCOST, / TIME I\t\n\nANA\t LYSIS\nTECIINOLOGY\nOF\t\n\n\xe2\x80\x94.10: PRIORITY\t\n\nASSESSMENT\t\n\nPHASE III\n\nTECHNOLOGY\t\n\nF INAL\n\nDEVELOPMENT\t\n\nREPORT\n\nANALYSIS\n\nI)RIVERS\n\nEG^JNOLOGY\t\nF SLOPME\nL\nDEV-ELOPMlENqJ"!\nIT -CLM\n\t\nITEMS\n\nT ECI-INGLOGY\nJ)EVELOPMENTPLANS\n\n{-\n\nin the July 1975, Shuttle Sortie Payload Description (SSPDA), and from OZ\'S\nand OAST space technology forecasts. This data was supplemented. with an\nin-depth review of detailed payload studies, Design Reference Mission\nAnalysis (D.RM), Integrated Mission Analysis and Planning (IMAP), user\'s\ninformation, previous space programs and studies, and in-house expertise.\n\nt:\n\nThe technology development plans resulting from this study must be\ni.mplem.entable during the 1980\'s in order to meet the requirements in the\n1990\'s. It is assumed, for this study, that the primary development vehicle\nduring this time will be the Space Transportation System. Therefore, payload analyses performed during this study were limited to those payloads\ncurrently planned to be carried on the Space Transportation System.\nFinally, it should be noted that this study was primarily concerned\nwith software technology; .not with computer systems technology. A specific\neffort has been made to limit the consideration of Technology Items to pure\n(or near-pure) software technology development. No attempt was made to\nanalyze future Data .Management Systems, as a whole, to drive out technology\nrequirements. Such an effort certainly has merit, and might result in\nsoftware technology requirements; however, many software technology\nrequirements can be identified without an end-to-end data management analysis..\n1.3\t\n\nOrganization\n\nThis plan is orga. nized into three sections with three accompanying\nappendices as sum marized in Table 1-1. Section I is standard introductory\n,\nmaterial and is self-explanatory.\nSection II is an executive sum rnary providing an overview of the\nremainder of the document. It gives a brief summary of the Software\nTechnology Development studies contained in the plan., provides an overall\nschedule, and identifies any critical sequential or complementary relationships.\nThis section briefly summarizes related technology goals, either in hardware\nor software items, being pursued elsewhere. It also lists the priority relationships existing so that the plan can easily be adjusted to varying budgetary\nconditions.\nSection III gives a detailed description of each . selected Software\nTechnology Development study. Each Software Technology Development Item\nis allocated a subsection. Each subsection describes the causes leading to\nthe technology need, and relates the problem to the supporting data accumulated. during Phases I and II of this study. It defines the magnitude of potential\ncost or performance benefits, as well as a summary of the anticipated costs\nof 4.ssociated technology development.\n\t\nz\na\n\n3-\n\nI\t\n\ni\t\n\nI\t\n\nI\t\n\nI\t\n\n-,-\t\n\nI\t\n\nt\t\n\nt\t\n\nI\n\nThis section also describes the apparent technological solutions and\nassociated technology development requirement(s). Associated hardware\nor systems technology items are described to ensure that all facets of the\nproblem, as well as its solution, are clarified. Next, the potential approach\nthat is likely to accomplish the stated technological objective is outlined.\nSubsequently, schedules and resources required to accomplish this particular\ntechnological development item are identified. Available means of intermediate\nand final measurable verification of the results associated with this item are\nlisted.\nThe appendices provide a description of the technology requirements\nfrom which the Technology Development Studies were selected. The\ntechnology requirements axe also related to the experizxsents from which\nthey were derived wherever relevant.\n\n_4_\n\nt4\n\n.z\n\nPHASE III REPORT OUTLINE\nvs\n\nr\n\nSOFTWARE TECHNOLOGY DEVELOPMENT PLAN\n\nSECTION. I - INTRODUCTION. - This section describes the purpose of\nthis plan, the scope of the plan, and the manner in which the plan is\n\norganized.\nSECTION II - SUMMARY - This section is an executive summary of the\n\nSoftware Technology Develop m- ent Plan and its derivation.\nSECTION III _\t- DESCRIPTION OF SOFTWARE TEC_HNOLOGY_ITE,\n\nThis section is the description and planned approach to each of the\nSoftware. Technology Development studies selected.\n3. 1 Item TI- OI\nI\n\n3. n Item TI -n\nAPPENDIX. _A - Technology Driver Derivation\nAPPENDIX B - Software Technology Item Derivation Worksheets\nAPPENDIX -C - Co st/ Time Prio rity As s e s sment\n\nTable l - l\n5-\n\n1.4\t\n\nReferences\n\nA thorough survey was made of current literature as well as\ngovernment, industry, and other publications relating to software technology.\nThe prime forecasting references used in this study are as follows:\no\t\n\nOutlook for Space, NASA Document, January 1976.\n\no\t\n\nA Forecast of Space Technology 1980-2000, January 1976.\n\no\t\n\nOAST Space Theme Workshop, NASA Document, April 1976\n(Quick-Look Comments and Working Papers).\n\no\t\n\nSpace Electronics Technology Summary, March 1976.\n\no\t\n\nOAST Summer Workshop, NASA Document, August 1975.\n\no\t\n\nInformation Processing/Data Automation Implications of\nAir Force Command and Control Requirements in the 1980\'s\n(CCIP\'s), 1975.\n\no\t\n\nFindings and Recommendations of the Joint Logistics\nCommanders Software Reliability Work. Group, November 1975.\n\no\t\n\n"Key Developmnents in Computer Technology: A Survey,\'\'\nIEEE Computer Magazine, November 1976.\n\no\t\n\nIEEE Proceedings, Second International Conference on\nSoftware Engineering, IEEE Catalog No. 76CH1125-4C,\n\nY\n\nOctober 1976.\n\no\t\n\n\'\'\'New Directions in Space Electronics,\'\'\' Peter R. Kurzhals,\nAstronautics & Aeronautics Magazine, February 1977.\n\no\t\n\nSoftware Technology Present and Future, Bobby Hodges,\n14th Annual Southeast Regional ACM Conference, April 1976.\n\n-6-\n\n2.\t\n\nnn\t\n\nSUMMARY\n\nThis section provides a top-level view of the Software Technology\nItems identified in the study, a composite development schedule, relationship\nto other technology developments and an identification of development,\npriorities, The Software Technology iterns described in this section were\nselected in order to support efforts to:\no\t\n\nincrease the capacity of space-to-earth communication links.\n\no\t\n\nMeet the requirements for human control of complex\ninstruments and remote systems,\n\no\t\n2. I\t\n\nRemove limitations on data compression and information\nextraction techniques.\n\no\t\n\n-\t\n\nReduce the high cost of meeting flight software reliability\nrequirements.\n\no\t\n\na;.\t\n\nSimplify, reduce the cost of and make usable complex\nsoftware systems.\n\nDescription of Software Technology Development Items\n\nPhase I of this study concentrated on evaluation of the processing\nm\nrequi.re, ents (sizing, speed, input/output rates, etc.) of representative\nspace missions, primarily Spacelab, anticipated for the coming decade.\nThis part of the study provided the basis for selecting drivers of software\ntechnology. Consistent with expectations, problems were not peculiar to\nspecific missions, instruments or applications; they were common to\nrnany classes of missions, instruments, and applications. Software\ntechnology advancements do not just require a new algorithm or unique\napproach to a given problem. Software technology advancement needs tend to\nfall in broad, general improvement categories as follows;\no\t\n\nMethods for containing, controlling, and reducing data\nrate and volume,\n\no\t\n\nMethods of improving information content.\n\no\t\n\nTechniques to .r educe cost of software development.\n\no\t\n\nTechniques for improving software reliability and simplifying\nverification/ validation activity,\n-7-\n\nz\n\no\t\n\nTechniques to capitablize on the potential offered by\nbreakthroughs in hardware technology.\n\no\t\n\nKnowledge of how to use the new hardware technology.\n\nThe problems and needs thus identified were thoroughly assessed.\nand compiled into a list of fifteen Software Technology Drivers as shown\nin Table 2-I and described in Appendix A. The Technology Drivers\nassociated with Software Development must be considered the most\nimportant. rinless significant improvements are made Yn this area, all\nother related technologies will be stunted because the associated software\nwill be too costly and/or too unreliable. In Software Systems Architecture,\nmost of the Technology Drivers are related to LSI technology; L e. , the\navailability of very low-cost processing systems. These systems are\nparticularly suitable for onboard usage and therefore receive significant\nemphasis. The remaining Technology Drivers are primarily based on\nanticipated increases in onboard processing of image type data, as well\nas on anticipated increases in the rates of data to be acquired.\nIn Phase II of the study, the fifteen Software Technology Drivers\nwere analyzed in detail in search of potential solutions to the problems\nposed. This analysis resulted in identification of over sixty Software\nTechnology Items.. Twenty of these were \xc2\xad ;Ietermi:ned to require forced\nadvancement by NASA if current NASA plans are to be met. The twenty\nSoftware Technology Items are shown in Figure z-1 as related to the\nTechnology Drivers from whic=h they were derived. (Blocks containing\nasterisks represent relationships established during Technology Development Analysis activities of Phase M. Asterisks in the TI.19 row indicate\nsecondary benefits that may be derived from use of software prototyping. }\nThe total numbe r of Technology Items identified may be irnpo s si:ble\nto implement within the resource constraints. Therefore, during Phase\nIII, cost estimates and priorities were assigned to the twenty Technology\nItems:. The result is a recommended set of Software Technology Development Plans. These were obtained through evaluation and selection of the\nmost cost effective set of Technology Items. The interrelationship of the\nTechnology items and dependencies on other technologies are as described\nin the remainder of Section 2.\n\n-8-\n\n\t\n\nL.\n\nTECHNOLOGY DRIVER SUMMARY\no\t\n\nSOFTWARE DEVELOPMENT\nSOFTWARE DESIGN ENGINEERING\n-\t\n\nTREND TOWARD S/W DEVELOPMENT\nBY NON-PROGRAMMERS\nFAULT-FREE SOFTWARE\nAPPLICATION-ORIENTED LANGUAGE\nDESIGN METHODOLOGY\nLOST COST DEVELOPMENT OF AOL\nCOMPILERS\n\no\t\n\nSOFTWARE SYSTEMS ARCHITECTURE\n(DISTRIBUTED) SYSTEM PARTITIONING/\nINTERCONNECTION TECHNIQUES\nVERY LARGE STORAGE ACCESS\nSIMPLIFICATION\nSOFTWARE FAULT (OWN OR INDUCED)\nDETECTION\nSOFTWARE RECOVERY (AFTER FAULT\nDETECTION)\nHIGH-SPEED BUFFERING TECHNIQUES\nDESIGN AND CONTROL OF ADAPTIVE\nSOFTWARE PROCEDURES\n\nUSE OF "NATURAL" COMMUNICATION\nMETHODS\n\nTECHNOLOGY DRIVER -ITEM CORRELATION TABLE\nTI\n\nSOFTWARE TECHNOLOGY ITEM\n\nt f\t\n\nI\n\nQUERY-GUIDED IMPLEMENTATION MIETHODS\n\n5\n\nSTANDARDI ZATION \'CRITERIA FOR NASA SOFTWARE.\n\n6\n\nAOL DESIGN GUIDEL t NES/STANDARIDS\n\n7\n\nAOL COMPILER GENERATOR COST\n\n1 d\n:5\n\nSIMPLIFIED SOFTWARE DEVELOPMENT SYSTEM DEMONSTRATION MODEL\n\n4\n\n12\n\nREQUIREMENTS-TO-CODE TRANSLATION AIDS\n\n3\n\nSOFTWAIU E TECHNOLOGY DRIVER- PS3 f\t 4 ]l 5\n6\n7\n8\n9\n10\n11\n\nREQUIREMENTS DECOMPOSITION AND STRUCTURING GUIDELINES\n\nz\n\n2 1\t\n\nNOX\n\nI\n\nMEN\n\nF\n\nZEN, \\\\\\\\\\\\N\n\nACTORS\nACORS\n\nxmm\n\nINTERFACE CRITERIA FOR NASA DISTRIBUTED PROCESSOR APPLICATIONS\nIr\n\n9\n\nTASK CONTROL STRUCTURES FOR DISTRIBUTED PROCESSOR ENVIRONMENTS\nt\nTHODS\nPROGRAM ORGANIZATION MET HODS F OR REA L -TIME FAULT\n\nAI\n\nR\n\nECOVER y\n\nADAPTIVEBIGII SPEED BUFFERING TECHNIQUES FOR DYNAMIC NETWORKS\n\n12\n\nCONTROL STRUCTURES FOR ADAPTIVE SYSTEMS\n\n13\n\nIMPACTS OF NATURAL COMMUNICATION METHODS ON NASAPAYLOAD SYSTEMS\n\n14\n\nADAPTIVE SEARCH AND SORT PROCEDURES\n\n15\n\nNEE\n\nR,ESTRIUC TUR El);IMAGE ANA LYS[S SOFTWAREF OR PARALLE I-, \'PROCESSING\nOPTIMAL LARGE ARRAY PARTITIONING PROCEDURES\n\n17\n\nGLASSIFICATION OF ERROR MECHANISMS\n\n^ ME E\n^\n\\\\\n\nL\\N\\\\ W\\l,\n\n18\' GUIDELINES FOR DESIGN DOCUMF-NTATION CONSISTENCY\n19\n\nSOFTWARE PROTOTYPING METHODS\n\n20\n\nSOFTWARE TECHNOLOGY MONITORING\n\nNN\n22\n\nEMNIN\nElm\n^\\,\n\nIMII\n\nFigure 2-1\n\n\t\n\nt\n\nAnalysis of the Software Technology Items resulted in the selection of seven\nwhich represent the highest priority and are most apt to result in the earliest\nreturn of appreciable benefits. These are:\nr\n\no\t\n\nTI-01 Requirements Decomposition and Structuring\nGuidelines.\n\no\t\n\nTI-08 Interface Criteria for NASA Distributed Processor\nApplications.\n\no\t\n\nTI-09 Task Control Structures for Distributed Processor\nEnv. ronment s .\n\no\t\n\nTI -10\n\no\t\n\nTI-15 Restructured Image Analysis Software for Parallel\nProcessing.\n\no\t\n\nTI-17 Classification of Error Mechanisms.\n\na\t\n\nTI-20 Software Technology Monitoring.\n\nProgram Organization Methods for Real-Tune\nFault Recovery.\n\nThe first five items are very specific and are directed to the major\ngoals of reducing cost, enhancing or enabling functions, improving reliability and reducing the raw data flow. The last two items are more general\nin nature. TI-20, Software \'Technology Monitoring can and most likely will\nresult in significant contributions to all major goals. TI-17 could very well\nbe considered a subset of TI-20.\n2.2 Relation to other, T_echaolag yDey_elo_pment\n-\t\nT\t\n\nDependencies exist between variable independent Technology Items.\nSolution of a problem posed by a Technology Driver requires the full\nconsideration of the interrelationships between these variables as well as\nthe direct relationship to a specific item. This interrelationship is shown\nin the 1-tern-to =Item correlation matrix of Figure 2-2. In this chart relationships are shown which do not necessarily appear in the Driver-Item matrix,\nbecause secondary relationships are identified wherever possible. The\nprimary goal of this: chart is to aid in establishing the overall technology\nDevelopment Schedule described in Section 2.4.\nOther software technology development activities are either underway\n\n\'\t\n\n111-\'-\n\nor have been proposed, both within and outside NASA. The more significant\nof these are discussed in the Software Technolo gy Item\n- Derivation Worksheets (Appendix B).\n\n\t\n\nSOFTWARE TECHNOLOGY\nITEM-TO-ITEM CORRELATION\n\nx\n\nTI-01\t\nX\n\nx\t\n\nX X\t\n\nx\t\nx\t\nx\t\nx\t\n\nx\t\n\nx\t\nx\t\nx x\t\n\n-03\t\n-04\t\n-05\t\n\nx\t\n\n-06\t\n\n-67\t\n-08\n.0\t\n.10\n\nxxX\nx\nx\nx\nx\nxxx\n\nIx\n\n\\x x\t\n\nx\t\nx\t\nx\t\n\nx\t\nx\t\nx\t\n\nx x\t\n\n_lz\t\n\nX\t\n\n-14\t\n\nx\t\n\nx x\nx\t\n\nx\nx\nx\nx\n\nxx\n\n-15\n\nx\t\n\nx\n\n-16\n\nx\n\n-17\t\n\nX\n\nx\n\n&.9 x\t\n-20\n\nx\n\nA\n\nx\t\n\nX\t\nx\n\n-18\t\n\nX\n\n. . . \t. . .\n\nix X- x x x x\n\nx\n\nx\nx\t\n\n- - X. X X x X\nX\n\nFigare 2-2\n-12-\n\nX\n\nx . -x X . X-\t\n\n\\X x\nx\nx\t\nX, x\n\ni\n2. 3\t\n\n1 _\t\n\nIdentification of Priorities\n\nMany factors were involved in seating the priorities of the candidate\nSoftware Technology Items. Once the initial step of identifying a problem\nwas completed, the next step was to evaluate the current and estimated\nstate of the art in the associated technology area. This evaluation is\nreflected. in Appendix C, the Cost/Time/Priority Assessment. The levels\nestablished were based on the following criteria:\n\n\'\t\n`\t\n{\n\n1 - Basic principles observed and reported.\n2 Conceptual design formulated.\n3 Conceptual design tested analytically or experimentally.\n4 = Critical function/ characteristic demonstrated.\n5 - Component/ tested/reviewed in relevant environment.\nsection\n6 - Prototype/draft tested/reviewed in relevant environment.\n7 - Final product tested in operational/ space environment.\n8 \xc2\xad New capability derived from a much lesser operational model.\n9 - Reliability upgrading of an operational mode,.\n.,\t\n\nThese state-of-the-art levels were not used for setting priorities per se.,\nbut were used as aids to help determine whether appropriate advancement\ncould be achieved by industry alone, or if NASA participation would be\nrequixed.\nIn order to facilitate setting priorities, attain consistency, and limit\nsubjectivity, a logic flow was developed as shown in Figure Z-3. This flow\nembodied the major elements of priority as signment and re salted in a rating\nof 0-6 for each technology item. The elements used were:\no\t\n\nEnablement.\n\no\t\n\nCost Reduction.\n\no\t\n\nEnhancement.\n\nEnablernent was subdivided into two categories., critical, and\ndesirable, (Initially, enablement was divided into mandatory and desirable,\nbut as it became evident that none of the items would actually preclude\nspace mission, the mandatory rating was downgraded to critical).\n\nIra\n\n-13-\n\nTECHNOLOGY ITEM PRIORITY\n\n3\n\n2\n\n1\n\niJ-_^.i.\t\n\n\t\ni-\n\nYI\n\nP\n\nKy\t\n\n. -\t\n\nCritical enablement describes an item which could gravely affect\nthe achievement of a major NASA objective ( e. g., 100Ox data at 1/10th\ncost) if it were not resolved. Critical enablement was given a weight of\nb. Desirable enablement describes a technology that would enable a new\nfunction to be performed, or allow additional experimentation with a\ngiven instrument, that would significantly i ncrease the return benefit\nof a payload. Desirable enablement was equated in value to enhancement,\nand thus given a weight of I.\nCost reduction applies to those software items which could have\nmajor effect on the cost of space activity in general. Most of these items\nfall in the category of Software Engineering or Software Development.\nCost reduction was given a weight of 3.\nEnhancement applies to those items that would enhance the total\ninformation gathering and distribution process. This includes unproved\nreliability, more effective processing, higher quality data recovery, and\nother advancements that would be highly beneficial. Enhancement was\ngiven a weight of 1.\n\n^.\t\n\nAfter the initial assessment, other factors ( Drivers affected and\nCost/Benefit Returns) were added in. A value of I was added to each\nTechnology Item for every :Driver upon which it had a primary effect.\nThe Cost / Benefit Return was given a rating of high, medium or low, and\nequated to a weight of 2 for high, 1 for medium and 0 for low. ( Note:\nNeed dates were determined not to be significant factors for these\nTechnology Items.)\n\nT\t\n\nThe priority factors were then summed for each Software Te chnology Item to derive an overall rating as shown in the priority evaluation\nchart in Figure 2-4. The Technology Items identified with an asterisk are\nthose that fail, in the top third of the over-all ratings, and thus are those\nrecommended for immediate NASA consideration.\n\n^-\t\ti\n\n2.4\t\n\ni\n\n1A.\t\n\nDevelopment Schedule\n\xe2\x80\x94_\n\xe2\x80\x94 -\t\n\nA schedule for the develo. prnent or advancement of technology\nrequired by each of the selected Software Technology Items is contained\nwithin each Technology Development Plan. In general, each item is given\na 1978 start date, as most of them are immediately necessary with the\nadvent of the STS operational phase in 1.980 and each will require a year or\nmore to cornplete.\nFor planning purposes it was assumed that development of an\noperational application would take two years after demonstration of a\n-15-\n\nlop\n\nPRIORITY EVALUATION\n\nTI No.\n01\n02\n03\n04\n05\n06\n07\n08;\n09i\nI\nI-A\na%\n11\n\nCritical\ntnablement\n\nx\n\nx\n\nlio\n\n11\n12\n13\n14\n15\n1.6\n17\n18\n19\nZo\n\nCost\nDesirable\t I\nEnablement Reduction\n\nx\n\nx\nx\nx\nx\nx\nx\nx\nx\nx\n\nx\n\nX\n\nx\nx\nx\nx\nx\nx\nx\n\nEnhancement\n\nJ\n\nx\nx\nx\nx\n\nx\n\nx\nx\nx\nx\nx\nx\nx\nx\nx\n\nFigure 2-4\n\nPriority\n5\n3\n3\n3\n4\n3\n3\n110\n5\n5\n\nz\n\n1\nI\n1\n7\nI\n4\n3\n4\n5\n\nCost/\nBenefit\nReturn\n\nApplicable\nDrive-ra\ni\t\n\n3\nL\n\n1\n1\n1\n3\n2\n3\n2\n1\n1\n.2\n1\n1\n4\n2\t\n1\n1-5\n\n1\t\n\ni\n\nNeed\nDate\n\n1\n0\n\nNIA\nNIA\n\n0\n2\n0\n0\n2\n1\n1\n0\n0\n0\n0\n2\n0\n0\n0\n1\n2\n\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\nN/A\n\nNIA\nN/A\nN/A\nNIA\nNIA\nN/A\nNIA\nNIA\n\nNIA\nN/A\nN/A\n\nTop\nRating\' 113\n4\n5\n4\n7\n4\n4\n15\n8\n9\n4\n2\n2\n3\n110\n2\n5\n6\n22\n\ni\nij\t\n\n\xe2\x80\xa2^\n\ni\n\nprototype model. For instance, an image processing application needed in\n1985 would have to be proven feasible by 1983 in order to allow time for\n\n\t\nI.\t\n\nT\t\n\n\'.\nn!J\n\n3.\t\n\nJ\t\n^t\n\nSOFTWARE TECHNOLOGY ITEM DEVELOPMENT PLANS\n\n3.1\t\n\n+.^\t\n\nRequirements _Decomposition and Structuring Guidelines .(TI-01)\n\n3. 1. 1 Problem Definition\n\n_\t\n\nSoftware design practice up to now has suffered from a lack of\nconsistency among designers in their approach to decomposition of the\nrequirements and development of design structure. The need for rational\nguidelines becomes apparent when one considers the fact that totally\ndifferent designs can result from different designers working on identical\nsoftware requirements. This makes it almost impossible to evaluate\ndesigns, much less to identify the optimum design. Unlike hardware, in\nwhich standard components are integrated by well-established logic\nprinciples, each software design is a new design. This is costly in\ndevelopment and implementation, but even rnore so in the training and\nmaintenance requirements to support utilization phases of an operational\nsystem.\n\nOf even more importance, lack of consistent, good design compromises the most valuable characteristic of software -- the flexibility\nto adapt to changing requirements. The study proposed to help solve\nthis basic Software Engineering problem is expected to be of moderate\ncost (3-10 man years).\n3. 1. 2 Technology Development Requirements\nThe technology developments needed under this broad-based study\nare the guidelines for requirements decomposition and structuring in\nsoftware design. These developments must contribute towards achieving\nconsistency in design. Also, it is necessary to derive and establish\nproper design evaluation criteria.\n\n.\t\n\n=\t\n\nTechnolog y must be developed which will provide a m. eans to convey\nwhat the requirements are, and will allow the breakdown of these requirements into a functional distribution. This should lead to software designs\nthat are reliable and easily understood, implemented, used, and maintained.\n3. 1. 3 Suggested. Approach\n\n^\t\n\n`\t\ns~\t\ntim\t\n\nThe study propos ed for this effort has four steps as shown under the\nschedule. The first step is the establishment of requirements decomposition\nguidelines. A comprehensive set of guidelines for decomposition of the\nfurnished software requirements is to be developed. This will be done\nthrough a thorough review o f the various current approaches to the problem\nand a critical a. nalysis of\'the relative advantages and disadvantages\nof these approac hes . The next step is to develop a logical set of guidelines\n-19 -\n\n_ .:. T..\t\n\nMMUMING PAGE BLANK NOT FIL,11 V\n\n!\n\nI\t\n\nr\t\n\nI\t\n\naimed at achieving consistency of design across a given set of requirements. This must be followed by the establishment of techniques which\nwill ensure proper structuring of functions into a viable, usable design.\nDevelopment of guides to proper structure and consistent design is an\niterative enhancement process, as shown in the schedule. In parallel\nwith the previous activity, the criteria for measurement and evaluation\nof design products will be established. This will be of considerable\nsignificance in assessing the results of using these guidelines in NASA\napplications.\n3. 1.4 Schedule\n\nand\n\nResources\n1978 1979 1980 1981 1982\n\nI\n\n\xe2\x80\xa2 Requirements Decomposition\nGuideline s.\n\xe2\x80\xa2 Design Consistency Guidelines.\n\xe2\x80\xa2 Structuring Guidelines.\n\xe2\x80\xa2 Evaluation Criteria.\nEstimated Cost of Developments $1501K = 500K.\n3. 1. 5 Verification of Results\nThe end product of this effort will be a set of guidelines for software\ndesign rather than a specific piece of software. The verification of results\ncan be viewed as the as:sessm:ent of benefits arising from application of\nthese guidelines. Thus, this step in effect consists of applying these guidelines to one or more specific software !:esign efforts to compare the experience with similar efforts not based on, hese guidelines. The relative merit\nwill be assessed through application of the evaluation criteria, which. in turn\ncan be appraised through demonstration of actual program product results.\nThe verification process itself will make a valuable contribution to the\ndevelopment of the Software Engineering profession.\n3. 1.6 Related Studies\no\t\n\nSoftware Technology Items.\nTI-08 Interface criteria for NASA distributed\nprocessor applications.\nTI-09 Task control structures for distributed\nprocessor envi.ro-nme.nts.\n\nE`\t\nF;-\n\n-20-\n\nr\n\n\t\n^\t\n\n\xe2\x80\xa2\t\n\n!\t\n\n1\t\n\n9\t\n\n6\t\n\n1\t\n\ni\t\n\nT\n\n^JS:\n\n1\t\n\n-\t\n\nlis\n\nTI-18 Guidelines for design documentation\nconsistency.\nTI- 19 Software\n\no\t\n\nprototyping methods.\n\nSoftware Technology Items (Secondary).\n\n^x\n-\t\n\nTI-10 Program organization methods for real-time\nfault recovery.\nTI\'-15 Restructured image analysis software for\nparallel processing.\n\na\n\n1i\n\n4-1- 1\n\nt\t\n\n3. 2\n\nT\t\n\n3. 2. 1 Problem Definition\n\nRequirements-to-Code Translation Aids (TI-02)\n\na::\n\n}\t\n\xe2\x80\xa2-\t\n\nCurrent practice of manual generation of codes from given software\nrequirements is not only expensive but also error-prone. This is because,\nfirst, the software requirements are not specified in a standard format\nand hence the requirements decomposition is mostly adhoc. Second, the\nlack of consistent design guidelines makes the steps leading to the genera=\ntion of codes more of an art (or lack of it!) rather than a science. Therefore, for a given set of requirements the generated code does not necessarily\nreflect the best code, and methods of .proving the software as fault-free are\nstill to be realized. Therefore, some means of automating the code generation process is essential to achieve a measure of error and cost control is\nsoftware development. This requirement-to-code translation problem is\nlikely to be of relatively high cost and require 10-20 man years.\n\n3 r\t\n\n3.2.2 Technology Development Requirements\n\ni ,.\t\nA\n\n4 =r\t\n\nh.\n^e\n\nThe requirements under this study are defined as the development\nof automated aids for generating prograrY^. codes (in a desired language)\nfrom a specified set of software requirements. This technology development is tailored to meet the specific needs of payload software requirem eats, rather than any general study of automatic programming, to ensure\ndirect payoff for NASA for its investment in this technology development\neffo rt.\n3.2. 3 Suggested Approach\n\n^a\n\niY\n\n3;.\n\n;F\n\n:j\n\nThe first step of this study is a review and assessment of the\non-going efforts in this field as applied to other areas of software develop=\nmeat, particularly business-oriented and other commercially funded\nprojects. In parallel with this, a requirements analysis must be carried\nout to identify the spectrum of NASA payload software needs. With these\npreliminary efforts as the base, a master software instructions/code\nlibrary, consisting of all the key functions reflecting NASA payload software requirements, can be developed. The next step is to define and develop\na transformational approach which can successively transform, in stages,\nthe input software requirements into a set of program codes using the master\nlibrary as a reference. The developed methodology is then tested aad the\nrelated documentation prepared to ensure its suitability for application to\nNASA payload software development.\n\n-23MMAMO PAGE BLANK NOT k RAIE0\n\n3. 2.4 Schedule and Resources\n1975 1979 1 1980 198111982\n\n\xe2\x80\xa2 Analyze requirements.\n\xe2\x80\xa2 Identify the spectrum of NASA\npayload software requirements.\n\xe2\x80\xa2 Develop a master software\ninstructions code library consilting of all basic functions\nreflecting NASA payload software requirements.\n\xe2\x80\xa2 Develop a transformational\napproach which transforms the\ninput requirements successively\ninto a set of program codes\nusing the library.\n\xe2\x80\xa2 Test and document the methodology developed.\nEstimated cost of development; $5.00K. - $1000K.\nResources include access to information on future payload software developmeat plans and program details.\n3. 2. 5 Verification of Results\nThe developed requirernen_t -to-code translation aids will be\ntest-implemented and validated as to their ability to perform the designated\nfunction. The testing will include actual application of the code generator\nproduct to a previous software implementation to derive and compare the\noperational capability of the autemat.cally generated code with the earlier\nmanually developed code.\n3. 2. 6 Related Studies\no\t\n\nSoftware Technology Items.\nTI-01 Requirements decomposition and structuring\nguidelines.\nT1=03 Simplified software development system\n\ndemonstration. model.\n\nTI-04 Query-guided implementation methods.\nTI-18 Classification of error mechanisms.\nTI -19 Software protetyping methods.\n\n-24-\n\nT\na\t\n\n3. 3\t\n\nSimplified Development System Demonstration Model (TI-03)\n\n3. 3. 1 Problem Definition\nThe advent of large scale usage of microprocessors in distributed\nsystems for real-time space applications calls for simpler software\ndevelopment tools. This is necessary to ensure that the cost of software\ndevelopment will not become a barrier to the benefits of rinicroprocessor\nusage which otherwise is very cost-effective.\n\ni`\t\n\nMany software development systems exist, but it is rare to find\none that is simple and even rarer to find one that is transportable. In\nan era of diverse users of space systems., each developing a software\nsubset of a future integrated flight complement, ways and means of\nsimply and economically developing software components must be found.\nAn effort which is designed to achieve this objective is the creation\nof a demonstration model of a simplified system. for software development.\nThis effort can be expected to be one of relatively high cost requiring\n10=2U man years.\n3. 3. 2 Technology Development Requirements\nThe feasibility of a simplified system for software development\ncan be shown by the creation of an appropriate demos stration model.\nAccordingly, the technology requirements of the study can be stated as\nthe building of a sim , pli.fied development system, demonstration model.\nThis will be a precursor to low-cost operational systems for use by non=\nprofessional programmers in the development of space applications.\n\nr-\t\n\n3. 3. 3 Suggested Approach\nThis development effort has several identifiable steps as shown\nin the schedule. The first step is the requirements definition. R.equiremeats definition is based on developing a clear understanding of the purpose\nof the model and the environmental constraints under which the modeled\nsystem will have to operate. These requirements are analyzed to derive\nthe specifications of the demonstration -model. This is followed. by the\ndesign of the demonstration rnod\'e1 which will errzphasize the different ,\nof the operational system envisioned for the PI\'s use. The design\nphase heads to the development and test phase which in turn takes the\nproject to the final detailed sy st em evaluation phase. The final evaluation\nphase is a key element. It must be detailed enough to ensure that the\nfollow-on work of developing an operational system can be taken up with\nconfidence that the end product will support the anticipated Heavy schedule\nof software development in the coming decade.\n\nT\t\n.}\t\n\n^q\t\n\xc2\xbb\xc2\xbb\t\n\n-25Mp\n\nr\t\n^,\t\n\nr\t\n\n>_\n\n.\n\n3. 3.4 Schedule and Resources\n1978.1.1979 1198- 0 119-81 11982]\n\n* Requirements Definition.\n* Requirements Analysis\n* Demonstration Model System Design.\n* Development and Test.\n* Evaluation.\nEstimated cost of development: $500K - $ 1000\'K.\n3. 3. 5 Verification of Results\nThe evaluation of the demonstration model and its effectiveness is\na significant part of the effort to be accomplished under- this study. The\nschedule allows a full year for this activity and effectively portrays the\nimportance given to this phase of the effort. This is essential to ensure\nthe integrity of the demonstration model and the operational system- to\nfollow. Each step of the effort provides concrete output products (i.e.,\nrequirements, composition, design specifications, test system and\nevaluation system) for measurable verification of progress.\n3. 3. 6 Related Studies\na\t\n\nSoft-ware Technology Items.\nTI-02 Requirements -to -code translation aids.\nTI-04 Query-guided implementation methods.\nTI-17 Classification of error mechanisms.\nTI-19 Soft-ware prototyping methods.\n\nI\n\n\xe2\x80\xa2t\n\nd^\n\nI\t\n\n3.4\t\n\n1.\t .\t\n\n. !\t\n\nl\t\n\np\n\nQue_ry_- Quided ImplernentationMethod_s__{TT-04_^\n\n3.4.1 Problem Definition\nThe objective of this technology item is the development of new\n.programming procedures wherein the programming effort is supported/\nk\n\nI\t\n\n^:\n\nguided by a questionnaire. The basic problem to be addressed is essentially\nsimilar to the one underlying T1-02, Requirements-to-Code Translatio n\nAids, in that new automated tools for s oftware development are called for\nto reduce the expensive, error- prone manual approach to code generation.\nHoweve r, the emphasi s he re is le s s on autonomy than in the othe r approach\nand presumably the objectives are more easily realizable. This effort is\nconsequently more moderate in cost (5-10 man years) and is expected to\nresult in a faster return of benefits.\n\n4 ^.\n\n3.4.2 Technology Development Requirements\ni\nI\n\nTechnology developme nt regmred unde r this study are se miautomated tools for software development using the questionnaire. approach.\nThis questionnaire approach -must be especially attractive for interactive\nman-machine systems, operating in dynamic environ . eats, wherein it may\nbe necessary to create new software and/or new configurations of existing\nsoftware. Query=guided implementationrr,.ethods -must offer the flexibility\nnecessary for such applications. At the same time these methods must\ncontribute towards the traditional software development goals in terms of\nreduced software errors and consistency in the quality of the resulting\nsoftware product.\n3.4. 3 Suggested Approach\nAs a practical step, it is advisable to constrain this effort of the\ndevelopment of semi-automated tools to the specific NASA payload software\ndevelopment requirements. This lin-nation ensures that a viable solution\nwill be developed within the time and cost constraints of NASA programs.\nAny attempt at global solutions could lead to lack of effective control over\nthe projected costs and time schedules. The first step is, therefore,. to\ndevelop and establish the common features and requirements of NASA\npayload software development program- s. This is to be followed by an\neffort directed towards developing a skeleton structure of the software\ncorresponding to established commonalities. The next step is the design\nand development of a questionnaire methodology which when applied to\nspecific requirements leads to the filling out of the skeleton structure and\nresults in the desired soft-ware package. Finally, the methodology should\nbe thoroughly tested and documented to ensure an appropriate return on\ninvestment for NASA.\n2\n\n\t\n\n\'g\n\nI\t\n....... ^.\n\nI.\n\n3.4.4 Schedules and Resources\n[ 1978 11979 11980 1 1981 1 19821\n\xe2\x80\xa2 Derive and establish the common features of NASA payload\nprograms.\n\xe2\x80\xa2 Develop a skeleton structure of\nthe development system.\n\xe2\x80\xa2 Develop a questionnaire\n-methodology for filling out the\nl\nskeleton structure.\n\xe2\x80\xa2 Test and document the\nmethodology.\nEstimated development costs: $ZOOK - $500K\n3.4. -5 Verification of Aesults\nThe end product of the study being i m- plementable methodology, it is\nnecessary to ensure that the developed tools can be put to effective use\nthrough testing and documentation. This testing should include test implementation in specific NASA soft-ware development programs to evaluate its\neffects on efficiency, reliability and cost of program development. In view\nof the man-machine interaction involved in que st-ionna-ire approaches, it\nis desirable to study programmer responses to the methodology as part of\nthe verificationp rocess to ensure its acceptability.\n3.4. 6 Related Studies\n0\t\n\nSoft-ware Technology teems.\nTI-02 Requirements-to-code translation aids.\nT1-03 Simplified software development system\n\ndemonstration mode.\nTI-18 Classification of error mechanism.\n\nT1- 19 Software prototyping -methods.\n\n-28-\n\n-,4_....-..........\n\n.. ^\t\n\nl\t\n\n1\t\n\nf .\t\n\n1\t\n\n^\t\n\n.E\t\n\n_\t\n\nn\n\na\xe2\x96\xba\t\n\nJ.3\ni\n\n3. 5\t\n\nStandardization Criteria for NASA Software (TI-05)\n\n3. B. 1 Problem Definition\npw\t\n\n.l\t\n\nLack of standardization in software design, development, testing\nand other facets of software projects, even within the bounded sphere of \t\nNASA activities, frequently results in expensive, often duplicated\nsoftware. Needed reliability is difficult to achieve. Standardized\nsoftware can make a significant contribution towards the goal of totally\nfault-free software. \'Therefore, as a first step, it is nece ssary to\ndevelop the criteria for standardization. The degree of the problem\nsolution depends on the scope of the standardization process; however .,\t\nas proposed here is expected to be of moderate cost involving 3-10 man\nyears of effort.\n\nr4,\n\n\xe2\x80\xa2^\n\n3.5.2 Technology Development Requirements\nDevelopment of standardization criteria is the goal of this technology development item. This criteria development will span the spectrum\nof activities associated with a software development project. For example,\nstandardization has many implications: standard language design, standard\noperating system design, and standard interface implementation. A degree\nof standardization in each of these areas and criteria for such. standardization is desired and sought under this effort.\n3. S. 3 Suggested Approach\nThe first step must be to understand and analyze the implications\nof standardization. Through this effort, it should be possible to identify\nthe specific elements of a software project which can be considered\nprime candidates for standardization. Once the areas deemed feasible\nfor standardization are established, the next logical step is to develop\nthe criteria for standardization.\nIt is advisable to gain some insight into industry practices\nin standardization and apply these ideas with necessary modifit_ations to\nthe NASA environment. Modification and pop sibly new concepts may- be\nnecessary in view of (1) the decentralized nature of the NASA organization (and the diversified contractor force supporting it), (2) the consequent\nproblems of coordinating the software development efforts, and (3) the\ndifficulties in enforcing the standardization procedures. Selected candidate\nsoftware packages should be weighed and tested against the developed\nstandardization criteria to validate their effectiveness in establishing\nstandard NASA software libraries for the 1980-1990 time frames.\n\nf\t\n\n__\n\nI\n\na\t\n\ni\n\nNew developments in software design methodology which might\ninfluence the standardization criteria are conceivable and modifications\nat a later date may have to be made. However, irrespective of such\nfuture changes, it is necessary to have fairly rigid standardization\ncriteria to avoid duplication of efforts and minimize the software\ndevelopment costs and associated errors.\n3. 5.4 Schedule and Resources\n11.9 78\n\n11979 11980_1\n\n1981 1982\n\no Analysis of Standard:iza:tion\nImplications.\no Development of Criteria.\no Identification of Candidates.\no Evaluation of Validity.\nEsti, mated cost of development. $150K - $500K.\nResource requirements include NASA-wide access to softwar e projects,\nprogram s and present practice s for -minim,m iz ng duplication of efforts.\n,\n.\n3. 5.5 Verification of Results\nThe end product of this study is a set of standardization criteria.\nThe verification process essentially consists of applying the criteria to\nselected software packages and development projects to determine the\nvalidity and feasibility of enforcing such criteria in the development\nprocess.\n3. 5. 6 Related Studies\nThis Technology Itern is pertinent to virtually every aspect of the\ncomputer software domain.\n\n-30-\n\n!\t\n\nj\n\n^\t\n\n5\n\n{J L\n\n.:.\n\n3. 6\t\n\nAOL Design _Guideline s/Standards (TI-06)\n\n3. 6. 1 Problem Definition\nApplication-oriented languages (AOL) are expected to dominate\nthe scene in future decades witiiusers developing the software required.,\nfor their particular deeds. This requires appropriate AOL design guidelines and standards to ensure that the AOLL\'s developed to meet the needs\nof a changing environment are compatible with NASA system goals and\nhave the requisite language consistency. This developmental effort is\nexpected to be one of relatively modest cost involving 2-5 man years.\n3. 6. 2 Technology Development Requirements\nDevelopment of design guidelines and standards for applicationoriented languages (of interest to NASA applications) is the technology\nadvancement required by this item. This requirement is the first step\ntowards the goals of economical development of efficient application=\noriented languages, particularly those of real-time onboard distributed\nsystems. Design guidelines/ standards are to ensure that the resulting\nAOL\'s are simple to use and efficient even when deployed by non-professional\n\t\nprogrammers. These requirements tie this effort to the one proposed in\nthe next item (TI-07) on AOL compiler generator cost.factors. The AOL,\ndesign guidelines will determine the complexity of the compilers and therefore influence the cost of generating these compilers. Accordingly, the\ndevelopments under this study have in view the objectives and associated\nfactors of TI-07.\n3. 6. 3 Suggested Approach\nAs illustrated in the schedule, the approach consists of three specific.\nsteps. The first is the determination of the concepts underlying AOL and\nunderstanding what its requirements are. These concepts are an essential\nprerequisite to the development of guidelines for AOL design.. The next\nstep is the actual development of guidelines to meet the requirements as\nderived. The third step is the formulation and development of criteria to\nevaluate the AOL design resulting from the use of these guidelines. This\nprovides a means of verifying the applicability and usefulness of the derived\nguidelines in practical problems of AOL design.\n3. 6.4 Schedule and Resources\n9\n1978 11 - 79 19sa g81982I\n\no AOL Requirements Concepts.\no AOL Design Guidelines /Standards.\no Design Evaluation Criteria.\n\nx\n\n3. 6.5 Verification of Results\nThe guidelines derived for the study must be applied to specific AOL\ndesign projects to test the applicability of these guidelines to real-world\nNASA problems. The evaluation criteria will then be deployed as the tool\nfor assessing the resulting design, which reflects on the usefulness of the\nderiveduidelines \'nx p\t\nprovidingg\tan effective A \t\nti AOL to an actual user.\ng ^.\t\n\n3\n\nY=,\n\n3. 6.6 Related Studies\no\t\n\nSoftware Technology Items.\n-\t\n\nTI-05 Standardization criteria for NASA software.\n\nr\n\na\n\nTI-07 AOL compiler generator cost factors.\ns\n\nTI-18 Guidelines for design documentation\nconsistency.\n\nl\n\n\xe2\x80\xa2L\n\n\xe2\x80\xa2.s k\'\n\n"ro+\n\nJ\n\n-32-\n\n3.7\t\n\nAOL Compiler Generator Cost Factors (TI-07)\n\n3.7. 1 Problem Definition\nThe advent of increased development and usage of applicationoriented languages (AOL) calls for design of an increasing number of\ncompilers. Compilers being machine-dependent, the problem is farther\nenlarged by the continuing spread in the number of different computers\ncoming into usage. Compiler generation., however, has remained an\nexpensive task. Thus in view of this expected increase in compiler\ndesign activities, it is necessary to look into why compilers cost so\nmuch. This study of investigating the factors contributing to the cost\nof compi.le.r generation is viewed as one of relatively modest effort\n.\n(2-3 man years). This will lead to methods of significantly reducing\ncompiler generation cost.\n3. 7. Z Technology Development Requirements\nThe requirements of this task are of a different nature from the\nother technology items. The end product is not a specific technique or\nsoftware package, but a qualitative assessment of the major factors\ncontributing to the cost of compiler design, from which it should be\npossible to derive techniques for reducing these costs.\nThat problems exist in compiler generation is a known fact. Why\nthey exist is another question. The requirement of this task is to provide\nan answer in quantifiable terms that will lead to new and feasible approaches\nto the development of tools to support application growth.\n3.7.3 Suggested Approach\n\na :;\n\n^w\n\nRp\n\'i.\n\nThe study to be undertaken consists of three steps as shown in the\nschedule. The first step is to identify and typify representative AOL\ncompile r generators used to generate payload application software. This\nwill be followed by an in-depth analysis of the development histo ry of\nthese generators. The analysis must take into account the particular\nenvironmental constraints and other factors associated with the development of each of these generators. The analysis must identify the development cost and extract those factors contributing to the cost. Each of the\ncontributing factors must be assessed in terms of significance and potential\nimpact on future development programs. The result will be a comprehensive\noverall assessment of the problem of controlling costs in AOL compiler\ngeneration, and the identification of what steps must be taken to reduce\nfuture cost. This effort should be correlated with that under TI-06 to ensure\nthat the final assessment reflects the benefits of development under TI.06.\n-33-\n\n3.7.4 Schedule and Resources\n-\n\n1978 11979 11980 11981119827\n\no Identify typical AOL generators.\no Trace development history.\no Perform cost a ss essment.\nEstimated cost of development: $100X $150X. \t\n\nIt\n\n3. 7. 5 Verification of Results\nThe end product will be a specific set of factors which will provide\na tangible product in terms of the benefits accrued in future compiler\ngeneration programs. As such the test would be to apply the experience\ngained by the analysis of these cost factors in a test compiler generation\nexercise and to assess the associated costs relative to the costs of prior\ncomparable programs.\n3.7.6 Related Studies\n0\t\n\nSoftware Technology Item.\nTI-06 AOL design guidelines/ standards. \t\n\n-34-\n\n------------\n\nq\n\nr\t\n\n3. 8\n\n\t\n\nInterface Criteria for NASA-Distributed Processor Appl cations.(TI-08)\n\n3. 8. 1 Problem Definition\n\nl\t\n\n-_\nz\n\nThe expanding role of distributed processor systems envisioned\nfor future payloads and missions demands that the associated problems\nof interprocess communication and related aspects be studied in\ndepth by NASA. This problem is being addressed for onground systems\nwithin the industry. However, the special implications of onboard\nnear-real-time processing environments need to be carefully examined\nby NASA. The development of suitable interface criteria for NASAdistributed processor applications is one of modest cost (.2-4 man years).\nHowever, it is mandatory in terms of integrating and absorbing the\nmultiplicity of high rate data sources projected for the next decade.\n3. 8.2 Technology Development Requirements\nInterface cr\'iter\'ia to assist in the design of NASA-distributed\nprocessor interfaces represent the major end products expected of\nthis technology development effort. The criteria are necessary to\nsimplify problems of integration and to minimize associated costs by\navoiding recourse to nonstandard interfac\'e.s. These developments are\ncritical to increased and cost-effective utilization of distributed processor\nconcepts and techniques, and are essential to the enablement of intelligent instruments.\n\nT\xe2\x80\x94\n\na\n\ni\n3-\'\n\n3. 8. 3 Suggested Approach\n\nThe first significant step of this effort is the identification of the\npotential distributed system configurations for deploys-n-ent in near-realtime spaceborne environments. Once these are idea-tified, it is necessary\nto analyze in detail each of these configuration-s to determine parametric\ncharacteristics such as data flow, and to establish appropriate control\nstructures. These parameters characterize the interprocess communication needs. Based on these quantitatively established needs, the appropriate\ninterprocess corn m unication techniques ca n be selected through trade\nstudies. This will in turn lead to the interface criteria which are essential\nto widespread deployment of distributed processor systems within the\nNASA pro g rains .\n\nby\n.^.ve\n\n-35-\n\nF\n\nI\n\n\t\n\n3.8.4 Schedule and Resources\n197 8 1979 11980 1981\n\n82\n112i2\n\n\xe2\x80\xa2 Identify potential distributed\nconfigurations.\n\xe2\x80\xa2 Characterize data and control\nflow.\n\xe2\x80\xa2 Select interprocess communication\ntechniques.\n\xe2\x80\xa2 Establish interface criteria.\n\nr\nkr\n\nEstimated cost of developments: $100K - $200.K.\n3. 8. 5 Verification of Results\nThe end product is a set of interface criteria. The test of its\nvalidity lies in its application to real-world problems, and. verification\ncan be achieved through test implementation of selected cases.\n3. 8. 6 Related Studies\no\t\n\nSoftware Technology Items.\nTI -01 Requirements decomposition and structuring\nguidelines.\n\nTI-05 Standardization criteria for\n\nNASA software.\n\nTI-09 Task control structures for distributed processor\nenvironmects.\nTI=10 Program organization methods\nfault recovery.\n-\t\n\nfor\n\nread.-time\n\nT1=15 Restructured image analysis software for\nparallel processing.\n\n^i\t\n\nI\t\n\n4\t\n\ni\t\n\nl\t\n\nI \t I\t\n\nf\t\n\nT\n3. 9\n\n\t\n\nTa\n\n\t\n\nres for\t\n\nr\n\n3.9. 1 Problem Definition\n\nS\na^ L\n\ni\n\nTask allocation and control is major significance in the design\nand operation of ground-based distributed systems and has received\nconsiderable attention. This function is much more critical in the\nmanagement of real-time space-based distributed systems and it is\ndecidedly in the NASA domain to tackle this problem. The task allocation process should ensure that the available resources are utilized to\nthe fullest extent at all times and as efficiently as possible, given the\nparticular tasks and processor configuration. Once the optimal task\nallocation is determined, then the actual task control should be implemented in accordance with the planned allocation. Development of the\ntask control structure represents the other major part of the problem\ncontained in this item. It is expected that, in view of the progress in\nground-based systems, this effort will be of relatively low cost and\nrequire 2-5 man years of efforts\n3. 9.2 Technology Development Requirements\nThe technology development requirements are twofold; (1) techniques for automatically determining the optimal task allocation and\nscheduling among the processors within the distributed system, and\n(2) design and development of control structures for enforcing the\noptimal task allocation and scheduling. These tasks are interrelated and\nshould be carried oust with close coordination between the two efforts.\nThis item has particularly great applicability to the effort proposed under\nTI-15 (restructuring image analysis software for a parallel processing).\nThe technology development. efforts under this plan should therefore\ncomplex- ent the other effort.\n\nr^\'\n3\n\n3. 9.3 Sugg ested Approach\nThe starting point for this plan is to clearly identify the :scope\nand type of tasks as well as the nature of the distributed say stern environments expected to arise in the implem- e:ntation of planned NASA missions,.\nConcurr ently, available techniques for ongro und .distributed systems should\nbe reviewed to delineate the deficiencies of such methods in meeting the\nrequirements of real-time space systems. The two efforts together will\nprovide the technical base for initiating the develapment of appropriate\ntask allocation and scheduling techniques. \'These techniques should be\nam enable to automated implementation. This will lead to optimal\n.\nallo cation and scheduling of the tasks for any given processing problem\n\nJW\n\n-37-\n\nt\n\n,i\t\n\nI\t\n\nI\t\n\nI\t\n\nI\t\n\nI\t\n\nI\t\n\nT\t\n\nf\n\nwithin the scope of the study. Next will be the development- of suitable\nsoftware control structures capable of implemeeting the optimal\nallocation and scheduling plans. The final step is testing of these\ntechniques and control structures, through simulation of the onboard\nprocessing environments, to verify their reliability and efficiency.\n3.9.4 Schedule and Resources\n1978 11979 1980 1981 19$2\n\no Requirements analysis.\n0 Develop optimal task allocation\nand scheduling methods.\no Develop task control structures.\no Test and documentation.\nEstimated cost of development: $100K - $250K.\nResource requirements include computer- facilities for simulation a.nd.\ntesting.\n3. 9. 5 Verification of Results\n\nThe results in this case are the techniques for determining the\noptimal task allocation and scheduling and the control structures for their\nirnpleme:nta.t.ion. The verification process should therefore include simulation of the onboard real=tim a .processing environment and testing of the\n.\ndeveloped techniques and control structures in such simulated, environments.\nThis will ensure that the resultant products of the study will meet the NASA\nrequirements for distributed systems. It will also enable operationa\'\nimplementation of related technology developments (particularly the i\nmentation of parallel processable image analysis functions: TI-15).\n3. 9. o Related Studies\no\t\n\nSoftware Technology Items.\nTI-01 Decomposition and structuring guideline;\nTI -05\n\nStandardization criteria for NASA softwa\n\nTI-08 Interface criteria for NASA distributed\nprocessor applications.\n\nY\n\np\n\na\n\n\t\n\ni\n\n\t^-\t\nw\t\n.;\t\n\nTI-15 Restructured image processing software for\nparallel processing.\n\n-\t\n\nTI-19 Software prototypi.ng methods.\n\n\t\n\n3. 10 Program Organization Methods for Real-Time Z4wlt Recovery\n(TI-10\n3.10.1 Problem Definition\n\n^1\t\n\nsoftware and hardware errors as well as data anomalies do occur\nin spite of the best of precautions in the design and development processes.\nIt is therefore necessary that space systems should be backed by effective\nmeans of fault recovery. In view of the dynamic nature of the system\nenvironment. , it is also crucial that this recovery be W near-real-time.\nThus, the problem, addressed in this study is the need for developing\nefficient techniques for real-time recovery from errors caused either\nby hardware, data, or soft-ware. The recovery procedures to be considered\nhere are primarily limited to software rather than to purely hardwareoriented solutions such as redundant hardware. The proposed effort is of\nmoderate to high cost (between 4-20 man years) depending on the depth to\nwhich the p roblem is to be explored.\n3. 10. 2 Technology Development Requirements\nThis effort includes review/development of recovery techniques\nmost suited for NASA real-time space applications. This will be based\non research into the structure and organization of software systems\nwhich provide reliable fault recovery through proper pro \t gram- arganization methods. These developments should be coordinated with the activities\nproposed in other technology items, such as classification of error mechanisms (TI-17).\n\n3. 10. 3 Suggested Approach,\nStructure analysis represents the first step of the proposed effort.\nThis consists of identification of the types of faults likely to be encountered\nin real-time space system and determination of the nature of the recovery\n. -s\nprocess required to counteract these faults. Development of appropriate\ntechniques and procedures for system recovery is the next, step. This is\nfollowed by development of program organization methods which will maintain the status of the system so that the system, can recover gracefully\nwith minimum loss of data and control.\n.3. 10. 4 Schedule and Resources\nIF\n1978 1979\n\no Real-time program structure analysis.\no Recovery techniques.\no Program organization methods.\t\n,\n\n1980 1981\n\n___1982\n\ntn\n\nstiated cost of development: $ZOOK - $lOOOK.\nm..\t\ne\n-41_\t\n\nrWWSAXN(x1 PAGE BiANK N(Y1 FiUlAiZ\n\n:\'\t\n\nI\t\n\nI\t\n\nI\t\n\nI\t\n\n1\t\n\n^\t\n\n3. 10.5 Verification of Results\nThe development methods should be tested and evaluated by\nsimulation under appropriate fault-inducing e,nvironrnents. This is\nextremely essential to prove the reliability of the techniques for deploym- ent in real-world applications wherein the risk factors associated with\nimproper recovery cannot be tolerated.\n\ni\n\n3. 10.6 Related Studies\no\t\n\nSoftware Technology Items.\n-\t\n\nTI-01 Requirements decomposition and structuring\nguidelines.\n\n-\t\n\nTI=08 Interface criteria for NASA-distributed\nprocessor applications.\nTI-09 Task control structures for distributed pro\ncessor environments.\nTI =12 Control structures for adaptive systems.\nTI- 15 Restructured image analysis software for\nparallel processing.\nTI-17 Classification of error rnechanisms.\n\n-42\n\nf\n\n\t\n\nL\t\n\nT\t\nku\t\n\n3. 11 A dap\t\n\nr Dvnarnic N\n\nITT-1\n\n3. 11. 1 Problem Definition\nMissions involving image acquisition and other high-rate datagenerating instruments, call for advanced capability in all areas of the\ndata acquisition, handling, and processing system. The variable data\nrates of different experiments and the need for intelligent data acquisition\ndictates that advanced techniques, capable of adapting to changing data\nenvironments, be developed. High-speed buffering techniques in\ndynamic acquisition and switching networks are of prime importance, .\nparticularly in view of the high- speed, large -scale memory capability\nexpected in the near future. Methods for optimal utilization of potential\nbuffer resources will have tremendous impact on -.nformation gathering\nsystems. This study represents a moderate to high cost developmental\neffort requiring 5-15 man years.\n3. 11. 2 Technology Development Requirements\nThe technology development required by this item is the\ndevelopment of advanced high.-speed buffering techniques capable of\nadapting to the dynamic characteristics of the data environment\nenvisioned for future missions. These missions will involve high\ndata rate experiments such as multispectrai remote sensing of earth\nresources. This development is required to ensure that there will be\nan optimal utilization of the of the resources available both onboard\nand elsewhere in the total data system. This effort will contribute\ntowards the overall objective of data system optimization by upgrading\nthe state of the art in the key area of buffering techniques.\n3. 11. 3 Suggested Approach\nThis develop mental ef:ort consists of several distinct steps as\nindicated under the schedule. The first step is a detailed assessment\nof the existing technology to identify deficiencies in the state of the\nart in meeting the future requirements. This requirements analysis\nmust be supported by a parallel effort to identify the possible advancements expected in related hardware/ software technology areas. With\nthese efforts as the technology base, the study will proceed with the\nmain task of developing new adaptive techniques. The possibilities of\nincorporating at least soro_e basic level of intelligence at the front end\nwill be explored. For example, when one is only interested in change\ndetection, only data that are subject to change need be stored. The\ndeveloped techniques will then be implemented, tested, and documented\nto ensure a sound return for NASA investment.\n-4s-\n\n1\n\nr\n\n3. 11. 4 Schedule and Resources\n1978: 197-9 1986. 1.9.8.1 1992\n\no Survey available\ntechniques.\no Identify advancements\nin related areas.\no Develop new adaptive\ntechniques.\no Implement, test and\ndocument these\ntechniques.\nEstimated cost of development.: $250K-750K.\n3.11. 5 Verification of Results\nThe developed techniques will be implemented and tested under\nproperly simulated data environments including the expected range of\ndynamic data characteristics. This requires a th. orough knowledge\nof the state of the art in data system simulation techniques in addition\nto those needed in the development phase of the effort. This\nverification of results, in terms of capability for meeting real4ime\nenhance\n.requirements a -\t of\ther needs of the data system, will serve to en\nand\nthe value of the effort and help its acceptance by the user community.\n3. 11, 6 Related Studies\n0\t\n\nSoftware Technology Items.\nTI= 19 Software proto-typing methods.\n\n\t\n\n3. 12 Control. Structures for Adaptive Systems_ -_(TI- IZ)\nKki\n\n^\t\nyl\n\ni\t\n\n3. 12. 1 Problem Definition\nAutomated intelligence activities involve a variety of scene analysis,\nimage processing and pattern recognition functions. These functions have\nto be called upon for processing, depending on the environmental conditions,\nin different sequences and configurations. This dependency requires the\nsystem to be adaptive to the needs of the changing environment. The\nproblem is therefore to provide adaptive framework for the dynamic\nselection of the many software functions required in. autonomous missions.\nThe development of appropriate control structure concepts is expected to\nbe of moderate cost requiring 8- 12 man years.\n\n-^\t\n\n3. 12. 2 \'Technology Development Requirements\nt I\t\n}\t\n\nThe technology advancement required is the development of control\nstructure concepts for adaptive control of software procedures. The desired\nsoftware system requires certain cognitive and decision making ca abilities\n" to adaptively deploy the right processing modules in an. autonomously opera\nLing environment. The core development required encompasses conceptual,\nalgorithmic and implementational aspects of the problem.\n3. 12. 3 Suggested Approach\nThe initial step is to establish the requirements as stated above in\nmore precise terms. A requirements analysis includes a review of the\ndifferent processing functions involved in autonomous environments and\ntheir interrelationships. Once the specific processing functions and the\npossible configurations of their deployment are identified, it is then necessary to develop the concepts and techniques for adaptive control of these\nfunctions which can lead to optimal performance of the software system.\nThis development of appropriate control structures will be followed up by\nexperimental simulation (to checkout, the control structures under different\ntest environments) and documentation to ensure its utility.\n3. 12.4 Schedule and Resources\n.1978 .1979 1980 I 19$1. 1982\n\nV.,\n\no Identify the interdependencies and\nrelationships of software functions.\nDevelop appropriate control\no\nstructures.\no Test and document the developed\ncontrol structures.\n-45-\n\n^I\n\nEstimated cost of development: $300K - $500K\nResource requirements include access to a computer system for test\nsimulation of the developed control structures.\n3. 12. 5 Verification of Results\nA detailed simulation study plan must be formulated and implemented \t\nto ensure that the developed procedures meet their requirements. The simulation proce s s should be carefully de signed to provide an opportunity to to st\nall feasible configuration options expected of the final software package.\n3. 12.6 Related Studies\no\t\n\nSoftware Technology Items..\nTI- 05 Standardization criteria for NASA software.\nTI-14 Ad aptive searc h and sort routines.\nTI-1.5 Restructured image analysis software parallel\nproce s sing.\nTI-19 Software prototyp ng methods.\n\n-_\n\ny\n\n3. 13 impacts of Natural_ Communication Methods on_ NASA _$ayload\nSystems TI-13)\n3. 13.1 Problem Definition\nMulti-experiment rriissions call for a more optimal utilization of\nhuman resources. The control and monitoring of the different .experiments \t\nshould be spread., to the extent feasible, over all the different human\nfaculties capable of interaction and communication. The computer system\nin control of these experiments must provide for rnan-machine communicaLions and should make the best use of all known natural communication\nmethods. The problem is the need to extend the scope of methods used\nonboard for man-machine interaction. This effort is expected to be one\nof relatively modest cost involving 3-6 man years.\n3. 13. 2 Technology Development Requirements\nThe goal of natural communication methods is best furthered by\na study geared to assess their impact on the design of payload software\nsystems. The assessment process must necessarily include a detailed\nanalysis of typical implementations of such methods to develop a thorough\nunderstanding of existing potential. The study must critically evaluate\nthe technology associated with these methods to clearly identify the feasible or potentially applicable methods which meet the NASA requirements\nfor onboard implementation.\n3. 13. 3 Suggested Approach\n\nI\n\nThe starting point of this effort is a requirements analysis phase\nwherein the NASA requirements for natural communication methods in\nthe upcoming missions are to be clearly identified and firmly established.\nTypical cases will be analyzed in depth through implementation/ simulation\nto derive an understanding of their influence and potential impact on the\nsupporting payload software system. This will lead not only to an evaluation of the feasibility of using these natural communication methods\nonboard, but also to an assessment of the necessary and desirable modifications to payload software system design. The results of such test\ncase studies are then reviewed to derive an overall assessment of natural\ncommunication methods on space systems.\n\na y\n\n3. 13.4 Schedule and Resources\n397811979 11980 1198111982\n\n\xe2\x80\xa2 Identify NASA requirements for\nnatural communication methods.\n\xe2\x80\xa2 Study the impact of these methods\nthrough analysis of typical implementations.\n\xe2\x80\xa2 Delineate necessary modifications\nto payload software system.\n\xe2\x80\xa2 Obtain an overall assessment of\nnatural communication methods.\nEstimated development costs: $150K - $2501;.\nResources include the hardware for test implementation in a simulated\nonboard processing environment.\n3. 13.5 Verification of Results\nThe feasibility of employing the different natural communications\nmethods will be verified by actual implementation in a simulated onboard\nprocessing a:nvironment. Such. implementation wild additionally lead to\ntesting the supporting software system, thus enabling useful and reliable\ninsight into all the different facets associated with natural communication\nto chnique s.\n3. 13.6 Related Studies\no\t\n\nSoftware \'Technology Items.\nT3-08 Interface criteria for NASA-distributed\nprocessor applications-\n\n-48-\n\nE.\t\n\nl\t\n\n1\t -\t ^. I\t\n\n3.14 Adaptive Sea rch and So rtRoutine\n\ns_\n\nI\t\n\nF\t\n\n(TI- 14\n\n3. 14. 1 Problem Definition\nMany of the pattern classification and image analysis techniques\nbasic to an image processing system involve table look-up procedures\noperating on large arrays. These procedures necessarily call for\nsearch and sort operations in both the table formulation and look-up\nphases. The process is repeated innumerable tunes, especially in the\nlook-up phase. This is because of the extensive volume of data handled\nby missions such as those involving earth resources survey and similar\nlarge imagery data acquisition experiments. it is therefore necessary\nto make such repeated table look-up operations as efficient as possible\nif images are to be processed onboard. Therefore, more efficient search/\nsort procedures are needed.\n\nr.\t .\n\nThe problem facing the study is the need to overcome the possible\ninadequacies of presently known methodology in meeting the future onboard\nreal-time processing system requirements. Further, it is desirable for\nthese procedures to be adaptive to the array data characteristics to ensure\noptimum performance.. It is expected that the required study is of relatively\nmodest cost and will be approximately 3 -6 man years of effort. This is\nbecause of the significant amount of related work reported in the area of\nsearch and sort techniques as applied to ground environments.\n\n^m.\n\n3. 14.2 Technology De.veloprnent Requirernents\nThe technology development requirements can be precisely stated\nas the development of a set of search and sort routines and asst>ciated\nsoftware control structures for adaptively selecting the appropriate routines\nfor different data environments. This requires identification of the most\nappropriate methods for different array data characteristics. This will be\ndone through .review and modification of existing tnethods a.nd/o.r addi.tional\ndevelopments followed by integration of these procedures within an adaptive\nstru ctu re..\n3. 14. 3 Suggested Approach\nThe first step of this development study is a detailed requirements\nanalysis. This consists of a close scrutiny of the major pattern classification and im age processing techniques to identify the specific needs for\nefficient search / sort procedures. These needs must be analyzed in the\ncontext of available information about the data rates, image sizes and such\nother rela t ed items pertaining to the data environment expected in future\nmissions. This leads to a detailed definition of the requirements for\n\ns\t\n\nw^\n\nI\n\n.\t\n\n^.\t\n\n....T.-\n\n-\n\nI\n\nsearch/sort routines under different identifiable classes of data environment characteristics as well as associated time constraints for possible\nreal-time implementation.\nThe next step is to evaluate the available search/sort procedures\nin terms of their ability to meet these requirements and identify the\npotential candidates for adaptation. These candidate techniques are\nmodified, unproved and combined to enhance their potential. This effort\nmay include the development of completely new methodology. However,\nsuch a need may not arise in view of the extensive work being performed\non ground-based systems. The selected set of modified./developed\ntechniques deemed optimal for the different data environments are then\nintegrated into appropriate software control structures. These software\ncontrol structures will be able to recognize the data environment characteristics and route the data flow through the appropriate software modules.\nThe developed package will then be tested in simulated data environments\nto verify and validate the end product of the study.\n3. 14.4 Schedule and Resources\n1978 1979 1 1980 1981\n\n1\n\n1982\n\n\xe2\x80\xa2 Requirements analysis.\n\xe2\x80\xa2 Develop adaptive routines and integrate\nthem through app ropriate control\n_\nstructures.\n\n.r\n\n\xe2\x80\xa2 I plement, test and document the\nadaptive routines package.\nEstimated development costs: $150K - $Z50K.\nResource requirements include access to a computer system capable of\nsimulating the different data environments expected onboard,\n14. 5 Verification of Results\nThe developed set of procedures and their adaptive capabilities must\nbe verified by simulation of the different data environx rents. This calls for\nappropriate simulation tools including a computer system of sufficient\ncomputational. power. The verification, process should be performed both\nat the level of individual routines to assess individual performances and at\nthe integrated level to verify the adaptation capabilities of the total system.\n\n1\n\n_50-\n\nV.\n\n3. 14. 6 Related Studies\n0\t\n\nSoftware Technology Items.\nTI-05 Standardization criteria for NASA software.\nTI-12 Control structures for adaptive systems.\nTI-15 Restructured image analysis software for\nparallel processing.\nTI-16 Optimal large array partitioning procedures,\nTI-19 Soft-ware prototyping methods.\n\n\t\n\ni\t\n\ni\t\n\nr\t\n\ns\n\nb. 21\n\n3, 15 R estructed Image Analysis Software for Parallel _Pr. oc: essing. (T..I- l 5.)\nr\t\n\n3. 15 1 Problem Definition\n\na"\t\n\n^a\t\n\nParallel processing is an attractive concept for the efficient\nrealization of image processing and pattern recognition functions onboard\nNASA payloads in the coming decades, However, existing software\ntechniques in the image analysis area are structured only fo r batch processing\nin conventional sequential processing environments on ground, Therefore,\nimage analysis software must be appropriately tailored for implementation\nin parallelprocessing environments. The effort required for ine eting\nthe needs of this concept is expected to be moderately large in scope and\nto span 10-25 man years, depending on the number of software functions\nto be covered by the effort.\n\n1\n\n.\t\n^-\t\n\nn \xe2\x80\x9e\t\n\n3. 15, 2 Technology Development Requirements\nThe enabling of onboard near-real-time image processing and\npattern recognition activities requires full utilization of parallel processing\ntechnology to rmnimi.ze the processing time required. This calls for\noperationally efficient software, structured to take advantage of the\nparallel .processing envi.ronrnents feasible onboard in the next decade.\n,\nHence the major \ttechnology needed is the restructuring of image analysis\nsoftware which is considered crucial to the enablement of image processing\nand pattern recognition activities onboard.\n\nT.\t\n3. 15, 3 Suggested\n\nApproach\n\nParallelism. can be visualized in terms of performing identical\nam\t\nprocessing on different segments of an image or data array u sing parallel\nprocessing elements. It can also be visualized in the sense of carrying\nout independent com p^..\t utations on the same segment of data concurrently\np\t\n_\t\nthrough different :processing elements. It is therefore necessary to\nexplore all such feasible parallelism in the major image processing\na functions of consequence to onboard implementation. For this purpose,\nit i s also necessary to assess the state of the art in parallel processing\ntechniques and supportive low cost hardware technology. This will help\nin determining the level or extent of parallelism advisable from a\nMCI\t\npractical viewpoint.\nHaving identified the feasible and practical parallel processable\nfunctions and the key techniques, the software is accordingly restructured\nto achieve the maximum parallel processability. This is followed by\nidentifying the appropriate computer architecture and control structure\nfor implerrientng the restructured software system. In this context, the\n\n4\n\nin the area of optical and hybrid (optical and\ndigital) processing should be assessed to ensure that the restructured\nsystem does not attempt to perform functions that are more efficient\ni.n optical processing techniques. This assessment must include the\ncomplexities of transforming images between digital to optical domains\nas that tends to offset the advantages of optical processing.\n\nimpact of developments\n\n^f\n^I\n\n3. 15. 4 Schedule and Resources\n\n\xe2\x80\xa2 Identify parallel\nprocessable functions.\n\xe2\x80\xa2 Restructure/modify\nthe software to achieve\nmaximums parallel\nprocess ability.\n\xe2\x80\xa2 Identify the appropriate\ncomputer architecture\nfor implementing the\nrestructured software\nsystem.\n\n_i\n\nEstimated. development costs: $500K-$1000K\nResources include hardware for testing the restructured software in\nappropriate parallel processing environment.\n3. 15. 5 Verification of Results\nThe results are to be verified through tests involving classes of\nmultispectral data. Experiments should be performed with both the\noriginal and restructured software (the latter in parallel processing\nenvironment) to verify the correctness of the restructured softwar e and\nto determine the computational gains achieved through parallel processing.\nThis aids in verifying and validating the computer architecture and\ncontrol structures to be used for purposes of onboard image processing,\n3. 15. 6 Related Studies\n0\t\n\nSoftware Technology Items.\nTI-01 Requirements -decomposition and structuring\nguidelia , es.\n\n-54-\n\nt\n\nr\t\n\ns\n\nTI-05 StandardiZation criteria for NASA software.\nTI-08 Interfacing criteria for NASA distributed\nprocessor applications.\nTI-09 Task control structures for distributed\nprocessor environments.\n\nJ\n\nTI-12 control structures for adaptive systems.\nTI-20 Software prototy-ping methods.\n\n-55-\n\naw\n\n3. 16 Optim a! Large - Array P4rt!tiQzftF, Pxrqced-ures-(71-16..).\n3. 16. 1 Problem Definition\nManipulations of large two= and three-dimensional arrays which\narise in the implementation of many data compre ss ion and image processing\nfunctions pose an operational problem that is far from trivial. Quite\noften the transposition of a matrix which is too large to fit in. core, may\nrequire more time than performing basic transform or other operations\non the rows and colu-n-ms of this matrix. In addition-, the complexity of\na large number of input/output operations demands more efficiency in\n-manipulating large arrays under the constraints of a real-time image\nanalysis system..\nThis problem was identified in Technology Driver PS-15,\nEfficient Large Array Manipulation Procedures. A solution is expected\nto result from a study effort of relatively modest cost (3-6 man years).\n3. 16. 2 Technology Development Requirements\nThe technology developments required to solve the problem\n\'\ndefined above can be summarized as the development of optimal large\nal\narray partioning procedures.\t The resulting procedures should be\ncapable of adaptating themselves to the array data characteristics, i. e. ,\nthe actual procedure used must be tailored to the array data characteristics\nexpected in the corresponding environment. \t Currently k nown and reported\nmethodologies for performing such matrix transpositions must be evaluated\nto pinpoint deficiencies in meeting the requirements of onboard real-time.\nimage processors.\t Partitioning of the arrays is a feasible approach in\nmeeting the constraints expected.\t It is necessary to develop partitioning\nprocedures which make the best use of the available computational resources\nand at the same time minimize time utilization.\t This technology developP\nmeet program shall study the impact of advancements in hardware\ntechnology such as electronic cyclic me mories. \t This will ensure that the\ndeveloped procedures are consonant with the state of the art in related\nfields, and that the resulting methodologies will meet the NASA requirements in the most efficient manner.\n3. 16. 3 Suggested Approach\nFirst., the study should consider the onboard processing system-\n\nar chitecture (and constraints) expected by mid 198 : 0 1 a, and should\nc. - itecture\nIT\n\nrestructure the optimal control problem accordingly. \t Second, alternatives\n\nto the dynamic programming approach should be explored.\nI\n\n-57r#MjWW(i pAGt BLANK NOT FELMF\n\ni\nf\t }\n\nThird, the feasibility of adapting the procedures to array data\ncharacteristics should be investigated. Fourth, the impact of technological advancements such as electronic cyclic memories on the\nmanipulation procedures should be studied. The study should then be\ndirected towards the development of suitable o.ptir7al partitio."Iing\nprocedures which can be applied to a variety of ox board, processing\nenvironments. The deliverable end product items will be a set of\nstrategies or optimal large array partitioning procedures which will\nlead to best utilization of the available onboard coinputati.unal resources.\nIn addition these procedures shall be adaptive to the array data\ncharacteristics.\n\n.f\n\nw\n\n3.16. 4 Schedule and Resources\nJ\n\n1\no Study feasibility for\nadapting array Mani_\npulation procedures to\narray data characteristic\no Determine interrelationships of these procedures\nwith data storage and\nprocessor architecture.\no Develop, test and document these procedures.\nEstimated development costs:; $150K=250K. Resource .requirements\ninclude access to a computer system capable of simulating different\nonboard processor environments.\n3:, lb. 5 Verification of Results\nThe methodology developed must be tested in different simulated\nonboard environments on a ground-based computer system to validate\nand verify optimality. The tests should be designed to cover a wide\nvariety of array data characteristics to prove the adaptability of the\nresulting procedures to such characteristics. These tests will ensure\nthe success of the task undertaken and can lead. to advancement of the\ntechnology to the next level required for actual onboard implementation.\n\n-58-\n\no`\n\nl\t\n\nI\t\n\nI\t\n\ns.I\t\n\nt\t\n\nt\t\n\n3. 16. 6 Related Studies\no\t\n\nSoftware Technology Items.\nTI-05 Standardization criteria for NASA software.\nTI -12 Control structure for adaptive system.\n\nTI-14 Adaptive search and sort routines.\n\n-59-\n\n[\n\n^ r\n\ni:-\t\n\n-^\t\n1! A\n\nt\n\n\xc2\xb5\t\n\nlT\n\n\t\n\n3. 17\t\n\nClassification _of Error Mechani,_s_xns (TI- _1.7)_\n\n3. 17. 1 Problem Definition\n"Learning from History" is the most often suggested route for avoiding repetition of previously encountered errors. This is particularly valid\nin the case of software errors because of the lack of standardization in\nsoftware design procedures and the consequent tendency to fall into the same\nerrors repeatedly. The problem is therefore the need for development o\xc2\xa3\navoidance techniques through a process of identification and classification\nof error mechanisms recorded in past software projects. NASA experience\nin space systems is particularly applicable. The effort required here is\napproximately 3-6 man years. The return, although perhaps difficult to\nmeasure, can be substantial in terms of cost avoidance.\n3. 17. 2 Technology Development Requirements\n\n1\n\nThe technology developments required here are quite unlike others\nin that the end product is not so much a methodology but a directory\ncategorizing the different types of software errors and the factors which lead\nto them. This categorization or classification of error mechanisms will be\nderived through analysis of prevalent errors encountered in prior space software development programs.. Guidelines will thereby be developed to ensure\nthat those pursuing future software development will be forewarned of potential\n\n-\t\n\n`\t\n\nfaults.\n\n3. 1.7. 3 Suggested Approach\nThe first step of the study is the coinpilation of errors documented\nunder the different NASA software development projects of the past space\nprograms. (This requires free access to such information by the organization conducting the study. ) The compiled list should then be critically\nreviewed and grouped on the basis of common characteristics. An understanding of the causes of such errors will aid in developing classification\nof the error mechanisms. Guidelines will be developed to avoid these types\nof software errors in future design projects. This approach can. be\nexpected to enhance the search for fault=free software development in\nfuture NASA programs.\nf_#\n^A\n\n-61SIG PAGE BLANK NOT FU\n\nM.\n\ni\n\nI\t\n\nI\t\n\n!\t\n\n.I\t\n\n1\n\n3. 17.4 Schedule and Resources\n1978_.1979\n\n\xe2\x80\xa2 Compile error data of past\nNASA software program\n\n1.980.\n\n198.1\n\n1.9:82\n\nprojects.\n\n\xe2\x80\xa2 Review and study the errors\nto extract their characteristics\nand model these errors into\nide-ratifiable classes.\n\xe2\x80\xa2 Derive an overall comprehensive list of these error\nclasses.\n\xe2\x80\xa2 Develop guidelines for avoiding such errors in future\nprojects.\nEstimated cost of development $150K - $250K.\nResources include unrestricted access to documented reports of experience\nof prior NASA software development programs.\n3. 17.5 Verification of Results\nThe concept of verification of results is not val id in the usual\nsense of the phrase as. only future experience can prove the value of the\nguidelines developed from this process of classification of error\nmechanisms. However, a small scale software development program\ncan be carried through in the light of these results and error avoidance\ncosts estimated in a subjective z . anne.r. As in many research items,\ninsight into the underlying causes of an effect can lead to unrelated\nadvancements in technology.\n3. 17. 6 Related Studies\nThis Technology Item relates to all software development\ntechnology areas.\n\n-62-\n\n1\t\n\ni\n\n3\n3. 18 Guidelines for Design Documentation Consistency (TI-18\n\nE\n\n3.18. 1 Problem Definition\na\n\nAn important aspect of software design process, which has received\nmuch attention, but few solutions, is the method of documentation of software design. No satisfactory method has been developed. of conveying\nrequirements into design representations which are understandable throughout the evolving responsibilities of a program life cycle. Attempts have\nbeen trade to use data flow diagrams, functional representations, networks\nand other means. Though each may have specific advantages, none satisfies\nthe need for unique clarity and understandability in a universal sense.\nInadequate details, lack of consistency and such other drawbacks\nin the docuxnentatio.n of the design can cause misinterpretation of the intent\nof the software designer by the programmer in the coding phase. This\nresults in error-prone software with low reliability and consequent high\ncosts in its maintenance. It is therefore clear that the lack of proper\nguidelines for design documentation represents a problem of sufficient\nimportance to be addressed by NASA to ensure the developed. software is\nspace-worthy. The effort required to -meet this problem effectively is\nexpected to be one of relatively modest cost involving 2-5 rnan years.\n3. 18.2 Technology Development Requirements\nThe developments expected of this study are the guidelines for\nconsistency in design documentation which can facilitate clear understanding of the design coding requirements. This will enhance the scope for\nhigher reliability in the generated code, thereby reducing maintenance.\nThis is a desirable objective in space=related environments of concern\nto NASA.. The guidelines should be broad enough in scope to cover the\nspectrum of NASA payload software activities and specific enough to be\ndirectly applied to the software development projects in the coming decade..\n3. 18. 3 Suggested Approach\n\nw\n\nf\n\n+sw\n\nThe effort should be closely coordinated with other software designrelated Technology Items such as requirements decomposition and structuring guidelines, and AOL design guidelines/standards. The first step of this\neffort is to develop a clear understanding of the state-of-the-art design\ntechniques (and hence the need to coordinate with efforts leading to improved\ndesign techniques). This will ensure that the design structure and all assniate.d .aspects are known and their implications are completely grasped prior\nto the development of documentation guidelines. This design structure\nanalysis will be followed by formulation of the actual guidelines for achieving\n-63-\n\n;\'i\t\n\nI\t\n\nI\t\n\nI\t\n\nI\t\n\n!\t\n\nr\n\nconsistency in design documentation. The next step is the development of\nevaluation criteria to measure the effectiveness of these guidelines.\n3. 18.4 Schedule and Resources\n1978 11979 1980 11981 1982\nn Design structure analysis.\n\no Development of documentation\nguideline s.\no Evaluation c rite ria.\n\n7\n\nEstimated cost of development: $10OK - $ 250K.\n3. 18. 5 Verification of Results\nThe guidelines can be effectively verified as to their worth by\napplication to real-world software design documentation efforts. The\nresulting documentation is assessed on the basis of the evaluation criteria\ndeveloped as part of the study. This leads to a measure of effectiveness\nin achieving design documentation consistency.\n3. 18. 6 Related Studies\no\t\n\nSoftware \'Technology Items.\nW\t\n\nTi-01 Requirements decomposition and structuring\nguidelines.\nTI-05 Standardization criteria for NASA software.\nTI 06 AOL design guidelines/ standards.\n\n-64\n\ni\n\nz\n3. 19 Software Prototyping Methods_ _(TI-19}\n3. 19.1 Problem, Definition\nSoftware design errors and the associated costs are always a\nmatter of grave concern to software development projects. Even more\ndisconcerting is the discovery that a design will not meet requirements\nafter implementation is complete. It is therefore highly desirable to\ndevelop methods for proving the software design before committing the\ndesign to code. This is the objective of software prototyping methods.\nSoftware prototyping will provide low-cost pretesting of the key elements\nof the design prior to implementation of the operational system. This\ntechnology when properly developed and used offers great benefits in\nreliability and cost avoidance. The development effort is expected to\nbe one of relatively modest cost involving 2-5 mnan years.\n\n}\t\n\nj\t\n\n3. 19. 2 Technology Development Requirements\n\nj\n`-\t\n\nThe technology to be developed under this study is the means of\ntesting software design prior to implementation of the system. Such\ndevelopment will cut the high cost associated with design errors both\nin terms of their potential effects on reliability and in terms of the\nactual expenses involved in correcting these errors or making false\nstarts. The ,methods to be used to achieve software prototyping\ncapabilities represents the major requirement of this development study.\nAlso, suitable evaluation criteria must be developed to assess the\neffective,n ,ss cf these methods.\n3. 19. 3 Subgested Approach\n\n_.\n- 4\t\n\nThe effort must be mainly directed towards the development of\nmethods suitable for prototyping real-time space systems. It is\nnecessary to assess the technology currently available in the area of\nground-based prototyping techniques prior to exploring the scope for\nprototyping onboard real-time systems. The current technology\nanalysis will then provide pointers for extrapolation of these techniques\ninto the domain of space. This extension may not be straightforward\nin that the environmental constraints associated with space\nsystems are likely to be of an entirely different category. The final\nstage of the effort is the development of appropriate evaluation criteria\nfor assessing the developed techniques,\n\n.65^b\n\nf.^\n\n^r\n\n.1\t\n\n....\n\nI\t \t \tI\t -\t \t \t1\n.\n\n.. I\n\n.\n\nr\t\n\n...\n\n3. 19.4 Schedule and Resources\n1978\n\nI\n\n1979\n.\n\n1980\n\n1981\t\n\n1982\n\n\xe2\x80\xa2 Technology analysis.\n\xe2\x80\xa2 Low-cost prototyping\nmethods.\n\xe2\x80\xa2 Evaluation criteria.\nEstimated coast of development: $100K-250K.\n3. 19. 5 Verification of Results\nThe end product of this effort and its effectiveness can. be\njudged by application to specific cases of software design and\ndevelopment programs. The evaluation criteria developed as part of\nthis technology development study will be used to assess the gains\nand verify the efficiency of the tools resulting frogs the study.\nCom parative analysis with non-prototype development will be performe d\nwhere systems with similar requirements can be identified.\n3. 19. 6 Related Studies\nThis Technology Item is applicable to all software development\ntechnology.\n\n-66-\n\nI\n\n^I\t\na^\t\n\nI\t\n\nf\n\n3.20 Software Technology Monitoring (TI-20)\n3. 20. I Problem Definition\n\n^S\n\nNASA should capitalize on the continuous evolution and the\noccasional breakthroughs occurring in the areas of hardware / software\ntechnology. A process of early awareness of the developments is\nneeded followed by a study of the impacts of such developments on NASA\nprograms. This requires that there be a constant monitoring of the\ndevelopments in the field and for this purpose it is necessary that\nNASA establish a suitable formal mechanism.\nAs an Item, software technology monitoring seems obvious\nand deceptively simple. NASA personnel are continually monitoring\ntechnology and providing much of the advancement. However, this\nmonitoring basically applies to a specific area of interest of the person\nor group doing the monitoring. The \'key to this task is to have a\ncentral source monitoring all software/hardware technology and\ncorrelating advancements to ongoing or proposed space activities\nwherever they may be applicable. This is to be an on-going low level\neffort of relatively low cost, requiring I man year per year.\n3. 20. 2 Technology Development Requirements\nIn this case, the requirement is not truly one of technology\ndevelopment but rather one of technology assessment. However, the\nrequirements can be viewed as developing and instituting a formal\nsoftware technology monitoring .mec-hanism. Such a mechanism would\nbe responsible for performing the monitoring activity and correlating\ndevelopments with the NASA requirements, It would thereby contribute\ntowards identification. of additions (and/or deletions) to the NASA\nSoftware Technology Item roster.\n\n3. 20, 3 Suggested Approach\n\n^y\n\nv\n\ntoo^\n\nThe formal mechanism set up for this purpose should have access\nto information about activities from different sources within NASA and\noutside of it also, to the extent feasible. This is in addition to the open\nliterature publications which are easily accessible. The formal\nmechanism should utilize the modern techniques of technology forecasting and assessment, such as advanced DELPHI techniques, not\nonly for monitoring but\n\nalso to identify the expected course of\n\n_\ndevelopments. This activity being an on-going effort, the projection s\ncan be verified whenever promising technology is identified.\n-67-\n\nT\n\n3. 20. 4 Schedule and Resources\n.1.978 __1.979_1 _19-$0_ 1_1981_!\t\n\n1982\n\n1986\n\no Monitor software\ntechnology advances.\nEstimated development costs: $50K/year.\n3. 2.0, 5 Verification of Results\nThis Technology Item is significantly different from others;\ntherefore the concept of verification results does not apply in its usual\nsense. However, the projections on future developments made earlier\ncan be verified by the monitoring process, thereby refining the assessment\nmethodology.\n3. 20. 6 Related Studies\nNot applicable (.except in the sense that the Technology Item is\nrelated to the total area of software technology).\n\n-68-\n\nI\t\n\n!\t\n\nI\t\n\n,._I\t\n\nI\t\n\nAPPENDIX A\nSOFTWARE TECHNOLOGY DRIVER DESCRIPTION\nSUMMARY\n\nA-1\n\nt\t\n\nf\n\nThis appendix serves to provide a summary description of each of\nthe fifteen technology drivers (listed below) derived from an analysis of the\ntechnology emphasis areas during Phase 1 of this study and described in the\nMid-Term Report (No. 76-0084), NAS8-32047, December 24, 1976, by\nM&S Computing, Inc.\nS1. No.\n\nTechnology Driver Title\n\nPS-01\nPS-02\n\nAOL Design Methodology\n\nPS-05\n\nLow Coat Development of AOL Compilers\n\nPS-06\n\n(Distributed) System Part-it oning/Interconnection\nTechnique s\n\nPS-07\n\nVery Large Storage Access Sim,plifscation\n\nPS-08\n\nSoftware Fault Detection\n\nPS-09\n\nSoftware Recovery (after- fault detection)\n\nPS-10\n\nHigh Speed Buffering Techniques\n\nPS-1.1\n\nDesign and Control\n\nPS -12\n\nNatural Comm-u . cation Methods\n\nPS-13\n\nEfficient Large Array Search and Sort Procedures\n\nPS-14\n\nParallel Processing Techniques\n\nPS-15\n\n1.\n\nFault-Free Software\n\nPS-04\n\nS\n\nTrend Toward Software Development by Non-Programmers\n\nPS-03\n\ni\n\nSoftware Design Engineering\n\nEfficient Large Array Manipulation Procedures\n\nof Adaptive\n\nA-2\n\nSoftware Procedures\n\nI\t\n\nE\t\n\nI\t\n\nI\t\n\nI!\t\n\nP\t\n\ni\n\naw\n\n,r\n\nf;\t\n;l\n{\t .^\n\n}\n\nSOFTWARE DESIGN ENGINEERING (PS-01)\nA review of software development technology shows that hardly any\nof the facets of software development are being satisfactorily performed at\nthe present time.\t Furtherance of the state of the art in all these facets\n(except perhaps .in the actual coding phase) is not only desirable but also\nessential to ensure meeting the NASA payload software requirements. \t While\neach facet in itself can be viewed as a Technology Driver, it is possible\nto identify a basic common denominator contributing to the deficiencies in\nthese areas.\t This key feature is the software design engineering.\t Software\ndesign engineering embraces all the different stages from an understandi.-g\nand interpretation. of the user-specified requirements through the docurnenta.tion of the design.\t Sorne of the aspects to be considered are visibility\nof design, traceability, requirements documentation, design techniques,\nstructuring, consistency, and design documentation,\t The entire spectrum\nof requirements analysis and design process is thus covered by this Techt\nnology Driver.\t Software costs and reliability goals will be met only when\nsoftware design engineering becomes a reality. \t This is particularly\nimportant in the context of NASA payload software wherein the software;.\nrequirements are more difficult to define and reliability considerations are\nof utmost significance.:\nTREND TOWARDS SOFTWARE DEVELOPMENT BY NON-PROGRAMMERS\n(PS-02)\n\n,.\n\nThe availability and consequent increased use of low-cost microprocessor technology has resulted in high ly distributed processing systems\nwhich most often rely as soft-ware support from non-programrn r professionals.\t This trend has resulted in high cost, redundant software developmeet, a lack of consistency, and a multiplicity of problems during operation\nand maintenance.\t Therefore, development of appropriate new software\ndevelopment concepts and methodology is required.\t Tools ( in the form\nof highe.t level languages and simpler operating systems) which can simplify\nthe software development process are called for to meet the demands which\npotentially arise from the advent of low-cost microprocessor technology.\nThe need to provide aids for efficient, low-cost software development by nonprofessional programmers thus represents a Technology Driver of considerable\ns:ignificarnce.\n\n`.\n\nFAULT-FREE SOFTWARE (PS- 03)\nm\n\nCentral to the performance of space missions (especially long life\nautonomous type of missions) is the need for highly reliable software. \t By\ndefinition, fault-free software is software with no internal errors.\t Of course,\n\nM\n\nm\n\nA-3\na\n\nfault-free software alone does not ensure reliable performance but represents\nonly a positive condition for such reliability. External errors in data and\nhardware can still contribute to the information processing system failures.\nHowever, analysis of this facet of the problem, in terms of developing guidelines and methodologies to ensure fault-free software development, reduces\n7 .,\nthe risk of catastrophic failures (such as those which caused, in the early \t\n1970\'s, a French meteorological satellite to erroneously send destruct;\nsignals to 72 out of 141 high altitude weather balloons). Analysis also provides a solid base on which fault-tolerant systems can be built. Hence,\nfault -free software is deemed a Technology Driver in .rr-meeting NASA payload\nsoftware requirements.\nAOL DESIGN METHODOLOGY\n\n1\n\n(PS -04)\t\n\nThe growing use of application-oriented languages (AOL) by a continually\nexpanding user community places a burden on the space-based information\nprocessing systems and its management by NASA. This burden, in the form\nof reduced reliability and higher costs (because of an additionaL compiler for\neach new Language), is caused principally by a lack of commonality in approach\nto AOL developm-ent. This results in very little consistency and dictates that\nguidelines and standards for the design of AOL\'s as weL1 as evaluation criteria\nfor their assessment should be developed.. Therefore, :- -ASA should consider\nthis aspect of software engineering as a prime area of concern and accordingly\nview it as a Technology Driver under this study.\nLOW COST DEVELOPMENT OF AOL COMPILERS (PS-05)\nThis Technology Driver represents an area of concern that is closely\nconnected with PSO4 and, in fact, represents a "down the stream" concern\nfrom the previous one. Development of AOL compilers and .their costs are\nclosely tied to the AOL design aspects in that a better and more consistent\nAOL design requires sim\n-pLer and less expensive compiler generation efforts.\nHowever, the problem of core pi.ler costs is further complicated by the continued proliferation in the types of computer systems coming into usage.\nA new compiler is needed not only for each new language but also for each\nnew computer environment in which it is to be deployed. It is therefore\nnecessary to look to this aspect as separate from the problem of AOL design.\nAs such, this is identified here as an independent Technology Driver.\nDISTRIBUTED SYSTEM PARTITfONINGANTERCONNECTION TECHNIQUES\n\n(PS-06)\n\nDistributed systems, in the context of this description, are defined as\nsysterns of multiple processors each having its own executive and mernory\nbut performing specific dedicated processing functions as a part of an overall\n\n3\n\nc.\t\n\nl\t\n\nI\t\n\nl\t\n\n[\t\n\n.t1f\n\ns.\nf\n:v\na.`\t\nL\t\n01\n\nl\t\n\nsingle partitioned system. While this concept is not new in itself, the progress\nin hardware technology, particularly the advent of microprocessors, has\nbrought it to the forefront. The advantages of such distributed processing\nbrings in its wake problems of compLexity in system design and integration of\nsubsystems. Associated with this facet of information processing are the\nproblems of interprocess communication and optimal distribution of the processing functions among the components. These and other related aspects are\ncovered by this Technology Driver and accordingly viewed as an area needing\nfurther attention, from NASA in order to meet onboard, real-time, distributed\nprocessing needs.\nVERY LARGE STORAGE ACCESS SIMPLIFICATION (PS-07)\n\ni\t\n\n}\t\n\nAvailability of very large, low=cost storage, which presently lags\nbehind other hardware technology in its status, can be expected to gain more\nattention in the coming decade. Accessing very large memories will entail\nfar ignore complexity than is now necessary. In addition, the number of nonprogrammers, with the need for such capabilities, will continue to increase,\nand their needs must be met by appropriate developments in the software\narea. This need to simplify access to large storage on a routine basis is\nexpected to become critical from NASA\'s point of view with the increased\ndernand on high-volume, data rate-oriented space systems. Accordingly, it\nis viewed as a Technology Driver of importance.\nSOFTWARE FAULT DETECTION (PS-08)\n\nr.-.\t\n\nSoftware., however much it is checked for faults, cannot be formally\nproven to be fault-free, especially in the case of large software packages.\nFurther, even the internally fault-free software may fail in operation due to\nexternal errors in data and hardware. It is therefore essential that suitable\nmeans for fault detection should be inculcated into the system. Such fault\ndetection during execution can alleviate the problem of system failures\nthrough initiation of appropriate action to confine the error (from- further\npropagation within the system) and enable recovery. Such recovery and\nerror confinement are very critical to NASA payloads, and as such software\nfault detection is viewed as a Technology Driver of consequence.\n\n=-\t\n\nSOFTWARE RECOVERY (AFTER FAULT DETECTION) (PS-09)\n\nTL,\t\n\nThis represents the third facet of the software reliability goals\nto be pursed by NASA to meet its long term requirements. The first facet\ninvolves studies aimed at fault-free software, the second is fault detection\nduring execution, and the third is recovery from such faults after detection.\n\n\'F\nm-.\n\nA-5\n\n1\n\nAccordingly, this Technology Driver rounds out those identified earlier as\nPS-03 and PS-08 and combined the three contribute towards fullfilling the\nNASA software reliability requirements. Thus because recovery in real\ntime from detected faults is essential to the success of missions, it is\nviewed as a primary area of concern - a Technology Driver.\nHIGH SPEED BUFFERING TECHNIQUES (PS-10)\nThe earth-oriented nature of future missions will result in onboard\ndata acquisition at very high rates. These projected rates are far beyond\nthe capabilities of present data acquisition, buffering, and processing systems.\nConsequently, extremely large buffers and associated high speed. buffering\ntechniques have to be contemplated in viewing the data systems of the 1980\'s.\nHigh speed buffering techniques are viewed as a Technology Driver of significance to this study.\nDESIGN AND CONTROL OF ADAPTIVE SOFTWARE PROCEDURES (PS-11)\n\nMany of the information processing p ocedures associated with\nr\nautomated intelligence. environments such as scene analysis, pattern\nrecognition, and image processing involve a considerably large number of\nspecific processing functions. While each of these may be simple in itself,\nthe many possible configurations of employing them make the task of control\nof these software procedures complex and challenging. This is the case\neven if a person is involved in the loop for deciding on the particular configuration most suited to a given data environment. In autonomous environments requiring automated intelligence capabilities, this adaptive selection\nand execution of specific processing logic modules becomes a critical\nca-mbility and should be incorporated into the software system. The design\na\'r:r control of such adaptive software procedures is viewed as a Technology\nDriver of importance to NASA missions requiring autonomous operation\ncapabilities.\n\nNATURAL COMMUNICATION METHODS (PS-12)\nBecause human resources are at a premium on space vehicles, it is\ndesirable to explore all avenues for minimizing the demand on these resources\nor, alternatively, expanding the potential of the available resources to the\nfullest extent. In the case of man-machine interaction, this can be achieved\nby making the machine capable of interacting with the rnan in the manner that\nis most suited to the man, i. e., through natural communication methods.\nExploitation of the full potential of the natural com- munication methods for\nonboard irimp:lementation would result in o:pt marl utilization of human resources.\nIt is therefore desirable for NASA to look into this area, and natural communication methods are thus being identified here as a Technology Driver.\nA-b\n\n\t\n\n!Y\n\n4V\n\n\t^:-\t\na\t\na,.\t\n:.\n\nEFFICIENT LARGE ARRAY SEARCH AND SORT PROCEDURES (PS-13)\nMost pattern classification software techniques can be efficiently\nstructured by use of table look-up procedures. Such table look-up procedures generally involve large size tables, and consequently both the table\nformulation and .look-up phases involve considerable search:/sort operations.\nFurther, these operations are highly data-dependent in terms of the resulting\ncomputational loads. The very high data rates associated with the imagery\napplications and the consequent need for repeated high speed data-dependent\ntable look-up operations dictates that the search/sort operations should be\nas efficient as possible under the related environment. it is therefore\nnecessary and desirable, from the point of view of enabling onboard im- age\nanalysis and classification, to evolve efficient large array search/sort\nprocedures,\n\nPARALLEL PROCESSING TECHNIQUES (PS-14)\na\n3\n\nF\n\n34\n\nParallel processing techniques have come to the forefront with the\nadvent of distributed systems made practical by availability of low-cost\nmicroprocessors and related hardware technology. While the general\narea is under active study, the aspect of exploring its application to image\nanalysis and exploiting its potential in this context has not been given sufficient attention. The concept of parallel processing is especially attractive\ngiven the nature of processing involved in the analysis of large images\n(identical independent processing of a large number of data points in a twodimensional data array). An in=depth exploitation of the concept in the\ncontext of image processing functions is accordingly viewed as a Technology\nDriver as it leads to more efficient use of the computational resources\navailable onboard and enables onboard implementation of some of these\nfunctions (which otherwise would be considered not feasible).\nEFFICIENT LARGE ARRAY MANIPULATION PROCEDURES (PS-15)\n\nR- S\n\n!I\n\nu\n\nData compression, image enhancement, and such other image analysis\noperations involve two-dimensional processing requiring manipulations such\nas matrix transpositiog (of the two- dimensional image data matrix). This\nproblem is portant in actual. environments involving large images, for\nit precludes the possibility of holding the total image in core all at once.\nThe desirability of addressing this problem becomes even more apparent\nwhen one considers the fact that this manipulation can take significantly more\ncomputational effort (and time) than the rest o f the processing being carried\nout on the image. Accordingly, this need for efficient large array manipula\ntion procedures is viewed as a Technology Driver in. meeting the NASA\nrequirements of image analysis capabilities.\n\nim\n\nA.-7\n\n1_1\n\nAPPENDIX B\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEETS\n\nB-1\n\nft-MANNG PAGE BLANK NOT FHMfg)\n\n1\t\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet 1 of 4\n_I.\n\nTechnology _Driver;\t Software Design Engineering\t\n\nNo.. PS-01\n\nZ_. __Technolo y_Category;\t Software Development\n3.\n\nMissions Affected;\t All\n\n4-\n\nlm - aet Date:\t 1978\n\n5.\n\nDriver Description:\t Currently, no facet of software development can be\nconsidered as being satisfactorily performed in a production mode, i. e,\nmajor shortcomings are identifiable in every step of the development\nprocess (with the possible exception of coding). \t There is a general\nfeeling of inadequacy, dissatisfaction, and a lack of confidence in the\nmerits of proposed solutions.\t Almost every facet of software development can, therefore, be a Technology Driver. \t Further investigation\ninto the problems, proposed solutions, and status of technology developmeet reveal,, however, a common cause of difficulties.\t The key to this\ncommon cause is the lack of Software Design Engineering technology.\nSoftware Design Engineering is conceived to cover interpretation of\nrequirements and creation of a design, but not the physical implementation of the software.\n\n6..\n\na\n\nPayloads:\t This software design problem is an even\nmore difficult problern in the area of payload software than it is\nin most other areas.\t Payload software is generally part of an\n"embedded" system, that is, a computer system that is only part of,\nand integrated into, an equipment complex such as an avionics system.\t The software design problem itself is difficult enough, but\nin the \'"embedded" system, these difficulties are multiplied by the\nexternal constraints imposed by the total system.\n\n7.\n\nr\n\nCurrent Technology Efforts: Current and past technology developments\nhave primarily addressed the development cycle from the point that a\ncomplete design specification is available. \t Some effort has been\nmade in formalizing the design specification; however, only recently\ns\ncognition\nhas recognition been given to the fact that all successes and failures\n\nApplicability to\n\nB r.2\t\n\ni\n\n-d\n\nti c\n^ip\t\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\n5iieet 4 ot. 4\nof systems start with the proper design principles of lack thereof.\n7.\t\n(Cont\'d) Very little effort has been invested in "embedded" systems. Activity\nwithin industry is now centered on development of machineanalyzable, computer=aided , requirements analysi-- software systems\n(e. g, ISDOS, SREP). These involve problem stateme^at languages\nand language analyzers. Simulation techniques are slowly being\nimproved. Top Down design is receiving more emphasis. Studies\nof how to use it and how to represent control structures and data\ninteraction are growing. Modularization and structural design\ntechniques are beginning, although, decomposition roles for system\nstructures are poorly understood and decomposition consistency has\nnot materialized. Better design representations are beginning to\nappear (e.g., HIPO, PROVAC). Some attempts are being made\nto develop machine proce s sable design .repre sentations (PDL). MSFC\nis currently developing a Software Specification and Evaluation\nNa. eb- u 1\t\n\nSystem (SSES) which shows promise.\n\n$.\t\n\nIYY\n\n^A\n\nCurrent Major Problems: There is a general lack of knowledge of\nSoftware Design Engineering as a whole. The design process is\nnot well understood. There is little guidance for designers and\nlittle knowledge of what a designer does or how lie does it. Software\nrequirements are mostly represented in free-form English specifications which use ambiguous terms and wards with unspecified\ndefinitions. There is a lack of consistency from requirements\nto final design specification. Most design is still manual and\nBottom-Up. interface and integration questions are usually not\nconsidered until late in the design process if not ignored completely.\nTop down techniques are slow in developing because s o little is\nknown about how to decompose a system structure into proper\nfunctions. This is particularly critical with the advent of distributed\nsystem techniques in space applications and will continue to be\nuntil there are firmly established principles as to how a system\nshould be distributed. Until these problems are resolved, software\nwill continue to be costly and unreliable.\n\n9.\t\n\nTechnology Advancements Required: Technology advancements must\nbe made to provide visibility of design, improve design techniques,\nand establish realistic design evaluation methods. Specifically,\ntechnology advances must be made in the following areas:\no\t\n\nComputer-aided design for control structures and\ndata structures.\nB-3\n\nSOFTWARE TECHNOLOGY ITEMS DERIVATION WORKSHEET\n9.\t\n(Coat"d)\n\no\t\n\nNo. PS-01\t Sheet 3 of 4\nMethods of designing and describing interfaces.\n\no\t\n\nDevelopment of a better understanding of error\nmechanisms.\n\no\t\n\nDevelopment of rules for the decomposition of\nsystem structures.\n\no\t\n\nDevelopment of techniques to enable consistency of\ndecomposition of requirement and specifications\nde scriptions.\n\na\t\n\n.v\n\nDevelopment of methods of deriving module definitions.\n\n0\t\n\n-3\n\nImprovement to modeling and simulation techniques.\n^\t\n\no\t\n\nDevelopment of software prototyping techniques.\n\no\t\n\nDerivation of design techniques for development of\nmanageable, testable, and maintainable programs..\n\nThese areas are of general interest across th.t: industry and are\nbeing vigorously pursued; as for example, the development of computer aided requirements and specification language development\nprojects such as the ISDOS project sponsored by the aerospace and\ngovernment organizations, CARA sponsored by the U. S. Air Force,\nand SREP sponsored by BMDA.TC. However, there are some technology items whose developments will have direct bearing oft future\nNASA spac e activities and to some extent are unique to NASA (in terms\nof the need to develop real-time distributed systems and distributed\ndata networks for space applications). These are;\no\t\n\nDevelopment of requirements decomposition and\nstructuring guidelines.\n\no\t\n\nDevelopment of methods of designing and describing\ninterfaces.\n\n0\n0\n\n\t\n\n\t\n\nDevelopment of guidelines for design documentntton\nconsistency.\nSoftware prototype methods.\n\nB-4\n\nY\n\n^\t\n\n^\t\n\nr\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nNo. ro - 1l\t\n\nSheet 4\n\nof 4\n\nAdvances in these areas would provide the knowledge required to\n(Cont\'d) partition systems, distribute functions and subsequently determine\nwhether these functions are more appropriate to software or hardware implementations.\n\n9.\t\n\nThe approach basically consists of taking the theoretical work\ndone by L. L. Constantine and others and applying it to the real\nproblem presented by the processing requirements of future space\nsystems.\nHowever, the task is only deceptively simple. At this point in\ntime there are still basic disagreements as to what constitutes\nproper decomposition of a system. There are basic questions on\nhow to docurnent a design to provide design visibility. But more\nimportant, there is no establis?led evaluation criteria to say\nwhethe r or not a design is good. Establishing these principles\nis an integral part of the proposed tasks.\nThese are critical tasks to be addressed by NASA. Failure to\ndo so will foreclose an opportunity to alleviate the continued\nhigh cost of software systems of questionable reliability.\nCost of these studies could range from law (3 man years) to\nmedium. (10 ma.n years).\n\nB-5\n\n^.S\nS\ny\n\n7\n9\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet 1 of Z\nTrend Toward S/W Development\n\n1. Technology Driver: bX Non- Pro ramm ers\tNo. PS-02\n2_.\n\nTechnology Category: \t Software Development -\n\n3, -Was ions A ff ected: All\n4.\n\nIrn _a..ct_ Date-\t 19.78\n\nS.\n\nDriver Description: With the advent of microprocessor technology in\nhighly distributed processing systems, more and more programming\nis performed by professional people with no background in programming\nskills.\t The programs are preponderantly coded in assembly or even\nmachine language, and are usually unique, single -copy logic (i. e. ,\neach is a "\'new" invention).\t This trend will continue, and probably at\nat an accelerated rate, along with its attendant high cost, inefficiency\nand retraining requirements, unless tools are provided for these\nsystems.\t The tools_ required are standard operating systems, high\nlevel languages and scientific and mathematical subroutine\npackages for m-icrocomputers.\t These tools will allow the individual\nscientist or engineer to generate reliable software more easily\nand at a lower- cost.\n\nb.\n\nApplicability to Payloads: The low co st, volume, weight, and power\nrequirements of microprocessors make there ideal candidates for\nspace systerns.\t These attributes enable new concepts of payload\ntechnology to be realized through the distribution and partitioning of\nfunctions.\t Unfortunately, the proliferation of computers expands the\nneed for software and software costs are still rising. \t The promise\nof this new technology will not be fully achieved unless ways and means\nof controlling or limiting software cost can be found.\n\n7.\n\nCurrent Technology Efforts: Available memory on microprocessors\nhas been a ]smiting factor in converting sophisticated software\nlanguages to their use.\t These limitations are gradually lessening,\nand industry is beginning to make available higher order languages\n(prmaril:y FORTRAN) for microprocessor systems.\t There are also\nnew language techniques, such as FORTH, available to simplify software development.\t However, very little has been done to standardize\nand provide off-the-shelf operating systems and software libraries.\nBt-6\n\np^.\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\n\n8.\t\n\n9.\t\n\n\'t\n\nCurrent Problems: Microprocessor technology is still in a very\nevolutionary state (e. g., 4-bit to 8-bit to 16 - bit word length).\nPeripherals are primitive and still expensive. Memory size, though\nincreasing, still imposes limitations on the use of less efficient\nlanguages and sophisticated operating systems. In addition, quite\noften the users of micro (and even mini) systems cannot afford extensive programming staffs. The software now being generated is\ncostly in any case, but much more so when done by non-programmers.\nTechnology Advancements Required: A number of technology advancements are needed to alleviate cost and improve reliability of software\ncreated by non -programmers. This is particularly critical to NASA\nin supporting the rapidly expanding use of space systems. These\n\t thrust to\nadvancements. are possible but need a central,"\nachieve fruition. The key to solving current problems is to snake\nprograms and programming simpler. The following Technology Items\n0\nare designed to do that\t\n\nDevelopment of requirements - to-code translation aids.\n\no\t\no\t\n\ni-\n\nk\n\nResearch into query guided implementation methods.\n\no\t\n4.\n\nImplementation of a simplified software development\nsystem demonstration model.\n\nClassification of error mechanisms.\n\nThese are achievable items and achievable at modest cost. Growing\nsupport of industry (not just the computer industry) is evident; however,\nin most cases the efforts at technology advancement is aimed at\nspecific applications which will not satisfy the requirements of the\nspace user community; therefore, NASA should initiate action to\npursue these items. Failure to do so will limit the opportunity to slow\nthe coast nu.ed spiral of software cost ard. enhance software reliability.\n\n^a\n^a\na\n\nPIA\n\nB-7\n\ni\'\t I\t .,I\t I\t\n\n:i\t\n\nP\t\n\nF\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEFT\nSheet i of -a\n3.\n\nTechnology L)river:\t Fault Free Soft-ware\t\n\n2.\n\nTechnology Qgt@.gpry:\t Software_ DevejoRM nt\nMissions Affected:\t\n\nNo.. -FS-03\n\nAll\n\ni978\n\n5.\n\n.....\t\n\n. . . .\t\n\n.\t . . .\n\nDriver Description:\t Software reliability (or unreliability) is a subject\nof universal concern, but it is an overriding concern for space flight\nparticularly an longlife, autonomous missions.\t Fault free soft-ware\nis software that is correct and its internal data contains no errors.\nThis does not necessarily equate to system reliability for the software\nis still subject to external data and machine errors; however, it\ndefinitely removes soft-ware per se as a cause of system unrellabi l I.-t-\n\n6.\n\nApplicability to Payloads: Dependable systems are mandatory for\nSpace applications and systems are never more dependable than their\nweakest component, part.\t Software is a unique component of these\n.systems because it is so difficult to predict where or when it might\nfail; conversely, if it could be completely "proven, \t it would never,\nfail.\t This is what NASA should strive for.\n\n7.\n\nCurrent. Technology Efforts: As software reliability is of universal\nconcern, the search for fault free soft-ware is a universal activity.\nMany avenres are being explored in the development of new and\nimproved testing techniques, better requirements and design approaches,\nmathematical theory and management practives.\t Even computer\narchitecture is evolving which aids in the prevention . of software errors,\nbut with all this activity truly fault-free softw\xe2\x80\xa2\t\nis hard to find.\n\n8.\n\nCurrent Major Problems: The basic problem to be solved is how to\ndevelop adequate Software Engineering Techniques. \t Of course, other\nproblems exist in areas such as validation/verification, lack of\nrequirements and lack of standardization, but these will probably\nnever be solved until Software Engineering comes of age.\n\nB-8\n\nA\t\n\n.\t\n\n1\t .\t\n\nf.\t\n\n.\t\n\n1\t\n\n1,\t\n\n..\t 6\t ..\t\n\n.\t\n\n.t ..\t\n\n.._\t\n\n..\t\n\n[\n\nul sa\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\n\nPS-03\t\na.\n\nSheet 2 of 3\n\n9. Technology Advancements Required: First and foremost, the development and dispersion of Software Engineering Technology. This should\nbe accompanied by advances in other areas:\no\t\n\nConsistency testing techniques to prove that design\nreflects requirements.\n\no\t\n\nAutomatic test case generators.\n\no\t\n\nIntegration and traceability techniques.\n\no\t\n\nStudy of error rzechanisms.\n\no\t\n\nStatic and dynamic code checks in higher order\n1. anguag:e s.\n\no\t\n\nProgram proving aids and theory.\n\no\t\n\n1 mproved quality assurance techniques.\n\no\t\n\nSoftware redundancy techniques.\n\no\t\n\nComputer architecture refinements.\n\nMost of these areas are being addressed both within. NASA and\noutside, as for example SSES of NASA-MS.FC. However, there is\none additional area of significance that only NASA can address. This\nitem is standardization. Standardization has many implications. It\nimplies standard languages, standard operating systems, standard\ninterface implementations and consistent management practices. Not\nall of NASA software can be standardized, but that, which can ., should\nbe identified and placed. under rigid configuration control.\n\nr\'\n\nI\n\nOne characteristic that software evinces is the fact that the probability of a failure happening is proportional to the number of errors\nthat exist in a program. Consequently, as failures occur and errors\nare removed over a span of ti -me, the more reliable the software\nbecomes, until theoretically it becomes fault-free. This is one of the\nunique and variable assets provided by standardization. The use of\nstandard functions multiplies the opportunity to exercise the code and\nallows it to be exercised in many different environments. Though a\nstandard function may not initially be fault4ree, given time it will\ncertainly approach a fault-free state.\nB-9\n\ni\n\nI\t\n\nI\t\n\nI\t\n\nI\t\n\n4\t\n\ni_\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\n_ N_o-.__PS-03.. \t\n\nSheer.3_of 3 .. _.\n\nStandard functions for aerospace applications can be identified and\ndeveloped. There is virtually no support of standard aerospace\nsoftware functions within the industry. Therefore, one Software\nTechnology Item that NASA should address\n\no\t\n\nis:\n\nDevelopment of standardization criteria for NASA\nsoftware.\n\nCost will vary with the degree of standardization, but total future\nsoftware development cost would be significantly reduced. This\narea will also be aided indirectly by the technology item - classification of error mecha.Mam.4 identified previously under PS-02.\nFailure to standardize will be expensive and prolong the risk of\ncatastrophic failure due to software error.\n\nB-10\n\nC\t\n\nC\t\n\nI\t\n\nC\t\n\n^\t\n\nf\t\n\n^\t\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\n\n-^\t\n\nSheet I of Z\nTechnology Driver: AOL Design Methodology\t\n3.\n\nNo. PS-04\n\nTechnolo... _ Category _.. Software Development\n\n__3 \xe2\x80\x94Mis sions -Affected:\t AlI\n4.\n\nact _ Date _: _\t 1978\n\n5.\n\nDriver Description.: A shift to an increased emphasis on applicationoriented languages must be anticipated.\t This is due to the growing\nnumber of engineers ( as opposed to professional programmers) developing or writing programs.\t Language design is one of those typical\nsoft-ware areas which have no real guidelines, standards, or evaluation\ncriteria which can aid in the quick development of hig h order\nlanguages.\t Language design is frequently a costly process of long\nduration.; therefore, the development of an application-=oriented\nlanguage design methodology must be considered as a NASA goal.\n\n6.\n\nApplicability to Payloads: The broad dispersion of the space vehicle\nuser community, coupled with the increasing number of programs\nbeing written by engineering personnel rather than professional\nprogrammers, will demand the development of application-oriented\nlanguages for writing space application software,\n\n7.\n\nCurrent Technology Efforts: Virtually no technology efforts exist with\nthe exception of. work with extensible languages a nd compiler writing\nsystems.\n\n8.\n\nCurrent Major\t Problems: Compiler writing systems have not fully\nmatured.\t Extensible languages, althou gh a subject of interest for years,\nstill have severe l m tations and will probably never fulfill expectations.\nCurrent language design methodology is expensive.\t There is a need to\ndiscover what AOL requirements are and to discover how to get a good\nde sign.\n\nB-11\nr\n\nL\t\n\n`\n\nI\t\n\nI\t\n\nI\t .\t .\t r..\t . .\t .1\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\n_ -\t\n\n9.\t\n\nNo. PS-04_ Sheet 2 of 2\n\nTechnology Advancement Required:\nguidelines, standards and evaluation\ncriteria for the development of higher order languages.\nof\n\no\t\n\nDefinition\n\na\t\n\nDevelopment of concepts for the development of\nrequirements of an AOL.\n\no\t\n\nDevelopment of language design concepts.\n\no\t\n\nDevelopment of problem language statement and\nanalysis techniques.\n\no\t\n\nEvaluation of adaptive HOL\'s and extensible languages.\n\no\t\n\nDevelopment of simple languages.\n\nEffort expended on these items will result in evolutionary advancement. It is doubtful that any major breakthroughs will be achieved.\nNevertheless, whatever gains made would be of benefit to the user\ncommunity and would tend to reduce costs and add to reliability.\nOne Software Technology Item that NASA\no\t\n\nshould\n\naddress is:\n\nDevelopment of ACL design gu-idelines/standards.\n\nFailure to expend this effort will impose higher than necessary\nsoftware costs on users of space systems. Guidelines for\nDesign Structure consistency identified under PS-01 as a\ntechnology item can also be expected to contribute towards\n,\nAOL design methodology at least in an indirect sense.\n\nB-12\n\n^\t\n\na\'\t\n\n1\t\n\nI -\t\n\n1\t\n\n!\t\n\nl\t\n\nIk\t\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet 1 of 2\n\nrLow Cost bevelopment of\n1_.._ _ Technology-_.._Driver:\t AOL Compilers\t\n\nNo._ PS-05\n\n2....-.. _Technology Category:\t Software Development\n3..\n\nMissi ons Affect ed: All\n\n4-\xe2\x80\xa2-- Im -_act Date;_ 1978 _\t...\n\n5.\n\nDriver Description:\t For each language and computer environment pair,\na specially tailored compiler is necessary. \t Although considerable\nresearch and development effort has been expended, such compilers\nhave remained as very expensive items.\t The potential proliferation\nof languages and computer systems obviously requires that these\ncosts b y decreased significantly.\t This Technology Driver is closely\nrelated to Technology Driver PS - 04, but here the emphasis is on\ndevelopment cost reduction as opposed to design methodology.\n\n6.\n\nApplicability to Payloads: A convenient, low-cost method of generating\napplications-oriented languages is required to support the space\nsystem user community.\t This is particularly so for users who have\nlimited or irraM xzal resources to pursue space exploration. \t In\n-A\naddition, in terms of software reliability, there is a need to ensure\nconsistency in the way in which AOL\'-, are implemented.\n\n7.\n\nCurrent Technology Efforts:\t Primarily, these are limited to\ngovernment-sponsored efforts to produce compiler writing systems,\nmeta.com pile rs and language. translators.\t Some activity on extensi=\nble languages (mostly by Universities) and industrial application of\nnew language technology (e.g., FORTH by FORTH, Inc.), has also\nbeen reported.\n\n_-8.\n\nCurrent Major Problems: Compiler writing systems have not fully\nmatured.\t Language translators have been found to be difficult and\nexpensive to build and are not as universal as had been hoped.\t Extensible languages have not fulfilled expectations and probably never will\nexcept for specific. applications.\n\nB-13\n\n-^\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\n\n3\n\n19.\t\n\nTechnology Advancement Required:\no\t\n\nE\n\nAdvancements in intermediate language technology.\n\no\t\n\nIdentification of the principles for using directory\ntechniques for development of AOL\'s.\n\no\t\n\nImprovements to the technology of adaptive HOL\'s and\nextensivle languages.\n\no\t\n\nContinued development of compiler writing systems\nand language translators.\n\nEvolutionary imp-rovernent of these items will reduce cost of AOL\'s if\nthe improvements are aimed at cost reduction. In general, though,\nthe key items are to determine what the application,-oriented language\nrequirements really are and find out why compiler generators cost\nso much. The most critical item for NASA at this time (in addition\nto the one identified previously under PS-04) is:\no\t\n\nEvaluation of AOL compiler generator cost factors.\n\nFailure to expend this effort will palace added burden on the user\ncommunity and perhaps close the door to those with limited resources.\nCost of pursuing this effort would be moderate (3 man years).\n\nB-14\n\n,,A\n\nJ\t\n\nt\t\n\n.\t\n\n1\t\n\n.11\n\nW\n\nSOFTWARE TECIE14OLOGY ITEM DERIVATION WORIKSHEFT\n.......... ....\n(Distributed) System Partitioning/\n\n1.\n2,\n\nTechnology\nCate gorLr: - Soft-ware S .stems-Architecture\n\n3.\n\nMissions Affected: All\n\n4.\n\nis\n\nTechnology Driver:\t Interconnection. Techni.quos.\t\n_\n\nSheet i of\n\nIx-pact-..L)Ate:---1978\n\nNQ. PS-06\n\nDriver Description: A distributed system, as the term is used here,\nis a system which contains multiple processors., each with its own\nexecutive, performing dedicated functions as part of a single partitioned system, usually each.hbusing its own main memory.\t The\nconcept is not particularly novel.\t However. , it is only recently,\nthrough the advent of microcomputers, that it has become eminently\npractical.\nA distributed system has two major advantages:\n0\t\n\n0\t\n\n6.\n\nI\n\nAbility to perform.\n\n\t processing.\n\nSimplified development/madification of the system comes about\nthrough the relative independency of the subsystems.\t That is, the\ncomputer process becomes a more integral part of the subsystem\nto which it is assigned and thus it can be designed, adapted, and\nverified almost independent of the other subsystems; however, the\nsystem design as a whole does not become any simpler, only more\n.\nflexible.\t The very flexibility may make the system design, or the\nchoice of system design., more difficult. \t Any net-work of computers\nhas, for the soft-ware as well as the hardware, the inherent problem\nof selecting interprocess communication techniques and selection of\ngenerally,\nfunctions to be or not to be distributed.\t This is,\t generall\ty an ill- .\ndefined area and thus results in a Technology Driver.\n\nf\n\nWr\n\nSimplified development/modification of the system.\n\nApplicability to Payloads: Virtually all future payloads will use distributed systems in one form or another, if they have computer\nsystems at all.\t In additiori, this concept will be the enabling function\nof intelligent instruments.\t System partitioning and interconnection\ntechniques are particularly crucial in development of real-time\nsysterna.\n\nJ\n\n\t\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nNo. PS-06\t\n7.\t\n\nSheet 2 of _ 2\n\nCurrent Technology Efforts: Distributed systems are not new and the\nrapid growth of this technology, made possible by the availability of\n\nlow cost processors, has stimulated a great deal of research and\nstudy both within and without the industry. However, a disproportionate amount of this study has been directed at what the technology\ncan be applied to as opposed to how to apply it. The Unified Data\nSystem research supported by NASA is a good example of the current\ntechnology efforts.\n\n8.\n\nCurrent Problems: Selecting interprocess communication techniques,\nidentifying functions, and selecting those functions to be distributed\npresent the major problems. However, development of user-oriented\nsoftware development tools and methods must be faced to bring the\ncost of di_ stribuited system software down to an appropriate level.\nThere is a critical need to develop rules and methods for decomposing\nsystems for optimum and consistent partitioning.\n\n9.\n\n\'Technology Advancements Required:\no\t\n\nResearch into optimal task allocation and scheduing\nmethods.\n\no\t\n\nDevelopment of control structures for implementing\nthese schedules.\n\no\t\n\nDevelopment of techni gges for concurrent processes.\n\no\t\n\nDevelopment of NASA- oriented functional hardware/\nsoftware inter-face technology.\n\nThere are two items arising from these areas which must be\naccomplished by NASA. These are;\no\t\n\nIDevelopment of interface criteria for NASA distributed\nprocessor applications.\n\no\t\n\nDevelopment of task control structures for distributed\nenvironments.\n\nCost of these efforts will be modest (3-6 man years each). Failure\nto pursue these items will severely jeopardize the potential inherent\nin distributed system applications. This facet of Software Engineer=\ning is also furthered by decomposition and structuring guidelines\n\nidentified earlier as a technology item under PS -01._\nB-lb\n\nr.\n\n:.i\t\n\nI\t\n\n1\t\n\n!\t\n\nI\t\n\nI\t\n\n^\t\n\n^\t\n\nr\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\n\nsheet I of I\nl....\n\nVery Large Storage\nTechnology_ Driver: Access Simplification\t\n\n2.\n\nCategory: Software System Architecture\nTechnology\n\nI.\n\nMissions Affected:\t\n_1M pact .D;kte:\t\n\nNo..\t\n\nPS-.07\n\nImaging Missions, Autonomous Missions\naging\n\n1985\n\n5-\n\nDriver Description -. A hardware technology that is associated with the\navailability of low - cost computers, but currently lagging is the\navailability of low - cost, large, rapid - access storage.\t Accessing such\nmemories and using them effectively is currently a specialized software area.\t To enable non-programmers to use such storage devices\non a routine basis requires . some method of simplifying their use.\n\n6.\n\nApplicability to Payloads: With the advent of a data explosion,\nparticularly in Earth and ocean observation, the need for image preprocessing and onboard classification is very real.\t In addition, deep\nspace, autonomous payloads will demand high level data compression\non-board.\t These processing functions require very large storage\ncapability for the manipulation of large single and multidimensional\narrays, intermediate storage ( buffering) and reference data.\n. . . . \t .\t\n\n. \t ....\n\n7.\n\nCurrent T echnology Efforts: Research in data base technology is very\nexpensive and theoretical research is beginning to decrease. \t However,\nwithin the industry, a considerable effort is being invested on the\ndevelopment of improved access methods, more efficient control and\nm\nrecovery techniques and data structures. \t The - most recent data base\ntechnology has been directed toward the development of relational data\nbases as opposed to hierarchical or network approaches. \t These efforts\nare directed at large ground systems and do not particularly apply to the\nclass of use envisioned for space applications. \t There is literally no\nresearch or study directed toward the application of very large storage\nsystems for onboard applications, nor is there any study as to how these\nsystems would be used even i f they were available.\n\n8.\n\nCurrent Major Problems: Although data utility constitutes a vitally\nirnportant area for the future space applications, it presents problems\nso complex that they are even hard to state. \t Very little data exists\n\nr\n\n4\n\nB-17\n\n\xe2\x80\xa2\t\n\nr\nA\t\n\n/\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nNo.\t\nPS-07 6heet 2 of 2\non the definition and use of these systems. Little is known about how\n8.\n(Cont\'d) the data structures are defined, how they are to be accessed., and\nprecisely how they will be used. There has been very little research\ninto large storage devices for real-time onboard systems.\n\n9.\n\nTechnology Advancements Required: There are many areas in which\ntechnology development should begin. The more important of these\nare:\no\t\n\nDevelop techniques_ for representing data structures\nin computer-aided software design.\n\no\t\n\nDevelop structure techniques that will support high rate\nprocessing,\nd\n\no\t\n\nDevelop techniques for data base sharing in\ndistributed systerns.\n\no\t\n\nDevelop concepts for parallel access methods.\n\no\t\n\nDevelop concepts to enhance data independence.\n\no\t\n\nEvaluate the use of data storage preprocessors.\n\no\t\n\nIdentify error confinement\n\nand\n\nrecovery techniques.\n\nThese items are important; however, except for research into realtime onboard systems (which is \' a hardware gated tech. nology) it.\nis felt that at this time all these areas are adequately addressed.\nNASA should monitor the technology advancements in these areas so\nas to be able to apply this technology when hardware for space systems\nbecorne:s available. Accordingly, this monitoring becomes the main\ntechnology item here. However, this item is common to other areas\nacross the board as shown in the technology driver-item correlation\ntable.\n\nB-18\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet 1 of 3\n1.\n_ Z.\n\nTechnologyI)river: Software Fault DetectionNo. PS-08\nTechnology Category;\n\n3.\n\nMissions Affected: \t All\n\n4.\n\nIm act Date:\t\n\n5.\n\nDriver Description: It may, for various reasons, never be truly feasible\n\n1980\n\nto provide absolute proof of software correctness.\t It therefore behooves\nus to study an alternate means of preventing the software from causing\na system failure.\t This apprc,,s.ch is detection of software failures\nduring execution.\t It is not clear if and how this is truly feasible;\nnevertheless, it is the only currently known alternative and must\ntherefore be listed as a Technology Driver.\t Fault detection is\ncritical for two major reasons:\no\t\n\nConfinement of damage, and\n\ne\t\n\nEnablement of recovery.\n\nThe more critical a function the greater is the need for fault detection\ncapability.\nb.\n\nApplicability to Payloads: Real -time applications are particularly\ndemanding of software reliability. \t The output must be correct the first\ntime and on tune.\t Typical of these applications is guidance and control\nof spacecraft, and in some cases the collection, processing, and\ndistribution of data.\t Software failures can cause immediate, significant\nlosses and have been known to d.o so in. the past.\t In any event, even if\nfailure cannot be prevented, early detection can help to minimize losses\nand in some cases pave the way to error correction.\t This certainly has\nimplications for future payloads.\n\n7.\n\nCurrent Technology Efforts: To date, most failure detection technology\nhas concentrated on hardware methods such as mic.rodiagnostics, on-line\ndiagnostics, parity checkers, comparaters and watchdog timers. \t The\nonly real software error detectors have fallen into the category of error\ndetection./correction codes, sum-checks and reasonableness tests. \t Just\nrecently, industry has begun theoretical research into error mechanisms,\nsoftware redundancy techniques and sophisticated error logic within\nB-19\n\ni\n\n:\'\t\n\ni\t\n\nl\t\n\nI\t\n\nl\t\n\nI\t\n\nP\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nNo. PS-08 Sheet, z of\nsoftware structures. There has been virtually no attempt to use\n7.\n(Cont\'d) these concepts in practical applications.\n8.\n\nCurrent Problems: It is difficult if not impossible to suspend processing at the point at which a failure occurs. Usually several instructions will be executed after a failure and the results are unpredictable.\nThere is no guaranty that an error will not also invalidate proper\noperation of the error detection software. Redundant software is\ncostly both in life cycle cost and in system overhead.\n\n9.\n\nTechnology Advancements Required: It is difficult to see specific\ntechnology advancements to improve software fault detection methods;\nhowever, a better understanding of error mechanisms should. lead to\nbetter predictability of how and where errors are likely to occur.\nThe most significant gains will probably come through improved\ncomputer architecture. Isolation of processes (modules, subfunctions, etc. ) must be improved to at least limit the damage when\nan error does occur. In general, following good programming\npractices - knowing and understanding the relationship of inputs to\noutputs - will do more for error detection than perhaps any other\nfacet of software technology. Some items currently under consideration by industry are:\no\t\n\nFault criteria determination.\n\no\t\n\nReasonableness testing concepts.\n\no\t\n\nSoftware redundancy voting techniques.\n\no\t\n\nAnalysis of error mechanisms.\n\nOf these, the one item (already identified as a Software Technology\nItem under PS-02) of major si gnificance here is:\nQ\t\n\nResearch into the classification of error mechanisms.\n(Items identified under PS-01 are alao applicable to\nsolution of the error detection problem. )\n\nB-20\n\nSOIL" `."WAR.E\n\nTECHNOLOGY ITEM DERIVATION WORKSHEET\n.\t\nNo. Pb-U8\n\nSheet -; at\n\nThe cost of this research will be moderate (3-6 ma.a years). Docu9.\t\n(Cont\'d) mented errors from previous space programs should be used to\nconsolidate these -rrors as a whole in order to throw new light on\nwhere errors occur and why they occurred.\nFailure to pursue this study will limit the application of industrial\ndeveloped technology advancements to NASA space systems.\n\nB-21\n\ny\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet 1 of 2\nI.\t\n\nSoftware Recovery (After\nTechnology Driver: Fault Detection)\n\n2,\t\n\nTechnology- CateSoftware Systems Architecture\n\nNo.. PS - 09\n\n__Missions Affected._ All\n4.\t\n\nS.\t\n\nb.\t\n\n7.\t\n\n8.\t\n\nm\xe2\x80\x94 ^ act Date:\t\n\n1980\n\nDriver Description: Associated with the problem offault d etecci.on is the\nproblem of fault correction and recovery.\t In many hardware schemes,\nand in all known soft-ware schemes of fault detection, one or more\nft\t\ninstructions have been executed by the time a fault is detected. \t Recovery\nfrom such unwanted instruction execution is still an unsolv ed pxoblexn.\nand must therefore still be considered a Technology Drive r..\nApplicability to Payloads:\t Software recovery techniques ofer error\nt\ndetection are very much applicable to payload software par ocularly in\nview of the fact that most of this software falls in the category of real=\n:\t\ntune systems.\t The ability to recover from error could m ake the\ndifference between success or failure of a space mission.\nCurrent Technology Efforts: Active research in software recovery\ntechniques basically consists of attempts to improve older technologies\nsuch as checkpoint/ restart or to impose proven hardware .r eliabili_ty\t\nconcepts (like redundancy) on software.\t The newer concep t s include\t\na technique using recovery blocks which contain needed va riable data\nand alternate processing algorithms, reconfiguration and r eery (xnaele\t\npossible by new low cost hardware), and system de signs that provide\nsmall tightly closed environments,\t All of these approache add\nconsiderable system- overhead.\nCurrent Major Problems:\t It is very difficult, if not izmpos Bible, to\ndetermine what happens between the time an error occurs and the time\nit is detected. This prevents acquiring .a precise knowle d:g a5 to how Earth .\nprocess must back track (or to what hierarchical level) in orde r to fully\nrecover.\t Overhead is too high to support an g st real. time functions\nwithout excessive loss of data on error occurance.\n\n^r\n^a\n\n.\t ;\n\n:. .\n\ns\nGq\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nNo.\'S- Uy\t\n\nSheet of\n\n9. Technology Advancements Required: A number of new technology\nadvancements are required for this relatively undeveloped field.\nThese include.:\no\t\n\nControl\n\no\t\n\nDevelopm- ent of software techniques to back up or mask\nhardware failure.\n\no\t\n\nDevelopment of techniques for restoring data integrity.\n\no\t\n\nDevelopment of techniques\nrecoverable checkpoints.\n\nstructures for dynamic software reconfiguration.\n\nfor\n\nidentification of easily\n\nThese areas are getting more and more emphasis not only within NASA\nbut also in industrial and university research; however, NASA should\nconcentrate on an item of key importance to space applications. This is:\no\t\n\nDevelop program organization methods for real-time\nfault recovery.\n\nCost of this re search will be at a moderate level although extended\nin time (3-6 people for 3=5 years).\nLack of effective recovery in real time space activity constantly\nplaces missions in jeopardy or requires sophisticated and expensive\nredundant hardware systems. The cause of recovery techniques will\nbe advanced to some extent by the classification of error mechanisms\nidentified in PS -02 and the structuring guidelines identified in PS -01.\n\nB-2\'3\n\ni\t\n\nI\t\n\nI\t\n\nI\t\n\nI\t\n\n-\t\n\n,\t \t\n\n1\n\nI\t\n\nI\t\n\nI\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet z of 7\n\n_ _l.\n\nTechnolggy Priver: High Speed Buffering Techniques \t\n\nNo. P5-10\n\n2. -__Technolo ,, . Cate_ g:gry:\t Soft^uare_. S. stem A rchitect- re\n- 3....\n\n_.Missions Affected: High Data Rat, In?a in\t Mis sions\n\n4 .. _In2\n..\n\n5.\n\nact Date:\t\n\n1 953__.__._...\n\nTechnology Driver Description: The very high data rates expected in\nthe future missions ( involving acquisition of rnultispectral image data\nover vast areas) which are beyond. the capability of pre sent day onboard\ncomputational resources, calls for large buffers and consequently\nhigh speed buffering techniques is viewed as a technology driver in\nmeeting the requirements of data acquisition and processing on such\n\n_\t\n\nmissions.\n\nb\n\nApplicability to Payloads: This is mainly applicable to missions\ninvolving high data rate imaging experiments.\n\n7.\n\nCurrent Technology Efforts: Buffering techniques are currently under\nstudy from various viewpoints, most important of which is that of its\nrole in a communication based computer system.\t These studies\ninclude methods of core allocation and associated problems in queuing\ntheory, etc.\t Related efforts i n hardware technology areas in terms of\nadvancements in storage techniques are also u nder progress.\n\n8.\n\nCurrent Major Problems: The needs of the high volume data experiments\nof imagery acquisition And analysis cannot be easily met with the current\nlevels of buffering capacities in term, \tof size and speed and as such\nhigh speed buffering techniques tailored to the qualitative and quantitative\naspects of onboard image analys^ . s`\xc2\xb0experim ents are called for here.\n.\n\n9.\n\nTechnology Advancements Required: The efforts required to meet these\nneeds can be summ arize. d as studies aimed towards the development of:\n\xe2\x80\x94\no\t\n\na\n\nAdaptive high speed buffering tech mques for deployment\nin dynanuc. net-works.\n\nIncluded within the scope of these studies will be topics such as store\n\nB-24\ni-\n\nI\n\n_A17\n7\n\n\t\n\nl\n\nr\n\na\n\n1\n\ni\n\nF\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\n\n1\n\n^y\n\nNo. PS-10 Sheet_ 2 of 2\nand forward techniques, data aging, and other related aspects (such\nas change detection) in the context of image acquisition and analysis, and\nprocessor architecture and peripherals characteristics (such as use\nof natural communication networks) effects on high speed buffering\ntechnique s.\n\nP\n\nx\n\nThese efforts, expected to be in the neighborhood of 3-5 man years,\nare considered essential for achieving onboard image acquisition\nand analysis capabilities at the data rates projected for future missions\nby the OFS Study. Supportive efforts include monitoring of development in allied fields such as processor architecture and advanced\nstorage techniques which are likely to influence the proposed\ntechnology efforts.\n\n\'^\t\n\nf\n\n,s\n\nj\nZ^\n\nX\n3J\n\nry\n\ni\t\n\nI\t\n\nI\t\n\nI-\t\n\nra"..\t\n\nI-\t\n\nI\n\nt\t\n\nI\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet l of 2\nDesign and Control of Adaptive\n1._\n\nTechnology Driver: Software Procedures - \t\n\n2.\n\nTechnology Cate- or : Software System Architecture _.... . .\n\n3.\n\nMissions Affected\t\n\n-_ 4,\n\nIin , aet 17ate:--- 1988\n\nNo.\n\nPS -11\n\nAdvanced missions involving some level of automate\nintelligence activities\ny-\n\n5. Driver Description: The software procedures associated with automated\nintelligence, scene analysis, image processing and pattern recognition\nactivities are numerous in number and complex in their interactions.\nDepending on the specific problem environment, these need to be put\ntogether in different combinations and configurations. \t The configurations\nare determined by the human in the loop on the basis of intermediate\nresults during the processing. \t However, in automated intelligence\nenvironments, this adaptive selection and implementation of specific\nprocessing logic modules has to be incorporated into the software system\nas an integral part of the system.\t The design and control of adaptive\nsoftware procedures is hence a driver for accomplishing these automated\nintelligence objectives.\nb. Applicability to Payloads: Mainly, this affects payloads expected\nto operate in deep space unmanned missions in ill-defined\nenviro.;ments..\n7. Current Technology Efforts: Most software technology efforts in the\nareas of automated intelligence, image processing and scene analysis,\nhave concentrated on the development of specific software to perform\nwell defined individual tasks with a human in the loop dictating the\nadaptive selection of these specific software in the dynamic environment.\nFew reported efforts are available on the problem of integration of\nthese software procedures into a system- with adaptive capabilities.\n8. Current Major Problems:\t The areas of automated intelligence itself\nbeing in an embroynic stage, the system concepts are not yet fully\ndeveloped and the requirements are not well defined.\t The problem is\ntherefore to develop a fuller understanding of the objectives and\nrequirements of the software system needed to support such activity\nfollowed by efforts at developing the means of meeting these requirements.\n\nB-2b\n\n\'s\n\'.E\nr\n\nf\ntI\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nN. o. eb- 11\t\n\nSheet Z of Z\n\nAdvancements Required: Much of the efforts needed in this\narea being still at conceptual levels, the initial effort should be:\n\n9. Technology\n\no\t\n\nDefinition and development of the control structure\nconcepts for adaptive software procedures.\n\nOther- efforts which can advance the cause of this study are development\nof techniques for adaptive assembly of microprocedures and dynamic\npath strategy selection as required in PS-10 and PS-13.\nThese advancements are deemed to be basic to the successful operation\nof deep space unmanned exploratory missions planned for the next decade\nand are likely to involve 3-5 man years. Supporting activities include\nmonitoring of the developments in the overall area of autom- ated\nintelligence.\n\n-5\n\n3\n\nB-27\n\na\n\nA\n\nE\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet I of 2\n1.\n\n_Technology Driver; Natural_ Communication _Methods\t\n\n_No._-PS-12\n\n2.\n\nTechnology Category Software Applications /System Architecture\n.:\t\n\n3_.\n\nMissions Affected: _All Manned Missions\n\nImpact Date: _1980_\n5.\n\nDescription:\t in view of the naturally severe constraints on the\nAvailability of human resources in space environments, it is essential to\nmake full use of the potential of the available resources.\t It is therefore\nadvisable to provide for all possible natural communication methods to\nenhance the capabilities of Burman interaction with the computer system\nfor all command and control type of activities.\t This enables maximum\nutilization of all the faculties at the command of the human operator.\nExploration of the scope of natural communication r-nethod.s in space.\nenvironments is therefore a technology driver in achieving- maximum\nutilization of man-machine systems.\n\n6.\n\nApplicability to Payloads:\t\n\nDriver\n\nThis is mainly applicable to those involving\nmonitoring or performing of multiple operations which thereby\nplace a heavy demand on human resources.\nhuman\n\n7.\n\n8.\n\nis\n\n\t\n\n3A\n\nCurrent Technology Efforts: Use of natural communication methods\nbetween man and machine is indeed a popular area of industrial investigations.\t However, the needs of space applications as well as the associated\nconstraints are not the same.\t Detailed studies of this aspect except\nperhaps for specific mission requirements, have not been reported.\nFurther, the use of the natural cornmunica:tion methods is bound to affect\nthe payload software system characteristics and this needs to be studied\nin depth.\nCurrent Major Problems:\t The first problem is that no comprehensive\nstudy of the needs for natural communication methods in space environments is available.\t Such a study if carried out can identify the specific\ntypes of communication methods of value in space environments.\t Use\nof such natural communication methods will have to be integrated within\nthe payload software system and this represents the major software\nrelated problem of concern here.\n\nB-28\n\n1\n\n. t\t1\t\n\nt.\t\n\nl\t\n\nl\t\n\n1\t\n\n4\t\n\n.T\t\n\nsl\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nNo. PS-1Z\t\n\nSheet Z of Z\n\n9. Technology Advancements Required: The needs of this technology\ndriver is best served by a preliminary study to identify the specific\nnatural communication methods of significance in space environments.\nThis can be accomplished by a review of both the needs for natural\ncommunication methods in space environments and the spectrum of\nnatural communication methods known to be successful in other\nenvironments. This is then to be followed by a software technology\nrelated study whose objective will be:\no\t\n\nImpacts of natural communication methods on\nNASA payload systems.\n\nThis is viewed as an indispensible development for the success of\nfuture complex manned missions involving ordinary civilian personnel\nand is expected to involve about 2 to 3 man years of effort. in addition.\nthis effort should be supported by a monitoring activity of the developments. in man-machine natural communication methods such as voice\ncommunication (recognition) techniques and containment of storage\ndensity for voice patterns.\n\nB-29\n\n1\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet 1 of 2\nEfficient Large. Array Search\n\t\n1, Technology Driver: and Sort Procedures -No. PS-13\n2.\n3.\n\nTechnology Category: Software Applications/System Architecture\nAll those involving pattern classification of multi:Mis sion s Affected: spectral irnage.\n\n4.. I =act_ Date: 19$ 5\n5.\n\nDriver Description.: Many pattern classification software techniques\ninvolve table look up procedures with large arrays (tables) for efficient\n7.mplementation. This, in turn, involves use of search and sort\nprocedures in the table formulation and look up phases. In view of the\nexpected high data rates in image applications and consequent need for\nhigh speed (repeated) table look up operations, it is desirable to achieve\nmaximurn efficiency in these operations. This will help in gaining\nconsiderable savings in computer resources requirements and will\nfacilitate real time onboard implementation of these classification software. Accordingly the need for efficient search anal sort procedures is\nconsidered a technology driver. Further, this will also be of concern\nin NASA software standardization.\n\n6.\n\nApplicability to Payloads: This is of particular significance in all\npayloads wherein pattern classification (of large volumes of multispectral data) is calked for by the experimental objectives.\n\n7.\n\nCurrent Technology Efforts: Very many search and sort procedures\nhave been reported to the literature mainly in the context of their application in operating system software. However, the needs and constraints\nas well as the array data characteristics are not necessarily the same in\nthese applications. Very little effort in tailoring or restructuring these\nmethods to the needs of pattern classification problems has been reported.\n\nS. Current Major Problems: The major problem is the need for\ncomputationally more efficient search and sort software procedures\nspecifically designed to meet the requirements of the pattern classification algorithm s environment, which in addition, are adaptive to array\ndata characteristics.\n\n18-30\n\ni\t\n\nI\t\n\n.\t\nf 1t , -\t\n\nI\t\n\nm^\n\nI -\t\n\ni\t\n\n1\t\n\n.1\t\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nr -13\t\n\na.\n\nSheet f. of c\n\n9. Technology Advancements Required: The major effort required can\n\nbe stated as:\no\t\n\'v\n\nI\n\nDevelopment of adaptive search and sort procedures.\n\nThis can be accomplished by a planned organization of the following\nactivities: (1) review of all reported search and sort procedures to\nassess their relevance and applicability to pattern classification\nalgorithms environment, (2) selection and assessment of candidate\ntechniques in the context of pattern classification at the expected\ndata rates of payload experiments, (3) study of the interrelationships\nof search and sort procedures with data storage/retrieval techniques\nand processor architecture, (4) study of the feasibility of deriving\nadaptive procedures to make efficient use of the array data characteristics, (5) using the results of these different supporting studies,\n-develop adaptive search and sort software techniques which are best\nsuited to specific space system configurations and problem environmeats.\n\nThese developments, which can be expected to involve 2 to 3 man\nyears of effort, are viewed as a prerequisite to onboard implementation\nof pattern classification and such other related software techniques\nwhich are needed for multispectral image data analysis experiments.\nIn addition this will contribute towards NASA software standardization.\nAs a supporting activity, NASA should monitor the development in\npattern classification techniques particuarly the table look up\napproaches to ensure that the proposed technology efforts are in step\nwith other, developments in the area.\n\nT^\n1\n\nnax.\n\nB-31\n\n1,\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet 1 of 2\n1..\n\nTechnology Driver: Parallel Processing Techniques\t\n\nNo. PS-14\n\n2.._ .. Technoio .\t Cate_ pry; Software Applications /Software Architecture\n\n3.\n\n_Missions\n\n4.- Imp\n\nAffected:\t All involving image analys is .\n\n\t I]ate:\t\n\n1983\n\n5.\n\nDriver Description: Many of the image processing, pattern recognition\nand scene analysis functions in the context of image data analysis and\nautomated intelligence activities can be visualized as a set of processing\noperations carried out independently on. the different pixels in the image.\nAccordingly, these operations can be viewed as parallel processable\ninstead of in sequence as is generally the case.\t While the concept of\nparallel processing is in itself not new, an indepth exploitation of this\nconcept in the context of image processing functions is viewed as the\ntechnology driver, for achieving efficient use of computational resources\nonboard and facilitating onboard implementation of some of these functions\nwhich otherwise would be infeasible.\t This will also help in achieving\nstandardization of software of concern to NASA.\n\nb.\n\nApplicability to Payloads:\t This is mainly applicable to the advanced\nmission payloads involving experiments of image acquisition and analysis.\n\n7.\n\nCurrent \'Technology Efforts:\t Parallel processing techniques are indeed\na fairly active area of study.\t Most efforts are however in the general\nfield of parallel processing and associated conceptual and hardware\ndevelopment.\t Very little of this effort is directed toward exploitation of\nthis concept in implementing image processing techniques. \t While parallel\nprocessing implementations of particular algorithms have been attempted,\nno general study, which comprehensively explores the scope of parallel\nprocessing in the context of image data analysis, is known.\n\n8.\n\nCurrent Major Problems:\t The major problem is thus the need to apply\navailable parallel processing concepts with necessary and desirable\ntnodificatiorzs to the entire spectrum of image processing algorithms to\na chi e ve.maximum utilization of these concepts and thereby meet the sever\n.\ndemands of onboard image processing.\n\ni\n\nB-32\n32\n\nI\t\n\nI\t\n\nI\t\n\nI\t\n\nl\t\n\nI\t [,&..\t I-\t\n\nI\t\n\n1\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nNo. P5-14\t\n\nSheet G of G\n\n9. Technology Advancements Required: The needs of this technology\ndriver can be satisfied by:\no\t\n\n\t\n\nRestructuring major software techniques (of relevance\nto NASA image processing and pattern recognition\nactivities) for parallel processing.\n\nThis is accomplished by a prior review of major image processing\nand pattern recognition functions and algorithms to identify those\nwhich are "parallel processable" directly or through modifications.\nAnother associated effort of significance here (discussed earlier\nin PS-06) is that of optimal task allocation and scheduling and\nassociated control structure development in the context of parallel\nprocessing environment.\nOther studies which would be beneficial include fault detection and\nrecovery in parallel processing environments (through reco.afiguration of parallel pro cessor modules) and addressing problems of\nsoftware synchronization. Accordingly progress in these areas have\nto be monitored by NASA.\nThese studies are necessary for accomplishing image acquisition\nand analysis onboard as requi-ed by the future imaging missions,\nand are likely to need 3-5 man years of effort.\n\nB-33\n\n7 ^t3\n\nSOFTWARE TECHNOLOGY ITEM DERIVATION WORKSHEET\nSheet I of Z\nEfficient Large Array Manipulation\nhnotqgy.. D;7iver:\t Procedures\t\nTeq-\n\nNo.\t PS.-.15\n\nZ.\n\nTechaplogy\nCategory:\t Software Applications/System Architecture\n\n3.\n\nMissions.. .Affected:\t All Involving. 13rnage Analyais\n\n4-\n\nIMact\n\nDate;\t\n\n1983\n\n5. Driver Description- Data Compression -, Image processing and scene\nanalysis functions often involve manipulation of large two (and sometimes\nthree) dimensional data arrays, for example transposition of a large\nimage matrix.\t This problem is non-trivial whenever the size of this\narray is too large to be held in core all at once.\t This obviously is\nthe case when, say, we are processing an (1024 X 1024) image.\nManipulations of such large arrays, being an integral part of many\ndata compression and image processing procedures, is viewed accordingly\nas a technology driver.\n-- -- - 6. Applicability to Payloads: In view of the specialized nature of the problem,\nthis affects mainly those payload missions which involve such image\nacquisition and analysis programs.\n7.\n\nCurrent Technology Efforts:\t There have been a few studies directly\nrelated to this problem of matrix transposition.\t Various alternatives\nhave been proposed, most of which aim at reducing the -number of\ntranspt-its (inputs and outputs) required for transposing the matrix\navailable externally in a sequential or random access storage device.\nHowever, the claims and counterclaixtis of these alternatives have not\nbeen evaluated.\t Another aspect which has been studied to some extent\nis that of reducing the size of the additional storage required for\nperforming such transposition.\t There also exists a study aimed at\ninvestigating the problem- of the so called optimal partitioning of the\nmatrix to facilitate its manipulations. \t All of these efforts are only\ndirected towards one or the other aspect of the problem in the context\nof large processing systems available on ground.\n\n8.\n\nCurrent Major Problems: The major problem is to make the manipulations of large two (or three) dimensional arrays practical on board,\nunder the related constraints of time and computational resources\nsuch as core and external tnem-ary, for facilitating data compression,\nimage processing and scene analysis. activities.\n.\t . . .\n\n. . . . . .\t\nB-34\n\ns\n\nB-35\n\nAPPENDIX C\n\nCost/Time/Priority\n\nAss essment Worksheets\n\nC1\n\nA_\n\nfIM14MG PAGE BLANK Norf\n\nThis appendix presents the Cost/ Tim.e /Priority assessment carried\nout for each of the technology items derived from the technology drivers\nunder Phase II of the Study. Each item is described in terms of its objectives\nand goals, alternative solutions and related studies are identified, and NASA\nefforts, schedules, resources and priorities are assessed. These details\nare presented in the form of worksheets in this appendix-.\ni\n\nj\nCOST/ -LL iE/PRIORITY ASSESSMENT\n\nTITLE: Requirements Decomposition and Structuring Guidelines\t\n1.\n\nN\'O\xe2\x80\xa2 TI-01\n\nDESCRIPTION OF ITEM: Development of proper and consistent requirements\ndecomposition and structuring guidelines for the design of real-time distributed\nsystems for space applications.\t A major problem in the decomposition and str uct urin\nof soft-ware design i s the lack of consistency from designer to designer. \t This makes\nit very difficult to identify proper design and almost impossible to evaluate soft-ware\nsysterns in any way, except in an empirical fashion after the soft-ware has been\ndeveloped.\t This point in the cycle is too late. \t Errors detected after development are\norders of .magnitude more expensive to correct.\t This Technology lt6m- seeks methods\nto eliminate this problem.\t Evaluation criteria for the designs and design consistency\nwill have to be developed.\n\n2.\n\nCURRENT\t S TA TUS OF TtCIVOLOGY: LEV E L 3- 43. REQUIRED LEVEL:\t\nDATE .._. 1980.-6\t\n4\n4, ESTL%AATE OF NLoN-,, qAsA ADVANCEMENT: LEVEL.. \t\n\n4\n\nS. ALTERNATME SOLUT16NS\nI -i(1)\t Development of req -re m- ents-to-code technology, thereby bypassing the design\nm\nphase.\n\n(2)\t Utilization of automated design tools.\n\n6.\n\nRE LAT\t^ A C TI I \xe2\x80\x94 S-ED TI E\nTI-08 interface criteria for NASA distributed processor applications.\nTImOq\t Task control structures for distributed processor environments,\nents.\nTI -18 Guidelines for design do cum entation consistency.\nTI- 19 Soft-ware prototyping methods.\n\n70\n\nAre\n\nIM\n0 INIMMN ]ED NASA EFFO RT . Initiate a- study effort by calendar year 1978 to\n\nestablish guidelines for decomposition methods. \t Couple this with development of\nevaluation criteria, structuring guidelines and design consistency guidelines to\nsupport activities from 1980 - 1990.\n\nESTD,L&TED DEVELOPMENT\n.\n8- SCHEDULS.-\xc2\xad\n\nCOSTS:\n\n$1 5 ()K\n-\t\n\n$5 0 0y,\t\n081.\n\n\xe2\x80\xa2 Requirements Decomposition\nGuideline s\n\xe2\x80\xa2 Design Consistency Guidelines\n\xe2\x80\xa2 Structuring Guidelines\n0 ]Evaluation Criteria\n\nMW\n\nC-3\n\nL\n\nPRIORITY:\t 5\n1982-1.1-911. 1:984 1x85\n\n19.56---\n\nCOST/ TIME/PRIORITY ASSESSMENT\n\n\t\nNO. TI-02\nRequirement-To-Code Translation Aids\nDESCRIPTION OF IT EM: Automated aids (such as RPG) are to be developed for\ntranslating well defined payload software requirements into program. code (in the\ndesired language). \t In effect-, the translation aids may be looked upon as a set of\nmaster programs which output specific program codes corresponding to a given\ninput of software requirements.\n\nTITLE:\n\nI\n\n.\t . \t . . . . . .\n2.\n2. CURRENT STATUS OF TECIENOLOGY: LEVEL\t\n1981\nDATE\t\n3. REQUIRED LEVEL:\t 6 .\t\n.4. ESTIMATE OF NON-NASA ADVANCEMENT: LEVEL\t\n5.-\n\n. \t .\t .\t . . . \t .\n3-4.\n\nSbLUtION\nZS:\no Continued use of the more expensive\t error prone manual approach to translating\ninto code the specified soft-ware requirements, is the only alternative available\nat the present time.\n.\no Query guided methods is another alternative being proposed as a parallel task\nALTERNATIVE\n\n(TI-04).\n\n. .\t . . . . . . .\n6. _ML_A_T2!b ACTIVITIES:\nTI-01 Requirements decomposition and structuring guidelines.\nTI-03 Simplified software development system demonstration model.\nrri 04 Query guided implementation methods.\nTI-19 Software prototyping -methods.\n7.\n\nNASA. efforts should be to initiate a study starting\nin 1978 to investigate the feasibility of development of these automated aids to meet\nNASA payload software require . ments and follow it up with the development of such\naids along the lines identified as feasible in the first stage of the study. \t The detailed\nschedule of this development is shown below.\nMMEN\nIDE15 NASA EFFORT:\n\nPRIORITY: 3\nESTIMATED DEVELOPMENT -COSTS: $500K. - $1000K\t\n-1978 \' 19 9...801.1981 19\n_82 983 :193x _.\n1.9\n8. SCHEDULE:\n\xe2\x80\xa2 State-of-the -art\n\nassessment\n\xe2\x80\xa2 Payload software requirements\nidentification\n\xe2\x80\xa2 Master soft-ware instructions\nlibrary development\n\xe2\x80\xa2 Transformational approach\ndevelopment\no Test and documentation\n\nis\n\nI--\t\n\nJ\nC-4\n\n_.9\n\nCOST/TIME/PRIORITY ASSESSMENT\nNO. TI-03\nTITLE. Simplified Software Development System Demonstration Model \t\n. .. - .\n1. DESCRIPTION OF rT ZiV _C_ re- a-tion of a de . monstration model of a simplified software\n- -:\nent\ndevelopment system.\t This item is aimed at lowering the cost of software for users\nof microprocessors in distributed systems for real-time space operations.\t The\nde m onstration model will be a precursor of low cost operational systems for\nnon=program\nxmer PI\'s.\n\n. . . . \t .\t . . . .\n\n.\t .\nGlY: 2_\n2. CURRENT . STATUS OF TECHNOLOGY: LE VEL\t\n\t\nDATE 1.98-1\n3. REQUIRED LEVEL: ___6\t\n.\n3\n4. ESTIMATE OF NON-NASA ADVANCEMENT: LEVEL \t\n8. ALTERNATIVE SOLUTIONS:\n(1) Query w guided implementation methods.\n(2)\t Reqiairem ents -to -code translation aids.\n,-\n\n.... ...\n6.\n\nRELATED AC_ T M TIE S:\n- \'---\n\nTI-02 Requirem ents -to -code translation aids.\nT1=04 Qtery-guided implementation. methads.\nTI-19 Software protetyping methods.\n. .... . .\n\n7. RECOMMENDED NASA EFFORT:-\t Begin requirements definition for a simplified\nsoftware development system, demonstration model in calendar year 1978. \t Schedule\nanalysis, design, development and test such that a full year of evaluation can be\nent\naccomplished in 1980. \t This will allow 2 years (1981-1982) for development of an\noperational system to support heavy space activity 1983 - 1990.\n\nESTMIATED DZVELOPMEK T COSTS:\t\n\nPRIORITY: 3\n1, noT\t\n.1978 191_\n91_1.9.80 1981 1.982 1983,1. 19.. 84 \' 1985 198.\n\n\xe2\x80\xa2 R eqture. m ents Definition\n\xe2\x80\xa2 Requirements Analysis\n\xe2\x80\xa2 Demonstration Model System\non-stration\nDesign\n\xe2\x80\xa2 Development and Test\n\xe2\x80\xa2 Evaluation\n\nC-5\n\nCOST/TIME/PRIORITY\n\nASSESSMENT\n\nNO. TI-04\n.. .. \t . .\n1. DESCRIPTION OF ITEM: New programming procedures have to be developed based on\nm ing\n=\nthe idea of using a questionnaire approach to the programn . -, g task.\t The\nquestionnaire approach helps in guiding the programmer through the different steps\ninvolved in his effort and thereby eliminates the errors of omission and reduces the\nple\n,,\nerrors of com r. mi s sign.\t An example of questionaire approach would be the PSI\nProgram Synthesis System (of Stanford University).\t Such an approach should be\nadapted to the needs of NASA payload software technology.\n\nTITLE:\t\n\nplementation\nQuery Guided Implementation Methods\t\n\n3\n2. CURR2211T STATUS OF TECFNOLOOY: LEVEL\t\nDATE 1983\n3. REQUIRED LEVEL;\t 6\t\n4. ESTBtATE OF NON-NASA ADVANCEMENT: LEVEL\n\n8. ALTtRNAT%`VE_ SOLUTIONS:\no Use of the present day unguided manual approach involving considerable scope for\nboth errors of omission and co m x ms sion is the only available alternative.\no The proposed Requirem ents=to-Code translation aid is a possible alternative\nbut has yet to be practically demonstrated.\n\n,6- . -RELATED AC__TZ_V_ \xc2\xad._\n\t_\n1T1E_S\nTI-02 Require m eats -to -Code translation aids.\nTI-03 Simplified software development system demonstration model.\nTI-19 Soft-ware pro totyping methods.\n\n71.\n\nR--CCISAME11D.E.0 NASA EF\'FORT: . The NASA effort required here - pans thee spectru m\nE\nI\nof NASA .payload related soft-ware activities and is an R&D study to be initiated in\n1978.\t The activity proposed here parallels the one proposed under TI-02 to some\nextent.\n\nESTWATE.a.-DEVELOPMENT COSTS:\t\n- tkc;nnx\t\nPRIORITY:- 3\n8. -8 Z\xe2\x80\x94EDTiLM\nH\n19". 1979 198Q__.1981 1-9a2 . 1 MS\' 1-554T1985 0 .8 6\no Requirements analysis\no Software skeleton structure\n\ndevelopment\no Questionnaire methodology\ndevelopment\no Test and documentation\n\nC-6\nA-\n\nE P- _. R IT ASS S\t\nCOST/TINT / RIO Y ASSESSMENT\n\n^\n\na\n\ni\n\nNo. TI-05\n\nTITLE: Standardization Criteria for NASA Software \t\n\na\n\n1. DESCRIPTION OF ITElki: Standardization of NASA software is required to eliminate\nredundant development with its attendant cost and to improve long term software\nreliability.\t This item represents the first essential step in the standardization\nprocess (i. e. , development of minim.0 n standardization criteria). \t Standardization\nhas many im plications such as standard language design, standard operating system\n,\ndesign, standard interface implementation and standard management practices;\ntherefore, early development of criteria is mandatory. \t Standardized software is the\neasiest path to fault free software.\n2. CURRENT STATUS OF TECHNOLOGY: LEVEL\nDATE ,1q_7A-...._..\n3. REQUIRED LEVEL:\nr\t\n\n- - -\t\n\n4. ESTti\\dATE OF NON- NASA ADVAiNCEMENT: LEVEL\n5. ALTERNATIVE SOLUTIONS:\nNone.\n\n6.- RELATED ACTIVITIES. TI -06 AOL design guidelines/ standards.\nTI-08 Interface criteria for NASA distributed processor applications.\nTI-11 Classification of error mechan-isms.\nTI-19 Software prototyrping methods.\n7. - RECO1 \xe2\x80\x94LADED NASA EFFORT Begin immediately an analysis of the full: range of\nM=\nimplications associated with standardization. \t Start development of criteria in rnid\n1978.\t Test the criteria by selecting candidate software packages and. evaluating\ncriteria validity in time to support accumulation of standard libraries in the 1980\n1990 time frame.\n\nPRIORITY:\t 4\nESTIMATED DEVELOPMENT COSTS: S.150K. - S500K -_ \t\n1978.I979 19S0._.1981. 9$2.1.9$.3 198-a 19851 198 - 6\n8. SCHEDULEc\n_._ _\n..._._._\n..\n\no Analysis of Standardization\nImplications\no Development of Criteria\no Identification of Candidates\no Evaluation of Validity\n\nC-7\n\t\nt.\n\nI\n\n. _..\n\nCOST/ TnvIZ/PRIOR.ITY ASSESSMENT\nTITLE: AOL Design Guidelines /Standards\n\n1. DESCRIPTION OF ITEM: A - shift to an Increased , emphasis on application oriented\nlanguages must be anticipated.\t This is due to the growing number of engineers (as\nopposed to professional program mnex s) developing or writing prog rarns.\t Thus a\nrequirement exists to develop the capability to quickly and economically define\napplication oriented languages.\t As an initial step, NASA needs to produce AOL\ndesign guidelines and standards to ensure language consistency and compatibility\nwith real-time distributed space systems.\n\nZ. CURRENT STATUS Or TECHNOLOGY: LEVEL \xe2\x80\x943\n6\t\n3. REQUIRED LEVEL:\t\nDATE .1.979_:\n\t\n4. ESTIMA TEO F NON- NASA ADVANCY"WEN T LEVEL-\n\n4\n\nt. _ALTERNATIVE SOLUTIONS:\n( 1)\t Use assem b ly language for applications.\n\n(2)\t Use a variety of currently available HOLIS.\nBoth of these options are expensive; each leads to si g nificant integration problems;\nand both result in less than desirable reliability.\n\n60\n\nRELATED A:C_\nTIV_I\xc2\xadT_IE\n.S.\nTI-01\t Requirements decomposition and structuring guidelines.\nTI-05 Standardization criteria for NASA software.\nTi=07 AOL compiler generato r cc st facto rs.\nTI= 08\t Interface criteria. for NASA distributed processor applications.\n\nIDED NASA EFFORT:\t Begin, in 1978, to determine concepts for the\n7. RECOIILMEN\ndevelopment o f requirements of AOL\' s.\t Follow this with the development of AOL\ndesign. guideliftes/ standards and design evaluation criteria. \t This effort should be\nscheduled such that the guidelines/ standards will be available before 1980. \t This will\nallow tim e to produce an operational AOL generator prior to the period of heavy\n.development fro. m 1983 - 1990.\nent\n\nPRI ORITY:\nT\nESTnAATZ;D DEVELOPMENT COSTS:__$I00K - $250K\t\n1981.._ q 8? 1983 198_ 1583 .1586\n8. SC\nSCHEDULE:\nLVMJI_911 1980\n\xe2\x80\xa2 AOL Requirements Concepts\n\xe2\x80\xa2 AOL Design Guidelines/\nStandards\n\xe2\x80\xa2\t Design Evaluation Criteria\n\nM.000M\n\nC-8\n\nCOST/TLviE/PRIORITY ASSESSMENT\nTITLE. AOL Compiler Generator Cost Factors \t\n1.\n\nNO. TI-07\n\nDESCRIPTION OF ITEM. A compiler is needed for each language which will be\n\ndesigned and for each computer the language will be used for. \t Although considerable\nresearch and development effort has been expended, compilers remain as very\nexpensive items.\t If these costs are ever to be reduced, an understanding of what\nthe costs are and why they are so high must be reached.\t This Technology Item\nrecommends a NASA study effort to determine these AOL cost factors.\n\n3\nZ. CURRENT STATUS OF TECHNOLOGY: LEVEL\t\n1978 -3. REQUIRED LEVEL: \t .4.\t\nDATE\t\n4. ESTIMATE OF NON-NASA ADVANCETMENT: LEVEL _\t\n\n3\n\nNone\n\nS\n\nALTERNATIVE SOLUTIONS:\t\n\n6.\n\nRELATED -ACTIVITIES-:\nTI-06 AOL- design guidelines/standards.\n\ni\ni\ni.\nr\nr\n\n_.\n\n_\n7. RECOMMENDED NASA EFFORT:\t Initiate a study effort no later than calendar year\n1978 to:\t (1) Identify representative AOL compiler generators, (2) Trace the\ndevelopment history of these generators, and (3) Perform a cost assessment of all\nmajor cost factors.\n\nESTI1r A TED_ DEVELOPMENT COSTS:-_ $1 00X \t $150\'K\t\nAtl\n\nu\n\n8. SCHEDULE:\n\xe2\x80\xa2 Typical AOL generators\n\nidentification\n\xe2\x80\xa2 Development history tracing\n\xe2\x80\xa2\t Cost assessment\n\nPRIORITY..:..\n- _\n1978 1979 1980 19 61- 1982 1983 11984 1985 1986\n\n>\n\nC-9\n\nrte. 1 ,.\n\nCOST/ TIME/ PRIORITY ASSESSMENT\nTITLE: Interface Criteria for NASA Distributed Processor\nanrlirra+inn a\n\n1. DESCRIPTION OF ITEM;\t Virtually all future payloads will use distributed systems\nin one form or another.\t In addition, this concept will be the enabling function of\nintelligent instruments.\t System partitioning and interconnection techniques are\nparticularly crucial in development of real-tim. a systems.\t Any network of computers\nhas, for the software as well as the hardware, the inherent problem of selecting\ninterprocess communicatio n techniques and selection of functions to be or not be\ndistributed.\t This Technology item (developing interface criteria for NASA distributed\nprocessor applications) represents a critical first step toward solving these\np roblerns.\n2. CURRENT STATUS OF TECHNOLOGY: LEVEL .- . _ 2 .. .\n6_\t\nDATE\t - 1 980.\n3. REQUIRED LEVEL:\t\n4. ESTM&ATE OF NON-NASA ADVANCEMENT: LEVEL \t\n\n2\n\n5. ALTEP-NATIVE SOLUTIONS:\t Use of high cost non-standard interfaces.\t This\n\nalternative poses unmanageable integration problems.\n\n6.\n\nRELATED ACTIVITIES:\nTI-01\t Requirements deco npesition and structuring guidelines.\n\nTI-0\'5 Standardization criteria for NASA software.\nTI -09\t Task control structures for di stribute d processor envirenmeats.\nTI-10\t Pr-ogramw organization methods for real-time fault recovery.\nTI-12\t Control structures for adaptive systems.\n\n7.\n\nBegin studies to identify potential configurations\nand characterize. data and control flow.\t Perform trades to select interprocess\ncomr\xe2\x80\x94nuaication techniques and establish interface criteria for NASA distributed\nsystems.\t This effort should . begin as soon as possible and be scheduled for\ncompletion before 1 98 0.\nRECO1il^1r1ENDED NASA EFFORT: \t\n\nESTIi ATED.. DEVELOPMENT COSTS:__..$1 00K\t $. 20UK __ _ -\t PRIORITY: - 10\n3978 1479 I98 - 1981 1982 -11-$\n_\nU. 8C14ED T LE:\n\no\t Identification of potential\ndistributed configurations\no Data and control flow\ncharacterization\no Inte rp roce s s comet- unication\ntechniques selection\no\t Interface criteria,\n\nC-10\n\n1985 !986\n\nCOST/TIME/PRIORITY ASSESSMENT \t\n\nf\n,kg\n\nm .v TITLE: Task Control Structures for Distributed Processor\n\n\t\n\nNO. TI-09\n\nEnvIronments ..._\n\nI. DESCRIPTION OF ITEM:\t Distributed systems (i, e. , systems which contain multiple\n\nprocessors, each with its own executive, performing dedicated functions as part of a\nsingle partitioned system) are not new nor particulary novel.\t However, managing\nconcurrent processes in real-time, space oriented distributed systems is new. \t The\ncriticality of proper operation is much higher than for ground based systems. \t For\nthis reason, NASA should begin to develop task control structures for distributed\nprocessors to simplify allocation, minimize communication and minimize interferenc\n\n4\nZ. CURRENT STATUS OF T=WOLOGY: LEVEL-\t\nDATE 19$1 8.\t\n-_\t\n3. REQUIRED LEVEL:\t\n4. ESTIMATE OF NON-NASA ADVANCEMENT: LEVEL\t\n\n4\n\n_\n\n5. ALTEFtNATPTE SOLUTIONS: Adapt task control structures of ground based systems,\nRisk entails the potential loss of efficiency and reliability required for space\noperations..\n\nb. RELATED ACTIVITIES:\nTI-01 Requirements decomposition and structuring guidelines.\nTI-05 Standardization criteria for NASA software.\nTi-08 Interface criteria for NASA distributed processor applications.\nTI-10 Program organization methods for real tripe fault recovery.\nTI-12 Control structures for adaptive systems.\n7. REG4M.y1ENDED NASA EFFORT: NASA should begin no later than calendar 1978 to\nidentify techniques for real-time concurrent processes and follow this with research\ninto task allocation and scheduling methods.\t These two items will provide the basis\nfor developing task control structures for real-tim- a distributed systems.\t The goal\nshould be to have these task control structures in an operational state by 1980.\nEST -MATED DEVELOPMENT COSTS: -_:\t\n\t -_\t\n_.... PRIORITY.- , ._\n1978 1.979 19s0 1981 .19.82 1983 . 1984 - 198? _198f^.\n8, SCHEDULE:\no\t Requirem, ents analysis\nUm. om\no Developoptimal task allocation and scheduling methods\no Develop task control\nstructure s\no Test and documentation\n\nC-l.l\n\nCOST/ TIME/PRIORITY ASSESSMENT\n\n\t\n\nTITLE: Program Organization Methods for Real-Time Fault Recovery \t\n\n_E\n\nNO. TI-10\n\n1. DESCRIPTION OF ITEM:\t Lack of effective recovery in real-time space activity\ncan endanger space missions.\t In the past this has been compensated for by using\nsophisticated (and expensive) redundant hardware systems.\t The main problem\t is\nthat it is difficult (if not impossible) to determine what happens between the time an\nerror occurs and the time it is detected.\t The objective of this Technology Ite:rn is\nto develop methods of program organization that would maintain status in a way to\nallow backup and recovery with minimum loss of data and control in real-time\nsystems.\n\n9. CURRENT STATUS OF TECH NOLOGY: LEVEL\t\n3.\n4.\n\n3\n\t\n\t 1982\nREQUIRED LEVEL:\t\nDATE\n_.._ 6\nESTIlAA.TE OF NON-NASA ADVANCEMENT: LEVEL\t\n\n4\n\n5. ALTERNATIVE SOLUTIONS:\n(3) Acceptance of risk.\n(1) Redundant systems with voting logic.\t\n(2) Fault free hardware /software.\nThere are obvious drawbacks to each of these alternatives.\t Redundant systems are\nexpensive and add significantly to power, weight and volume requirements.\t Fault\nfree hardware/software has not been totally obtained and probably never -will be.\n.\nRisk may be acceptable for unmanned missions, but will presumably never be for\nmanned spaceflight.\n6. RELATED AC TNITIES:\nTI-01 Requirements decomposition and structuring guidelines.\nTI-09 Task control structures for distributed processor environments.\nTI-12 Control structures for adaptive systems.\nTI- 17 Class ification of error mechanisms.\n7. RECONLMENDED NASA EFFORT.\t NASA should begin .research into the structure\nand organization of software systems designed to provide reliable fault recovery\nin real-time operations.\t The end goal is the development of appropriate program\norganization methods by 1982..\n\nESTL-4ATE. D (DEVELOPMENT - COSTS: $2 00 K.._-\t 1000K\t -__ - _P=RITY:-_ 5\n- -1.978 1979.190 1981 1982 1983 19$x- L9$5 L985\n8. SCHEDULE:\t\n\xe2\x80\xa2 Real-time program structure\nanalysis\n\xe2\x80\xa2 Recovery techniques\n\xe2\x80\xa2 Program organization rxmethods\n\nC-12\n\nY1\n\nCOST/TIME/PRIORITY ASSESSMENT\nTITLE: Adaptive High Speed Buffering Techniques for Dynamic Networks NO. TI-11\nAdvanced b uffering techniques are to be developed for\t\ncatering to the high data rates expected in the dynamic environments of the 1980\'s.\nThese techniques should be capable of adapting themselves to the characteristics\nof the data environments to achieve optimal utilization of the available resources.\n\n1.\t DESCRu =N OF ITEM: \t\nm\n\nI\n\n!S\'\n^r\n\n2:. CURRENT STATUS OF TECHNOLOGY: LEVEL .. \t\nDATE\t 1983\n3:. REQUIRED LEVEL: -__ ..8\t -\t\n\nZ..\n\n4*\'- ESTnvLATE OF NON-NASA ADVANCEMENT: LEVEL\t\n\n4\n\n5: ALTERNATIVE SOLUTIONS:\no Continued use of present day techniques is an alternative which may however gate\n\nthe expected high volume data acquisition and processing required in the future\nM isllolls*\n-o Significant orders of magnitude change in mas s memory management might be\nanother alternative.\n\n6. RELATED ACTIVITIES:\nNone,\n{\n7:\t\n\nNASA EFFORT: \t The - e1fort -to be undertaken by iINAS_4 to meet the\nrequirements is a study (to be initiated in 191$) to assess the state-of-the-art in\nbuffering techniques and related developments in computer architecture and outer\nhardware technologies followed by the development of adaptive techniques capable\nof optimal utilization of these resources in dynamic environments.\n\nt\n\n_ 2 5 0X -_ $. 75\nE STL\t\'YLTE 17 DEVELQPMEiV T COSTS\xe2\x80\xa2-\t_\t 0 .. _...\t _\t . . PRIORITY; -\t 2\n_\t\n_\t\n_.\t\n_.... .\n_\t\n___...\t\n_\t\n--1975 19\n1980\t I98 I 1982\t 1983 86.\n\'IQ\nr_-9\t\n8.\t SC\t EDULE:\t\n_I9_$\'l\t 198?\n^II\n\n-\n\no\t State-of-the-art assessment\t\no Impact of advancements in\nrelated areas\n\n^+n\n\ns^\n\nT\n\no New adaptive techniques\ndevelopment\t\no Implementat o.n, testing and\ndocumentation\t\n\n-\t\n\n_\t\n\n-\t\n\n-\n\nl\n\nC-13\n\n,i\t\n\nI\t\n\nI\t\n\nI\t\n\nI\t\n\n1\t\n\ni\'\n\nCOST/TIME/PRIORITY ASSESSMENT\nTITLE: Control Structures for Adaptive Systems\n\n\t\n\nNO. TI-12\n\n1. DE5CRRIPTIDN OF ITEtit: Control structures are heeded to adaptively deploy available\nsoftware to meet the requirements of the automated intelligence environments. \t This\ndynamic restructuring of the software to adapt it to the environment will enable NASA\n\nto plan and execute missions involving considerable autonomous capabilities.\n\nZ. CU RRENT S _ T _ S OF TECI UNOLOGY: LEVEL\t -2\n_ TA_ U\nDATE\t _1.9:8.1_..\n3. REQUIRED LEVEL: _..._ 6 _ ___\t\n4. ESTEMATE OF NON-NASA ADVANCEMENT: LEVEL . -3-4.\nS. ALTERNATIVE SOLUTIONS:\t The alternative is a softwa-re system that has little\nadaptability to the changing e.nvi.ro:nmen:t and incapable of supporting autonomous\nunmanned missions involving at least rudimentary automated intelligence.\n\n6. RELATED ACTNITIES:\t\n-\t\nTI-04 Query guided implementation methods.\nTI-05 Standardization criteria for NASA software.\nTI-09\t Task control structures for distributed processor environments.\nTI-I4 Adaptive search and sort procedures:.\nTI -l5 Restructured image analysis software for parallel processing.\n......^\t\n_..\n7. REC0Tk&MEi`1DFD NASA EFFORT: NASA should initiate a study to develop appropriate\ntechniques.for real.-t r-ne adaptive restructuring of software to meet the environmental\nrequirements to ensure that the software technology stays ahead of the requirements\nof autonomously operated missions.\n\n_-__ .\nESTTNL4TED DEVE_LOPMEVT _CASTS:. S3OOK -.^- .SSOOK _ .\t\nPRIO_RIT"l:\t 1\t\n_\n_T\xe2\x80\x94\n1978.1979 1980 1 9S I 19,8 2 . 1. 905-. 198 a. _I-9 8 5 _1.986...\n8. SCHEDULE:\n\xe2\x80\xa2\t Identification of software\nfunction interdependencies and r elatio.rnship s\n\xe2\x80\xa2 Adaptive control structures\nd-ev elopment\n\n\xe2\x80\xa2\t Testing and d0cui- entation\n\nCOST/ TWE/PRIORITY ASSESSMENT\nTITLE: Impacts of Natural Communication Methods on NASA \t\nNO. TI-13\nPa load Svs-t-e.ms-1. DESCRIPTION OF ITEIVI: It is essential for the efficient usage of available human\nresources onboard that natural communication methods be used to the extent feasible.\nAccordingly it is necessary to evaluate their influence and potential impact o -a the\nsupporting payload soft-ware system and thereby ensure the success of the deployment\nof such -methods.\t Towards this end, typical implementation of natural communication\nunication\nmethods onboard for specific experimental tasks should be studied and the results\nused to derive an overall assessment of the impact of these methods on NASA\npayload software design.\n\n2-3\nCTUARENT STATUS Or TECH- -- O G Y : LEVEL\t\nN-0 L --- 6\t\n3. REQUIRED LEVEL:\t\nDATE\t 198\n4. ESTnAATEOFiNON-iNASAAI)VAiNCEMENT.- LEVEL--_4\nZ.\n\n,5. ALTERNATIVE SOLUTIONS.\t Traditional methods of communication with the\ncomputers, when used exclusively, are not necessarily efficient in multiple task\n,,*\nenvironments of future manned r= s sion s and a r e therefore a poor alternative to\nhaving natural communication methods as an added capability.\n\n6.\n\nRELATED ACTIVITIES:\nTI-08 Interface criteria for NASA distributed processor applications.\n\n7. RECOMMENDED NASA EFFORT: \t NASA efforts in this area should include an\nOngoing monitoring of the developments in natural c or-= - unication methods and\n, technology to take advantage of such. capabilities as and when this becomes practical.\nThis be should be accompanied by an assessment- of their impact on NASA software\nrequirements and design.\n\nESTLMATED DEVELOPMENT COSTS: $150,K. - $250-K\t\nPRIORITY:- I\n8. SCHEDULE:\n.976 1979 11134 - 1981 1982 19_81 -- 1-9-$11 , 1985.. . 4$6\no NASA requirements for natural\ncommunication -methods\n\no Impact on NASA software\nrequirements\no Delineation of modifications to\npayload so-ft-ware system\no Overall assessment of the\nimpact of natural con-u-nunica-i\nlion methods\nC-15\n\nJ\t\n\nt\t\n\nA\n\nCOST/TIME/PRIORITY ASSESSMENT\nTITLE:\t\n\nAdaptive Search and Sort Procedures\t\n\nNO, TI-14\n\n1.\t DESCRIPTION OF ITEM:\t Adaptive search and sort procedures are required to\nensure that the deployment of pattern recognition., image processing and related\nalgorithms will be efficient and enable processing the high volume data in near rea-1\ntime as required in future NASA missions.\t These routines should be adaptive to the\ndata characteristics of the arrays being manipulated.`\n\nZ. CURAZ11T STATUS OF TECHNOLOGY: LEVEL\t\nREQUIRED\n3,\nLEVEL:\t\nDATE\n6\t\n4.\n\nESTIMATE OF NON-TNASA\n\n2\n\nADVANCEMENT LEVEL --3-4-----\n\n--A\' L T E RN\' AT1 \' E SO L UTIONS: - -Vs-e loinon- standardized, arbitrarily- picked search\n\' -" - "\n--- ff"V U t7 98:\nand sort routines currently available as parts of different pattern recognition and\nimage proces sing packages, is an alternative involving duplication of software and\ninefficient routines not particularly suited to NASA requirements.\n\nL\n\n6. RELATE]? ACTIVITIES:\nTI-L-05 Standardization criteria for NASA software.\nTI-12\t Control structures for adaptive systems.\nage\nTI-l5\t Restructured image analysis soft-ware for parallel processing.\nal\nT1-16\t Optimal lar g e array partitioning procedures.\n7. RECONLMENDED NASA EFFORT;\t NASA sh ould initi ate a study to perform the\no uld\nrequirement analysis for search and sort techniques in the context of image processing and pattern recognition activities and follow it up with development of\nappropriate adaptive search and sort routines to meet these re q. U-1re m ents.\n\nESTMIA TED DEVELOPM-ENT COSTS:\t . $150K - $Z5OK\t\n-PP-JOR=\n,Y- 1\n1978 197941580 19-81 1\n8. SCHEDULE .\n19\t 8 3 19 84 19 85 1986\n\xe2\x80\xa2 Requirements Analysis\n\xe2\x80\xa2 Adaptive routines and control\nstructure s development\nent\n\xe2\x80\xa2 Implementation, testing and\ndocumentation\neatation\n\nC-16\n\n-r\n\n-..a\n\nCOST/TIME/PRIO RITY ASSESSMENT\nNO. TI- 15\n\n-- ,\nTITLE: Restructured 1,m age Analysis Software for Parallel\t\nProcessing\n\nI.\n\nDESCRIPTION OF ITMM: Onboard image processing/pattern recognition can be\nenabled by restructuring the key software functions to achieve maximu m parallel\nprocessability.\t This can be attained by identifying the parallelism in these functions\nand adapting a suit-able computer architecture which will take full advantage of the\nadvancements in low cost hardware technology and parallel processing concepts.\n\n4\n\n41 11N"\n\n20\n3.\n4.\n\nE\nCURRENT STATUS OF T\xe2\x80\x94 CINNOLOGY: LEVEL 2_-3\n\xe2\x80\x94\t\n6\t\nDATE AMREQUIRED LIEVEL. \xe2\x80\x94 \t\nESTRviATE OF NON-NASA ADVANCEMENT: - LEVEL\t\n\n4\n\nS. ALTER-NATIVE SOLUTIONS:\t Alternatives to restructuring image analysis software\n(for parallel processing) are:\no\t To use the software as is in non-parallel processing environment..\no\t To create new software expressly for parallel processing.\no\t Develop "image processing dedicated hardware.\nThe first two alternatives are either inefficient or unnecessarily expensive. \t The\nlast needs further exVIoratizon.\n\n6.\n\nRELATED ACTIVIT124-TI-05 Standardization criteria for NASA software.\nTI-09\t Task covitrol structures for distributed processor environments.\nTI-12\t Con-trol structure for adaptive systems.\n\n79\n\nacr\nena\t\n\t towar\t\n\'as ena blin g\nshould direct its\nAECO1\\LMtN_Dtb NASA EFFORT. NASA sti\t\nonboard image processing/pattern recognition functions through achievement of\nmaximum parallelism in these processing activities. \t This is to be done through\na study which will identify all the parallelism inherent in these functions not only\nin term s of parallel. or concurrent identical processing on different pixels (data\nputations\nsubsets) but also in term s of parallel execution of different computations on the same\n,\ndata.\n\nPRIORITY-:. _..-.._$ 1000K\nESTWA TED. Q-EYE LO P-NMN T. COSTS:.\t $250-K\nIS\n_19\n.19 $_I .1982 IW_ 11984 1 05 \xc2\xad 1586.\n- -E\nB.\xe2\x80\x94 S CH- -D-ULE.\no\t Parallel processible functions\nidentification\nEMNOW ^P.\no Restructuring/modification of\nage analysis\nim\no Identification of computer\narchitecture for implementing\nthe restructured software\na ystem\n\nA\n\nC-17\n\nJ\n\nCOST/TIME/PRIORITY ASSESSMENT\nTITLE: Optimal Large Array Partitioning Procedures \t\n\nNO- TI-16\n\n1. btSCRWT1OTN OF ITEM: Optimal large array partitioning procedures offer a viable\nsolution to the .problems of large array manipulations such as matrix transpositions\nunder the constraints of the processing system configurations expected onboard in\nthe near future.\t Development of such procedures will enhance the capability of the\nage\nre\nprocessor in meeting the image proces sing requirements more effectively.\n\n__:\n2. Ctjp ArX-T STATUS OF TECHNOLOGY LEVEL\t\n2-.3\n1983\n3. REQUIRED LEVEL- __6 -\t DATE\t\n3-.4\n4. 2STmATt Or NON-!YASA AJ)VAN\niCEMk1XT: LEVEL\t\n\nALTERNATIVE SOLUTIONS: Electronic cyclic memories can alleviate to a\nConsiderable extent the problem of large array manipulations such as matrix\ntransposition.\t This alternative has only been conceptually visualized. \t But.,\npractical solutions for onboard implementation have yet to be realized.\n\n.6. RELATED ACTIVITIES.\nTI-05\t Standardization criteria for NASA software.\nTI-12\t Control structure for adaptive syste. M s.\n.,\nTI-14 Adaptive search and sort procedures.\n\n7. RECOMIMENW- RED NASA EFFORT: it is nec. essa ry that. NASA should initiate a study\n\xc2\xad\nof the feasibility and developm- eat of optional procedures for large Z and 3 dimensional arrays m anipulations to -meet the needs of data compression, image\ngy e\n.- p\t r\t ession,\t i\nprocessing scene. analysis problems.\n\nESTIMATED D EYE LOPMEN T _C0 STS: _$UQK. -- $250K --\tPRIORITY: - I\t\n.TLZ: \'\n.1,979.1.1979- .-1980.119$1- _ _1982 ... .1983 . 1984 1.988 19.8.680 _ \'SC14k_VT_\n\n\'\nFeasibility assess, m eat for\nadapting array manipulation\nprocedures to array data\ncharacteristics\no Ixnpact of data storage and\nprocessor architecture\no Development, testing and\ndo cu,m e nta tio n\n.\ne\t\n\nC-18\n\nA-1\n\nCOST/TIME/PRIORITY ASSESSMENT\nNO. TI-17\n\nClassification of Error Mechanisms\n\n.1\n17\n\n121\n\n1. DESCRIPTION OF ITEM:\t Study of past experience in software errors, their types,\ncharacteristics and frequency or likelihood helps in identifying the causes of such\nerrors and leads to a reduction of the chances of their occurence in future missions.\nAccordingly classification of the error mechanisms will enhance the cause of fault\nfree software development.\n\n9 . CURRENT STATUS OFTkCHNOLOOY: LEVEL\t 2-1\n3. REQUIRED LEVEL: _..\t 6\t\nDATE\t -1980\n4. ESTEVIATE OF NON-NASA ADVANCEMENT: LEVEL\n-9.\n\nK\nALtkAXAT1V:ESbUr t1O_ NS: ; Fault tolerantsoftware development, if feasible, is an\n\nalternative.\t However, in general, the study of error mechanism will aid this\nalternative also in addition to reducing the likelihood of such errors.\n\nb.\n\nRELATED ACTIVITIES:\n\nTI -10 Program organization niethods for real-time fault recovery.\n\nTI-19 Software prototyping methods.\n\n7, R=6M=Nb.E NASA _fFrORT: NA to efforts in this -area should cover all re --arced\nSA\n__D_\npast software development activities ensure that past experience will serve to\nenhance future performance.\t The tasks under this effort are as itemized below.\nuis\nnr\n\nESTIMATED DEVELOPMENT - COSTS: $15QK -- $250K\t\nq,\n\nS. _SCI4Z=_LE_:\n\nPRIORITY: 4\n\n11978 1979 1980\'19-8.1 1982. 7 1983 1184 1985 -1086\n\no Error data compilation\n0\t Characteristics extraction\nand modeling of the errors\no Error classiRcation\no New methodology feasibility\nassessment (for avoiding these\nerrors)\n\nC-19\n\n..\t\n\n.I\n\nCOST/ TIME/PRIORITY ASSESSMENT\nNO .\t\n\nTITLE: Guidelines for Design Documentation Consistency\n\n1.\n\nTI- 18\n\n\t in the aecem po s ition and - re structur i ag\nDESCRIPTION O F ITEM: \xe2\x80\x94 - A major\nof software design is the lack of a documentation -methodology to accurat ely portray\nit.\t Many errors are introduced into programs during development, cha age and\nmaintenance phases, because the programmer does not clearly -understand the intent\nof the designer.\t This leads to much higher than required life-cycle costs and often\nresults in less than reliable software. \t New methods of documentation, compatible\nwith state-of-the-art design techniques, must be found.\n\n-------\t\n\t\n- 3 -4\nZ. C URRENT STATUS\nTECPLN\tOLOGY: LEVEL\nDATE\t -19-H,\n3. REQUIRED LEVEL:\t\n5\n4. ESTIMATE OF NON NASA ADVANCEMENT: LEVEL\t\n\n-\n\n9 -. ALTERNATIVE SOLUTIONS.\nNone.\n\nt\n\n6.\n\nRELATEDACTMI-T-I\xe2\x80\x94ES:\n\nTI-0 1 Requirements decomposition and structuring guidelines.\nTI-05 Standardization criteria for NASA software.\nTI-06 AOL design guidelines / standards.\n\n7 - .- Azcoivum2ND.EDN AsA EFFORT:\t NASA should begin no later than calendar\nL\n,\ni\t\n19.78 to develop triethods of obtainliigr docum entation consistency -and from these\nmethods generate guidelines to ensure consistency of future software development\nprojects.\t In this way, documentation Which clearly and concisely describes the\nproblem and its solution, and which reflects program structure will be enabled.\n\nE-STnvLA.T^:l7DEVELOPMZNT _COSTS:_ $100K\t\n\n$250K\t\n\nPRIORITY.. 3\n\n9\n\nUL\nU. -\t SCHEDE:\n\n\xe2\x80\xa2 Design structure analysis\n\xe2\x80\xa2 Development of documentation\nguidelines\n\xe2\x80\xa2 Evaluation criteria\n\nC-20\n\nI\t\n\n;i\t\ni\n\nI\nCOST/TIM\n. Z/PRIORITY ASSESSMENT\n\nTITLE: Software Prototyping Methods \t\n1.\n\nNO. TI- 19\n\nDESCRIPTION OF 3TEM:\t Concern for the high cost of design errors during and\nafter software development has led to a search for ways to proof a design before\ncommitting it to code.\t One of the more promising techniques recently receiving\nincreased emphasis is software prototyping.\t Software protetyping is a method of\ntesting the key elem ents of a design, at minimal cost, prior to starting development\n.,\nof the operational system.\t This technique has been successfully used on a few\nground based systems, but has yet to be applied to real-time space systems.\t The\nkey to this Technology Item is development of true, low-cost prototyping techniques.\n\n2. CURRENT STATUS OF TECHNOLOGY: LEVEL\t\nb\t\n3. REQUIRED LEVEL:\t\nDATE\t 1980\n\n3\n\n4.\n\nESTIZAATE OF NON-NASA ADVANCEMENT: LEVEL\n\n5.\n\n....\nALTERNATIVE SOLUTIONS:\n\n...___ .-4\n\n(1) Requirements -to -code translation.\n(2) Consistent decomposition and structuring methods.\n(3)\t The two alternatives, although highly desirable goals, do not fully satisfy the\nproblem, since neither gives a good indication of the feasibility or cost of\ncommitting the design to code, regardless of the quality of the design.\n\n6. RELATED ACTIVITIES:\nTI-03 Simplified software development system, demons_ tration model.\nTI-05 Standardization criteria for NASA software.\n\n7. RECOlviMZNDED NASA EFFORT: \t NASA should -begin research and deve o.pnient o\nreal-time software prototyping.\t The cost savings on large development projects\nthrough ensuring design feasibility will -far outweigh the cost of developing proofing\nmethods and will lead to more reliable and products.\n\nESTI?VATED DEVELOPMENT COSTS:. $1Q01<- $250K \t\nPRIORITY-,\t 4\n8. SCHEDULE:\n198.-0 1981 \'982. 19 83 ....._ _ .-1.985 19$6\n1978. 1979.1 .\n_ ---\t _\t 198\t\n\xe2\x80\xa2\t \'technology analysis\n\xe2\x80\xa2 Low-cost prototyping methods\n\xe2\x80\xa2 Evaluation criteria\n\nC-21\n\nCOST/\'Z.TME/PRIORITY ASSESSMENT\nTITLE: Software Technology Monitorin 0\ng\nI.\n\n2.\n3.\n4.\n\nNo.\n\nTI-ZO\n\n.\nh\nb28CArYTICNN OF ITEM ,\tSofitware technology is -continually advancing, and though\narily\ngrowth is primarily evolutionary, there is nothing to preclude a revolutionary\nbreakthrough, particularly in view of the dram, atic advances in hardware technology.\nNASA should be in a position to capitalize on all technology advances, whether\nachieved by government, in Universities, or in industry.\t It can best do this by\nestablishing a mechanism- to continually review state-of-the-art technology.\n\nCURRENT -6TATT18 Or TZCR NoLcoY: LEVEL\t\nL\n_N /A\nREQUIRED LEVEL:\t\nN/ A\t _ .-_.\nDATE\t 1978-1.990\nESTIMATE OF NON-NASA Abv_ANcEmZ- T: - LEVEL\t N/A\nN\n\n.; :\n\n3. ALTERNA\t TIV_ SO LTJ TIC NS\n: \t E - -None.\n\n.\t . . . \t .\t . . \t . \t . .\n\n6, RELATED ACTIVITIES:\nNone.\n\nlo --- RZCO\'i -L - \xe2\x80\x94 -\'v - E NDED NASA EFFORT:\t NASA shoUld- establish a filricti-oh to continually\nM\nmonitor state-of-the-art software technology. \t This function should project NASA\nneeds, establish milestones for industrial advancement, and identify these areas\nNASA\nwhere NASA must force progress.\t In this way,\nwill ge-t full benefit of\nadvances outside of the organization and at the same time be in a position to ensure\nthat its requirements are met, at the time needed,,\nents\n\nEST\n\n- __.- T\t\nTZD\n\nDZVLOPM ET CO-ST S:,\n^C\t\nIN\nL\n\n9.-- SCHEDULE:\n0 Monitor software technology\nadvances\n\nPRIORITY-\t 5\n(19 7 7 dollars)\t\n982\n1. 5 .801TV81 f- - 1083 1 --ma - 1985 19 86\n\n_$JQ-F_,,P_P_r.\t\n\nbar\n\n1Y79_11979\n\nvii\n\nC-22\nF\n\n'