b'Knowledge Repositories for Multiple Uses\nKeith Williamson, Patricia Riddle\nAdvanced Technology Center\nBoeing Computer Services\nP.O. BOX24346,MS 7L-64\nSeattle, WA 98124-0346\n(206) 865-3281\nJanuary 22, 1991\n\nProblem\n\nAbstract\n\n1\n\nI n the life cycle o f a complex physical device or part, f o r\nexample, the docking bay door of the space staiion, there\nare many uses for knowledge about the device or part.\nThe same piece of knowledge might serve several uses.\nGiven the quantity and complexity of the knowledge that\nmust be stored, it is critical to maintain the knowledge in\none repository, in one form. At the same time, because\nof the quantity and complexity of knowledge that must\nbe used in life cycle applications such as cost estimation,\nre-design and diagnosis, it i s critical to automate such\nknowledge uses. For each specific use, a knowledge base\nmust be available and must be i n a f o r m that promotes\nthe eficient perfomance of that knowledge base. However, without a single source knowledge repository, the\ncost of maintaining consistent knowledge between multiple knowledge buses increases dramatically; as facts and\ndescriptions change, they must be updated i n each individual knowledge base.\n\nIn the life cycle of a complex physical device or part\n(e.g., the docking bay of the space station) there are\nmany uses for knowledge about the device or part,\nabout its structure, function, materials, component\nparts and so on. Such uses might include product\ndefinition (i.e., design and manufacturing process\nplanning), testability analysis and test construction,\ncost estimation, producibility studies, diagnosis of\nbreakdowns, and re-design of features. In an effort\nto become more competitive, corporations are automating such knowledge uses. For each particular\nuse, a knowledge base must be available and must be\nin a form that promotes efficient performance of that\nsystem. This has resulted in duplicate knowledge in\nmultiple knowledge bases, where a particular piece\nof knowledge serves multiple uses.\n\nW e have developed a use-neutral representation of\nan hydraulic system f o r the F - I l l airplane. W e demonstrated the ability to derive portions of four diflerent\nknowledge bases from this use-neutral representation: one\nknowledge base is for re-design of the device using a\nmodel-based reasoning problem solver; two knowledge\nbases, at diflerent levels of abstraction, are for diagnosis using a model-based reasoning problem solver; and one\nknowledge base is for diagnosis using an associational reasoning problem solver. W e have shown how updates issued\nagainst the single source use-neutral knowledge reposito y\ncan be propagated to the underlying knowledge bases.\n\nGiven the quantity and complexity of the knowledge that must be stored, it is critical to maintain the\nknowledge in one repository. Without a single source\nrepository, the cost of maintaining the knowledge\nrequired by multiple knowledge bases is increased\ndramatically; as facts and descriptions change, they\nmust be updated in each individual system. It is virtually impossible to maintain synchronicity among\nthe knowledge bases that require the same knowledge. Without a single source repository, the costs of\nother maintenance tasks (e.g., knowledge verification\nand validation) are not easily shared across knowledge bases. Finally if there is no common knowledge\nrepository, the development of new knowledge bases\n\n353\n\nmust essentially be done from scratch each time.\n\n2. Allow the knowledge repository to be updated,\nand demonstrate the capability of automatically propagating these updates to the pertinent\nknowledge bases so as to preserve correctness.\n\nTo establish a single source knowledge repository, we cannot simply borrow representations from\ntoday\xe2\x80\x99s knowledge bases. In current knowledge base\ntechnology, the use of the knowledge determines its\nrepresentation. The knowledge encoding is tailored\nfor efficiency in performing the particular task at\nhand. However, once the knowledge representation\nis customized for a single use, it is difficult or impossible to apply it to some other use.\n\n3. Develop a methodology for creating a single\n\nsource, use-neutral knowledge repository from\na set of related use-specific knowledge bases.\n4. Demonstrate the ability to automatically gen-\n\nerate a first cut at a brand-new knowledge base\nfrom the knowledge repository.\n\nIn order to maintain knowledge about a complex\ndevice in one knowledge repository for multiple uses,\na use-neutral representation is required. In order to\nautomate the use of that knowledge, it must be made\navailable to many different problem-solvers and must\nbe put in a form that promotes their efficiency. The\nneed to manage and access single source information\nfor multiple uses places critical requirements on the\nkind of knowledge that must be captured and the\nway the knowledge is represented in the repository.\nSection 2 gives an overview of the objectives of\nour project. In section 3 the more detailed issues\nwhich arise from this research are discussed. Section\n4 gives a survey of related research. In section 5 the\ninitial focus of our project is given. Section 6 gives\nthe progress made to date. In section 7 the future\nresearch directions are given. Section 8 concludes.\n\n2\n\nProject Objectives\n\nThe overall objective of this project is to develop a\nmethodology for sharing knowledge between several\nknowledge bases which have different uses (e.g., design and process planning). This methodology consists of a single source use-neutral knowledge repository, and the ability to down-load this knowledge\ninto different knowledge bases tailored for specific\ntasks. Specific objectives of the project include:\n\n5. Evaluate and establish knowledge represen-\n\ntation principles for modeling physical devices/parts that support a pre-defined, but\nextensible, set of uses throughout the device/part\xe2\x80\x99s life cycle.\n6. Establish requirements on the completeness\n\nand consistency of the single source, useneutral knowledge repository imposed by the\npre-defined range of life-cycle uses and develop\ntools to ensure those requirements are met by\nthe single source model.\n\n3\n\nIssues Raised\n\nThe major benefits of such an approach are derived from three sources: from physically sharing\nknowledge, from updating the repository, and from\nadding new knowledge bases. From physically sharing knowledge, the knowledge bases have increased\nconsistency with each other and a lower combined\nmanagement cost and verification and validation\n(V&V) cost than if supported separately. From updating the repository and propagating the updates\nto the individual knowledge bases, the knowledge\nbases have a lower combined update maintenance\ncost and it is easier to maintain correctness and configuration control of the system. From adding new\nknowledge bases, this approach enables the identification of inconsistencies in pre-specified KBs and the\npartial automation of the generation of new KBs.\n\n1. Demonstrate tools for transforming and downloading repository knowledge into knowledge\nbases that can be used by multiple problem\nsolvers, that support the pre-defined range of\nIn this section, the issues raised in achieving\nlife-cycle uses.\nthese benefits are explored. In later sections, the\n\n354\n\nfocus of our project within these issues and our initial progress will be described. The global structure of the ultimate system is shown in Figure 1.\nOne important aspect of this structure is that it allows the transformations (i.e., the gateway) to access\nknowledge from several different knowledge stores.\nThis is very important with regards to the Boeing\nCompany. There are knowledge stores for Boeing\nCorporate Standards which are accessible by vendors and proprietary knowledge stores which are\nnot. These knowledge stores might be stored and\naccessed separately for security reasons, but their\nknowledge might need to be combined to create useful knowledge base rules to be used within Boeing.\nTo a system accessing the knowledge repository, the\nknowledge should appear seamless. Even with nonproprietary knowledge stores, the information might\nbe stored separately (e.g., some in Auburn, Washington and some in Wichita, Kansas). This information must be accessed directly from these different sources so as to maintain the single source model.\nThe ultimate goal is a distributed single source useneutral knowledge repository.\n\nting the pertinent knowledge to multiple knowledge\nbases. But the knowledge representation used in the\nsingle source repository is independent of the specific\nuses of those knowledge bases, so it will be referred\nto as use-neutral throughout this paper.\nTransformations which down-load knowledge\nmust preserve the aspects of the model which are\nimportant for this knowledge base use (Le., they\nmust be behaviorally equivalent). In certain cases\nwhen a knowledge base requires all the details of\nthe model this transformation will be the standard\nnotion of equivalence (;.e., an isomorphic transformation). But in other cases transformations will either abstract away certain knowledge which is not\nnecessary for this knowledge base or approximate\nknowledge for efficiency reasons. In these cases the\ntransformation will only be behaviorally equivalent.\nThe transformation will be equivalent only with respect to the desired behavior (Le., a homomorphic\ntransformation). For instance, if stress analysis is\ndone, certain knowledge about the color of the paint\nor the smoothness of the finishes are not relevant\nknowledge with respect t o the stress analysis.\nThe ultimate transformational system we envision is a partial-order of transformations (Le., most\nlikely a forest) from one representation to another.\nThe reformulation from any one representation into\nanother representation (i.e., either the use-neutral\nrepresentation, a user representation, or the representation associated with a specific problem solver)\nis a path through this partial-order of transformations. This will allow a maximal amount of reuse of\nthe transformations. Figure 2 illustrates this idea.\n\nFigure 1: Single Source Repository\nAnother aspect of this model is that the language used in the use-neutral knowledge repository\nshould have a sufficient expressive adequacy to allow new knowledge bases and their related transformations to be added to the repository later on.\nThe knowledge in the single source repository is not\nuse-neutral in the broadest sense. The knowledge\nmust be represented to serve the \xe2\x80\x9cuse\xe2\x80\x9d of transmit-\n\nThe KRMS (Knowledge Repository Management System) must deal with issues of V&V\n(e.g., consistency and redundancy) and configuration management across multiple knowledge stores.\nConfiguration management includes keeping a history of any updates to the use-neutral knowledge\nrepository so that the version of the knowledge given\nto a certain knowledge base or person at a certain time can be reconstructed. There is a tradeoff\nbetween applying V&V directly to the knowledge\nrepository and applying it to each knowledge base\nseparately. Some tests (e.g., consistency checking)\nmight be best applied to the knowledge repository\n\n355\n\ncan be seen as another type of transformation. These\ntypes of transformations must be handled differently because there is a person at one end of the\ntransformation instead of a computer, but the basic structure of transforming one representation (a\nuser language) into the use-neutral representation is\nthe same. For instance a dialogue apparatus can\nbe used to elicit knowledge from a person, but a\ndialog apparatus is difficult to use in a transformation between two computers. Transformations may\nalso connect the use-neutral representation t o people so as to give them direct access t o the knowledge in the repository. Several different transformations (in each direction) may be necessary since\nthe language used 3y different people (i.e., designers,\nmanufacturers, maintainers) may not necessarily be\nthe same. Transformations between people and machines might involve a form (possibly simplified) of\nnatural language understanding and text generation.\n\nIp~efll.\ngender)\n\n/\nJ\n\n\\\nt\n\nI\n\n/\nJ\n\n1\n\nShell rcformulaiion\nRolog 5 ) Ops5\n\nKnowlcdgc baxi\n\nFigure 2: The Gateway Transformations\nto assure synchronicity between all the knowledge\nbases and to avoid the cost of testing each knowledge base separately. 0 ther tests (e.g., functionality\ntesting) might be best applied to the task-specific\nknowledge base. It is not clear how t o test the functionality of the knowledge repository directly.\nThe knowledge down-loaded to the task-specific\nknowledge bases must be consistently updated when\nan update is performed on the knowledge repository.\nThere could be problems with this updating process\nwithin either the knowledge repository or the transformations. The representation of the knowledge in\nthe knowledge repository might not be expressive\nenough to handle the update. The transformations\nmight no longer be applicable t o the updated knowledge in the repository or might transform the knowledge such that the knowledge in the knowledge bases\nis inconsistent with the knowledge in the repository\n(i.e., the transformation might not be correctness\npreserving on the updated knowledge). In a similar\nvein when a new knowledge base is connected t o the\nknowledge repository, two analogous problems can\noccur. Either the repository does not contain the\ninformation necessary for the new knowledge base or\nthe transformations cannot transform the knowledge\ninto the form that the new knowledge base needs.\nUpdating the knowledge repository could be\ndone using knowledge acquisition techniques. These\n\nGateway security will also b e an issue. Vendors\nmust be allowed access to non-proprietary knowledge\nwhile users within Boeing must be allowed greater\naccess. Even within Boeing there might be separate\ngrades of accessibility, a factory shop-floor might not\nbe allowed the same access rights as other areas.\n\n4\n\nSurvey\n\nIn the last few years much work has concerned developing and maintaining large knowledge bases. Very\nlittle of this has focused on developing and maintaining large knowledge bases which support multiple uses. There has been some research involved in\nderiving a \xe2\x80\x9cshallow\xe2\x80\x9d model from a \xe2\x80\x9cdeeper\xe2\x80\x9d one but\nnot for systems with more than two models. Davis\n[2] has a system which can derive a sequence of models for use in troubleshooting digital circuits, but it\ncannot generate different models for different uses.\nRich Kellerl has demonstrated the multiple use\ncapability of the Stanford modeling project. Keller\xe2\x80\x99s\n[5] system derives two sequences of models, one\nfor diagnosis and one for re-design. This research\ndemonstrated the multiple use capability of the\nStanford modeling project. He took approximately\n\n356\n\n\xe2\x80\x98Previously on the Stanford project, now at NASA Ames.\n\nWithin correctness preserving transformations there\nhas been work on both shifting between expert system shells (i.e., analogous to compilers) [lo, 13, 11)\nand shifting between problem representations (i.e.,\ntraditional reformulation) [l, 8, 12, 91. None of this\nwork has been based on large knowledge bases and\ntherefore not explored certain relevant issues (e.g.,\nknowledge base management, knowledge base maintenance, and version control).\n\n20 diagnosis rules from a 150 rule Lockheed expert\nsystem for diagnosis of the Reaction Wheel Assembly\n(RWA) for the Hubble Space Telescope. Discussions\nwith domain experts derived approximately 5 plausible redesign rules for the RWA. Both of these sets\nof rules were represented in the expert system shell\nStrobe. Given these two sets of rules a use-neutral\nrepresentat ion was formulated and transformations\nfor connecting these two specific rule sets with the\nuse-neutral representation were derived.\n\nA representation language/s must be chosen for\nthe single source repository. As was stated earlier\na single language may not be capable of expressing all the types of knowledge which must be stored\nin the repository. This language must be capable\nof representing both deductive and heuristic information and in a form which is independent of its\nintended use. There are several efforts which deal\nwith creating representation languages which are capable of representing \xe2\x80\x9call\xe2\x80\x9d knowledge regardless of\nuse: CYC at MCC [7] and modeling of scientific\n4.\nand engineering device knowledge at Stanford [ ]\nThese representation languages and their associated\ntools might be suitable for representing the knowledge in our single source repository. The domain\nrepresentation within these languages must also be\ndetermined. It is possible that none of these projects\nhave a representation which will suit our purposes.\nThe Stanford project, since it is also dealing with engineering devices, is more likely to have a predefined\nproblem representation which will suit our purposes.\nThe MCC project is trying to represent \xe2\x80\x9call\xe2\x80\x9d knowledge. We are, as is Stanford, trying to solve the\neasier problem of representing \xe2\x80\x9crelevant engineering\xe2\x80\x9d knowledge. We have purposefully not spent a\nlot of time exploring these representation languages.\nWe feel that the possible choice of a representation\nlanguage should be driven by the needs of the useneutral representation. We plan to have a first cut\nof what the requirements of the representation are\nbefore we explore these representation languages in\ndepth. This will help to avoid a preconceived bias\non our parts.\nResearch in reformulating knowledge has also\nbeen pursued in the last few years. There has been\nwork on abstraction transformations and to a lesser\nextent on approximation abstractions [6, 3, 14, 151.\n\n5\n\nFocus\n\nPreviously we gave an overview of all the issues related to a single source knowledge repository. It is\nimportant at this point to emphasis which of these\nissues this project is emphasizing. These aspects of\nthe system were chosen to allow the system to have\na functional value to Boeing within 5 years while research on the other issues continues. The following\nfour issues are the focus of this project.\nA representation language is needed which is\ncapable of expressing the information necessary to\nhandle all the different desired uses of the knowledge. This is a tall order. The approach we take\nis to try and circumscribe the uses to which we will\nexpect this knowledge to be put. The goal is to\nrepresent sufficient knowledge to achieve this set of\nuses as opposed to any use defined later on . This\nrepresentation language should be flexible enough to\nallow extensions to the set of pre-defined uses. It is\nalso apparent that one pre-existing representation\nlanguage may not be suitable for handling all the\ndifferent type of knowledge necessary (i.e, deductive\nknowledge versus heuristic knowledge). Portions of\nmultiple pre-existing representation languages may\nhave to be used within the knowledge repository.\nBear in mind that this does not necessarily dictate\nthat redundant knowledge will be represented.\n\nTransformations are necessary to down-load the\nknowledge in the repository to multiple knowledge\nbases. We plan to explore three basic types of transformations: abstraction, approximation, and correctness preserving. Frequently the full model of a\nsystem is too complex to analyze, due to computational restrictions. In these circumstances a simpler\n\n357\n\nmodel of the system must be used for the analysis.\nThe transformation from the full model to a simpler one is an abstraction. These are used frequently\nin engineering domains where the complexity of the\nfull system is often overwhelming. Approximations\nare a similar type of transformation. An abstracted\nmodel is correct and must just be refined to arrive\nat the original full model. An approximate model\nis actually incorrect to some allowed degree of error\n(i.e., the approximate model cannot be refined into\nthe original full model). These types of transformations are also used frequently throughout engineering domains (i.e., the simplex method). The above\ntwo types of transformations are homomorphisms.\nCorrectness preserving transformations change one\nmodel into an equivalent model (i.e., it is an isomorphism). Two examples of when this type of transformation is important is a shift between the problem\nsolvers\xe2\x80\x99 associated language (Le., OPS5 to Prolog)\nor a problem reformulation. A problem reformulation is a shift from one representation of a problem\nto another within the same representation language.\nFor instance the shift between a model containing\ngender and parent to a model containing mother\nand father. It turns out that this last type of transformation is very important in achieving a model of\nthe problem which is computationally efficient for a\nparticular problem solver.\n\ning, it is very difficult to allow the easy connection of\nany new knowledge base. We plan to circumscribe\nthe set of knowledge bases for which the transformations are guaranteed to connect. This allows the system to actually be used with production level knowledge bases and thus simplify the creation of a class of\nnew knowledge bases and lower their start-up costs\nwhile research on broadening the class of connectable\nknowledge bases is continued.\n\n6\n\nProgress\n\nThe progress made by this project in slightly under 3 person-months was a feasibility study using a\nknowledge base for the F-111 hydraulics system. We\nestablished a use-neutral knowledge repository for\nthe F-111 hydraulics system and a set of transformations from this knowledge repository to multiple\nknowledge bases each for a specific task. In this feasibility study there were four knowledge bases derived:\none knowledge base for design using a model-based\nreasoning problem solver2; two knowledge bases (at\ndifferent levels of abstraction) for diagnosis using\na model-based reasoning problem solver; and one\nknowledge base for diagnosis using an associational\nreasoning problem solver. The derived associational\ndiagnosis rules were more precise than person derived rules. We demonstrated the connection of\na pre-specified knowledge base to the use-neutral\nknowledge repository; in doing this we discovered\ninconsistencies in the pre-specified knowledge base.\nWe demonstrated the propagation of updates, which\nwere made to the use-neutral knowledge repository,\ndown to the pertinent knowledge bases. We also\ndemonstrated a partially automated methodology\nfor the derivation of a use-neutral knowledge repository and its associated transformations from a set\nof related use-specific knowledge bases.\n\nThe ability to update the single source knowledge repository such that the transformations to the\nknowledge bases are still applicable and correctness\npreserving is very important. Note that a transformation between two representations could trivially\nbe A+B. But this type of representation is not very\ngeneral and therefore will not be applicable if A is\nupdated to A\xe2\x80\x99. It is very difficult to create transformations which allow all possible types of updates.\nWe plan to circumscribe the set of updates for which\nthe transformations are guaranteed to still be applicable. This allows the system to actually be used\nwith production level knowledge bases and thus simplify a class of their update problems and lower their 6.1 F-111 Hydraulic Models\nmaintenance costs while research on broadening the\nclass of guaranteed updates is continued.\nThe hydraulic system of the F-111 aircraft is shown\nThe ability to decide later on to connect a new in Figure 4. The hydraulic system is broken into\nknowledge base to the knowledge repository is also\n\xe2\x80\x98The use of model-based reasoning problem solvers for deimportant. Analogous to the problem with updat- sign is just beginning to be explored[l6].\n\ntwo sub-systems; a primary and a utility subsystem.\nWithin both of these subsystems, there are redundant modules (i.e., left and right modules) and a\npressure indicator. Each of these modules consists\nof a pump and a pressure indicator. The right modules of each subsystem share a n engine, as do the left.\nThe system is assumed to be given the flow-demand\nand throttle settings for each of the engines.\n\nI\n\nipl\nipr\nur\n\niu\niul\niur\n\nAbbreviations\nprimary\nprimary.left\nprimary.right\nintermediate.primary\nintermediate.primary.left\n\nIn the Diagnosis I model (see Figure 8), the areas of the pipes are fixed and the resistance of the\npipe has been abstracted (i.e., the pipe resistance is\n0). In the Diagnosis I1 model (see Figure 9), the areas of the pipes are fixed but the resistance of the\npipe is not abstracted. The Design model (see Figure 10) also abstracts the resistance of the pipe but\ndoes not fix the areas of the pipes (i.e., while during\ndiagnosis the pipes should not be allowed to change\nsize, this is desirable in a design model).\n\nintermediate.primary.right\n\nutility\nutility.left\nutility.right\nintermediate.utility\nintermediate.utility.left\nintermediate.uti1ity.right\n\nleft.engine\nright .engine\n\nTrcf\nRtfcc\nEc\nKu\nKP\n\nKul\nKur\nKPl\n\nKPr\n-\n\nerational status of certain components. These are\nshown in Figure 3. In each of the task-specific models, we indicate which of the model variables are assumed to be instantiated prior to use of that model.\nThere were four constraints which were common to\nall the derived models (see Figure 5 ) . The relationships between the models are shown in Figure 6. The\nuse-neutral model has 17 constraints on the components; these are shown in Figure 7. These models are\nused to illustrate the technology involved with a useneutral knowledge repository; there is no claim that\nthey precisely reflect the actual physics involved.\n\nConstants\n\nChronology These models were derived as follows. Diagnosis I was chosen as our initial model;\nit was previously developed by another research\nproject in the Advanced Technology Center. Using\nthis model, high-level descriptions of the Diagnosis I1\n(by adding the notion of pipe resistance) and Design\n(by adding the notion that pipe radii can change)\nmodels were hypothesized. Using these three models\n(two of which were only high-level descriptions) and\nknowledge of basic physics, the use-neutral model\nwas hypothesized. Using the use-neutral model, the\nassumptions made by the various models, and a set\nof general transformations; the exact set of constraints specified in Diagnosis I and a plausible set\nfor Diagnosis I1 and Design were derived.\n\nthrott1e.rpm.conversion.factor\nrpm.t 0.\nflow.conversion.constant\n\nEngine constant\nutility pipe constant\nprimary pipe constant\nutility left pipe constant\nutility right pipe constant\nprimary left pipe constant\nprimary right pipe constant\n\nStatus Variables\np.pressure.status u.pressure.status\npl.pressure.status pl.status\npr.pressure.status pr.status\nul.pressure.status ul.status\nur.pressure.status urstatus\n1e.status\nre.status\n\n6.2\n\nFigure 3: Abbreviations and Constants\nIn the models for the knowledge bases and\nrepository, there are some constant values and common abbreviations used in specifying variable names.\nThe models also contain references to boolean status variables that are assumed to indicate the op-\n\nTransformations\n\nThe transformations used in deriving the taskspecific models will now be discussed. The reformulation of the use-neutral into Diagnosis I is not\nshown here; it is a combination of the transformations used to reach the other two models.\n\n359\n\nRight\nengine\n\nOFF\n\nprimary\npressure\nOFF\n\nutility\npressure\nOFF\n\n,\n\nutility\npressure\nOFF\n\nI\n\nFigure 4: Hydraulic System for F-111\n\n1 flow-demand-rule\nif T then u.flow.demand = sys.flow.demand/2\nif T then p.flow.demand = sys.flow.demand/2\n2 flowlarge-rule\nif T then u.flow = ul.flow+ur.flow\nif T then p.flow = pl.flow+pr.flow\n\n16 reading-rule\nif u.pressure.status=O\nu.pressure.indicator\nif p.pressure.status=O\np.pressure.indicator\n\nthen\n= u.pressure\nthen\n= p. pressure\n\n17 pressure-indicator-constraint\nif pl.pressure.status=O then\nif pl.pressure>1300 then pl.pressure.indicator=l\nelse pl.pressure.indicator=O\nif pr.pressure.status=O then\nif pr.pressure> 1300 then pr.pressure.indicator=l\nelse pr.pressure.indicator=O\nif ul.pressure.status=O then\nif ul.pressure>1300 then ul.pressure.indicatort1\nelse ul.pressure.indicator=O\nif ur.pressure.status=O then\nif ur.pressure> 1300 then ur.pressure.indicator=l\nelse ur.pressure.indicator=O\n\nFigure 5 : Rules common to ALL Models\n\nFigure 6: Relationships between Models\n\nUse-Neutral to Diagnosis 11 This is a fairly\nstraight forward set of transformations. First the\nassumptions are added (i:e., that the radii are constant). This allows the use-neutral constraints\n(UNC) 4 and 10 in Figure 7 to become coristants\n(;.e., the pipe areas are now constants). The intermediate results computed in UNC 5 ciLn be folded into\nUNC 3 since no other constraint refers to them and\nthey are not tested by a sensor. This gives the set of\nconstraints shown in Figure 9, This highljghts two\ngeneral transformation techniques: compiling constraints into constants ahd folding constraints into\neach other.\n\n360\n\n9 resistance-large-rule\nifT then u.resistance = Ku/ (2 x 3uid .density x u.area2)\nif T then p.resistance = Kp/(2 x fluid .density x p.area2)\n\n9 flow-small-rule\nif ulstatusr0 then\nul.flow 3 u1,areaxfluid.densityxul.velocity\nif ur,status=O then\nur .flow = ur.areax fluid.density x ur .velocity\nif pl.status=O then\npl.flow T pl.areax fluid.densityx pl.velocity\nif pr.status=O then,\npr.flow = pr.areax fluid.density x pr.velocity\nI\n\n4 area-small-rule\nif T then\nif T then\nif T then\nif T then\n\nul.area = n%ul.radius2\nur.arett = nxur.radius2\npl.area c nxpl.radius2\npr.area = nxpr.radius2\n\n5 velocity-ale\nif ul.statusz0 then ul.velocity = Ecxle.rpm\nif ur.statusr0 then ur.velocify = Ecxre.rpm\nif pl.statusr0 then pl.velocity = Ecxle.rpm\nif pr.statusc0 then pr.velocity = Ecxre.rpm\n6 rpm-rule\nif le.status=O then le.rpm 2 Trcfx 1e.throttle\nif re.status=O then re.rpm = Trcfxre.throttle\n7 final-pressure-rule\nif u.flowzu.flow,demand then u.pressure=2930\nelse u.pressure=2930x (u.flow/u.flow.demand)\nif p .flowz p .flow.demand then p .pressure= 2930\nelse p.pressuret293Q x (p.flow/p.flow.demand)\n8 intermediate-large-pressure-wle\nif ul.status=O & ur.statusz0 then\niu.pressure = u.pressure+(u.resistancexu.flow2)\nif pl.status=O & pr.status=O then\nip.pressure == p .pressure+(p xesistancex p .flow2)\n\n10 area-large-rule\nif T then u.area = r x u.radius2\nif T then p.area = nxp.radius2\n11 force-large-rule\nif ul.status=O & ur.status=O then\nu.force = iu.pressurex u.area\nif pl.status=O & pr.status=O then\np.force = ip.pressurexp.area\n12 force-small-rule\nif ul.status=O & ur.status=O then\nu.force = ur.force+ul.force\nif pl.status=O & pr.status=O then\np.force = pr.force+pl.force\n19 intermediate-small-pressure-rule\nif ul.status=O then iul.pressure = ul.force/ul.area\nif ur.statuss0 then iur.pressure = ur.force/ur.area\nif pl.status=O then ipl.pressure = pl.force/pl.area\nif pr.status=O then ipr.pressure = pr.force/pr.area\n\n1.4 pressure-small-rule\nif ul.status-0 then ul.pressure =\niul.pressure+(ul.resistancexul.flow2)\nif ur.status=O then ur.pressure =\niur.pressure+(ur.resistancexur.flow2)\nif pl.status=O then pl.pressure =\nipl.pressure+( pl.resistancex pl,flow2)\nif pr.status=O then pr.pressure =\nipr.pressure+(pr.resistancex pr.flow2)\n15 resisfance-small-rule\nif T then ur.resistance=Kur/(2 xfluid.densityx ur.area2)\nif T then ul.resistance=Kul/(2xfluid.densityx ul.area2)\nif T then pr.resistance=Kpr/( 2 x fluid.density x pr.area2)\nif T then pl.resistance=Kp1/(2 xfluid.densityx pl.area2)\n\nFigure 7 Continued: Use-Neutral Model\n\nFigure 7: Use-Neutral Model\n\n361\n\n9 flowsmall-rule\nif ul.status=O then ul.flow = Rtfccx le.rpm\nif ur.status=O then ur.flow = Rtfccxrexpm\nif pl.status=O then pl.flow = Rtfccxle.rpm\nif pr.status=O then pr.flow = Rtfccxrexpm\n\n4\n\nrpm-rule\nif le.status=O then le.rpm = Trcfx 1e.throttle\nif re.status=O then re.rpm = Trcfxre.throttle\n5 final-pressure-rule\nif u.flow2 u.flow.demand then u .pressure=2930\nelse u.pressure=2930 x (u.flow/u.flow.demand)\nif p.flow2p.flow.demand then p.pressure=2930\nelse p.pressure=2930x (p.flow/p.flow.demand)\n\n6 pressure-small-rule\nif ul.status=O then\nif ul.flow< u. flow .demand12 then\nul.pressure=O else ul.pressure=u.pressure\nif ur .status=O then\nif ur.flow<u.flow.demand/2 then\nur.pressure=O else ur.pressure=u.pressure\nif pl.status=O then\nif pl.flow<p.flow.demand/2 then\npl.pressure=O else pl.pressure=p.pressure\nif pr.status=O then\nif pr.flow<p.flow.demand/2 then\npr.pressure=O else pr.pressure=p.pressure\n\nFigure 8: Diagnosis I Model\n\n3 flow-small-rule\nif ul.status=O then ul.flow = Rtfccxle.rpm\nif ur.status=O then ur.flow = Rtfccxre.rpm\nif pl.status=O then pl.flow = Rtfccx le.rpm\nif pr.status=O then pr.flow = Rtfccxre.rpm\n\n4 rpm-rule\nif le.status=O then le.rpm = Trcfx 1e.throttle\nif re.status=O then re.rpm = Trcfxre.throttle\n5 finabpressure-rule\nif u.flow2 u.flow .demand then u .pressure=2930\nelse u.pressure=2930 x (u.flow/u.flow.demand)\nif p.flow>p.flow.demand then p.pressure=2930\nelse p.pressure=2930 x (p.flow/p.flow.demand)\n\n6 intermediate-large-pressure-rule\nif ul.status=O & ur.status=O then\niu.pressure=u.pressure+( u.resistancex u.flow2)\nif pl.status=O & pr.status=O then\nip.pressure=p.pressure+(p.resistancex p.flow2)\n7 resistance-large-rule\nif T then u.resistance=Ku/(2 xfluid.densityxu.area2)\nif T then p.resistance= Kp/( 2 x fluid .density x p.area2)\n8 force-large-rule\nif ul.status=O & ur.status=O then\niu.pressure = u.force/u.area\nif pl.status=O & pr.status=O then\nip.pressure = p.force/p.area\n9 force-small-rule\nif ul.status=O & ur.status=O then\nu.force = ur.force+ul.force\nif pl.status=O & pr.status=O then\np.force = pr.force+pl.force\n\nFigure 9: Diagnosis I1 Model\n\n362\n\n10 intermediate-smalbpressure- le\nif ur.status=O then iur.pressure = ur.force/ur.area\nif ul.status=O then iul.pressure = ul.force/ul.area\nif pr.status=O then ipr.pressure = pr.force/pr.area\nif pl.status=O then ipl.pressure = pl.force/pl.area\n\nre.throttle\nul.radius\n\nur .radius\n\n11 pressure-small-rule\nif ul.status=O then dpressure =\niul.pressure+( ul.resi.;t ancex ul.flow2)\nif ur.status=O then ur.pressure =\niur .pressure+( ur. resistance x ur .flow2)\nif pl.status=O then pl.pressure =\nipl. pressure+(pl.resistancex pl.flow2)\nif pr.status=O then pr.pressure =\nipr .pressure+ (pr .resistance x pr .flow2)\n\n3 flow-small-rule\nif ul.status=O then\nul.flow = ul.areaxfluid.densityx ul.velocity\nif ur.status=O then\nur .flow = ur .area x fluid.densit y x up. velocit y\nif pl.status=O then\npl.flow = p1.areaxfluid.densityx pLvelocity\nif pr.status=O then\npr.flow = pr.areax fluid.densityx pr.velocity\n\n12 resistance-small-rule\nif T then ur.resistance=Kur/(2 x fluid.densityx ur.area2)\nif T then ul.resistance=Kul/(2xfluid.densityxul.area2)\nif T then pr.resistance=Kpr/(2xfluid.densityxpr.area2)\nif T then pl.resistance=Kpl/(2xfluid.densityxpl.area2)\n\n4 area-small-rule\nif T then\nif T then\nif T then\nif T then\n\nul.area = axul.radius2\nur.area = nxur.radius2\npl.area = axpl.radius2\npr.area = nxpr.radius2\n\n5 velocity rule (small pipe)\nif T then ul.velocity = Ecxle.rpm\nif T then ur.velocity = Ecx re.rpm\nif T then pl.velocity = Ecxle.rpm\nUse-Neutral to Design This is a more complex if T then pr.velocity = Eexre.rpm\nset of transformations; the intermediate constraints\nare shown in Figure 11. First the assumptions are 6 rpm-rule\nadded (i.e., that the pipe resistances are 0). This if le.status=O then le.rpm = Trcfx le-throttle\nallows UNC 9 and 15 t o become constants; these if re.status=O then re.rpm = Trcfx re.throttle\nconstants are replaced in UNC 8 and 14 to pro7 final-pressure-rule\nduce %\' and 14\'. Since 8\' and 14\' are now equalities, if u.flow>u.flow.demand then u.pressure=2930\nthey can be substituted into UNC 11 and 13 and\nelse u.pressure=2930 x (u.flow/u.flow.demand)\nremoved. This produces 11\' and 13\'. Notice that if p.flow>p.flow.demand then p.pressure=2930\neke p.pressure=2930x (p.flow/p.flow.demand)\nthis can only be done since the antecedents of constraints 8\' and 14\' are implied by the antecedents of\nconstraints UNC 11 and 13 (this type of requirement 8 pressure-small-rule\noccurs throughout these transformation sequences). if ul.status=O then\nif ul.3ow<u.flow.demand/2 then\nul.pressure=O else ul.pressure=u.pressure\nThe assumptions that the left and right pipes\nif ur.status=O then\nfor each subsystem have equal sizes and that the\nif ur.flow<u.flow.demand/2 then\npipes out of each subsystem are twice the size of\nur.pressure=O else ur.pressure=u.pressure\nthese inflow pipes are added; transforming 13\' into if pl .status=O then\n13". The constraint 11\' is now substituted into the\nif pl.flow<p.flow.demand/2 then\nconstraint UNC 12 and removed; producing 12\'. The\npl.pressure=O else pl.pressure=p.pressure\nconstraint 12\' is substituted into the constraint 13" if pr.status=O then\nif pr .flow< p .flow.demand12 then\nand removed; producing 13\'". At this point UNC\npr. pressure=O else pr. pressure=p. pressure\n10 can also be removed2. The assumption that the\nforces through the left and right modules of each\nsubsystem are equal is added. This allows the inFigure 10: Design Model\n\nFigure 9 Continued: Diagnosis I1 Model\n\n363\n\n8\' intermediate-large-pressure-rule\n\nif ul.status=O & ur.status=O then\niu.pressure = u.pressure\nif pl.status=O & pr.status=O then\nip.pressure = p.pressure\n14\' pressure-small-rule\nif ul.status=O then ul.pressure = iuLpressure\nif ur.status=O then ur.pressure = iur.pressure\nif pl.status=O then pl.pressure = ipl.pressure\nif pr.status=O then pr.pressure = ipr.pressure\n11\' force-large-rule\nif ul.status=O & ur.status=O then\nu.force = u.pressurex u.area\nif pl.status=O & pr.status=O then\np.force = p.pressurex p.area\n13\' intermediate-small-pressure-rule\n\nif ul.status=O\nif ur.status=O\nif pl.status=O\nif pr.status=O\n\nthen ul.pressure = ul.force/ul.area\nthen ur.pressure = ur.force/ur.area\nthen pl.pressure = pl.force/pl.area\nthen pr.pressure = pr.force/pr.area\n\n13\'\' intermediate-small-pressure-rule\n\nif ul.status=O\nif ur.status=O\nif pl.status=O\nif pr.status=O\n\nthen uLpressure = (2*ul.force)/u.area\nthen ur.pressure = (2*ur.force)/u.area\nthen pl.pressure = (2*pl.force)/p.area\nthen pr.pressure = (2*pr.force)/p.area\n\n18\' force-small-rule\nif ul.status=O & ur.status=O then\nu.pressurex u.area = ur.force+ul.force\nif pl.status=O & pr.status=O then\np.pressurex p.area = pr.force+pl.force\n\n13"\' intermediate-small-pressure-rule\nif ul.status=O then ul.pressure =\n(2*ul.force)/(( ur.force+ul.force)/u.pressure)\nif ur.status=O then ur.pressure =\n(2*ur.force)/( (ur .force+ul.force)/u.pressure)\nif pl.status=O then pl.pressure =\n(2*pl.force)/(( pr.force+pl.force)/p.pressure)\nif pr.status=O then pr.pressure =\n(2*pr.force)/( (pr.force+pl.force)/p.pressure)\n19"" intermediate-small-pressure-rule\nif ul.status=O then ul.pressure = u.pressure\nif ur.status=O then ur.pressure = u.pressure\nif pl.status=O then pl.pressure = p.pressure\nif pr.status=O then pr.pressure = p.pressure\n\nFigure 11: Intermediate Constraints\n\ntermediate values computed in 12\' to be removed3\nand 13\'" is transformed into 13"". The last two assumptions added are that the flows for each module in a subsystem are equal and that the pressure for each module is either 0 or its maximum\nvalue (Le., 2930) which alters 13\'"\' into constraint\n8 of the design model (see Figure 10). It is important to note that for the task-specific knowledge\nbase to be consistent some of the assumptions have\nto explicitly remain (i.e., they cannot be totally\ncompiled into the previous constraints). These assumptions are not explicitly shown in our models.\nFor instance for the Design model the assumptions\nwhich are not totally compiled are ul. areu=ur. urea,\npl.awa=pr.areu, ul.force=ur. force, pl.force=pr. force,\nul.pressure = 2930 V ul.pressure = 0, ur.pressure\n= 2930 V ur.pressure = 0, pl.pressure = 2930 V\npl.pressure = 0, pr.pressuw = 2990 V pr.pressure\n= 0.\n\nConsistency versus Pre-defined KB If a predefined knowledge base is added to the system a\nchoice must frequently be made. Either the transformations are applied consistently given a specific\nset of assumptions or they are partially applied so\nas to retain the exact representation of the original knowledge base. When the latter is chosen, the\ninconsistent application of the transformations can\nallow the knowledge base to be inconsistent. The\ninconsistent application of transformations can be a\nflag highlighting these inconsistencies and bringing\nthem to the attention of the creator of the knowledge base. For instance in the Diagnosis I model\nshown in Figure 8, constraints 5 and 6 are inconsistent with each other. This occurs because the\nassumption that the pressure for each module is either 0 or the maximum is compiled into constraint\n6 but not into constraint 5. This inconsistency was\npreserved so as to achieve the exact representation\nof the original pre-defined set of constraints for Diagnosis I. The use of our technique highlighted this\ninconsistency which was not noticed before. Even\nif the transformations are applied consistently, the\n3Since the force variables are not input or appear in any\nother formulas, this formula can only be used to determine\nvalues for these forces. And since these forces are never sensed,\nthere is no need to retain the constraints.\n\n364\n\nderived knowledge base is not necessarily consistent\nwith the original one. But it is consistent modulo its\ninitial input (i.e., the use-neutral knowledge repository, assumptions made, and transformations used).\n\n6.3\n\nAssociational Rules\n\nAn algorithm for generating an associational knowledge base for diagnosis was demonstrated. Figure 12\nshows a rule for the Diagnosis I model. The associational rules were derived using a back-propagation\nalgorithm over the results of a model-based reasoner.\nFor instance the previous rule was derived when the\nsymptom ur.pressure.status = I & ur.pressure.status\n= 0 and fault ur.pressure. indicator were discovered\nby a model-based reasoner. The symptom was backpropagated over the constraints associated with each\ncomponent. When the result is totally in terms of\nthe primitives of the model-base reasoner, then the\nback-propagation terminates and the resulting expression is the antecedent of the associational rule.\nThe rule in Figure 12 was more precise than the rule\nderived for the same scenario by the person who created the model-base reasoning model.\nif ur.pressure.status.reading=l&ur.pressure.status=O&\nle.status=O&re.status=O&ul.stat us=O&ur.status=O&\n[(Rtfccx n c f x (le.throttle+re.throttle))>\n(0.22x sys.flow.demand)]&\n(Rtfccx Trcfx re.throttle)>=.25x sys.flow.demand\nthen faulty(ur.pressure.indicator)\n\nThere are several problems with this method of\nupdating. The transformations should be applied incrementally after an update. Instead of reprocessing\nthe entire knowledge repository, only the pertinent\nsubportions are reprocessed. This is very difficult,\nbecause an update may cause another piece of knowledge in the repository to be transformed differently.\nAlso transformations might be applicable where they\nwere not applicable before the update. Even more\ndifficult is the requirement that no other transformations (outside the set which were applied before\nthe update) are applicable now. Further a change to\nthe repository might make the old transformations\ninvalid. When this happens the knowledge repository might no longer be able to reach the existing\nrepresentation of the knowledge base anymore.\nHandling updates is a hard problem, but classes\nof updates can be defined which are guaranteed to\ntransform correctly. We must explore updates in\nmany domains so as to define this class.\n\n6.5\n\nFigure 12: Associational Diagnosis Rule\n\n6.4\n\nof its relationship to force. The transformations determine that this concept is irrelevant for these tasks\nand derive the same set of knowledge bases as before.\nThen a second update removes force. After this update the transformations produce knowledge bases\nwhich use work divided by distance as a replacement\nfor force in all the pertinent constraints.\n\nUpdates\n\nThis methodology is most beneficial when updates\nare performed on the use-neutral knowledge repository and then propagated to the pertinent knowledge bases. We explored the propagation of updates\nby running the entire updated knowledge repository\nthrough the same transformations again to derive\nthe changes to the knowledge bases. Two specific\nupdates were explored in depth. The first adds the\nnotion of work to the knowledge repository in terms\n\nCreating a Knowledge Repository\n\nThe research done in this area was very preliminary in nature. Given several pre-existing knowledge\nbases which contain overlapping knowledge, the generation of a knowledge repository can be partially\nautomated. Their knowledge is compared and the\nmost primitive components of the knowledge bases\nare used to create the knowledge repository. This\ncan be done via partial matching as follows. Given\ntwo knowledge bases, a l those rules which are an\nl\nexact match are automatically placed in the useneutral repository. For pairs of rules which score\nhigh on the partial match, assumptions are hypothesized which allow one of the rules to be transformed into the other. At this point user intervention could avoid nonplausible assumptions. The\nuse-neutral repository is constructed from the knowl-\n\n365\n\nedge base rules to which assumptions were added to likely not to fire and other necessary transformations\nreach other rules. The complexity of this technique are likely to be missing, but the hypothesis is that a\nincreases with the number of knowledge bases, but good first cut at a knowledge base is generated.\nthe number of high scoring partial matches increase\nThe next logical step in this research is to iminversely.\nplement these ideas so as to test them in several\nNotice that this technique relies on one rule be- domains. To explore the update question in depth,\ning an abstraction of another. This methodology will a more complex domain is necessary. We are looknot work when none of the knowledge bases have the ing for a NASA domain which meets these requiremost primitive knowledge, but instead are all slightly ments. More work is needed on the initial derivation\ndifferent abstractions of this knowledge. For in- of the knowledge repository and on transformations\nstance, assume the primitive knowledge is A=Bx @. between multiple problem solvers. Transformations\nIf one knowledge base had A=U and the other knowl- based on approximations (as well as abstractions)\nedge base had A-lUOxB, then the system will not and the handling of inverse updates (i.e., updating\nbe able to hypothesis the primitive knowledge on a knowledge base which is then propagated up to\nits own. It assumes that A=BxC was the primi- the knowledge repository and then back down to the\ntive knowledge using the assumptions that C=U or other pertinent knowledge bases) should be explored.\nC=1UU. There is no reason for it to choose the\nmore complex (and in this case correct) set of assumptions. Either a person must aid the derivation\n8 Summary\nof the knowledge repository or another knowledge\nsource containing general purpose primitive knowledge (e.g., a fluid dynamics knowledge seed) must In the life cycle of complex devices (i.e., the docking\nbe brought to bear. If the knowledge bases repre- bay door of the space station) , there are many prosentations are too different the system also fails. For cesses (e.g., design, process planning, and diagnosis)\ninstance comparing the notion of equalitaral-triangle that can be partially automated by knowledge-based\nand triangle-where-all-the-sides-are-equal-length.\nsystems. As these knowledge-based systems proliferate, the overlap of knowledge amongst these sysWe must explore more domains, to determine\ntems leads to increased knowledge management costs\nwhat techniques will be useful in which situations.\n(e.g., consistency and configuration management).\nA knowledge repository capable of feeding multiple knowledge-based systems is one solution. However, it is critical that knowledge in the repository be\n7 Future Research\nstored in a use-neutral format and then transformed\ninto representations that are tailored for specific uses\nExploration of this technology\'s capacity for gener(e.g., design). This explicit decomposition of knowlating new knowledge-based systems is needed. First\nedge into a use-neutral corpus, knowledge transforcuts at totally new knowledge bases can be genmations on that corpus, and use-specific knowledge\nerated. For instance assume that a design knowlthat is not shared by multiple systems, is useful not\nedge base for a device A and a diagnosis knowledge\nonly in maintaining existing knowledge-based sysbase for a device B are presently connected to the\ntems, but also in generating initial versions of enknowledge repository, we need to derive a diagnostic\ntirely new systems.\nknowledge base for device A. The same knowledge\nabout the device used in deriving the design knowlWe have developed a use-neutral representation\nedge base should be used, but it should now be trans- of an hydraulic system for the F-111 airplane. We\nformed for a diagnostic task. To derive a first cut at demonstrated the ability to derive portions of four\nthis knowledge base the knowledge concerning device different knowledge bases from this use-neutral repA can be run through the set of transformations pre- resentation: one knowledge base is for re-design of\nviously used on device B. Some transformations are the device using a model-based reasoning problem\n\n366\n\nsolver; two knowledge bases, at different levels of\nabstraction, are for diagnosis using a model-based\nreasoning problem solver; and one knowledge base is\nfor diagnosis using an associational reasoning problem solver. T h e use of our technique highlighted\ninconsistencies which were not noticed before. The\nassociational rules derived were more precise than\nthe rules derived for the same scenarios by the person who created the model-base reasoning model.\nWe have shown how updates issued against the single source use-neutral knowledge repository can be\npropagated to the underlying knowledge bases. We\nhave also shown a plausible methodology for generating the knowledge repository given a set of preexisting knowledge bases.\n\n[7] D. Lenat and R.V. Guha. The world according to cyc. Technical Report ACA-AI-300-88,\nMCC, 1988.\n[8] M.R. Lowry. Category Theory and Homomor-\n\nphic Abstraction. In Proceedings of the Change\nof Representation and Problem Reformulation\nWorkshop, Price Waterhouse, 1990.\n[9] P.J. Riddle. Automating Shifts of Representation. In P. Benjamin, editor, Change of Representation and Inductive Bias. Kluwer, 1989.\n\n[lo] P.\n\nRothman. Knowledge Transformation. A I\nExpert, 1988.\n\n[ll]R.A. Stachowitz and J.B. Combs. Validation of\nExpert Systems. In Proceedings of the Twenti-\n\neth Hawaii International Conference on System\nSciences, Kona, Hawaii, J a n u a r y lW7.\n\nReferences\n\n[\'I\n\nVan\nAutomated\nOf\nized\nIn Proceedings O f the\nChange of Representation and Problem Reformulation Workshop, Price Waterhouse, 1990.\nJ\'\n\n[12] D. Subramanian. A Theory of Justified ltcformulations. In Proceedings of the Change of Representation and Problem Reformulation Workshop, Price Waterhouse, 1990.\n\n[13] B. Thuraisingham. From Rules to Frames and\n[2] R. Davis. Diagnostic Reasoning Based on StrucFrames to Rules. A I Expert, 1989.\nture and Behavior. Artificial Intelligence, 24,\n1984.\n[14] A. Unruh and P.S. Rosenbloom. Abstraction\nin Problem Solving and Learning. In Proceedings of the Eleventh International Joint Confer[3] N.S. Flann. Learning Appropriate Abstractions\nence on Artificial Intelligence, Detroit, Michifor Planning in Formation Problems. In Progun, pages 681-687. IJCAI, Morgan Kaufmann,\nceedings of the Sizth International Conference\nAugust 1989.\non Machine Learning, Ithaca, New York, pages\n235-239. Morgan Kaufmann, 1989.\n\n[15] D.S. Weld. Discrepancy Driven Selection of\nApproximation Reformulations. In Proceedings\n[4] T. Gruber and U. Iwasaki. How things work\nof the Change of Representation and Problem\nKnowledge-based modeling of physical devices.\nReformulation Workshop, Price Waterhouse,\n[5]\n\n1990.\nModel Compilation: An Approach t o Automated Model Derivation. In Pro- [16] B.C. Williams. Interaction-based invention:\nDesigning novel devices from first principles. In\nceedings of the Change of Representation and\nProceedings of the Eighth National COnfernce\nProblem Reformulation Workshop, Price Waon Artificial Intelligence, 1990.\nterhouse, 1990.\n\nR.M. Keller.\n\n[6] C.A. Knoblock. Learning Problem-Specific Abstraction Hiearchies. In Proceedings of the\nChange of Representation and Problem Reformulation Workshop, Price Waterhouse, 1990.\n*US. GOVERNMENTPRWTINGOFFICE: 1 9 9 1\n\n367\n\n-\n\n5 27- 0 6 6 2 6 0 1 7\n\n'