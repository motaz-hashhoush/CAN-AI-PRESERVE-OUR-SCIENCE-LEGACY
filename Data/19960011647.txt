b'96- 18083\nA STRUCTURED MULTI-BLOCK SOLUTION-ADAPTIVE MESH ALGORITHM\nWITH MESH QUALITY ASSESSMENT\nClint L. Ingram, Kelly R. Laflin, and D. Scott McRae\nNorth Carolina State University\nRaleigh, NC\nSUMMARY\nThe dynamic solution adaptive grid algorithm, DSAGASD, is extended to automatically adapt\n2-D structured multi-block grids, including adaption of the block boundaries. The extension is general, requiring only input data concerning block structure, connectivity, and boundary conditions.\nImbedded grid singular points are permitted, but must be prevented from moving in space. Solutions\nfor workshop cases 1 and 2 are obtained on multi-block grids and illustrate both increased resolution\nof and alignment with the solution. A mesh quality assessment criteria is proposed to determine how\nwell a given mesh resolves and aligns with the solution obtained upon it. The criteria is used to evaluate the grid quality \xe2\x82\xacor solutions of workshop case 6 obtained on both static and dynamically adapted\ngrids. The results indicate that this criteria shows promise as a means of evaluating resolution.\nINTRODUCTION\nIt is generally agreed that a geometry conformal structured mesh topology has demonstratable\nadvantages for use in the numerical simulation of high Reynolds number viscous flows. However,\nthe generation of geometry conformal structured meshes over complex shapes has proven to be a\ndifficult task for two reasons: it is difficult to produce multiple block grids automatically that provide\nthe necessary structured-mesh topology around the shape, and the grid must provide resolution of\ncomplex shear layers, shock waves, slip surfaces, etc. when the final location and extent of these\nfeatures is not always known. Current research is underway to overcome the first difficulty, and is\nshowing promise that multiblock structured meshes can be generated automatically.\nIt is the purpose of the present research to complement these advances by developing a means of\nadapting dynamically the initial structured mesh to the solution as it evolves, so that the features\nnoted above plus any other chosen will be resolved automatically without laborious pre-clustering.\n\nA brief review of the technique developed by Benson and McRae (refs. 1 to 4) for dynamic\nadaptation of 2-D and 3-D single block grids will be followed by a description of the extension of the\ndynamic adaptation algorithm to 2-D multi-block grids, including the adaptation of block boundaries\n(refs. 5 and 6) In all of the implementations of the solution adaptation algorithm presented herein,\nthe terms which correct the final solution for cell volume variation with time have been included in\nthe formulation. This ensures that temporal accuracy is preserved as the mesh translates to resolve\nmoving features of the solution.\nFinally, the question of cell shape (;.e., skewness, aspect ratio, etc.) effect on the solution has been\na continuing issue for discussion among those who must defend the results obtained using structured\nmeshes. An effort is presently underway to identify the errors which result from the interaction of the\n\nnumerical algorithm with the mesh, including cell shape and mesh movement. Preliminary results\nfrom this research are included.\n\n181\n\nNUMERICAL PROCEDURE\nConservation Law\nConservation laws \xe2\x82\xacorm the basis of our study of compressible fluid fiow considered as a continuum.\nSince the volume over which conservation is being enforced can change independently, it is appropriate\nto examine briefly how these laws are obtained.\n\nA conservation law results from the concept that a quantity or property may be physically conserved in both time and space. The mathematical definition of a conservation law results when the\ntime rate of change of some quantity B summed over a given volume is shown to be equal to a\nquantity r, or\n\n5 Jv B d V = r .\ndt\nIn this application, 3 is either the density, linear momentum, or total energy. Applying the theorem\nof Leibnitz to the equation, two integrals result, one to account for the time rate of change of B\nsummed over the volume and one for the motion of the boundary, i.e.\n\nd\n\ndt\n\n1\nv\n\nBdV = J, g d V\n\n+\n\nB(3 - ds\'=\n\nr.\n\nIt is common practice to assume the region or volume is not changing with time but only translating\nin space at the local fluid velocity. This is equivalent to assuming that the total mass is constant or\nthe volume is "material." with this assumption, (3 becomes the local fluid velocity and thus,\n\nEquation 3 is easily reduced to the familiar form of the conservation laws, which are correct only if the\nvolume of interest is fixed in magnitude or material. However, if the volume is allowed to expand or\ncontract independently in time, then the volume boundaries no longer move at the local fluid velocity\nand a new relationship for (3 must be determined (ref. 7).\nConsider a one-dimensional flow where the boundary of a region is moving with speed 5 and the\nfluid is moving at a velocity u. In this case, the fluid-surface interface velocity is u - x, which is the\nvelocity that should be used in the surface integral resulting from Leibnitz\'s Rule. Substituting the\ncorresponding definition of (3 for a three-dimensional volume into Equation 3 results in\n\n-dV\n\n-\n\nf B (x i + y 3 + i i)ds\'+ f B ( u P + v 3 + w i)ds\'= r,\n1\n\nS\n\nS\n\n(4)\n\nwhich is the correct statement of conservation for an arbitrary volume allowed to expand or contract\nin time.\n\nIf\n\nr, defined to ensure closure of the conservation laws, is substituted into Equation 4Tand B is\n\nredefined to be the vector of properties that are conserved in fluid flow,\nfamiliar form of the conservation equations can be written as:\n\n182\n\nU =\n\n[ p , p ~ , , a~ more\n~\n]\n\n4\n\nA is a vector containing the flux components in the Cartesian frame, E\nspeed at which the surface is expanding or contracting, i E y 3 + i f .\n\n+\n\n+ F 3 + G iand 5 is the\n\nThe second term accounts for the amount of U entrained or lost as a result of the change in volume\nover time, where s\'is the product of the surface unit normal vector and the surface area, and is the area\n,\n,\nof the projection of the given surface into the three spatial coordinate axes, i.e. s\' = s + sy + s i.\n\n3\n\nDiscretizing Equation 5 for a generic hexahedron changing in time from the nth to the nth+l time\nlevel,\n\nModified Runge-Ku t t a Algorithm\nThe Navier-Stokes equations, plus the continuity and energy equations, are integrated in time\nusing an explicit, multi-stage Runge-Kutta algorithm (ref. 8). The inviscid fluxes are described using\nthe Advective Upwind Split Method of Liou and Steffen (ref. 9) and extended to higher-order spatial\naccuracy using MUSCL differencing and the van Albada and MINMOD limiters (refs. 10 and 11). For\nthis work, a two-stage Runge-Kutta scheme will be utilized. The coefficients for each of the stages\nare a\' = f and cy2 = 1, which results in a second-order accurate scheme in time.\nAlthough the changes in cell volume are independent of the time-advancement scheme, the manner\nin which this term is implemented is not independent and may decrease temporal accuracy. When\nthe explicit Runge-Kutta algorithm is integrated as a single step, including the cell volume variation\nterm, the mesh movement is at the n - 1 level (A"-\'V) and is based on mesh movement due to the\nprior time step. In an attempt to more closely couple mesh movement and solution, the Runge-Kutta\nalgorithm is split into two steps. The first step integrates the terms in Equation 6 above which do not\ninvolve the A V term and can thereby be considered "steady" terms. The terms that involve AV, and\nthereby necessary to preserve temporal accuracy, are integrated in the second step of the procedure.\nSplitting the algorithm permits adaptation of the mesh based on weight functions determined from\nthe steady portion of the integration. The second step of the integration algorithm is then applied to\ncorrect the solution for mesh movement to the n+ 1 time level. In the present work, the correction for\nmesh variation is first, thereby being equivalent to a first order interpolation of the steady solution\nto the new grid location. This algorithm is detailed below.\nThe modified, two-stage, time-advancement scheme that results from splitting the equations into\na "steady" and an "unsteady" portion is as follows:\nStage\n\ni:\n\nEquation 7, the first step of the modified scheme, represents the advancement of the simulation in\ntime for a static or non-moving mesh. In the definitions of the fluxes, s\' is evaluated at the nth time\nlevel. The next step is to redistribute the nodes in the mesh using the method detailed below with\n\n183\n\nweight functions based on the solution at time level (2) obtained with the above equation. Finally, the\ntime varying volume portion of the equations is used to advance the solution vector to the new mesh\nlevel by taking into account the amount of U that is entrained/lost by the expansion/contraction of\nthe volume. This step is equivalent to correcting the convective velocity for a moving mesh. The\nequation used has the same form as the Runge-Kutta algorithm.\n\n(UV)"+*=\n\n+ {At (U(2)A"V) A,, (U(\')A"V) + A , (U(*)A"V)>\n+\n\nIn Equation 8, the terms AnV represent the change in volume between the nth and nth+l time level.\nADAPTIVE ALGORITHM\nThe adaption process, to ensure resolution of solution features as they translate and evolve, takes\nplace between the split steps of the integration scheme. Weight functions are based on the first stage\nof the integration scheme. A center of mass scheme is then used to relocate the points in a transformed\nparametric space. A straightforward truncation and interpolation scheme is used to determine the\nnew location in physical space corresponding to the new parametric coordinates. An overview of\nthese steps follows.\nWeighting Function\nThe primary goals of an adaptive procedure must be to improve solution accuracy. A by-product\nof increased accuracy should be the ability to locate, identify and determine the extent of all features\nof the solution with increased certainty. A conventional examination of the truncation error of discrete\nintegration techniques results in an infinite series of terms consisting of derivatives of the dependent\nvariables multiplied by functions of the discrete spacing.\nIn general, these truncation error terms are large near discontinuities and rapidly changing regions\nin the flow. Therefore, it was decided to use the difference of the dependent variables as the basis\nfor a suitable clustering function. Higher differences (usually second) may also be used if sufficient\nnodes are available to resolve them. The weight function is formed using a linear superposition of\nthe differences where (7k is a biasing coefficient, (bk is the magnitude of the gradient, and k indicates\na given flow variable. The maximum value of the difference for each flow variable varies, so a second\ncoefficient will be introduced to scale the respective gradients thereby insuring the desired weighting\n(usually equal peak values) before biasing. The complete weighting function is then determined by:\n\nIn order to provide automated control of the degree of adaption, an average weight function\nis first determined along each coordinate line. This weight function is then limited according to\npredetermined functions of this average:\n\nAfter limiting, the weight function is then smoothed to control cell skewness. For the baseline\nweight-ing function, biasing coefficients, percentage values, and ratios are input at the beginning of\nthe program. The remainder of the process occurs without user interaction.\n\n184\n\nTransformation To Parametric Plane\nUsing a similar idea to that used for obtaining a computational space for a single block grid,\nphysical space can be mapped into a separate parametric space. The mapping is general and the\nstandard requirements for one-to-one correspondence of grid-points and smooth mesh lines are maintained, thereby guaranteeing an inverse transformation. This initial trasnformation between physical\nand parametric space remains fixed during the computation and is used as a reference for remapping\nthe changed grid locations into physical space after adaption. "Fixed" in this instance means that\nthe original transformation does not change with time. The reason for performing the adaption in\na parallelepiped in parametric space is twofold: intricate boundaries in the physical space will map\ninto a plane in the parametric space, and a simple equation results for remapping the adapted parametric space into corresponding new locations in physical space. Adaption in parametric space will\ndetermine new values of [, 7 , and C for each node. The next step is to determine which metrics of\nthe original transform must be used to map the new node locations (t,q, and C ) to physical space\nsuch that the original transform is preserved. This maintains the ordering of the grid-points in both\nspaces.\nSince the original mapping defines a parallelepiped in the parametric space and A[=Aq=A(=l\nby definition, the original nodes or grid-points are located at integer values which correspond directly\nto the i , j , k which are used to reference the arrays.\n\ni n t ( r ,qo,so) = i, j , k\n\n(11)\n\nAdaption takes place in the parametric space, after which a mapping to determine the new x, y,\nand z locations from the new E, 7 , and C positions must be obtained. This process begins with a\ndiscrete approximation to the differential dx:\n\n+\n\nAX = x ~ A [ ",,A77\n\n+ x,A(\n\n(12)\n\nSince the approximations to the differentials in the above equation are just differences, they are chosen\nto be the new mesh node location, referenced with i , j , k , minus a nearest original position, denoted\nwith the superscript O . The metric derivatives are also identified with the superscript O , since the\ntransform is only determined initially.\n\nIf the point at i, j, k is moved to a new position in the parametric space, the corresponding new\nposition in the physical space must be determined. The vertex of the cube of the original parallelepiped\nthat contains the new [, 7 , ( position and is nearest the origin of the parametric mesh can be found\nby rounding these values down to integers.\n\nThe vertex of the cube of the original parallelepiped that is closest to the new\ngiven by the nearest integer function:\n\n6, q , C position is\n\n+\nmn = nint(qi,j,k) = m + 1\nIn = nint([i,j,k)\n\n1 1\n\nnn = nint(C;,j,k) = n\n(15)\nRecall that q, and [ were defined to be integers that corresponded directly to the reference coordinates i , j , k and therefore, the values defined in Equations 14 and 15 correspond directly to the array\npositions for x, y, and z of the original grid-point at those respective vertices.\n\nc,\n\nThe metrics, xe, xT, and xc, are appoximated such that they represent the distance between\nadjacent nodes in the t-,77-, and [-directions. The metrics are stored in arrays as forward differences\nand therefore, they are based at the point 1, Tnn, nn for the [-direction, Zn,m, nn for the 77-direction,\nand Zn,mn,n for the (-direction. By using the integer value of In in place of [\' in Equation 13, this\nwill subtract the distance zz(( if [i,j,k is closer to the (-axis than the nearest original point and\n1\nadd the distance if (i,j,k is greater than the nearest original point. The result is similar for \' \' and\nTherefore, a final expression for the new value of x in the physical space is:\n\ne)\n\nZ:j,k\n\n= zon,mn,nn -k x&,,n,nn (!i\n\'&&\n\ne.\n\n- In> -k x;(n,m,nn\n\n(%,j,k\n\n- mn>-k x ~ ~ n , m n ,(Ci,j,k - nn),\nn\n\n(16)\n\nwhich is a Taylor series expansion in three dimensions utilizing the initial grid as a reference grid.\nSimilar equations can be derived for y and z , by substituting for x.\nThe above can be shown to preserve the original boundary shape. Choosing the boundary where\nV=const=l., note that a term drops out of Equation 16 leaving\n5:j,k\n\n= x:n,mn,nn -k S~l,mn,nn (ti,j,k\n\n-k\n\nzzln,mn,n\n\n(Ci,j,k - nn>.\n\n(17)\n\nThis maps into the surface in the physical space that corresponds to the original boundary on which\nq;,j,k=constant.\nAdaption Procedure\nWith exceptions noted below for multi-block grids, per\xe2\x82\xacorming the adaption in parametric spaces\nallows the restrictions on movement in the method of mean-value relaxation (ref. 12) and the method\nof minimal moments (refs. 13 and 14) to be removed.\nConsidering the grid-points to be point masses with the weighting function analagous to the mass,\nthe location of the center of mass can be determined for the computational cell in three dimensions\nas:\n\nThis determines the movement of the point at i , j , k to a localized center of mass. This calculation\nis repeated for every point in the parametric domain with the boundaries being calculated using a\nreduced stencil. The grid points are locally redistributed until the entire grid of weights is globally\nat rest or has moved the desired amount.\n\n186\n\nFor single-block grids, adaption in parametric space effectively eliminates crossover of mesh lines\nif the initial grid is generated by an elliptical grid generator. Crossover will result only when the\ncenter of mass of the stencil is outside of its original domain, which is most likely to occur at concave\nboundaries. These boundaries are not present in parametric space for single block grids.\n\nImplementation OF The Algorithm\nThe adaptation algorithm is utilized in the following way: the transform and inverse transform\nfor mapping the physical space into the parametric space is computed initially; the first part of the\nintegration step on the governing equations is completed; the grid is adapted based on the solution\nfrom that step; the second step of the integration is performed; the transformation \xe2\x82\xacor the governing\nequations is recomputed; and the process starting with the integration step is repeated until the\ngrid reaches a steady-state or until a total time in the solution evolution is reached. When the\ngrid reaches a steady-state, this implies that only small changes are occurring in the flow variables\nthat cause small changes in the weight function distribution. The grid motion is then ended and\nthe simulation continues on the static adapted grid until the desired flow convergence is obtained.\nAlthough the algorithm was developed to be a dynamic solution-adaptive method, it can also be used\nas part of a grid refinement study. The first step is to run a simulation to convergence on an initial\ngrid. Using the adaptive algorithm, the grid-points of the original grid are relocated based on the\nsolution, which is interpolated to the new grid as part of the algorithm. The simulation is rerun using\nthe clustered mesh as the initial grid. This can be repeated until the desired resolution is attained.\n\nM ULTI-BLOCK GRIDS\nThe multi-block solver/adaptor scheme is designed to accomodate general multi-block geometries\nand permit the application of the solution-adaptive mesh algorithm to structured, multi-block initial\ngrids by specifying only the block connections (refs. 5 and 6). Therefore, the coupling of the multiblock solver with the multi-block solution-adaptive mesh algorithm allows dynamic adaption for flows\nover complex structures for which single-block meshes are inadequate.\nIn this case, effective adaption without a priori knowledge of the flow requires that the block\nboundaries be adapted in addition to the interiors. This implies that new mesh locations from one\nblock can move on to the fixed reference locations of an adjacent block. Logic must, therefore, be\ninstalled to maintain overall connectivity and continuity of the adapted grids as this occurs.\nThe block connectivity is governed by a set of specified block splicings. The block splicings can be\ndefined by any of ten possible combinations. That is, any block side can connect to any other block\nside. The only limitation is that both blocks of a splicing must contain the same number of mesh\ncells in the direction along the splicing. Each block may have its own orientation ((, Q direction).\nTherefore, there may not be a global E,.Q direction. This feature not only allows the solver/adaptor\nto handle more complex grid structures in which a global 6, 9 direction is not possible, but also allows\nimbedded singular points to reside in the grid domain. These splicings are defined in an input file\nalong with the dimensions and boundary conditions of each block. The grid-blocks are read in as\nseparate files, and can be generated using GRIDGEN or any other appropriate grid generator.\nMULTI-BLOCK SOLVER\nThe extension of the solver to a multi-block grid is straightforward. Each block of a grid is\ntreated as a separate domain and boundary conditions enforce propagation of data from adjacent\n\n187\n\nblocks or boundaries. Conditions along splice block boundaries are determined by continuity with\nadjacent blocks. Reference 6 describes the procedure and illustrates how the process provides a known\nboundary condition along the splices of the blocks in both directions. This process is dubbed a splice\nboundary condition and is performed at the same time that all other boundary conditions (viscous\nwall, free stream, etc.) are enforced.\nMULTI-BLOCK ADAPTOR\nThe adaptive algorithm is extended to include adaption in complex multi-block domains with\ndynamically adapted block boundaries. The extension of the adaptor to multi-block grids is not as\nstraightforward as the overlay approach above.\n\nFor multi-block configurations, the conditions for grid point movement lead to three primary\ntypes of outer block boundary and splice block boundary intersections. Reference 6 describes these\nintersections in detail. Points are constrained from movement around outer 5, 71 corners in the\nparametric space. However, the splice boundary/outer boundary intersection of two adjacent blocks\ncan move along the outer boundary, which allows adaptive movement of the splice boundary. One\nexception to movement of a splice boundary/outer boundary intersection occurs when more than one\nsplice boundary intersects an outer boundary at the same point. This results in a concave corner\nin the parametric space and can cause crossover of grid lines if movement of such a point is allowed\nwithout special provision. Adaption of the block boundaries while preserving the original structure .\nof the mesh leads to these criteria:\n1. Points can move from one original transformed block to another. Therefore, the new mesh point\nlocations must be determined, no matter which of the original transformed blocks they fall in.\n\n2. Physical boundary conditions must be specified based on current mesh point location.\n\n3. Crossover of grid lines near concave corners in the parametric space must be prevented.\nModifications to the adaptor are made to meet these criteria. Logic is added to determine the locations\nof points that move into other blocks and to insure that the boundary points acquire or retain the\ncorrect boundary condition representation. These processes are also detailed in Reference 6 .\nAs noted previously, a center of mass scheme may result in crossover in the vicinity of concave\nboundaries. This does not occur in the parametric space for single block grids since no concave\nboundaries exist. When the method is extended to multi-block grids, concavities may be unavoidable\nin parametric space. The movement of the corner point, itself, can be easily limited by fixing its location at the concave corner. By locally restricting grid point movement near the concavity, crossover\ncan be prevented. This is done by requiring mesh lines in the vicinity of the concavity to follow a\nvon Neumann condition. The slopes of the lines at the concavity are set to be normal and change\nlinearly to the slope defined by the adaption criteria at a set number of nodes away.\nMULTI-BLOCK BOUNDARY CONDITIONS\nBoundary conditions are coded generally as a set of options for defining any block boundary.\n\nFor the transonic 0012 airfoils, four options are required. The block boundaries representing the\nfar field inflow are assigned freestream density and velocity values and obtain the pressure values\nfrom the integration of the appropriate compatabity relation. The block boundaries representing the\nfar field outflow are assigned freestream pressure values and obtain the density and velocity values\nfrom the integration of the appropriate compatibity relations. The block boundaries representing the\nsurface are assigned entropy corrected inviscid wall conditions as described in Reference 15. The final\nboundary condition is the block splice boundary condition described above.\n\n188\n\nMESH QUALITY ASSESSMENT\nThe quality of a computational mesh is generally considered to be important to both the convergence and accuracy of a computational solution. Distorted mesh cells, e.g., those stretched and/or\nskewed, may cause significant errors in the developing solution. In addition, mesh cells whose sides\nare not aligned with local flow velocities or discontinuities can also cause inaccuracies. When adaptive\nmesh redistribution is used, the mesh is deformed automatically as the solution progresses. Therefore,\ndistorted cells may occur near strong features in the course of the adaptive process. The foMowing\nsolution dependent mesh quality measure (SDMQM) has been developed to help assess the impact of\nmesh redistribution adaptation on computational solutions. It will also be useful for evaluating the\nresults of standard mesh generation codes. The SDMQM couples the mesh cell geometry with the\nlocal solution field via the governing equations.\nConsider the integral form of the conservation equations,\n\ndt v U d V + ~ ( @ . i i ) d S = o .\nThe second term of the above equation couples the solution field with the cell geometry. In the usual\nformulation of finite volume algorithms, this term is expressed as,\n\nwhere s\'is the product of the surface unit normal vector and the surface area, and the overbar indicates\naverage values over a cell surface, S. This equation is exact for planar sided cells and gives the average\nwithin the mesh cell. This is shown by using the divergence and mean-value theorems\nvalue of (0-?)\n\nwhere the double overbar indicates the average value over a cell volume, V.\n-4\n\n-\n\nAssume that the terms F s\' are evaluated at the center of their respective cell sides. Then, by\nusing Taylor\'s series expansion we expand these terms about the cell center (cc) to obtain,\n\nV ( s ) = c ? . s \' = V ( V . @ ) CC + R E .\ns\n\nThe resolution error, RE, is dependent on the cell geometry and the solution field and is a measure\nof the product of the cell volume and the difference between the average value of (V P) over the cell\nvolume and the point value of (V ?) at the cell center. The first few terms of the RE are expressed\nin Figure 19 for a 2-Dquadrilateral cell.\n\n-\n\nWe now have,\n\nwhich is a measure of the mean deviation of (V * $) at the mesh cell center. Finally, p is a vector\nquantity so we calculate llpllz which we dub the solution dependent mesh quality measure.\n\n189\n\nIn the case of structured meshes, p can be efficiently estimated by applying the transformation\n(z,\nY, =\nq , O , dt,77,C), 4 5 7 , C)) to V(V n c c which yields\n\n4\n\n(a,\n\nThe first term is known from the finite volume computation and the derivatives of the second term\nare estimated by using high-order difference approximations in computational space. In the current\ncomputations fourth-order approximations are used. The p is not an estimate of the local solution\nerror, but, rather, it is a measure of the local flow resolution which directly effects the solution error.\nIf 11p112 is large, then the flow within the cell is poorly resolved. When this is the case, information\nabout the flow is lost which in turn diminishes an algorithm\'s ability to accurately approximate new\ncell interface flux values for the next integration step. On the other hand, if llpllz is small, then\nit is assumed that it is small at all locations within the cell indicating good flow resolution. Well\nresolved flow within all mesh cells leads to more accurate cell interface flux approximations and higher\naccuracy.\nThere are combinations of the cell geometry and solution field for which 11p112 is small at the center\nof the cell but wouId be large if it were evaluated at some other point within the cell. However, in\nthese circumstances the cell geometry appears to be optimal for the corresponding solution field. For\nexample, A local linear distribution of the solution field will cause llpl12 to be predicted as zero, but\nonly if the cell being examined and those involved in the approximation of the derivatives appearing\nin Equation 21 are orthogonal, of equal size, and aligned with the gradient of the solution field.\nIn theory 11p]12 is a measure of the local flow resolution within a cell, but the current centered\n-+\nstencil used in approximating the cell center value of (V.l") is essentially a high-order finite difference\nevaluation. Therefore, {lpllzmay be thought of as a measure of the difference between a finite volume\nand a finite difference formulation connected with a \'particular cell. When 11p112 becomes zero the\nfinite volume scheme reduces to a finite difference scheme of the order of accuracy with which (V . F )\nis approximated.\n\nA third way to view\n\n11p112 is to think of the finite volume formulation as being equivalent to\nin computational space. Then 11pl12 is\nsecond-order accurate finite difference evaluations of (V\n\n- 2)\n\na measure of the difference between second-order and fourth-order derivative approximations and\npredicts a second-order truncation error associated with calculating (V within a given cell. By\ninterpreting llpll2 in this manner, conditions which cause 11pl12 to be small can be easily assessed.\nAlso, it is clear that flow discontinuities (shocks, contact surfaces, slip lines) will be predicted as\ncausing a large [1p1I2,despite a reduction in mesh spacing, since the higher derivative terms of the\naforementioned truncation error will always persist. With this in mind, we can use Ilpll2 to examine\nthe effect of adaptive mesh redistribution on a computed solution.\n\n2\n)\n\nMULTI-BLOCK BOUNDARY RESULTS\nCase 1: AGARD 01\n\nAGARD 01 is a transonic 0012 airfoil. The flow conditions for this test case are M, = 0.8 and\na = 1.25\'. The important aspects of the solution are the location of the upper and lower surface\nshocks as well as the shape of the sonic lines. The initial grid consists of four gridblocks of 69 by 69\npoints which make up a C-grid as shown in Figure 1. The far field boundaries are set at 30 chord\n\n190\n\nlengths away in the x-direction and 40 chord lengths away in the y-direction. Figure 2 shows a closer\nview of the initial grid. Notice that the cell center locations as well as the block boundaries are shown\nin these figures. Figure 3 shows the final mesh after dynamic grid adaption. Figures 4 and 5 show the\nnumerical solutions of the pressure and mach number. Notice in Figure 3 that the grid is clustered\nat the shock and trailing gradient and is also aligned to the gradients in presure and mach number.\nThe sonic line is emphasized on Figure 5. The interpolated shock locations on the upper and lower\nsurfaces of the airfoil are at 48.1% and 35.0% chord, respectively. The sonic line extends .88 chords\nfrom the center line. The pressure coefficient along the surface of the airfoil is shown in Figure 6 and\nis compared to computational results obtained from Reference 16. Notice that the adaptor allows for\nfiner resolution of the shock on the upper surface. The lift coefficient is .341.\nCase 2: AGARD 03\nAGARD 03 is also based on the 0012 airfoil. The flow conditions are M, = 0.95 and CY = 0.".\nThis case has a "fish-tail" like shock structure in which the location of the normal shock depends\nupon the accuracy obtained. The initial grid distribution consists of four gridblocks of 69 by 69 points\nwhich make up a C-grid similar to the grid of Case 1. The outer boundaries have a radius of 150\nchords with the upstream boundary located 200 chords upstream of the airfoil. Figures 7 and 9 show\nviews of the initial mesh and the final mesh after dynamic grid adaption. Figures 8 and 10 show\ncloser views of the initial and adapted mesh. Figures 11 and 12 show the numerical solutions of the\npressure and mach number. Notice in Figure 10 not only the grid clustering at the shocks but also\nthe overall grid alignment to the gradients in presure and mach number. The sonic line is emphasized\nin Figure 13. The sonic line extends out to nearly 21 chord lengths away from the airfoil.\nThe distance from the trailing edge to the first subsonic Mach number value downstream is\nplotted as a function of nondimensional time in Figure 14. Since interpolation is not used to gain a\nmore accurate location of the normal shock, there are non-physical jumps in the shock location in\nFigure 14. Notice that the normal shock location begins to converge to a location near 3.5 chords\nfrom the trailing edge and then abruptly changes speed. This change in speed is attributed to the\ninfluence of a wave which results from the weak reflection from the outer boundary of the outgoing\nsolution startup transient. In a nonadaptive scheme, these waves are observed infrequently due to\nthe dissipation caused by the increased mesh spacing toward the outer boundary. However, in the\nadaptive solution, the startup waves are sufficiently resolved such that they are still discernable as\nthey reach the outer boundary. Although a characteristic-like outer boundary condition is used,\ncancellation ( L e . pass-through) of the wave is not perfect and a small-amplitude expansion wave\nis reflected toward the interior. This wave results in a small increase in effective freestream Mach\nnumber as seen by the airfoil. This increased Mach number causes the normal shock to move further\naft and the upper and lower sonic regions to increase. The solution does not converge to the correct\nvalue before there is any influence from the reflected waves. This phenomenon was most prevalent\nwhen local time stepping was used. A compromise maximum time step of five times the minimum\nallowable was found to reduce the effect. However, as the limit is reduced (toward having a global\ntime step), the CFL limit due to the explicit time dependent scheme results in increased compution\ntime.\nCase 6: Shock Reflection from a Double Wedge (Time Dependent)\nThe time dependent workshop test case No. 6 consists of an inviscid planar normal shock wave\nwhich translates over a double angled ramp. The geometry is defined by a 20" section of the ramp\nbeginning at the Cartesian coordinate (2,O) and a 55" section passing through the coordinate (7,4).\n\n191\n\nThe translating (M = 2.16) shock is initially perpendicular to the y-axis and positioned at x = 1,\nwhich was taken as the reference length ( L = 1) for non-dimensionalization. The non-dimensional\nquiescent pressure and density are both set to a value of 1. The initial mesh was the same for\nboth the static and adaptive mesh computations. This mesh consisted of 468 cells in the streamwise\ndirection and 162 cells in the normal direction and wils constructed such that all of the cells where\nrhomboids. The mesh wag redistributed every time step for the adaptive computatiom. The memory\nrequirements were small enough \xe2\x82\xacor this problem that both the static and adaptive computations\ncould be run interactively on the CRAY Y-MPat NASA LaRC.\nFigures 15 and 16 compare static mesh and adaptive mesh solutions of density and pressure\ncontours, respectively. The solutions are shown for t/t, = 3.5. Here t is the physical time and\nt , = U / L , where U is the velocity of the compression region behind the normal shock. The adaptive\nmesh solution shows improved resolution o shock waves. AIso, flow within the double compression\nf\nregions behind the reflected shocks are smoother and details are more resolved in the adapted mesh\ncomputations. In addition, a region of large amplitude high frequency osciNations behind the normal\nshock near the triple point which occurred in the static mesh computations has been greatly reduced\nin the adapted mesh solution.\nFigure 17 shows a series of adapted meshes for subsequent times, for 2.0 5 t / t , 5 4.5 in incremen\xe2\x82\xacs\nof t/t, = .5. The meshes have been coarsened for clarity of display by removing every other mesh\nline. Also, the upper portion of the mesh has been deleted to save space. This sequence illustrates\nhow the adaptive algorithm continuously adapts the mesh to various flow features by clustering the\nmesh in regions of high flow gradients and increasing alignment of the mesh with discontinuities.\nFigure 18 compares the relative errors of the computed normal shock position for the static and\nadaptive mesh calculations. The relative position error is defined as IX - XEI/IXEI),\nwhere X E is the\ntheoretical normal shock position. The position of t4e shock, X , was chosen to be the interpolated\nx/L location in the pressure transition corresponding to the mid-point of the theoretical pre- and postshock conditions. A linear behavior of the relative position error indicates that the computed shock\nis moving at a constant velocity, and the magnitude of the slope indicates how close the computed\nshock velocity agrees with the theoretical shock velocity. When the slope is\'zero the two velocities\n.\nare equal.\nThe static computation predicts a more consistent relative error throughout the computational\ntime history because of the uniformity of the static mesh. Abrupt changes in the wave form o the\nf\nrelative error for the static case are due \xe2\x82\xacQ changes in grid spacing in the direction of the shock\nmovement. Because the initial grid was constructed of rhomboids, the spacing between the vertical\ngrid lines is proportional to the cosine of the wedge angle. As a result, a small but sudden change in\nthe spacing of the vertical grid lines occurs at each angle change. The reductions in mesh spacing and\nthe required reductions in time step by the CFL condition result in a more accurate shock velocity.\nThis fact is shown by the successive reductions in the magnitude of the slope of the static case curve.\nThe relative position error of the shock computed by the adaptive mesh case is larger then the\nstatic mesh case. However, by comparing the slopes of the curves, it is seen that the trends in velocity\nare quite similar. Therefore, the difference between the two curves is primarily due to the difference\nin the magnitude of the initial jump.in position error. This jump is believed to be caused by the\nemergence of a spike in the dependent flow variables on the high-pressure side of the shock just aftet\nstart-up from initial conditions. This spike apparently alters the conditions behind the shock to the\npoint of affecting its initial propagation velocity. This spike occurs in both the static and adaptive\ncomputations. The static mesh case has a smaller initial error in velocity, and thus position, because\nthe spike is poorly resolved and damps quickly. However, the adaptive mesh, with its ability to\nresolve high gradient features, resolves the spike which more severely alters the initial propagation\nvelocity. Eventually, the spike is damped, and the shock velocity of the adapted case becomes more\n\n192\n\nin agreement with the theoretical velocity. The jumps in position error occurring in the static mesh\ncase, when the vertical mesh line spacing is suddenly reduced, can also be explained by the above\nhypothesis. The static and adaptive computations show similar trends in the shock velocity history,\nand both yield shock positions that are accurate to within one and a half percent of the theoretical\nvalue indicating that time accuracy is maintained on the adapted mesh.\nFigures 20 and 21 show exponential contour plots of 11p112 for solutions of the double Mach reflection\nworkshop test case at t / t , = 3.5 obtained on a static mesh and on an adapted mesh, respectively.\nThe mesh was redistributed every time step during the adapted mesh computation. Light contour\nlines correspond to well resolved flow and dark lines to poorly resolved f o as indicated by flpll2.\nlw\nBy comparing Figures 20 and 21 we can see that the deformed mesh of the adaptive computations\nhas not introduced any significant increase in 11p112. In fact, deforming the mesh to the solution field\nhas reduced 11p112 in many regions of the flow, which of course is what we try to achieve by mesh\nredistribution adaptation. The adaptive mesh solution has reduced wave like structures which appear\nin the double compression regions of the static mesh computations. Because of this, the adaptive\nmesh case is able to more cleanly capture flow details in the double compression region over the 55"\nwedge section (refer also to Figures 15 and 16). Also, the regions of high 11p112 about the shocks\nhas been reduced in extent in the adaptive mesh case. In both cases the largest values of 11p112 are\nassociated with the fastest moving discontinuities. As the static mesh solution progressed to the\npresent time, a region of large amplitude high frequency oscillations began to emerge behind the\nmoving normal shock near the triple point. The presence of these oscillations is clearly visible by the\nlarge concentration of high values of 11pl12 in this region. The adaptive mesh computation did not\nproduce this anomaly. The only noticeable increase in Ilp(l2 of the adaptive mesh case over the static\nmesh case is in the region behind the normal shock and above the reflected shock. However, this\nincrease is on the order of 1E-6. The ability of 11pl[2 to detect discontinuites as well as low amplitude\nwaves has encouraged ongoing research to investigate its use as an adaptive criteria.\nCONCLUSIONS\nThe dynamic solution adaptive mesh algorithm, DSAGA3D, is successfully extended to 2-D multiblock structured grids, including adaptation of block boundaries. The multi-block solver and grid\nadaptor has been developed to be general, requiring only description of the grid blocks, simple splicing\nand boundary condition information, and criteria for adaption. All of this can be done through\nstraightforward input without code editing.\nSolutions obtained for workshop cases 1 and 2 demonstrated that the multi-block adaptive algorithm resolves the important features of the flows very well, including alignment of the mesh such\nthat shock definition is enhanced beyond that expected from mesh spacing alone. Solutions obtained\nfor workshop case 6 indicated that the mesh adaption procedure maintains temporal accuracy.\n\nA mesh quality assessment criteria is proposed that provides a measure of how well the mesh\nresolves and aligns with the solution. This criteria has been applied to even distributed and dynamically adapted grid solutions of workshop case 6. Analysis of the results reveals the criteria to show\npromise for determining the resolution quality of solution features.\nREFERENCES\n\n1. Benson, R.A.,"A Dynamic Solution-Adaptive Grid Algorithm in Two and Three Dimensions,"\nMasters\' Thesis, North Carloina State University, December 1989.\n\n193\n\n2. Benson, R.A. and MCRae, D.S., \xe2\x80\x9cA Three-Dimensional Dynamic Solution-Adaptive Mesh Algorithm,\xe2\x80\x9d AIAA Paper 90-1566, Seattle WA, June 1990.\n3. Benson, R.A. and McRae, D.S., \xe2\x80\x9cA Solution-Adaptive Mesh Algorithm for Dynamic/Static\nRefinement of Two and Three Dimensional Grids,\xe2\x80\x9d Proceedings of the Third International Conference on Numerical Grid Generation in Computational Fluid Dynamics and Related Fields,\nBarcelona Spain, June 1991.\n4. Benson, R.A. and McRae, D.S., \xe2\x80\x9cTime-Accurate Simulations of Unsteady Flows with a Dynamic Solution-Adaptive Algorithm ,\xe2\x80\x9d Proceedings of the Fourth International Conference on\nNumerical Grid Generation in Computational Fluid Dynamics and Related Fields, Swansea UK,\nApril 1994.\n5. Ingram, C.L. and McRae, D.S., \xe2\x80\x9cTime-Accurate Simulation of a Self-Excited Oscillatory Supersonic External Flow with a Multi-Block Solution-Adaptive Mesh Algorithm ,\xe2\x80\x9d Proceedings\nof the I f h AIAA ComputationaZ Fluid Dynamics Conference , Orlando Florida, July 1993.\n\n6. Ingram, C.L.,\xe2\x80\x9cExtension Of A Dynamic Solution-Adaptive Mesh Algorithm And Solver To\nGeneral Structured Multi-Block 2-D Configurations,\xe2\x80\x9d Masters\xe2\x80\x99 Thesis, North Carloina State\nUniversity, August 1995.\n7. Tamura, Y. and Fujii, K., \xe2\x80\x9cConservation Law for Moving and Transformed Grids,\xe2\x80\x9d AIAA\nConference Paper 93-3365-CP, Orlando Fla, July 1993.\n8. Hirsch, C., Numerical Computation of Internal and External Flows, Volume 1,Wiley and Sons,\n1990, pp. 445-449.\n9. Liou, M.-S. and Steffen, Jr., C.J., \xe2\x80\x9cA New Flux Splitting Scheme,\xe2\x80\x9d NASA TM-104404, May\n1991.\n10. van Albada, G.D., van Leer, B., and Roberts JR., W.W., \xe2\x80\x9cA Comparative Study of Computational Methods in Cosmic Gas Dynamics,\xe2\x80\x9d Astronomy and Astrophysics, 108, pp 76-84,\n1982.\n11. Scott, James N. and Niu, Yang-Yao (1993) \xe2\x80\x9cComparison of Limiters in Flux-Split Algorithms\nfor Euler Equations\xe2\x80\x9d, AIAA paper 93-0068.\n\n12. Eisman, P.R., Adaptive Grid Generation by Mean Value Relaxation, in: K.N. Ghia and U.\nGhia, eds., Advances in Grid Generation, ASME-FED-5 1983 (ASME, New York, 1983) 29-34;\nalso: ASME J. Fluids Engrg. 107 (1985) 477-483.\n13. Connett, W.C., Agarwal, R.K., and Schwartz, A. L., \xe2\x80\x9dAn Adaptive Grid-Generation Scheme\nfor Flowfield Calculations,\xe2\x80\x9d AIAA Paper 87-0199, 1987.\n14. Connett, W.C., Agarwal, R.K., and Schwartz, A. L., \xe2\x80\x9dAn Adaptive Grid-Algorithm for the\nEuler/ Navier-St okes Equations ,\xe2\x80\x9d AI A A Paper 88-0519, 1988.\n\xe2\x80\x99\n\n15. Dadone, A. and Grossman, B., (\xe2\x80\x98SurfaceBoundary Conditions for the Numerical Solution of the\nEuler Equations,\xe2\x80\x9d Proceedings of the 1lrhAIAA Computational Fluid Dynamics Conference ,\nOrlando Florida, July 1993.\n16. Warren, Gary Patrick, \xe2\x80\x9cAdaptive Grid Embedding for the Two- Dimensional Flux-Split Euler\nEquations,\xe2\x80\x9d Masters\xe2\x80\x99 Thesis, Mississippi State University, May 1990.\n\nFigure 1: The Initial C-Grid: Entire Grid\n\nFigure 3: The Adapted C-Grid\n\n0\n\nIY)\n\nc\n\n133\n127\n\n0\nA\n8\n\nFigure 2: The Initial C-Grid: A Close View\n\n1.20\n\n1.13\n\nFigure 4 Pressure Contours\n:\n\n195\n\ne\n5\n4\n\nwl\\-\n\n/\n\n055\n045\n0.35\n\nx\nFigure 7: The Initial C-Grid\n\nFigure 5: Mach Number Contours\n\n0\n\nl 6.25\n\n.\n\nFigure 6: Pressure Coefficient Comparison\n\n196\n\n~\n\nFigure 8: The Initial C-Grid: A Close View\n\nFigure 9: The Adapted C-Grid\n\nFigure 11: Pressure Contours\n\nL M Ma4\nF\n1.45\nE\n1s\n0\nC\n\nB\nA\n\n12s\n1.15\n11\n15\n\ns\n\n095\n063\n\n8\n\non\n\nI\n0 s\n3025\n2\n1\n\nFigure 10: The Adapted C-Grid: A Close View\n\n0.15\n\nom\n\nFigure 12: Maxh Number Contours\n\n197\n\nL w d MCn\n\nF\nE\nD\n8\nA\n\n145\n135\n115\n115\n1 s\n0 s\n\n9\n8\n\nam\n\nc\n\n_____.-.\n.-.,\n.\n~\n\nOd5\n\n1\n\nFigure 13: Mach Number Contours Featuring The Figure 15: Density Contour Line (Ap = 0.2)\nFor A Static Mesh Computation (Top) And An\nSonic Line\nAdapted Mesh Computation (Bottom) For Case\n6 At t / t , = 3.5\n\n2.\n\n1\n\n2.\n\n2\n1.\n1.\n1.\n1.\n\n1.\n0.\n0.\n\n0\n0\n0.\nT\n\nFigure 14: Normal Shock Distance From Trailing Figure 16: Pressure Contour Line ( A P = 0.5)\nFor A Static Mesh Computation (Top) And An\nEdge\nAdapted Mesh Computation (Bottom) For Case\n6 At t / t , = 3.5\n\n198\n\nFigure 1 7 Adapted Mesh Series For Case 6\n\n199\n\nFigure 18: Shock Relative Position Error vs. Figure 20: Solution Dependent Mesh Quality\nMeasure (SDMQM) For The Static Mesh ComNondimensional Time For Case 6\nputation of Case 6 at t/t, = 3.5\n\nFigure 19: Resolution Error For 2-D Quadrilateral Figure 21: Solution Dependent Mesh Quality\nMeasure (SDMQM) For The Adapted Mesh ComCell\nputation of Case 6 at t / t , = 3.5\n\n200\n\n'