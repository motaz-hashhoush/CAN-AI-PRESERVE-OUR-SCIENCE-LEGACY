b'N9 1 - 2 1 946\nSEVEN\n\nWAYS TO MAKE A HYPERTEXT\n\nPROJECT\n\nFAIL\n\nRobert J. Glushko\nSearch Technology\nNorcross, GA\nABSTRACT\nHypertext is an exciting concept, but designing and developing\nhypertext\napplications\nof practical scale is hard.\n"Hypertext\nengineers" must overcome seven\nproblems to make a project feasible and successful. These are (1) Developing realistic\nexpectations in the face of hypertext hype; (2) Assembling a multidisciplinary project\nteam; (3) Establishing and following design guidelines; (4) Dealing with installed base\nconstraints; (5) Obtaining\nusable source files; (5) Finding appropriate\nsoftware\ntechnology and methods; and (6) Overcoming legal uncertainties about intellectual\nproperty concerns.\n\nINTRODUCTION\nThe excitement in the technical community and the popular press is rapidly\ninspiring others to pursue the vision of hypertext as a means to combine text, graphics,\nvoice, and other media to make information more accessible, usable, and entertaining.\nNevertheless, the novelty and immaturity of "hypertext engineering" as a discipline\ncauses many projects to fall short of these goals. Elsewhere I have emphasized some\nof the challenging design issues that must be overcome "to make the hypertext vision\nhappen (Glushko, 1990b). In this paper I take a broader view to include management\nand non-technical factors to expand the list to seven ways in which hypertext projects\nfail.\nNot all of these problems are specific to hypertext projects, but together these\nseven issues conspire to make hypertext applications hard to design, develop, and\ndeploy successfully.\n\nA Composite\n\nCase Study\n\nAttracted by the excitement about hypertext, Company C decides that links and\nnavigation features will bring enhanced usability to a problem that has traditionally been\nhandled in a database or document archive. Since it is the first hypertext project in\nCompany C, all of the most talented and ambitious researchers and developers find\ntheir way onto the project. No one keeps track of how much time and effort goes into it,\nbut after a few months a carefully hand-crafted demonstration system or prototype\nemerges using "Hyper-X." Hyper-X is a highly-touted program that everyone is talking\nand reading about as a revolutionary software advance.\nThe prototype system is flashy and compelling on the 19-inch workstation screen.\nIt contains only a tiny amount of the information contained in the application it is\nintended to replace, but even a casual observer is impressed by how usable and\nappealing it looks.\nThe colors, graphics scanned from documents and books,\nammation, and sound effects come together seamlessly to create a multimedia proof-ofconcept.\nThe Vice President of Company C compares the prototype with the original textbased system and declares the Hyper-X version a smashincj success. All that remains\nis to "scale it up" by converting the remainder of the informatIon to hypertext.\n\nJ\nSEVEN\n\nWAYS TO FAIL\n\nHow you interpret this case study so far might depend on where you are in your\nproject, or whether you are part of the prototype team or a member of the team tasked\nto scale it up. But the stage is now set for disaster. In the sections that follow I analyze\nthe seven ways in which the project can fail based on the composite case study.\n\nUnrealistic\n\nExpectations\n\nAbout Scale and Readiness\n\nWhen the full-scale development project begins, the organization tasked to carry\nit out usually has unrealistic expectations\nabout how hard it is and about the capabilities\nand resources needed to do it. Demonstration projects often bring together the best\npeople with ample resources and whose efforts benefit from ad hocinter-organizational\ncooperation because of the novelty of hypertext.\nMany demonstration\nprojects\n"succeed" by using methods and tools that are impossible to scale up (Alschuler, 1989).\nOften the demonstration project uses an off-the-shelf software package that provides\nneither the capacity nor the performance to deliver the bulk of information now managed\nby the traditional database or file system. Worse, the information examples and links in\nthe demonstration\nproject may have been carefully hand-crafted,\nan unworkable\napproach for a system several orders of magnitude larger. An obsessive focus on "how\nit looks" often drives out serious consiOeration of "how it has to work."\nIf a\ndemonstration project takes three months to convert five articles from an encyclopedia\ninto an interactive hypermedia form, how long will it take to convert a thousand articles\nusing the same techniques?\nAutomatic, semiautomatic, or template-based techniques\nare the only realistic option for large conversion projects, but these are almost never\napplied during the initial prototyping effort, which usually focuses on user interface\nconcerns.\nOver time, organizations will acquire an experience base that allows them to\nmake realistic estimates for large-scale projects that involve text and hypertext. But in\nthe meantime it is better to be conservative.\n\nMlsslng\n\nSkllls on Deslgn and Development\n\nTeam\n\nOrganizations\nconsidering a hypertext project usually have ample software\ndesign and development skills available. However, hypertext projects may require (or at\nleast benefit from) a broader mix of skills. Appropriate skills in a hypertext project team\ninclude:\n* Software designers\n* User interface designers\nUsability testers and potential users\nTechnical writers and editors\n* Indexers\n* Database designers\nHypermedia projects can require still other talents, including graphic artists and\npeople who understand\nhow to integrate multiple media, sometimes called "art\ndirectors."\nFor conversion projects, the participation of the author or editor of the\noriginal information can be invaluable in understanding the presentation conventions of\nthe existing format.\nIf neither is available, the project should allow additional time to\n\nunderstand the design and design rationale of the existing information.\nLikewise, the\npeople who run the plant, repair the airplanes, or otherwise are expert in the application\narea must be involved, or the project runs the risk of building a carefully-designed user\ninterface to the wrong information.\nFew organizations or individuals have expertise in more than a few of these\nareas. Even if the needed mix of skills.for a project organization can be assembled by\nmatrix management\nor by bringing _n appropriate consultants,\nmaking such an\ninterdisciplinary team work effectively together is no small challenge.\n\nFew Published\n\nCase Studies\n\nor Design Guidelines\n\nBecause\nhypertext\nis a relatively\nnew design field, there are few detailed\npublished case studies or design guidelines that desi_]ners can readily use. Published\nreports about hypertext\nare not representative,\ntyp=cally biased toward small-scale\ndemonstrations\nor research projects.\nWhile hypertext applications\nof practical scale\nhave been successfully\ndesigned and implemented,\nin general such projects are not\ndocumented\nin the literature\nbecause\nof resource\nconstraints\nin development\norganizations,\nproprietary\nconsiderations,\nor because they are classified\nfor security\nreasons.\nWhile there is a growing\nbody of empirical research\nevaluating\nparticular\nhypertext systems or specific design options, this work does not usually generalize well.\nIn addition, what formal experiments have been able to establish is that most of the\ndesign choices, when considered in isolation, have only small percentage impacts on\nsystem usability (Nielsen, 1989). To complicate matters, sometimes small changes in\nthe user\'s task or the structure of the hypertext can lead to conflicting answers about the\nrelative merit of design features (Wright & Lickodsh, 1990).\nIndividual differences in\nusers, especially motivational differences, and the effects of different tasks seem to\nhave major effects on system usability. Yet who the users are and the tasks they want\nto carry out are often not something the hypertext system designer can control.\nHowever, designers of hypertext systems can take steps to ensure that their\nsystems are acceptable and effective for their users. While empirically validated design\nguidelines remain some way off, design methodologies\nfor hypertext are being\nproposed; the most comprehensive of these is that of Perlman (Perlman, 1989).\nInstalled\n\nBase Constraints\n\nHypertext demonstration\nprojects are often done in research organizations that\nhave advanced technology, including workstations and high-resolution 19-inch monitors.\nHyperCard\non the Macintosh computer is also a very popular environment\nfor\ndemonstration projects.\nIn contrast, the users for whom full-scale\nversions of these demonstration\nsystems must be targeted often work with an older or different installed base of\ncomputing equipment.\nThis installed base may consist predominantly of IBM ATcompatible processors with small display screens having limited graphics resolution.\nThis situation often poses a dilemma for hypertext projects.\nAdvanced\ntechnology may be needed to demonstrate the benefits of hypertext capabilities, but the\npresentation of these capabilities\nin the demonstration\nprojects exceeds what the\ninstalled base will support.\nIt is essential that the funding or marketing organization\npromoting the project know the costs and tradeoffs implied by various technology\nalternatives. Which is more successful, a project that uses less-advanced tecnnology to\ncreate lower expectations that can be met, or a project that uses state-of-the art\n\ntechnology that is not readily available for the average user? There is no doht answer\nbut it is essential to ask the question when project goals are being establishe_l\nIn any case, the installed base slowly char_ges, so hypertext designs should be\nprepared to take advantage of new technology capabilities as they become available. A\nkey consideration is separating the back end andfront end of the hypertext system so\nthat the user interface can be enhanced as the installed base permits it. Temporary\nconstraints in processing power for installed base computers can be overcome by\nexploiting space vs. time tradeoffs in hypertext designs. For example, navigation maps\ncan be pre-computed and stored on a CD-ROM instead of computed in real time.\n\nPoor Quality\n\nor Availability\n\nof Source\n\nFiles\n\nMany hypertext conversion projects are plagued by the poor quality or availability\nof source files.\nMany documents have no digital form, and even when one exists,\nunless a hypertext version was planned or contracted for when the documents were\ncreated, the existing digital form may not be readily usable.\nOne common limitation derives from the language with which the digital version\nof the document was composed or marked-up. The ideal situation is when the markup\nlanguage is SGML (Standard Generalized Markup Language) or some other language\nthat specifies the logical structure of the document rather than its presentation.\nOptical character recognition\n(OCR) technology is rapidly improving, and new\nOCR devices that output text in SGML form are especially promising (Grygo, 1989).\nNevertheless, error rates are non-negligible, so proofreading is always required, and the\nnature of the residual errors in OCR documents makes manual text entry viable unless\ncorrect recognition rates exceed 98% (Cushman, Ojha, & Daniels, 1990).\nTaken together, potential problems with source files make =t essential that\nhypertext projects carefully investigate source quality and availability before committing\nto a project schedule.\nA single document sample may not be representative;\noften a\nlarge document or document collection (such as the complete set of manuals for a large\nStem) was assembled from parts created by different vendors or subcontractors.\nch supplier may have provided documents in a different source form. If documents\nare obtained in various source formats, it is generally more cost-effective to have a\nthird-party text conversion service transform all of them to a common format than to use\nproject software resources to carry out the conversion.\nFortunately, as the "neutral data" specifications being developed as part of CALS\n(Department of Defense, 1985) and IMIS (Thomas & Clay, 1988) take hold, building\nhypertext applications on existing information will become significantly easier.\nHypertext projects whose application involves periodic publication of text created\nelsewhere should define formatting standards and quality control procedures for the\norganization that produces the information.\nThese measures can lead to substantial\nimprovement in the productivity of hypertext conversion by enabling the development of\nautomatic conversion software.\n\nLack of Appropriate\n\nSoftware\n\nTools\n\nMost off-the-shelf hypertext software is oriented toward creating new hypertexts\nand is not well-suited for converting existing documents (Alschuler, 1989; Glushko,\n1990a; Glushko, 1990b).\nDemonstration projects often use this software to create\nexpectations\nabout the look and feel of a full-scale implementation, and it often comes\nas a harsh shock to discover fundamental\nlimitations in the software that jeopardize the\nviability of a project.\n\nIt may be worth waiting for the next generation of hypertext software that directly\nsupports conversion.\nThe CALS initiative has prompted many vendors to enter this\nmarket,\nand the tools are expected\nto improve rapidly (Smithmidford,\n1989).\nAlternatively, some database programs or expert system shells may better support\nhypertext features than programs that call themselves hypertext.\nIf off-the-shelf\nsoftware must be used for a hypertext project, it is imperative that\nany demonstration\nor proof-of-concept\nphase carefully address pragmatic\nissues of\nscaling up.\nThese include both capacity\nconcerns\n-- can the program\nmanage\nsignificantly\nlarger amounts of information with acceptable performance\n-- and resource\nconcerns -- does the program imply or impose design methods for defining units, links,\nor other features that are infeasible when applied on a large scale (Glushko,\n1990a,\n1990b)?\nLegal Uncertainties\nIn recent years there has been a rash of "look and feel" copyright infringement\nlawsuits and similar claims for software patents.\nThese legal controversies\nhave arisen\nbecause software has been defined both as a kind of "litera_ work," which makes it\ncopyrightable, and as a kind of machine or method of operating one, which makes it\npatentable.\nWhile these legal analogies may be wrong and may someday be corrected\nby a new intellectual property law that recognizes the special character of software\n(Samuelson, 1989b), today software designers and developers are faced with chaos,\nuncertainty, and legal action.\nAs unclear as the situation is for software in general, the novel character\nof\nhypertext and hypermedia software raises still more complexities for intellectual property\nlaw. For example, if copyright law has different rules for "literary works," "audiovisual\nworks," "sound recordings,"\nand "pictorial works," into what legal category does an\ninteractive hypermedia encyclopedia\nor a talking book fall? Are new links or notes in a\nhypertext system considered\n"derivative works" under copyright law? These and other\nissues are not just legal curiosities;\nthey will have considerable\nimpact on the legal\nprotection available and hence the economic viability of hypermedia systems.\nOne aspect of copyright infringement\nthat confronts hypermeclia designers and\ndevelopers is clear and well-known,\nbut new technology has made it easier to break the\nlaw. OCR, scanners, digital samplers and video "frame grabbers" are among the wide\nvariety of technology\nthat makes it possible to copy almost anything and incorporate it\ninto a hypermedia\nsystem. But having the technology\ndoes not imply the right, and a\nsure way to invite a lawsuit is to assume that it does. It is not a coincidence that many\nhypertext applications\nhave used government documents like standards and regulations\nthat are free of copyright restrictions.\nThe best defense against a copyright infringement\nclaim is to be able to prove\nindependent\ndevelopment,\nso keeping careful documentation\nof design decisions\nis\nessential.\nIn addition, designs based on experiments or evaluations\ngive the design a\n"functional" character that narrows the scope of copyright infringement claims. It is best\nto follow the golden rule when designing a system: Borrow from others no more than\nou would have them borrow from you. An alternative formulation of this principle can\ne found in a well-reasoned\npaper that presents both sides of the look-and-feel\ndebate:\nLet he who has never borrowed cast the first lawsuit (Samuelson,\n1989a).\n\nSUMMARY\nbuild.\n\nHypertext is an attractive vision, but practical hypertext applications are hard to\nDisciplined approaches to analyzing information, identifying constraints\nin its\n\nstructure and in the task environment, and using the appropriate implementation\ntechnology are required. Successful hypertext projects are those that take a cautious\napproach to problems of scale and that make the right tradeoffs along the way.\nREFERENCES\nAlschuler, L. (1989). Hand-crafted hypertext: Lessons from the ACM experiment. In E.\nBarrett (Ed.), The Society of Text: Hypertext, Hypermedia,\nand the Social\nConstruction of Information (pp. 343-361 ). MIT Press.\nCushman, W., Ojha, P., & Daniels, C. (1990). Usable OCR: What are the minimum\nperformance requirements. Proceedings of the CHI \'90 Conference on Human\nFactors in Computing Systems, 145-151.\nDepartment\nof Defense (1985).\nComputer.aided\nacquisition and logistic support.\nWashington, DC: Office of the Secretary of Defense CALS Office.\nGlushko, R.J. (1990a).\nUsing off-the-shelf software to create a hypertext electronic\nencyclopedia.\nTechnical Communication, 37(1 ), February 1990, 28-33.\nGlushko,\nGrygo,\n\nR.J. (1990b).\n\nVisions of grandeur?\n\nG. (1989). High-volume scanners\nReview, 6(27), July 10, 1989, 29.\n\nNielsen, J. (1989). The matters\nProceedings, 239-248.\nPerlman, G. (1989).\ndevelopment.\n\nUnix Review, 8(2), 70-80.\naid conversion\n\nto CALS\n\nthat really matter for hypertext\n\nstandard.\n\nusability.\n\nDigital\n\nHypertext\n\n\'89\n\nAsynchronous design/evaluation methods for hypertext technology\nHypertext \'89 Proceedings, ACM: New York, 61-81.\n\nSamuelson, P. (1989a).\nProtecting user interfaces through copyright: The debate.\nProceedings of the ACM Conference on Computer-Human\nInteraction - CHI \'89,\n97-103.\nSamuelson, P. (1989b). Why the look and feel of software user interfaces should not be\nprotected by copyright law. Communications of the ACM, 32(5), 563-572.\nSmithmidford,\nR.\ndocuments.\n\n(1989). Vendors focus on CALS conversions for existing\nFederal Computer Week, 3(36), September 4, 1989, 38.\n\npaper\n\nThomas, D., & Clay, J. (1988). Computer-based\nmaintenance aids for technicians:\nProject final report. Air Force Human Resources Laboratory Technical Report\nAFHRL-TR-87-44,\nWdght-Patterson Air Force Base, OH.\nWright, P., & Lickorish, A. (1990). An empirical comparison of two navigation systems\nfor two hypertexts. In C. Green & R. McAlease (Eds.), Hypertext: Theory into\npractice I1. Intellect Press.\n\n'