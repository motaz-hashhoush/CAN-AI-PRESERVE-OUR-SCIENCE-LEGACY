b'NSSDC/WDC-A-R&S 89-21\nOctober 1989\n\nSpace Physics Analysis Network\n\n. 6I\n\nSPAN SECURITY POLICIES\nAND GUIDELINES\nby\nPatricia L Sisson\nScience Applications Research\nLanham, Maryland 20771\nand\nJames L Green\nNational Space Science Data Center\nGreenbelt, Maryland 20771\nN91-30741\n\n(NASA-TM-105071) SPAN SECURITY POLICIES AND\nGUIDELINES (NASA) 61 p\nCSCL 098\nG3/61\n\nUnclas\n0033014\n\nfor the\nNational Space Science Data Center (NSSDC)\nNational Aeronautics and Space Administration\nGoddard Space Flight Center\nGreenbelt, Maryland 20771\n\nNSSDC/WDC-A-R&S 89-21\n\nSPAN SECURITY POLICIES AND GUIDELINES\n\nPatricia L. Sisson\nScience Applications Research\n\nLanham, MD\n\n20777\n\nJames L. Green\nNational Space Science Data Center\nGreenbelt, MD 20771\n\nRevised: October 24, 1989\n\nPRECEDING PAGE BLANK NOT FILMED\nPage iii\n** P R E F A C E **\nThis document refers to computer networking security issues in\ngeneral, as well as to those specific to the VAX computer environment.\nIt assumes that the reader is acquainted with the VAX computer\nsoftware architecture, networking terminology, and DCL, as well as\nother operating system software interfaces. Most references are to\nthe VMS environment; future editions will address these same issues on\nthe ULTRIX and UNIX computers.\nThe intended audience for this publication is the system or network\nmanager of a VAX computer system that is currently connected to the\nSpace Physics Analysis Network (SPAN) or is planning on connecting in\nthe near future. Privileges are required to implement most of the\nchanges and suggestions identified in this document.\n\n** A C K N O W L E D G M E N T S **\nThe following individuals are recognized for their time and effort\nmaking outstanding contributions to the content of this manual.\n\nin\n\n>\n\nDan Anderson - Johnson Space Flight Center, Houston, TX\n\n>\n\nMike Bartman - Goddard Space Flight Center, Greenbelt, MD\n\n>\n\nLinda Porter - Marshall Space Flight Center, Huntsville, AL\n\n>\n\nRon Tencati - Goddard Space Flight Center, Greenbelt, MD\n\nWe would also like to thank members of the Data Systems Users Working\nGroup (DSUWG) security subcommittee for their contributions to this\nmanual. Special thanks to the SPAN Management Team at the Goddard\nSpace Flight Center for their helpful suggestions for the layout of\nthis document.\n\nPage\nCONTENTS\n\n1\n1.1\n1.2\n1.3\n\n1.4\n1.5\n2\n2.1\n\n2.2\n3\n3.1\n3.1.1\n\nINTRODUCTION\n\n1\n\nDefinition Clarification\nSystem Manager Responsibilities\nComputer Security Threats\n\nInappropriate Use Of A System\nComputer Security Laws\nSPAN SECURITY POLICIES\nPassword Policy\n\n1\n1\n2\n\n3\n4\n7\n7\n\nCaptive Accounts\nSPAN SECURITY REQUIREMENTS AND GUIDELINES\n\n8\n. . . . 17\n\nSystem Level Requirements And Guidelines . . . . 17\nAuthorization (UAF) Security\n. 18\n\n3.1.2\nVMS Accounting/Security Alarms\n3.2\nDECnet - How To Protect It\n3.2.1\nDECnet Default Account\n3.2.2\nNETSERVER.LOGs\n3.2.3\nDECnet Objects\n3.2.3.1\nTask Object 0\n4\nIMPLEMENTATION TECHNIQUES\n4.1\nSystem-Level Guidelines\n\n19\n20\n20\n21\n21\n21\n23\n23\n\n4.1.1\n4.1.2\n\n29\n31\n\nAuthorization (UAF) Security\nVMS Accounting/Security Alarms\n\n4.2\nDECnet - How To Protect It\n4.2.1\nDECnet Default Account\n4.2.2\nNETSERVER.LOGs\n4.2.3\nDECnet Objects\n4.2.3.1\nTASK Object 0\n5\nDETECTING/REPORTING SECURITY INCIDENTS\n\n36\n37\n39\n41\n41\n43\n\n5.1\n5.2\n\n43\n45\n\n6\n\nDetecting Security Incidents\nReporting Security Incidents\n\nSPAN SECURITY TOOLKIT\n\n47\n\n6.1\n\n47\n\n6.2\n6.3\n\nWhy Was It Created?\nContents Of The Toolkit\n\n48\n48\n\n6.4\n\n\\\\J\n\nIntroduction\n\nLicense Agreement\n\n55\n\nWTENT10NMA* BLANK\n\nPRECEDING PAGE BL&NK NOT FILMED\n\nINTRODUCTION\n1\n\nINTRODUCTION\n\nThis document is a guide to system security with emphasis on\nrequirements\nand guidelines that are necessary to maintain an\nacceptable level of security on the network. To have security for the\nnetwork, each node on the network must be secure. Therefore, each\nsystem manager, must strictly adhere to the the requirements and must\nconsider\nimplementing\nthe guidelines discussed throughout this\ndocument.\nThere are areas of vulnerability within the operating system that may\nnot be addressed in this manual.\nHowever, when a requirement or\nguideline is discussed, implementation techniques will be included (in\nsection 4) for completeness. Information related to computer and data\nsecurity is discussed to provide information on\nimplementation\noptions. Although some items may seem obvious, they are included here\nfor completeness.\nReferences will be made to other sources of\ninformation where appropriate.\nThis information is presented as it\nrelates to a VAX computer environment. Although current emphasis is\non the VMS aspect, future editions of this manual will cover ULTRIX,\nUNIX, and other systems as they become connected to SPAN.\n\n1.1\n\nDefinition Clarification\n\nThe document includes some information related to\nother information that is considered as guidelines.\n\nrequirements\n\nand\n\nThe requirements MUST be implemented. They are mandatory\nfor\ncontinued\nconnectivity\nto\nSPAN.\nThroughout\nthis\ndocument,\nrequirements are indicated by the verb "WILL."\nThe guidelines SHOULD be implemented at the the discretion of the\nsystem\nmanager or the organization.\nThroughout this document,\nguidelines are indicated by the verb "SHOULD."\n\n1.2\n\nSystem Manager Responsibilities\n\nNetwork security begins with each user on a computer system.\nThe\nsystem manager is usually the person who takes care of adding,\nmodifying, or removing user accounts from a computer system and also\nis responsible, in most cases, for system security. The existing\nsystem manager position description may need further refinement to\ninclude the following security-related responsibilities:\no\n\nContribute to the development of a security policy for\nsystem (if what is presented in this document is\nsufficient)\n\nthe\nnot\n\nINTRODUCTION\no\n\nTrack personnel changes in the organization that might affect\nthe vulnerability of the computer system\n\no\n\nMonitor all software updates, additions, or deletions to the\nsystem in order to detect any potential occurrence of a\n"Trojan horse," "virus," or "-worm"\n\no\n\nMotivate management to give high priority to\nsecurity awareness training for the organization\n\no\n\nHandle all computer security incidents to completion\n\ncomputer\n\nFollow standard reporting and documentation procedures as\ndescribed in this manual\nConsult with the SPAN security manager to reach final\nresolution of all security incidents that involve other\nnetworks\n\nLax security practices on networked computers, especially in a\nresearch environment, can present security problems for other hosts on\nthe network. Potential damage resulting from a successful break-in is\neasily unrecognized, not always fully understood, and, therefore,\neasily ignored. System managers are often not concerned with security\nand often do not know that the systems are easy targets for\nunauthorized access attempts or conduits for break-in attempts on\nother\nSPAN\nhost\ncomputers.\nThe following sections highlight\ninformation that affects the security of a computer system.\n\n1.3\n\nComputer Security Threats\n\nThere are several ways to identify security\nsystem. They can be categorized as follows:\no\n\nthreats\n\nto\n\na\n\ncomputer\n\nUser Irresponsibility\nPoor password choice\nGiving out account/password to other users\' files\n"Browsing" on the system; reading other users\' files\nSophisticated user trying to create\nTrojan horse\n\na\n\nvirus,\n\nworm,\n\nor\n\nINTRODUCTION\no\n\nInappropriate setting of file protections\n\nSystem Penetrations\n\nUse of holes in operating system\nUse of poor security management\nUse of dial-in modems or X.25 connections\nAbuse of network objects\n\no\n\nPotential Threats\nUnauthorized users (commonly known as hackers)\n\nUnhappy employees\nCompetitors\n- Foreign governments\nStudents\n\n1.4 Inappropriate Use Of A System\nUse of a computer and network is inappropriate if it:\no\n\nCompromises the privacy of users and their personal data.\n\no Destroys the integrity of data\ncomputer system.\no\n\nor programs\n\nstored\n\non a\n\nDisrupts the intended use of system or network resources,\n\no Wastes resources (people, network bandwidth, or CPU cycles).\no Uses or copies proprietary software when unauthorized to do\nso.\no Uses a computer system as a conduit for unauthorized\nattempts on other computer systems.\n\naccess\n\nINTRODUCTION\no\n\n1.5\n\nUses a government-, corporation-, or university-owned system\nfor private purposes or for purposes not in the direct\ninterest of the government, corporation, or university.\n\nComputer Security Laws\n\nSPAN network security guidelines are based on the following key United\nStates laws:\no\n\nTitle 18 of United States Code 1030,\nentitled The Computer\nFraud\nand\nAbuse Act of 1986, which protects against\nunauthorized access. It is directed to\n"Whoever knowingly accesses a computer without\nauthorization or exceeds authorization and\nobtains national defense information ...\nobtains\ninformation in a financial record ... affects use\nof the computer by the government ...\nalters,\ndamages, or destroys information in a Federal\ninterest computer ... modifies or impairs medical\nexaminations,\nmedical\ntreatment\nor care ...\ntraffics in any password through which a computer\ncan be accessed without authorization ..."\nA Federal interest computer is in brief " ...\na computer\nused exclusively by a financial institution or the United\nStates government...or is one of two or more computers used\nin committing the offense, not all of which are located in\nthe same State."\n\no\n\nTitle 18 of United States Code 2701, entitled The Electronic\nPrivacy Act of 1986, which protects against unauthorized\ninterception of electronic communications. It is directed to\n"Whoever\nintentionally accesses without authorization a\nfacility through which an electronic communication service is\nprovided or intentionally exceeds an authorization to access\nthat facility and obtains, alters, or prevents authorized\n\nOther computer related fraud statutes include:\no\n\nTitle 15 of United States Code\nelectronic fund transfer fraud.\n\no\n\nTitle 17 of United States\ncopyright violations.\n\nCode\n\n1693n,\n\nwhich\n\ndeals\n\nwith\n\n506b,\n\nwhich\n\ndeals\n\nwith\n\nINTRODUCTION\no\n\nTitle 18 of United States Code 1029, which deals with access\ncode, password, logon sequence, credit card, and account\nnumber abuse.\n\no\n\nTitle 18 of United States Code 1341, which\nfraud.\n\ndeals\n\nwith\n\nwire\n\nAdditionally, with regard to computer security, the Office\nof\nManagement and Budget (OMB) has issued Circular No. A-71, Transmittal\nMemorandum No. 1, July 27, 1978, "Security of Federal Automated\nInformation Systems," which requires that each Federal Government\ndepartment and agency implement a computer security program.\nIn accordance with the OMB Circular A-71, NASA Management Instruction\n(NMI) 2410.7, "Assuring Security and Integrity of NASA Computer\nProcessing," was issued to establish the NASA Computer Security\nProgram to implement the policy contained in NMI 2410.7.\nThere are many existing state and local laws that pertain to computer\nsecurity fraud.\nThere is also the Computer Virus Eradication Act of\n\'89, which has been introduced to the Senate. This is not yet a law,\nbut it might become one during the next year or two.\n\nSPAN SECURITY POLICIES\n2\n\nSPAN SECURITY POLICIES\n\nComputer and data security have always been important issues, but\nrecent advances in remote computer access methods have highlighted the\nneed for further computer security\nawareness.\nThis\ndocument\nestablishes a general SPAN policy position addressing computer and\ninformation security for SPAN.\n\n2.1\n\nPassword Policy\n\nUser passwords on a computer system can be the system\'s biggest\nexposure to outside threats. The actual password, for a VMS system,\nis not stored in a normal text string.\nPasswords are one-way\nencrypted and are stored in the SYSUAF.DAT file located in the\nSYSSSYSTEM directory. This section will give the system manager a\ngood idea for a password policy that can be implemented on the system.\nThere are simple rules that a user can follow in choosing a\nThey are as follows:\no\n\npassword.\n\nPassword Rules:\nSHOULD be a minimum of 6 characters\nSHOULD be a "pass-phrase" or include special characters\n-\n\nSHOULD NOT be any part of the user\'s name or userid\nSHOULD avoid company, department, and project group names\nSHOULD avoid hobbies, nicknames; and nonwork activities\n\n-\n\n-\n\n"\n\n\xc2\xa3\n\n"""\n\nSHOULD NOT be written on paper, saved in files,\ntransmitted electronically in mail messages or files\n\n-\n\nJ\n\nSHOULD NOT be found in the dictionary\n\n-\n\nPM\n\nSHOULD NOT be all the same characters\n\n-\n\no\n\nSHOULD avoid\nassociates\n\nnames\n\nof\n\nfamily,\n\nfriends, animals,\n\nor\n\nSHOULD NEVER be put into terminal function keys\n\nor\n\nUnprivileged Account Authorization Rules\n\n.NTEWONAllY BLANK\n\nPRECEDING PA\n\n^\n\nBLANK NOT FILMED\n\nSPAN SECURITY POLICIES\nWILL be at least six characters in length and SHOULD\ncontain at least one special character (ex: $, _, etc.).\nTo set the password length in authorization, do the\nfollowing:\nAUTH> MOD username/PWDMINIMUM=6\nAccount owner SHOULD be required to change the password\nevery 90 days (3 months). To set the password lifetime\nin authorization, do the following:\nAUTH> MOD\no\n\nusername/PWDLIFETIME="90-11\n\nPrivileged Account Authorization Rules\n-\n\nWILL be at least eight characters in length and SHOULD\ncontain at least one special character (ex: $, -, etc.).\nTo set the password length in authorization, do the\nfollowing:\nAUTH> MOD username/PWDMINIMUM=8\n\n- Account owner SHOULD be required to change the password\nevery 30 days (1 month). To set the password lifetime in\nauthorization, do the following:\nAUTH> MOD\n\nusername/PWDLIFETIME="30-n\n\nSHOULD be required to have dual passwords.\nin authorization, do the following:\nAUTH> MOD\n\nTo\n\nset this\n\nusername/PASSWORD=(PRIMARY,SECONDARY)\n\nHowever, beware that use of dual passwords will prevent\nexplicit\nnetwork\naccess\n(e.g.,\nNODEnameBusername\npassword"::) to an account on the system.\n\n2.2\n\nCaptive Accounts\n\nCaptive accounts are used on many systems for a variety of reasons.\nThey are sometimes used to allow people who have no account on a\nsystem to perform some specific task, such as SET HOST to another\nmachine, PHONE other users, get HELP on how to apply for an account,\nor TYPE specific files, such as system descriptions, contact lists, or\na list of SPAN hosts.\n\nSPAN SECURITY POLICIES\nCaptive accounts can be very useful, but they are obvious security\nthreats, since they allow nearly anyone to have some level of access\nto the system. Once some access is granted, it is always possible to\nincrease the access through system bugs, clever tricks, and system\nconfiguration errors. DEC has made statements to the effect that it\nis impossible to make a captive account 100% secure, and that one\nshould be very cautious in allowing them on the system. If one does\ndecide to implement captive accounts, there are a number of things\nthat should be avoided and still others that should be done.\nThis\nsection will attempt to cover some of the major dos and don\'ts of\ncaptive account procedure construction.\nA captive account is an account that, simply put, is forced to run a\nspecific command procedure upon login. Being flagged as captive does\nnot make an account secure. Implementation of adequate security is up\nto the login command procedure writer and whoever designs the account.\nTo allow future writers of such procedures to avoid the mistakes of\nthe past, the following list of things to do and things to avoid is\npresented. Many of these guidelines were discovered the hard way, by\nhaving someone break out of a captive procedure that violated the\nrules.\no\n\nIn System Authorization File\n-\n\nSHOULD ALWAYS\nAUTHORIZE\nUAF> MOD\n\nset\n\nthe\n\nCAPTIVE\n\nand\n\nLOCKPWD\n\nflag\n\nin\n\ncaptive_account/FLAG=CAPTIVE\n\nUAF> MOD captive_account/LOCKPWD\nIt seems obvious, but more often than you might think an\naccount is created and used as a captive account, without\nsetting the captive flag. Setting the captive flag on an\naccount does three things:\n1.\n\nIt identifies the\nmanager reference.\n\naccount\n\nas\n\ncaptive\n\nfor\n\nfuture\n\n2.\n\nIt disables Control_Y interrupts.\n\n3.\n\nIt prohibits the\nspecification\nof\nall\nlogin\nqualifiers, such as /COMMAND, /NOCOMMAND, /DISK, and\n/CLI, when a user logs in.\n\nIt is also a good idea to consider the use of the\nDISWELCOME, DISMAIL, and DISNEWMAIL flags. DISRECONNECT\nand DISREPORT might be good ideas as well.\nThis will prevent anyone who escapes\nthe\ncommand\nprocedure from disabling the account for other users.\n\nSPAN SECURITY POLICIES\nThis assumes that you have set a password on the account\nin the first place. It is also a good idea (though not\nfor security reasons) to turn the password expiration\nfeature off for the captive account.\n-\n\nSHOULD NOT have privileges beyond TMPMBX and NETMBX\nSince it is not possible to make a captive procedure 100%\nescape proof, the best protection is to make sure that\nthe account is harmless even if someone does get control\nof it.\nIf any privileges are granted to a captive\naccount, then they can be used to access the other parts\nof the system (files belonging to other users, system\nowned files, etc.).\nSome privileges are safer than\nothers.\nThings like BYPASS, SYSPRV, SETPRV, CMKRNL,\nWORLD, and SECURITY are obviously dangerous and should\nnever be granted to a captive account. Others, like\nTMPMBX and NETMBX, are so common that most system\nmanagers grant them to all accounts, including the\ncaptive ones. This is not always wise.\nNETMBX allows\nthe account to SET HOST to other machines on the network\nand attempt break-ins, but the record shows the attempt\nas coming from your machine. TMPMBX is not as bad, but\nit will allow the account to be used to interfere with\nyour own users (mostly limited to annoyance levels, but\npossibly serious interference with work). What would\nhappen, for instance, if a job started sending large mail\nmessages to everyone on the system until their disk\nquotas were exhausted or the disks were filled?\nIn general, a privilege should never be given to a\ncaptive account unless it. is vital to the functioning of\nthe account.\nEven\nthen, alternatives\nshould\nbe\nconsidered.\nOne alternative is writing a program to\nperform the privileged function and then installing the\nprogram with the required privilege(s). This limits the\nuse of the privilege to the required function and removes\nthe need for the account itself to hold the privilege.\n\n-\n\nSHOULD NEVER give a captive account a system\nnot fall within the MAXSYSGROUP group)\n\nUIC\n\n(will\n\nNever set the UIC group number of a captive account to\none of the system group of UICs (less than or equal to 10\noctal by default, but check the value of the SYSGEN\nparameter MAXSYSGROUP to determine the value on your\nsystem). Giving the captive account one of these group\nnumbers will automatically grant it SYSPRV privilege and\nallow access to sensitive parts of the system.\n\n10\n\nSPAN SECURITY POLICIES\n-\n\nSHOULD ALWAYS try to make the UIC group unique\nIf you set up the captive account in the same group as\nother accounts, it may have access to the other account\'s\nfiles through the group protection. This is considerably\nworse if the member number is not unique as well! You\ncan check the group number for uniqueness with the\nAUTHORIZE command:\nUAF> SHOW [groupuic,*]\n\n-\n\nSHOULD consider setting the PRCLM limit to 1\nUnless the captive account has a need to\nspawn\nsubprocesses, this limit should be one. This prevents\nthe creation of subprocesses through the use of the DCL\nSPAWN command or the VMS MAIL SPAWN command, or through a\nSPAWN command on an X.25 public pad (see the discussion\nabove for reasons not to allow the user access to MAIL in\nthe first place).\nSHOULD ALWAYS limit access to the\npossible\n\naccount\n\nas much as\n\nAUTHORIZE will allow for specification of limitations on\naccess to accounts.\nAccess to the account across the\nnetwork or through dialup lines, for example, can be\nprevented. Also there can be a limit on the hours and\nthe days that an account is available. Captive accounts\nshould never be accessible through methods or at times\nwhen it is not necessary. If the account is only needed\nbetween 9 am and 5 pm on Monday through Friday, set it up\nthat way. If it does not need to be used except by local\nusers, restrict dialup and network access. There is no\nsense in being vulnerable more than absolutely necessary.\n-\n\nSHOULD disable access via BATCH mode\nUAF> MOD captive_account/NOBATCH <cr>\n\no\n\nCaptive Account Login Command Procedure\nThe following section will cover things that should be\navoided when creating a Captive Account Login Command\nProcedure.\n-\n\nSHOULD NEVER\nstatements\n\nuse the EXIT or\n\n(especially)\n\nthe STOP\n\nThere should never be any way for the procedure to EXIT.\n11\n\nSPAN SECURITY POLICIES\nThe only way the captive procedure should ever terminate\nis with a LOGOUT command. Having an EXIT or STOP command\naccessible through the use of a password will never\nremain secure. If anyone figures out how to get VERIFY\nturned on (see the INQUIRE command, below), the password\nwill not be protected. If anyone manages to get read\naccess to the procedure file, the password is worthless.\nIt is also possible that they will guess the password as\nwell.\nThere is no need to have an EXIT or STOP in a\ncaptive account command procedure. It is supposed to be\ncaptive, and it should stay that way.\nIn the event that one needs to have a nonprivileged\nperson maintain a captive account (for updating data\nfiles or altering the captive login procedure itself),\nany of several things can be done:\n1.\n\nSet up an ACL entry on the files that need to be\nmaintained and let the person use the personal\naccount to do the maintenance.\nThis may not be\npractical if disk quotas are enabled and the two\naccounts are on different disks.\n\n2.\n\nSet up a second account with the same UIC and home\ndirectory as the captive account, and let the person\nuse this "captive manager" account to\ndo\nthe\nmaintenance.\n\n3.\n\nLet the files and quota be owned by the maintainer\'s\naccount (or a special maintenance account), and set\nup ACL entries to allow the captive account to access\nthem. This has the added advantage that modification\nof the files by the captive account itself may be\neasily prevented through the use of the correct\nprotections, so that even if someone breaks out of\nthe procedure they will not be able to do much damage\nor create "trap doors" to make access easier in\nfuture.\nSee the discussion of version numbers on\npage 12 for further explanation of this subject.\n\nSHOULD NEVER use the INQUIRE command (always use the READ\ncommand)\nUse\nthe\nREAD/PROMPT=<prompt>/END=<end_label>/ERROR=\n<error_label>\ncommand instead.\nThe INQUIRE command\nautomatically evaluates any symbols included in the\ninput. It is possible that one of these symbols might be\nsomething like, n "f$verify(l)\'." This would set VERIFY\n"ON" and result in the user\'s being able to see how your\nprocedure works, possibly allowing location of a weak\n\n12\n\nSPAN SECURITY POLICIES\nspot or a password (which should not be there in the\nfirst place, as is noted below and in the EXIT topic\nabove).\nThe inclusion of the /END option prevents the\ntyping of a Control-Z from causing the procedure to\nbranch into unintended code and possibly exiting. The\n/ERROR option allows device errors and other problems to\nbe caught and handled (even if the method of handling the\nproblem is just to log off!). Check the DCL Dictionary\nmanual for more information on READ and its options.\nSHOULD always\nspecifications\n\nspecify\n\nversion\n\nnumbers\n\non\n\nall\n\nfile\n\nThis includes the specification of the captive account\nprocedure itself in the SYSUAF entry maintained by\nAUTHORIZE.\nIf RENAME is used to make all of the\nsensitive files (those that would cause problems if they\nwere altered by a trespasser) version one, then specify\nversion one in all references. The modification of a\nfile will result in a version two file, which will then\nbe ignored.\nThis is especially powerful in conjunction\nwith the use of ACL entries or alternate ownership of the\nfiles; it prevents the captive account from deleting the\noriginal version one file and renaming the modified one\nback to version one. It helps reduce the damage in the\nevent that the captive account\nprocedure\nis\nnot\nfoolproof.\n\n-\n\nSHOULD NEVER use "ON CONTROL_Y"\nIf the account is set up with the DISCTLY authorization\nflag (as it should be!) there is no need for this\ncommand. Using it opens up the possibility that the user\nwill type a CONTROL_Y, cause a trap to the handler\nroutine, and then type one again before the trap can be\nreset.\nThis will result in the procedure exiting, and a\nbreak-in would be sustained.\n\n-\n\nSHOULD NEVER use\nprocedure)\n\nan\n\nembedded\n\npassword\n\n(in a\n\ncommand\n\nEmbedded passwords are a definite "no-no"; they never\nstay secret.\nSee the EXIT and INQUIRE commands for\nalternatives and reasons not to use them.\n-\n\nSHOULD NEVER allow the user access to VMS MAIL\nThe use of the /EDIT qualifier on the SEND or FORWARD\ncommands allows full file access. Once one is in the\neditor, it is possible to modify any file to which the\naccount has access, not just the message in progress.\n\n13\n\nSPAN SECURITY POLICIES\nThe editor\'s INCLUDE and WRITE commands\nare very\ndangerous!\nThis is especially true if the captive\naccount has the ability to alter its own login command\nprocedure. The procedure can be edited to allow an exit;\nthe account is then reentered, the trap door used, and\nthe account security violated.\n-\n\nSHOULD NEVER allow user access to EDT or any other editor\nNever allow user access to EDT or any other editor that\nallows full file access. See the MAIL restriction above\nfor details.\n\n-\n\nSHOULD NEVER allow the user access to any program sending\noutput to a disk file\nFor the same reasons given under the MAIL\nabove,\nnever\nallow the user to write\nuser-selected file names.\n\n-\n\nSHOULD NEVER evaluate a user-entered\nchecking it first\n\nrestriction\nfiles with\n\nstring\n\nwithout\n\nFor example, the following two commands do the same\nthing, but the first is NOT secure. It allows the string\n"USERENTEREDB to be evaluated, resulting in the execution\nof any lexical functions (such as fSverify...) that the\nuser happened to type in.\nIF n"USERENTERED\'11 .EQS. "FILES" THEN GOTO SHOWFILES\nIF USERENTERED .EQS. "FILES" THEN GOTO SHOWFILES\nIf the ability to evaluate a user-entered string is\nnecessary, always check it for things like single quotes,\n"f$"s, double quotes, etc., before allowing evaluation to\nproceed.\nSHOULD always\nprocedures\n\ntry\n\nto\n\neliminate\n\nmultilevel\n\ncommand\n\nProcedures that call other procedures are harder to\nsecure than ones with everything in one command file.\nThey increase the number of sensitive files and make it\nharder to see all the code at one time. If you use\nmultilevel procedures, remember that error traps for each\nlevel must be specified. Also note that all parameters\nsent to the new procedure are automatically evaluated\n(see the item on evaluating parameters, above).\n\n14\n\nSPAN SECURITY POLICIES\nSHOULD always be sure to set up handling for all possible\nerrors\nIf any error occurs for which a trap has not been set up,\nthe procedure will exit, leaving the user at the DCL\nprompt. There must be some sort of handling for ALL\nerrors, even if the action taken is just to log out.\nNever use an OPEN, READ, etc., without\nspecifying\n/ERROR=.\nAlways use the ON ERROR command to set up\ngeneral trapping (unless the SET NOON command is used,\nwhich will cause errors to be ignored, except those\nspecified with the /ERROR= qualifiers).\nSHOULD never allow a captive\neditor\n\naccount\n\nto\n\nTECO has enough capability to break out\ncommand procedure.\nSHOULD consider\nsensitive files\n\nplacing\n\nan\n\nalarm\n\nACL\n\nuse\n\nof\n\nthe\n\nANY\n\non\n\nthe\n\nTECO\n\ncaptive\n\nmost\n\nSetting an alarm ACL on the most sensitive files in the\ncaptive account can be a good way to catch people\naltering them. It will at least let you know that the\nfile has been tampered with so that the damage can be\nrepaired. The command might be:\n\n8 SET ACL CLOGIN.COM /ACL= $_ (ALARM=SECURITY,ACCESS-WRITE+DELETE+CONTROL+FAIL+SUCCESS)\nAnd, on the security terminal:\n\n$ REPLY/ENABLE=SECURITY\nS SET AUDIT/ENABLE=ACL/ALARM\nSHOULD consider putting the CLOGIN.COM file\nin\na\ndifferent directory and have it owned by SYSTEM. Have\nthe authorization record for that account point to the\ncorrect file and directory path.\nThe file must be\n"executable" by the captive account, however.\nIn authorization:\nUAF>\n\no\n\nMOD\n\ncaptive_account/LGICMD=dir_path:[dir]CLOGIN.COM;1\n\nCaptive Account System Considerations\n\n15\n\nSPAN SECURITY POLICIES\nThis section will cover additional things to\nsetting up a captive account.\n-\n\nconsider while\n\nSHOULD always limit the disk quota of the account\nNever allow the captive account more quota than is needed\nfor the functions of the account. This is especially\ntrue on disks where there are "overloaded" quotas (more\nquota assigned than there is disk space).\n\n-\n\nSHOULD always check the SYLOGIN.COM (or equivalent)\nviolations of the above rules\n\nfor\n\nIf the system has a SYSSSYLOGIN.COM procedure, check to\nbe sure that it follows all of the above rules or has a\nline in it similar to the following near the top of the\nprocedure (before any statements that violate any of the\nabove rules):\n$ IF F$ENVIRONMENT("CAPTIVE") THEN SEXIT\nThe system login procedure is as much a part of captive\naccount security as the captive procedure itself.\n\nSHOULD have READ only\naccounts files\n\nprotection\n\nmask\n\non the captive\n\n$ SET FILE/PROT=(0:R) [...]*.*;* <cr>\nThis will change the file protection to Owner:READ only\nfor all files owned by the captive account (in all\ndirectories).\n\n16\n\nSPAN SECURITY REQUIREMENTS AND GUIDELINES\n3\n\nSPAN SECURITY REQUIREMENTS AND GUIDELINES\n\nThis section will list, in brief form, all of the "Requirements" and\n"Guidelines"\nfor\nsystems\nconnected\nto\nSPAN.\nSection\n3\n("Implementation Techniques") will give explicit details on how to\ncheck certain system parameters, along with how to implement the\nrequirements or guideline listed in this section.\n\n3.1\n\nSystem Level Requirements And Guidelines\n\nThe following requirements and guidelines pertain\nsecurity.\n\nto\n\noverall\n\nsystem\n\no SYSSANNOUNCE/SYSSWELCOME Message\nWILL change the system\nwelcome message to:\n-\n\nannouncement\n\nmessage\n\nor\n\nsystem\n\nset value to "null" (blank)\nset value to predescribed statement (see Section\nfor examples of statements to use)\n\nout\n\nof\n\n4.1\n\no\n\nWILL delete USERLIST.LIS and NODEINFO.LIS files\nDECnet default directory\n\nthe\n\no\n\nSHOULD consider setting a password on the dial-up lines (this\nwould work for systems that have dial-up modems attached to\nthem)\n\no\n\nSHOULD consider using the "secure server" feature of VMS\nterminals (ports) on your system\n\nfor\n\no Authorizing New Accounts or Modification of Existing Accounts\nSHOULD create an authorization form to request changes to\nthe System Authorization file and keep these forms on\nfile (for future reference)\n\no Directory and File Protection\n- UIC Based Protection\nDefault protection should\n(S:RWED,0:RWED,G:RE,W)\n\n17\n\nbe,\n\nat\n\nminimum,\n\nSPAN SECURITY REQUIREMENTS AND GUIDELINES\nAccess Control Lists (ACLs)\n-\n\nCan be used to grant or deny access to a system\nobject. Can be placed on the following objects:\n-\n\nDevices\n\n-\n\nFiles (including directory files)\nGroup global sections\nLogical name tables\n\n-\n\nSystem global sections\n\n-\n\nQueues (with V5.0 VMS)\n\nThis manual will not go into detail on how to set up\nany ACL identifiers. For complete information on how\nto set these up, please refer "Guide to VAX/VMS\nSystem Security."\n\n3.1.1\n\nAuthorization (UAF) Security\no\n\nUSER and USERP accounts WILL have a password associated with\nthem or WILL be deleted or WILL be DISUSERed (these are for\nMicroVMS systems only)\n\no\n\nAccounts FIELD, SYSTEST, and SYSTEST_CLIG\nSHOULD be DISUSERed when not in use\n\no\n\nThe flag DISREPORT should not be used on any account\n\no\n\nShared accounts SHOULD NOT be used\n-\n\no\n\nSHOULD set DISRECONNECT\npossible).\n\nflag\n\nfor\n\n(if they\n\nshared\n\nexist)\n\naccounts\n\n(if\n\nSHOULD limit hours of use for accounts (if possible)\n-\n\nDIALUP and NETWORK access\ndirectly connected terminals\n\n18\n\nare more\n\nanonymous\n\nthan\n\nSPAN SECURITY REQUIREMENTS AND GUIDELINES\n- DIALUP and NETWORK are easier for intruders to use to try\nto break into systems\n-\n\nCertain data only need to be accessible onsite\nCertain users need to be supervised and do not need\naccess when their supervisor is not around\n\no\n\no\n\n3.1.2\n\nUser accounts SHOULD NOT fall within MAXSYSGROUP value\n(usually <= 10 octal).\nOnly system accounts should fall\nwithin this group.\nUser accounts should have no privilege beyond TMPMBX and\nNETMBX (unless formerly approved by the system security\nofficer or by the user\'s supervisor).\n\nVMS Accounting/Security Alarms\n\nVMS accounting should be turned on. For systems with an X25 pad, turn\non PSI accounting. Also turn on auditing and security alarms on the\nVMS system.\no\n\nVMS accounting - at a minimum log:\n-\n\nDETACHED (detached job termination)\n\n-\n\nINTERACTIVE (interactive job termination)\n\n- LOGIN_FAILURE (login failures)\n- NETWORK (network job termination)\nPROCESS (any process termination)\n- SUBPROCESS (subprocess termination)\no PSI accounting should be turned on\no\n\nCheck/modify LGI SYSGEN parameters on the system\n\no\n\nAuditing and security alarms\n-\n\nSecurity alarms should be enabled for the following:\n\n19\n\nSPAN SECURITY REQUIREMENTS AND GUIDELINES\nACL (any access to a file with an ACL protection)\n-\n\nBREAKIN (any break-in from any source)\n\n-\n\nINSTALL (any access to the INSTALL utility)\n\n-\n\n3.2.1\n\nAUTHORIZATION (any modification to the current System\nAuthorization file SYSUAF.DAT)\n\n-\n\n3.2\n\nAUDIT (any change to the current AUDIT)\n\nLOGFAILURE\n\n(DIALUP,REMOTE,NETWORK)\n\nDECnet - How To Protect It\nDECnet Default Account\n\nThe following requirements and guidelines pertain to the DECnet\ndefault account on a VAX/VMS system:\no\n\nIn system authorization file\nWILL change DECnet default password (remember\ndefault password on the executor in NCP)\n\nto\n\nchange\n\n-\n\nWILL have no privilege beyond TMPMBX and NETMBX\n\n-\n\nUIC WILL not fall within the MAXSYSGROUP group value\n\n-\n\nUIC should be in a unique group\n\n-\n\nSHOULD only allow NETWORK access\n\n-\n\nSHOULD consider setting LOCKPWD,\nDISCTLY flags\n\n-\n\nSHOULD consider setting CPU time limit\n\n-\n\nWILL set LOGIN command to null\nSHOULD consider not having a DECnet\nall\n\n20\n\nCAPTIVE,\n\nDISMAIL,\n\ndefault account at\n\nSPAN SECURITY REQUIREMENTS AND GUIDELINES\n3.2.2 NETSERVER.LOGs\no\n\nSHOULD edit NETSERVER.COM (NOTE: Not supported\nstop automatic purging of NETSERVER.LOGs\n\no\n\nSHOULD protect NETSERVER.LOG files (S:RWD,0,G,W)\n\no\n\nSHOULD modify NETSERVERSTIMEOUT (length\nprocesses live after object termination)\n\no\n\nSHOULD, use FALSLOG to enhance audits\n\n3.2.3\n\nby DEC) to\n\nof time\n\n"server"\n\nDECnet Objects\n\n3.2.3.1\no\n\nTask Object 0 WILL protect or remove Task Object 0 from\nbase by one of the following methods:\n\nthe DECnet\n\ndata\n\nRemove it completely from the DECnet data base\nSpecify an invalid username for the Task Object (allow\nyou to control access to the Task Object) in the\npermanent data base.\nMove it to a protected directory and require system staff\nhelp to access and use it. This does not prevent use of\nTask Object 0 once it is set up, but at least system\nstaff will know who or what is using Task Object 0.\n\n21\n\nIMPLEMENTATION TECHNIQUES\n4\n\nIMPLEMENTATION TECHNIQUES\n\nThe following sections will give the additional detail needed to\nimplement the SPAN Security Requirements and Guidelines. Where\napplicable, detailed steps will be given.\n\n4.1\n\nSystem-Level Guidelines\no\n\nSYSSANNOUNCE/SYSSWELCOME\n\nMessage\n\nAll node managers on SPAN WILL\nchange\ntheir\nsystem\nannouncement message (message that is displayed before the\nusername prompt) to one of the following:\n-\n\nSet value of SYSSANNOUNCE to null (blank)\nS ASSIGN/SYSTEM SYSSANNOUNCE " "\nBe sure to have this line in your system startup file\nSYSTARTUP.COM\n(or SYSTARTUPJV5.COM on V5.x systems) so\nthat each time the system reboots this message is\ndisplayed.\n\n- To set value of SYSSANNOUNCE, do the following:\n$ ASSIGN/SYSTEM SYSSANNOUNCE ANNOUNCE.TXT\nIn the file ANNOUNCE.TXT, have it say:\nANY UNAUTHORIZED ATTEMPT TO ACCESS THIS SYSTEM IS A FEDERAL OFFENSE\n\nor\n*WARNING* *WARNING * *WARNING* *WARNING * *WARNING * *WARNING* *WARNING\n*\nThis computer is operated by/for the U.S. Government. *\nUnauthorized access to and/or use of this computer system *\nis a violation of law and punishable under the provisions *\nof 18 USC 1029, 18 USC 1030, and other applicable statutes. *\n*\n*WARNING**WARNING**WARNING**WARNING**WARNING**WARNING**WARNING*\n\n*\n*\n*\n*\n*\n\nor\nYou are connected to a U.S. Government computer system. Any\nunauthorized ATTEMPT to gain access to this system may be\npunishable by fine and/or imprisonment.\n\nPftfr ZQ\n\nINTENTIONALLY BUNK\n\n\xe2\x84\xa2\n\nPRECEDING PAGE BLANK NOT FILMED\n\nIMPLEMENTATION TECHNIQUES\nIf a computer system does not have a SYSSANNOUNCE message, then the\nSYSSWELCOME (banner displayed after successfully logging in) should be\nmodified to include the above statement.\nTo do this, do the\nfollowing:\no\n\nSet value of SYSSWELCOME\n$ ASSIGN/SYSTEM SYSSWELCOME WELCOME.TXT\nHave the file WELCOME.TXT include one of the above examples.\n\no\n\nWILL delete USERLIST.LIS and NODEINFO.LIS files\nSeveral earlier versions of the SPAN documentation set have\nadvocated the use of the files USERLIST.LIS and NODEINFO.LIS.\nThe USERLIST.LIS file was to contain a listing of all users\non the system and their usernames. The NODEINFO.LIS file was\nto contain pertinent information about the computer, such as\nsystem manager name, network address and phone number, VMS\nversion running on the system, type of VMS system, etc.\nThese files, as stated in earlier documentation, were to be\nkept in the DECnet default directory for use by other\ncolleagues in the SPAN community to help them locate other\nresearchers.\nBecause of the increase in unauthorized access attempts on\nsystems on SPAN, it has been determined that the files\nUSERLIST.LIS and NODEINFO.LIS WILL be deleted from all SPAN\nnodes.\nThese files make it easier for an unauthorized user\nto try valid usernames\nto break\ninto\na computer.\nNODEINFO.LIS can be used to attack a system running a\nparticular version of VMS, especially one with known holes.\n\no\n\nSHOULD consider setting a password on the dial-up lines (this\nwould work for systems that have dial-up modems attached to\nthem)\nIf a computer system has dial-up modems attached to it, it is\na good idea to set a system password for these lines. The\nsteps are as follows:\nInvoke AUTHORIZE and set up the system password\nUAF> ADD/SYSTEM_PASSWORD = xxxxxxxx\nModify the terminal set-up file\ncoorespond to the dial-up modems\n\nfor\n\n$ SET TERM xxxx: /SYSPWD/PERMANENT\n24\n\nthose\n\nlines\n\nthat\n\nIMPLEMENTATION TECHNIQUES\no\n\nSHOULD consider using the "secure server" feature of VMS for\nterminals (ports) on the system\nThe "secure server" feature of VMS ensures that users can\nonly log into terminals (ports) that are already logged out.\nIt requires the user to press the BREAK key on a terminal,\nand\nthe secure server, if enabled, responds by first\ndisconnecting any logged in process.\nThe purpose of the\nsecure server is to ensure that the VAX/VMS login program is\nthe ONLY program able to receive the login.\nThis prevents\njust about all possibilities of a user logging into a program\nthat mimics the login sequence. These programs, typically,\nsteal passwords. To use the secure server, do the following:\nModify the terminal set-up file for\ncorrespond to your dial-up modems\n\nthose\n\nlines\n\nthat\n\n$ SET TERM xxxx: /SECURE/DISCONNECT/PERMANENT\nBe sure to modify the appropriate file that is invoked by\nSYSTARTUP.COM [SYSTARTUP_V5.COM under VMS V5.x] so that\nthe terminal characteristics will remain the same after\nreboot.\nThis feature is documented in greater detail in the "Guide to\nVAX/VMS\nSystem\nSecurity" written by Digital Equipment\nCorporation.\no Authorizing New Accounts\nAn accounting authorization form should be used to request\nadditions, changes, and deletion of user accounts on a\ncomputer system. This form, if not already in existence,\nshould contain the following information (at a minimum):\n1. Full name, address, and\nowner\n\nphone number\n\nfor the\n\naccount\n\n2. Disk and quota specifications\n3. Privileges, besides the normal\nrequired\n\nTMPMBX,NETMBX, that\n\nare\n\n4. Expiration date for the account\nThere should be in effect an account authorization mechanism\nwhereby the . system manager and whomever that person is\naccountable to has signed off. The form should have a spot\nthat clearly states that the user has received a security\nbriefing from the system security officer.\nIt also should\nstate\nthat the user understands the responsibilty for\n25\n\nIMPLEMENTATION TECHNIQUES\ncomputer security,\no\n\nDirectory and File Protection\n-\n\nUIC based protection\nThe following SYSGEN parameter will show the default\nprotection.\n\n$ MCR SYSGEN <cr>\nSYSGEN> SHO RMS_FILEPROT <cr>\nParameter Name\nCurrent\nDefault\nRMS_FILEPROT\n64000\nSYSGEN> EXIT <cr>\n\nMinimum\n\n64000\n\n0\n\nVMS\n\nMaximum Unit\n\n65535 Prot-mask\n\nThe protection is expressed as a mask. By default, the mask\nis 64000 (decimal) or FAOO (hexidecimal), which represents\nthe protection (S:RWED,0:RWED,G:RE,W).\nTo change the VMS default protection on the system, the\nsystem\nmanager\nshould add the following line to the\nSYLOGIN.COM (every user account invokes this system-wide\nlogin command procedure upon login to your system).\nS SET PROTECTION^ :RWED,0:RWED,G,W)/DEFAULT\nIf users on the system want to change the normal file\nprotection for files that they create, they will have to\nchange the protection after creation of the file or add the\nappropriate SET PROTECTION line to their personal login\ncommand procedure.\nNormal sequence of events VMS\naccessibility of a file\n\ndoes\n\nto\n\ndetermine\n\nWhen someone is trying to access a file on the system,\nVMS goes through the following sequence to validate\naccess to that file:\nIf the file has an ACL identifier:\nIf the ACL grants access, then access is given\n-\n\nIf the ACL denies access, then use SYSTEM\nOWNER fields of the UlC-based protection\n\n-\n\nIf the ACL does not explicitly grant or deny\naccess, then use the UlC-based protection\n\n26\n\nDynamic\n\nand\n\nIMPLEMENTATION TECHNIQUES\nIf the file has no ACL identifier:\nUse the UlC-based protection mask\n\n-\n\nIf the user has BYPASS, READALL, SYSPRV, or GRPPRV\nprivileges, then VMS allows the appropriate access to\nthe file\n\n- UIC-Based Protection\nFiles have an ownership UIC and a protection mask.\nThe default protection mask for most systems is\n(S:RWED,0:RWED,G:RE,W).\nThis means:\n- SYSTEM - S:RWED\n- System - READ, WRITE, EXECUTE, and DELETE\naccess to the file. System (S) constitutes:\n- User\'s UIC group number <= MAXSYSGROUP\n- User has SYSPRIV privilege\n- User has GRPPRV privilege and the user\'s\nUIC group number is equal to the file\'s\nUIC group number\n-\n\n-\n\nUser\'s UIC is equal\ngroup\n\nto\n\nthe\n\nfile\'s UIC\n\nOWNER - 0:RWED\n-\n\nOwner - READ, WRITE, EXECUTE, and DELETE\naccess to the file. Owner (0) constitutes:\nUser\'s UIC group and member number matches\nthe file\'s UIC group and member number\n\n-\n\nGROUP - G:RE\n-\n\nGroup - READ and EXECUTE access to the\nGroup (G) constitutes:\nUser\'s UIC group number\ngroup number\n\n27\n\nmatches\n\nthe\n\nfile.\n\nfile\'s\n\nIMPLEMENTATION TECHNIQUES\nWORLD - W\nWorld - no access\nAny user not in the system, owner, or group\ncategory on the system. Includes all users\non the network.\n\nTo show the current protection mask of a file, do the\nfollowing:\n$ DIR/PROT filename.ext\nDirectory:\n\ndirectory_path: [username]\n\nfilename.ext;version_#\n\n(S:RWED,0:RWED,G:R,W)\n\nor\n\n$ DIR/SEC filename.ext\nDirectory:\n\ndirectory_path:[username]\n\nfilename, ext; version_#\n\n[Username] (S.-RWED, 0:RWED,G:R,W)\n\nTo change the current protection mask of a file,\nuser would do the following:\n\nthe\n\nS SET FILE/PROT=(W:RWED) filename.ext\nWe discourage all users of .a computer system from\nallowing world access to their files. With the\nprotection set to W:RWED, anyone on the system or on\nthe network is allowed to READ, WRITE, EXECUTE, and\nDELETE these files.\nACL-Based Protection\nPlease refer to the Digital Equipment Corporation\'s\n"Guide to VAX/VMS Security" for details on how to use\nACL identifiers. NOTE: There will be an increase in\nthe system overhead when accessing files. ACLs are\nnot easy to maintain and you might cause problems\nwhen using BACKUP and ACL recovery.\nIt may be\npreferred to set these up only on system-critical\nfiles.\n\n28\n\nIMPLEMENTATION TECHNIQUES\n4.1.1\n\nAuthorization (UAF) Security\n\nThe system manager should also\nsecurity:\n\nconsider\n\nthe\n\nfollowing\n\nfor\n\naccount\n\no USER and USERP accounts WILL have a password associated with\nthem or WILL be deleted or WILL be DISUSERed (these are for\nMicroVMS systems only)\nTo check the status of the USER and USERP\nsystem, do the following in AUTHORIZE,\n\naccounts\n\non the\n\nUAF> SHO USER <cr>\nwhich will result in the display of either the UAF record or\nthe\nerror\nmessage\n%UAF-W-BADSPC,\nno user-matched\nspecification (which means that this account does not exist\non the system).\nTo set a password on this account, do the following:\nUAF> MOD user/PASSWORD=xxxxxxxx <cr>\n(where xxxxxxxx is the desired password).\nTo delete this account from the system, do the following:\nUAP> REMOVE user <cr>\nTo DISUSER this account, do the following:\nUAF> MOD user/FLAG=DISUSER <cr>\nThe account USERP can be substituted for USER; the commands\nare the same. Do not forget to delete the directory and\nfiles that are owned by these accounts.\no The accounts FIELD, SYSTEST, and SYSTEST_CLIG\nexistence) should be set to DISUSER when not in use\n\n(if\n\nin\n\nUAF> MOD field/FLAG=DISUSER <cr>\nSHOULD consider modifying the system\'s midnight or daily\nsystem\ncommand procedure\n(if in existence) to\nautomatically DISUSER the accounts FIELD, SYSTEST, and\nSYSTEST CLIG\n\n29\n\nIMPLEMENTATION TECHNIQUES\no\n\nThe flag DISREPORT SHOULD NOT be used on any account\n\no\n\nShared accounts SHOULD NOT be used, but if necessary:\n-\n\nShared accounts should have the DISRECONNECT flag set\nUAF> MOD shared_account/FLAG=DISCONNECT\n\no\n\n<cr>\n\nIf an account has no legitimate uses outside certain hours or\nrequires only specific restricting access methods and/or\nhours\n-\n\nConsider setting the following in AUTHORZE\n-\n\n/NONETWORK - the user cannot log in from the network\n(could be appropriate for the OPERATOR account or\nFIELD account)\n\n-\n\n/NOREMOTE - the user cannot log in remotely\n\n-\n\n/NODIALUP - the user cannot use the dial-in modems to\naccess the system\n\n-\n\n/NOBATCH - the user cannot run batch jobs on your\nsystem (good for student accounts that do not need\nBATCH capability)\n\n/PRIMEDAYS - only\nparticular days\n\nallow access\n\nto\n\nthe\n\nsystem\n\non\n\nAn example would be a user account called PENNY (whose\nowner Copper Penny never works on weekends). Set the\naccount to only allow access Monday-Friday.\nCommand\nwould be\nUAF> MOD penny/PRIMEDAYS=(NOSAT,NOSUN)\n\n<cr>\n\nwhere the account is not allowed access on Saturdays\nSundays\n\nor\n\nor\n\nUAF> MOD Penny/PRIMEDAYS=(MON)TUE,WED)THU,FRI) <cr>\nwhere the account is only allowed access\nFriday.\n\n30\n\nMonday\n\nthrough\n\nIMPLEMENTATION TECHNIQUES\no User accounts should not fall within\nvalue\n\nthe MAXSYSGROUP\n\ngroup\n\n$ MCR SYSGEN <cr>\nSYSGEN> SHQ MAXSYSGROUP <cr>\nParameter Name\n\nCurrent\n\nMAXSYSGROUP\nSYSGEN> EXIT <cr>\n\nDefault\n\n8\n\nMinimum\n\n8\n\n1\n\nMaximum Unit\n\nDynamic\n\n32768 UIC Group\n\nD\n\nThis will show the current settings for the system.\nThe default parameter value says that any account that has\nthe UIC group between 0 and 10 will automatically get full system\nprivileges. As an example:\n\n$ SD SYSSSYSTEM <cr>\n$ RUN AUTHORIZE <cr>\nUAF> SHOW/BRIEF [1,*] <cr>\nOwner\n\nSystem Manager\nField Service\nUAF> EXIT\n\nUsername\n\nSYSTEM\nFIELD\n\nUIC\n\nAccount\n\nPrivs Pri Directory\n\n[1,4]\n[1,3]\n\nSYSTEM\nSYSTEM\n\nAll\nAll\n\n4 SYSSSYSROOT:[SYSMGR]\n4 SYSSSYSROOT:[SYSMAINT]\n\nMake sure that only system-type accounts (SYSTEM, FIELD) fall\nwithin this group.\no User accounts should have no privilege beyond TMPMBX\nNETMBX\n\n4.1.2\n\nand\n\nVMS Accounting/Security Alarms\no VMS Accounting\nThe following line should appear\nstartup file (SYSTARTUP.COM):\n\nsomewhere\n\nin the\n\nsystem\n\n$ SET ACCOUNTING/ENABLED(DETAC,INTER.LOGIN,NET,PROC,SUBP)\n\n31\n\nIMPLEMENTATION TECHNIQUES\no\n\nPSI accounting SHOULD be turned on\nIf the PSI software is being used, its accounting should be\nenabled to track X.25/X.29 calls. Somewhere in the system\nstartup file, the following line should appear:\n\n$ 6SYS$MANAGER:PSIACCOUNTING ON\no\n\nCheck/modify SYSGEN LGI parameters on the system\nTo check the SYSGEN LGI parameters on the\nfollowing:\n\nsystem, do the\n\n$ MCR SYSGEN <cr>\nSYSGEN> SHO/LGI <cr>\nParameters in use: Active\nParameter Name\n\nCurrent\n\nDefault\n\nLGI\nLGI\nLGI\nLGI\nLGI\nLGI\nLGI\nLGI\n\n0\n0\n30\n3\n20\n5\n960\n300\n\n1\n0\n30\n3\n20\n5\n300\n300\n\nBRK TERM\nBRK DISUSER\nPWD TMO\nRETRY LIM\nRETRY TMO\nBRK LIM\nBRK TMO\nHID TIM\n\nSYSGEN>\n\nMinimum\n\n0\n0\n0\n0\n0\n0\n0\n0\n\nMaximum Unit\n\n1\n1\n255\n255\n255\n\nBoolean\nBoolean\nSeconds\nTries\nSeconds\n\n255 Failures\n-1 Seconds\n\n-1 Seconds\n\nDynamic\n\nD\nD\nD\nD\nD\nD\nD\nD\n\nEXIT\n\nSeveral of these parameters determine WHEN break-in and\nevasion take place on the system. It is a good idea to\nchange the default settings so that break-in and evasion kick\noff earlier than the default. SYSGEN LGI parameters are\ndynamic, so any change will take immediate effect on the\nsystem. Remember, though, to add the modified LGI parameters\nto the MODPARAMS.DAT file (located in the SYSSSYSTEM\ndirectory) so that the next time that AUTOGEN and reboot are\nrun, the tightened LGI parameters will still be in effect.\nThis document will only cover those LGI parameters we feel\nshould\nbe changed\nfrom their default settings.\nFor\nadditional information on LGI parameters, please see the\n"VAX/VMS Utilities Reference Volume" and the "Guide to\nVAX/VMS System Security" manuals.\n\n32\n\nIMPLEMENTATION TECHNIQUES\n-\n\nLGI_BRK_TERM - default setting for this parameter is 1.\nIf the system parameter is 1, a user can attempt to log\nonto the system and fail several times until it trips\nbreak-in/evasion, but only from THAT terminal. A user\ncan simply go to another terminal (or start another LAT\nsession) and try all over again. If this parameter is\nturned off (set value to 0), log failures are tracked by\nusername across ALL terminal types.\nTo change the\ndefault setting, do the following:\n$ MCR SYSGEN <cr>\nSYSGEN> SET LGI_BRK_TERM 0 <cr>\nSYSGEN> WRITE ACTIVE <cr>\nSYSGEN> WRITE CURRENT <cr>\nSYSGEN> EXIT <cr>\nLGI_BRK_TMO - this is the average number of minutes\nallowed between login failures (e.g., default setting is\n300 seconds or 5 minutes). This means that the system\nwill not notice login failures that occur to accounts\nevery 5 minutes. To change this default setting, do the\nfollowing:\n$ MCR SYSGEN <cr>\nSYSGEN> SET LGI_BRK_TMO 960 <cr>\nSYSGEN> WRITE ACTIVE <cr>\nSYSGEN> WRITE CURRENT <cr>\nSYSGEN> EXIT <cr>\n\n-\n\nLGI_BRK_LIM - number of tries before break-in\nis\ndetected.\nThis\nparameter, along with LGI_HID_TMO,\ndetermines when the system decides that there is a\nbreak-in attempt in progress. If you have noisey dialup\nlines or thumb-fingered users, a LGI_BRK_LIM less than 3\ncould inadvertently lock out legitimate users. To change\nthe default setting, do the following:\n$ MCR SYSGEN <cr>\nSYSGEN> SET LGI_BRK_LIM 3 <cr>\nSYSGEN> WRITE ACTIVE <cr>\nSYSGEN> WRITE CURRENT <cr>\nSYSGEN> EXIT <cr>\n\n-\n\nLGI_HID_TIM (random number between 1 and 1.5 seconds)\nthe duration for the evasive action is influenced by the\nLGI_HID_TIM parameter value. This helps to obscure the\ntrue evasion time.\n\n33\n\nIMPLEMENTATION TECHNIQUES\no\n\nAuditing and Security Alarms\nSecurity alarms are messages that are sent to the security\noperator\'s terminal when specific events take place. For the\nsystem security manager, these alarms assist in maintaining\nan acceptable level of security. They can help in detecting\nbreak-in attempts to the system and users doing undesirable\nthings to the system.\nThe VAX/VMS system allows several types of alarms\nturned on. The following events can be audited:\n\nto be\n\nACL (any access to a file with an ACL protection)\nOne can audit successful or unsuccessful access to a file.\nTo do so, add an ALARM_JOURNAL ACE to a file\'s ACL table.\nSee the ACL section in this manual\nThen enable the ACL alarms.\n\nThe syntax is\n\n$ SET AUDIT/ALARM/ENABLE=ACL\n-\n\nAUDIT (any change to the current AUDIT)\nOne can enable auditing for execution of the SET AUDIT\ncommand. The syntax is:\n\n$ SET\n-\n\nAUDIT/ALARM/ENABLE=AUDIT\n\nAUTHORIZATION (any modification\nauthorization file SYSUAF.DAT)\n\nto\n\nthe\n\ncurrent\n\nsystem\n\nChanges to system authorization data base\nOne can audit changes made to the system or network UAF\ndata base. The types of changes that can be audited are:\n- adding a system UAF record (a new user)\n- deleting a system UAF record (delete a user)\n\n- changing a system UAF record (change a user record)\n- copying a system UAF record (a new user)\n\n- renaming a system UAF record\n- adding a network UAF record\n- deleting a network UAF record\n\n- modifying a network UAF record\nThe syntax is:\n\n$ SET AUDIT/ALARM/ENABLE=AUTHORIZATION\n\n34\n\nIMPLEMENTATION TECHNIQUES\nExample of an alarm:\n\n%%%%%%%%%%% OPCOM\n\n10-MAY-1989 09:48:04.43\n\nSecurity alarm on NSSDCA / Identifier added\n\nTime:\n\n10-MAY-1989 09:48:04.42\n\nPID:\n\n0000\n0000\n\nUser Name:\nImage:\n\nSYSTEM\nHSCSDUAO:[SYSO.SYSCOMMON.][SYSEXE]AUTHORIZE.EXE\n\nID name:\nnew_user_id\nID value:\n[999,99]\nId attributes:\n(None)\n\nChanges to rights data base\nOne can audit changes made to the rights data base.\ntypes of change that can be audited are:\n- creation of a new rights data base\n- addition of an identifier\n- removal of an identifier\n\n- granting of an identifier to a holder\n- revoking of an identifier from a holder\n- modification of a holder\nThe syntax is:\n\n$ SET AUDIT/ALARM/ENABLE=AUTHORIZATION\nBREAKIN (any break-in from any source)\nINSTALL (any access to the INSTALL utility)\nLOGFAILURE (DIALUP,REMOTE,NETWORK)\nFile_Access - selected types of access to files and\nglobal sections. An example would be:\nTurn on the alarm:\n\n$ SET\n\nAUDIT/ALARM/ENABLE=(FILE_ACCESS=(BYPASS:DELETE,SYSPRV:DELETE))\n\nExample of output in OPERATOR.LOG:\n%%%%%%%%%%% OPCOM ll-MAY-1989 00:00:28.08 %%%%%%%%%%%\nSecurity alarm on NSSDCA / Successful file access\nTime:\nll-MAY-1989 00:00:28.07\nPID:\n0000\n0000\nUser Name:\nusername\nImage:\nsystem_disk:[SYSEXE]DELETE.EXE\n35\n\nThe\n\nIMPLEMENTATION TECHNIQUES\nFile:\nMode:\nPrivs Used:\n\ndiskname: [user_directory]filename.ext\nDELETE\nSYSPRV\n\nOne might want to set up a specific terminal or port on\nthe system to have all alarms sent to it. One could add\nsomething like the following to the SYSTARTUP.COM:\n$ DEFINE/USER SYSSCOMMAND Txxx:\nS REPLY/ENABLE=SECURITY\n$ SET\nAUDIT/ALARM/ENABLE=(ACL,AUDIT,AUTHORIZATION.INSTALL,\xe2\x80\xa2\nBREAKIN=(DIALUP,NETWORK,REMOTE),LOGFAIL=(DIALUP,NETWORK,REMOTE)\nOr, one could turn on all components of the BREAKIN and\nLOGFAIL detection (no matter what the source) by doing\nthe following:\n$ DEFINE/USER SYSSCOMMAND Txxx:\n$ REPLY/ENABLE=SECURITY\nS SET AUDIT/ALARM/ENABLE=(ACL,AUDIT,AUTHORIZATION,INSTALL, BREAKIN=(ALL),LOGFAIL=(ALL)\nOne could also have this type of information going to the\nsystem console port.\nTo do this, add the following to\nSYSTARTUP.COM:\n\n$ DEFINE/USER SYSSCOMMAND OPAO:\nS REPLY/DISABLE=SECURITY\nRemember that once a user trips the break-in alarm, the\nincorrect passwords are printed in the security log file.\nIt may be relatively easy to spme unauthorized person to\n"guess" at a user\'s correct password from seeing the\nincorrect password displayed on the console. For this\nreason, it is a good idea NOT to print security log\nmessages to the system console port (OPAO:).\nACL - event request by an ACL on a file or global section\n\n4.2\n\nDECnet - How To Protect It\n\n36\n\nIMPLEMENTATION TECHNIQUES\n4.2.1\n\nDECnet Default Account\no\n\nIn system authorization file\nWILL change DECnet default password\nThe DECnet default account permits certain types of\naccess to your system from remote nodes without requiring\nthem to specify the account and password information\n(i.e., access control string). Instead, this information\nis supplied in the DECnet executor and object data bases.\nWhen installing DECnet on a VAX/VMS system, the default\nsettings for the DECnet account and network objects are:\nUsername: DECnet\nPassword: DECnet\nThis allows the following:\nAny remote user can access files on the system based\non the world protection mask (W:RWED) of that file\n-\n\nAny remote user can, with a little ingenuity, run\nprograms or command procedures on the system via the\nDECnet account\n\nIf the default password is being used for the DECnet\naccount (password is DECnet), change it. Someone can use\nthe explicit access control string "DECnet DECnet" to run\na remote job on the system. To change the password, do\nthe following:\nRun authorize and change the default account password\n\nUAF> MOD DECNET/PASSWORD=xxxxxxxx\nwhere DECNET=default account name, This may have been\nchanged already.\nChange password that is referenced by the DECnet object\ndata base (Note: BYPASS and CMKRNL privileges required)\n$ RUN SYS$SYSTEM:NCP\nNCP> SHO EXEC CHAR\nNCP> MOD EXEC NONPRIV PASSWORD xxxxxxxx\nNCP> SHO KNOW OBJ\n(any object that has a DECnet password associated with it\nmust show the new password)\nNCP> SET OBJECT FAL USER DECNET PASSWORD xxxxxxxx\n37\n\nIMPLEMENTATION TECHNIQUES\nIf the password in the DECnet object data base does not match\nthe password in the SYSUAF record, then a "login information\ninvalid" error will be generated. Any network\naccess\nrequests for the DECnet object will fail.\no\n\nThe DECnet account WILL have no privileges beyond TMPMBX and\nNETMBX\nUnder NO circumstances should the default account be given\nmore than the above privileges. DECnet only requires the\nabove privileges to work; giving this\naccount\nextra\nprivileges is of little use and could be a large security\nproblem.\n\no\n\nUIC WILL NOT fall within the MAXSYSGROUP group value\nSee previous instructions under Authorization (UAF) Security\non how to check this value to make sure this account does not\nfall within the MAXSYSGROUP group value.\n\no\n\nUIC should be in a unique group\n\no\n\nSHOULD have only NETWORK access in authorization:\nIn authorization:\nUAF>\n\no\n\nMOD\n\nDECNET/NETWORK/NODIALUP/NOREMOTE/NOBATCH/NOINTERACTIVE\n\nSHOULD consider setting LOCKPWD,\nDISCTLY flags in AUTHORIZE\n\nCAPTIVE, DISMAIL,\n\nand\n\nIn authorization:\nUAF>\n\nMOD DECNET/FLAGS=(LOCKPWD,CAPTIVE,DISMAIL,DISCTLY)\n\nLOCKPWD locks the password and prevents network users from\nchanging it. Setting CAPTIVE and DISCTLY prevents network\nusers from misusing the account. DISMAIL stops people from\nsending mail using this account.\no\n\nSHOULD consider setting a CPU time limit on this account\nPrevents long network jobs from executing.\nUsually network\njobs\nshould take no longer than a few seconds.\nIn\nauthorization:\nUAF> MOD DECNET/CPU=00:01: DCPutting a CPU limit on the DECnet default account may cause\nproblems if a lot of people copy large files to and from the\n38\n\nIMPLEMENTATION TECHNIQUES\nsystem.\noption.\n\nPlease keep this in mind when choosing to\n\nuse\n\nthis\n\no WILL set the LOGIN command to the null device\nIn authorization:\nUAF> MOD DECNET/LGICMD=NL: <cr>\nPrevents network users from copying a LOGIN.COM into the\ndefault account and having it execute.\no WILL set the PRCLM value in the UAF record to 1.\nPrevents remote users from executing the SPAWN command,\no SHOULD consider not having a DECnet default account at all\nIn authorization:\nUAF> REMOVE DECNET <cr>\n\n4.2.2\n\nNETSERVER.LOGs\no SHOULD edit NETSERVER.COM (NOTE: Not supported by DEC) to\nstop the automatic purging of NETSERVER.LOGs. To do this:\n$ SET DBF SYSSSYSTEM <cr>\n$ EDIT NETSERVER.COM\nComment out the following lines:\n\n$! IF PERMANENT_NETSERVER_COUNTER .LT. 25 THEN GOTO LOOP\nand\n\nS! IF FSSEARCH ("SYSSLOGIN:NETSERVER.LOG;-10")\n$! PURGE/KEEP:3 SYSSLOGIN:NETSERVER.LOG\n\n.NES. nn THEN\n\nThis will stop the automatic purge of the NETSERVER.LOG\nfiles. The command procedure NETSERVER.COM is invoked each\ntime a new server process starts up (e.g., incoming network\nconnection for a DECnet object). Remember: The next time\nthe system software is upgraded, it will be necessary to\nmodify the command procedure NETSERVER.COM for this to stay\nin effect.\n\n39\n\nIMPLEMENTATION TECHNIQUES\no\n\nSHOULD protect NETSERVER.LOG files\nThis will protect the NETSERVER.LOG files contained in the\nDECnet\ndefault directory from unauthorized browsing or\ndeleting. It also makes it impossible for a hacker to\ncompletely cover the tracks.\n-\n\no\n\nSuggest (S:RWED,0,G,W)\n\nSHOULD modify NETSERVERSTIMEOUT (length\nprocesses live after object termination)\n\nof time\n\nserver\n\nThis makes each\nnetwork\nconnection\ncreate\nits own\nNETSERVER.LOG instead of having multiple object accesses in\none NETSERVER.LOG file. It also forces a VMS accounting\nrecord for EACH network access.\nTo set this value to 10 seconds, do the following:\n$ DEFINE/SYSTEM/EXEC NETSERVERSTIMEOUT "000 00:00:10"\nNOTE: This will cause some additional processes\ncreated\non\nthe\nsystem\nand might\ncause\ndegradations.\n-\n\nto be\nsystem\n\nSHOULD use FALSLOG to enhance audits\n$ DEFINE/SYSTEM/EXEC /FALSLOG "1"\nThis is an UNDOCUMENTED feature in VMS.\nIt inserts\nextended information into the NETSERVER.LOG file. The\npossible bit-mask definitions are:\no\n\nBit-mask (best defined as a character string):\n- Bit 0 - enables logging of filename(s)\n- Bit 1 - enables\nstatistics\n\ngeneration\n\nof\n\nthroughput\n\n- Bit 2 - enables logging of DAP messages\n- Bit 3 - enables logging\ncompletions\n\nof XMIT and RECV\n\nAST\n\n- Bit 4 - enables logging\nrequests\n\nof XMIT and RECV\n\nQIO\n\n40\n\nIMPLEMENTATION TECHNIQUES\nBit 5 - reserved\nBit 6 - disables DAP message blocking\n- Bit 7 - disables DAP CRC error checking\n-\n\nBit 8-31 - reserved\n\nNOTE: By appending the string "/DISABLE=8" to the\nend of the definition you can disable "poor-man\'s\nrouting" from being used on your node.\n$ DEFINE/SYSTEM/EXEC FALSLOG "1/DISABLE=8"\n\n4.2.3\n\nDECnet Objects\n\n4.2.3.1\n\nTASK Object 0 -\n\nThe TASK object (i.e., Object 0) is created during system\nstartup by the STARTNET.COM command procedure. The TASK\nobject may be used by unauthorized users to run a program\nunder the DECnet default account on a given system\nremotely and interactively. Unauthorized users have\naccess to the system\'s facilities without knowing a\nusername and password and with no accountability.\nThere\nare many methods to avoid a possible security problem\nassociated with the use of the TASK Object. Two are\npresented below.\no\n\nRemove the TASK object\nRemove the TASK object from the volatile DECnet\nbase by doing the following:\n\ndata\n\n$ RUN SYS$SYSTEM:NCP <cr>\nNCP> CLEAR OBJECT TASK ALL <cr>\nNCP> EXIT <cr>\nIn addition, because the TASK object gets defined\nevery time the system is rebooted, add the following\ncommands to the system-specific startup\ncommand\nprocedure\n(also\nknown\nas\nSYSTARTUP.COM\nor\nSYSTARTUP_V5.COM under VMS V5.x) after the execution\nof the STARTNET command procedure:\nS eSYSSMANAGER:STARTNET.COM\n$ RUN SYS$SYSTEM:NCP <cr>\n41\n\nIMPLEMENTATION TECHNIQUES\nCLEAR OBJET TASK ALL <cr>\nEXIT <cr>\no\n\nSpecify an invalid username for the\n(control access to the TASK object)\n\nTASK\n\nOne can set an invalid default account for the\nobject\nin\nthe network object data base.\nfollowing are used to do this:\n\nobject\n\nTASK\nThe\n\n$ RUN SYS$SYSTEM:NCP <cr>\nNCP> DEFINE OBJECT TASK NUMBER 0 USER invalid_user PASSWORD invalid_password <cr>\nNCP> SET OBJECT TASK NUMBER 0 USER invalid_user PASSWORD invalid_password <cr>\nNCP> EXIT <cr>\nAn invalid username and password are specified so\nthat the default access on inbound connects to this\nobject\n(e.g.,\nunauthorized\nusers)\nwill\nbe\nunsuccessful.\nNOTE: By specifying a valid userid but an invalid\npassword, a login failure record will be generated\nwhich will alert you to the unauthorized attempt to\nuse the TASK object.\nAuthorized users can connect to the TASK object;\nhowever, an access control string is required:\n$ 8NODE"valid_username valid_passwordn::"Deprocedure\nNOTE: Both of these methods will search for the\nspecified procedure in the home directory of the user\nspecified in the access string or proxy.\nOne can then\nobject\n\nallow\n\nproxy\n\naccess\n\nto\n\nAdd the authorized users to the proxy\nby doing the following:\n\nthe\n\ntask\n\ndata\n\nbase\n\nS RUN SYSSSYSTEM:AUTHORIZE <cr>\nUAF> ADD/PROXY NODE::authorized_username valid_username\n\nUAF> EXIT <cr>\nAuthorized users connect to the task object via:\n$ 8NODE::"Deprocedure"\n\n42\n\nDETECTING/REPORTING SECURITY INCIDENTS\n5 DETECTING/REPORTING SECURITY INCIDENTS\nThis section deals with how to determine if security\noccurred on the system.\n\n5.1\n\nviolations have\n\nDetecting Security Incidents\n\nSecurity incidents can be very hard to detect, especially for\nsuccessful attempts at accessing the system.\nSystems managers,\nhowever, can gain insight by close daily monitoring of their systems.\nIn particular, they should pay close attention to the following:\no\n\nUser accounts\nSomeone logged in during a time that is not normal\nSeveral login sessions, at once, to a particular account\n\no\n\nUnexplained change in the system load. To check to\nis using the system resources, do the following:\n\nsee\n\nwho\n\nfiles\n\nin\n\n$ MONITOR/PROCESSES/TOPCPU\no\n\nUnfamiliar files in:\nDECnet default account (there are NO\nthis directory)\n\nrequired\n\n- SYSSSYSTEM\n-\n\nSYSSMANAGER\n\no Access to ACL protected files\no Unexplained alarms in the OPERATOR.LOG file\no\n\nUnaccountable\n(SYSUAF.DAT)\n\nchanges\n\nto\n\nthe\n\nsystem\n\nauthorization\n\no\n\nExcessive login failures and intrusion invasions.\nthis, do the following:\n\nTo\n\nfile\n\ncheck\n\n$ SHO INTRU <cr>\nIntrusion\nTERMINAL\nNETWORK\n\nType\nSUSPECT\nSUSPECT\n\nCount\n5\n1\n\n43\n\nExpiration\n15:32:23.58\n14:49:00.47\n\nSource\nhost::username\n\nDETECTING/REPORTING SECURITY INCIDENTS\nNETWORK\no\n\nINTRUDER\n\n7\n\n14:58:10.70\n\nhost::username\n\nUnfamiliar images running on the system. To check\nthe following:\n\nthis, do\n\n$ SHO SYSTEM <cr>\no\n\nInstallation of any privileged image\n\no\n\nUnexplained Disk and other system errors\n\nUsers of the system can be a good source for detecting security\nproblems.\nHere are some indications for which they should be on the\nalert:\no\n\nLogin messages should be read, especially the following:\nLast interactive login\n-\n\nLast noninteractive login\nLogin failure message (e.g., three\nsuccessful login)\nDisconnect job message\nstarted\n\no\n\nfor\n\na\n\nfailures\n\nprocess\n\nthe\n\nsince\n\nuser\n\nlast\n\nnever\n\nFile changes, such as:\n-\n\nMissing or renamed files\n\n-\n\nFiles not owned by the user\'s account.\nuser would do the following:\n\nTo check this,\n\na\n\n$ DIR/SECURITY\nDirectory\n\nDISK:[user_directory]\n\nFILENAME.EXT\nANOTHERFILE.EXT\n\n[user_directory]\n[smith]\n\n(RWED,RWED,RE,)\n(RWED,RWED,RE,)\n\nThis means the file ANOTHERFILE.EXT is owned by Smith and\nnot by the owner of the directory.\nUnexplained changes in file protection\nthe user files\n\n44\n\nor\n\nownership\n\nof\n\nDETECTING/REPORTING SECURITY INCIDENTS\no\n\nDisk quota is exceeded and the user was not responsible\n\nEducating the user community will help the system manager maintain an\nacceptable level of security on the system.\n\n5.2 Reporting Security Incidents\nAll suspected security incidents should be reported to the SPAN\nsecurity manager. When reporting a problem, please be sure to include\nthe following information:\no\n\nAll related accounting and PSI accounting records\n\no\n\nAll related NETSERVER.LOGs\n\no All related OPERATOR.LOGs\nSend the report via electronic mail to NCF::NETMGR. This account is\nmonitored by several individuals in the SPAN Network Office at the\nGoddard Space Flight Center. The SPAN security manager is alerted to\nall security incidents reported via this account.\nAfter an investigation is made into the incident, a. formal incident\nreport will be filed if the incident is determined to be a security\nproblem. One will find that the majority of the incidents reported\nend up being legitimate users of the network who make mistakes. These\nare usually cleared up quickly and no incident report is written.\n\n45\n\nSPAN SECURITY TOOLKIT\n6\n\nSPAN SECURITY TOOLKIT\n\n6.1 Introduction\nWith the growth of networks, system security has recently taken on a\nnew importance. The increased exposure of a networked system must be\ncompensated by an increased attention to system integrity.\nThe\nintention to monitor a system more closely, or to reduce exposure, is\ngood but will prove very difficult without appropriate tools.\nVMS supplies many useful security features, but all of these take time\nto monitor and most system managers do not have the time available.\nWe have found this to be the case at the National Space Science Data\nCenter (NSSDC), Goddard Space Flight Center. Rather than giving up\nthe idea of a secure system, we have tried to invent some tools to\nreduce the work involved in tracking the system\'s vulnerabilities.\nThere are no claims that these solutions are perfect, or even ideal.\nMany can, and probably will, be improved in the future. Some were\nwritten at NSSDC by the system management staff for use on their own\nsystem, and some were acquired from DECUS tapes or from other system\nmanagers. All have evolved and been improved with the experience\ngained in using them, and they will continue to evolve as new ideas\nare suggested or new threats appear. Based on the many requests for\nthese programs, it was decided that they should be collected into a\n"toolkit," documented, and modified to improve portability to other\nsystems.\nIn this way, we can answer the requests for help without\nbeing swamped in the process.\nIt is highly recommended that the "Guide to VAX/VMS System Security"\nthat comes with VMS is read. There are a number of features of VMS\nthat can contribute significantly to system security.\nMany of them\nare only mentioned in passing in the various .DOC files in toolkit.\nReading the VMS documentation, especially the system security the\nmanual, is the only way to learn about everything that is available\nand that should be avoided or monitored. The toolkit is intended to\naid in maintaining a secure system. It cannot take the place of a\ngood understanding of the system or eliminate all of the effort\nneeded.\nIt is also very likely that other programs, or better variations of\nthe ones we have in the toolkit now, have already been developed for\nyour system. If this is the case, and it is allowable for these\nprograms to be distributed as part of future toolkits, we would\nappreciate hearing about them. If you have similar programs that are\nnot allowed to be distributed, we would still be interested in hearing\nabout the features these programs have so that we can possibly include\nsimilar features in the toolkit.\n\nPAGE\n\nINTENTIONALLY BUNK\n\n47\n\nTrt_ __.,-..\nPRECEDING PAGE BLANK NOT FILMED\n\nSPAN SECURITY TOOLKIT\nWe expect at least one more release of the toolkit. There may be more\nin the future, but this will depend on the nature of the new\ncapabilities and how useful they turn out to be.\nWe hope that this collection will prove useful.\nIf there are any\nsuggestions for improving the toolkit as a whole or any program\ncontained in it, or other useful programs that are not included here,\nplease let us know. Contact us on SPAN at: NCF::SUPPORT or by the\nphone at (301) 286-9794.\n\n6.2 Why Was It Created?\nWe at SPAN have always stated that the only way to have a secure\nnetwork is to secure each host" attached to the network. During the\nlast Data Systems Users Working Group (DSUWG) meeting, September 1988\nin Anaheim, California, several dozen SPAN node managers asked SPAN\nmanagement to develop a set of system security tools that would help\nthem in their day-to-day system management functions. A presentation\non the types of tools being used at the NSSDC system facility helped\nthe group decide on the basic set to use for the SPAN Security\ntoolkit.\nRecent unauthorized access incidents have indicated that VAX/VMS\nsystems on SPAN are vulnerable to attacks. We at SPAN want to lessen\nthe possibility of a system being penetrated.\nAlso, the Computer\nSecurity Act of 1987 requires computer systems operated by the\ngovernment or for the government to be protected against unlawful\naccess.\n\n6.3\n\nContents Of The Toolkit\n\nThe Security Toolkit consists of a number of programs, text files,\ncommand procedures, and data files. They may be used together, or\nselected systems may be implemented and the rest ignored, as seems\nappropriate for the situation.\nThe kit is organized into a single directory tree. The overall\nstructure of this tree is shown in the following figure. Logical\nnames for the directories (as defined in SECURITY LOGICALS.COM)\nappear on the right. The logical names that start with "SECURITYS"\nare normal logical names used to refer to the given directory.\nThe\nnames beginning with "SECS" are rooted logical names and are used when\nreferring to subdirectories of the given directory.\n\n48\n\nSPAN SECURITY TOOLKIT\n\n[KIT]\n\nSECURITYSDIR\nSECSDIR:\n\xe2\x80\x94[CHECK_FILES]\n|\n+\n\nSECURITYSCHECK_FILES\nSEC$CHECK_FILES\n\n[SOURCE]\n\n+ \xe2\x80\x94 [TAP]\n|\n+\n+\xe2\x80\x94\n\nSECURITYSTAP\nSECSTAP\n[SOURCE]\n\n[SECLOG]\n|\n\ni\n\n+\n\n[SOURCE]\n\n+\n\nSECURITYSSECLOG\nSECSSECLOG\n\n[LOGS]\n\n+\xe2\x80\x94 [UTILITIES]\n|\nI\n+\n[SOURCE]\n\nSECURITYSUTIL\nSECSUTIL\n\n+ \xe2\x80\x94 [DOCUMENTS]\n|\n|\nI\nI\nI\n\'+\n[SOURCE]\n\nSECURITYSDOC\nSECSDOC\n\n+ \xe2\x80\x94 [VERB]\n|\n|\n|\n\n+\n\nSECURITYSVERB\nSECSVERB\n[SOURCE]\n\nThe contents of these directories (in terms of programs/systems) are:\no\n\nTop level directories, logical name and symbol definition\nfiles, security distribution list for use with VMS Mail, an\nAAAREADME.1ST file that directs the user to this document\n\no\n\nThe CHECK FILES system runtime files: decommented .COM\nfiles,\ndata files, documentation, and temporary files.\nCHECK FILES is used to check for alterations to a list of\nspecified files.\nIf changes are found, a mail message is\nsent to notify the appropriate people about it.\n\n49\n\nSPAN SECURITY TOOLKIT\nCommented versions of the .COM files (.SRC extensions),\nRUNOFF source for the DOC file, and a build procedure\nTAP runtime, documentation, startup, and dictionary files.\nTAP is used to check passwords of accounts for security. If\nTAP can guess the password, then any determined person can do\nthe same. It also comes with a sample message to send to the\nusers whose passwords are guessed. The message contains some\nrules for picking secure passwords.\n-\n\nC source code for TAP, RUNOFF input for\nUSER.MESSAGE files, and a build procedure\n\nthe\n\n.DOC and\n\nRuntime procedures and documentation for the security alarm\nextractor.\nThis makes checking the security alarms that are\nwritten to the OPERATOR.LOG file almost painless.\nIt also\nallows the work to be distributed to several people.\nCommented source code for the command procedures, input\nto RUNOFF for the .DOC file, and a build procedure.\n-\n\nSECURITY.LOG files from runs.\nThese\ncontain\nthe\nextracted alarm messages. This directory is empty until\nSECLOG SCAN is run.\n\nMiscellaneous utility programs and the documentation for\nthem.\nMany are used by other parts of the kit, but some are\nintended for use on their own. See the .DOC files in the\nSECURITYSUTIL directory for more details. The programs are:\n-\n\nCRC - calculates\nCHECK_FILES.\n\na CHECKSUM\n\nfor a file.\n\nUsed by\n\nDECOMM - removes comments from DCL command procedures to\nspeed execution.\nIt also allows inclusion of debug\nlines. This is used by most of the build procedures in\nthe kit.\n-\n\nCHECK LOGICALS - verifies that all security kit logical\nnames have been defined and are from the correct version\nof the kit. This is used by most command procedures in\nthe kit.\n\n-\n\nPRIV CHECK - allows easy identification of accounts with\nhigh\nlogin failure counts, various combinations of\nprivileges, or accounts that have been DISUSERed. It is\nused by system managers and not by other parts of the\nkit.\n50\n\nSPAN SECURITY TOOLKIT\nSAFETERM - is used to lock a terminal session to prevent\naccess when the terminal must be left unattended. It\nallows anyone to log the process off to free the terminal\nfor use by another user, but it requires a password to\ngain access to the original process. Help with commands\nfor the program is built in. This is not used by any\npart of the kit; it is intended for system managers and\nusers. It may be run from the SECURITYSUTIL directory or\nmoved to wherever public utilities are kept.\nNote that\nif users are allowed to run it from the SECURITYSUTIL\ndirectory, set the protection to allow access.\nAs\nshipped, all files in the directory are protected against\nWORLD and GROUP access.\nCommented source for all utilities. Build procedures and\nassociated files where appropriate. Utilities involving\nmore than one file are each in a separate subdirectory.\n\no\n\nDocumentation:\nCaptive account dos and don\'ts, documents for the toolkit\nas a whole\nRUNOFF source for the .DOC files and a build procedure to\nrun them off and to move and rename the RUNOFF output.\n\no\n\nVERB - program for listing\nDCLTABLES.EXE\ndefinitions;\nVERB.CLD to define the VERB command, VERB.HLP to build a help\nlibrary entry for VERB, and VERB.DOC to describe the program\nand its use. It also includes VERB__CHECK.COM, -which allows\nan automated comparison of DCLTABLES.EXE against previously\ncompiled records of its contents.\n\no\n\nSource code\nfiles\nfor\nVERB,\ncommented\nversion\nVERB_CHECK.COM, build procedure to regenerate VERB\n\nof\n\nThere are several things that should be known about the files in this\ntoolkit. We have tried to make things like logical name usage, global\nsymbol usage, temporary file creation, documentation, etc., follow a\nconsistent plan.\nMost of this will only matter if system managers\nplan to change any of the programs or alter the overall structure of\nthe kit directories.\nThis consistent system of naming conventions and common file usage is\nonly partly implemented. The level of consistency is high but not yet\nperfect.\nAll of the programs in the toolkit\nwere\ndeveloped\nindependently.\nChanges have been made in many places to remove\ndifferences in style or function, but this process is not complete,\n\n51\n\nSPAN SECURITY TOOLKIT\nand there are places where consistency is possible but not yet\nimplemented. We will attempt to remedy this for the next release of\nthe toolkit.\nIt makes maintenance and use of the programs much\neasier.\nThe first, and most obvious, standard practice is that all command\nprocedures, and some programs, will print out the version number of\nthe toolkit as soon as they are started.\nThis should help prevent\nconfusion when future releases of this system are made (we anticipate\nat least one more) and should allow easy identification of programs\nbelonging to this set.\nAlmost all of the programs and procedures included in the kit make\nreference to directories through logical names. The names needed are\ndefined in the file SECURITY LOGICALS.COM in the top level toolkit\ndirectory. This file must be executed such that the logical names are\ndefined for any process making use of toolkit programs. One may call\nthis procedure from a personal LOGIN.COM file, call it manually after\nlogging in, put the call in the system LOGIN.COM (SYLOGIN.COM), or\ncall it with "/SYSTEM" as a parameter from the system startup\nprocedure to define the names as system logicals. It does not matter\nhow the logicals are defined as long as any process using the toolkit\nhas them in one of its logical name tables or in the system table. If\nthey are not defined, then when used most of the toolkit programs will\nreturn an error message indicating that the logicals are not\ncompletely defined or are the wrong version (this is for future\nrelease of the toolkit).\nAnother practice followed throughout the toolkit is the removal of\ncomments from most .COM files. Comments slow the execution of command\nprocedures and are only needed changes are being made to the programs.\nThere is a command procedure in the utilities directory, called\nDECOMM.COM, that will strip the comments from procedure files. In the\nprocess it renames the original .COM file with a .SRC extension and\nproduces a new .COM file, which is identical except for the missing\ncomments. The .SRC files are kept in the [.SOURCE] subdirectories for\nuse when changes are needed or for describing how the procedure works.\nSome procedures retain their comments and do not have a .SRC\nequivalent. These are mostly limited to program build procedures,\nvery\nshort\nprocedures, and the logical and symbol definition\nprocedures in the top level directory. DECOMM also aids in debugging\ncommand procedures by allowing conditional inclusion of "debug lines."\nSee the DECOMM.SRC file for details.\nAll of the command procedures in the kit that require modification\nbefore use, such as SECURITY8SECLOG:SECLOG_DEFINITIONS.COM, have all\nof the lines that need changing as close to the beginning of the file\nas\npossible\n(consistent\nwith\nreadability and other standard\npractices). The section with the site-specific changes will also be\nmarked as such, with instructions on what to change and what sort of\nvalues should be used.\n52\n\nSPAN SECURITY TOOLKIT\nMany of the procedures in the kit may be run as part of a daily batch\njob.\nTo avoid the necessity of reading the batch log files produced\nby such a method of operation, many of the procedures are designed to\nsend their final results to the appropriate people using VMS Mail.\nThe procedures that work this way will look for a file called\nSECURITYSDIR:SECURITY.DIS.\nIf the file exists, it will be used as a\nmail distribution file. If the file does not exist, the message will\nbe sent to SYSTEM.\nExactly which of the tools contained in the kit should be implemented\nfirst? That depends on the situation. If one suspects that users are\nnot choosing secure passwords, then TAP is a good first step. If the\nsystem is being swamped by security alarm messages every morning, then\nSECLOG might be best. Not all systems will need everything in the\nkit, and each system may have a different priority list.\nThe best first step is probably to read the .DOC files for each of the\nsystems\nand utilities, or the .SRC files for things such as\nSAFETERM.COM, which do not have .DOC files, and learn what they do.\nThen decide on the best order of implementation for the system.\n\n6.4\n\nLicense Agreement\n\nThe SPAN Security toolkit is distributed on a one-by-one basis.\nAll\nSPAN system managers must sign and agree to the license agreement. To\nrequest the toolkit, please do the following:\nSend electronic mail to:\n\nor\nor\n\nNCF::NETMGR\nNSSDCA::NETMGR\nNSSDC::NETMGR\n\nor call:\n(301) 286-7251 or FTS 888-7251\nor send postal mail to:\nSPAN Network Information Center\nSPAN Operations Center\nNASA/Goddard Space Flight Center\nCode 630.2\nGreenbelt, Maryland 20771 USA\n\n53\n\nSPAN SECURITY TOOLKIT\nAfter the request is received, the following steps will be taken:\no\n\nThe license agreement will be mailed to the individual\nrequesting the software (see Attachment A)\n\no\n\nInformation requested in the license agreement will be agreed\nupon by the recipient; and an electronic signature block and\nhost information will be filled in, and the form will be\nmailed back to NCF::NETMGR\n\no\n\nSomeone within the SPAN networking team at GSFC will tell the\nsystem manager the directory path to use to get the toolkit\non the system.\n\no\n\nA phone call or mail message will be sent letting the remote\nnode manager know that the software was copied to the system\nand requiring that the software be secured on the host.\n\nThe above steps will help the\nNetwork\nInformation Center\nhost-related information.\n\nSPAN networking team keep the SPAN\nOn-Line Data Base up to date with\n\n54\n\nSPAN SECURITY TOOLKIT\nATTACHMENT A\nLicense Agreement for the SPAN Security Toolkit\nThis Agreement is made by and between the NASA/Goddard Space Flight\nCenter, National Space Science Data Center (NSSDC), Greenbelt,\nMaryland 20771 (hereinafter "NSSDC"), and the SPAN Remote Node System\nManager/Administrator (hereinafter "Recipient") of this Agreement.\nWhereas, NSSDC has developed software or modified publicly available\nsoftware, including programs and supporting documentation, designated\nas the SPAN Security Toolkit (hereinafter "Toolkit").\nWhereas, the Toolkit was designed to enhance the awareness of computer\nsecurity of the VAX/VMS System Manager/Administrator. (The Toolkit is\nnot designed to be a single comprehensive answer to the problem of\nmaintaining system security.)\nWhereas, users of the Toolkit within the SPAN community have determined\nthat this software is useful in enhancing their ability to maintain\nsystem security for VAX/VMS V4.x machines, and that further development\nshould be fully supported, including adaptation to VMS V5.x.\nWhereas, NSSDC is willing to allow the Recipient access to said\nToolkit for the above-stated purposes subject, however, to certain\nconstraints hereinafter stated;\nNow, therefore, the parties hereto agree as follows:\n1. The Recipient shall not use, disclose, copy, distribute or release\nthe Toolkit for use on any VAX/VMS System other than the system\ndesignated in Enclosure 1; or allow it to be used, disclosed, copied or\nreleased to any VAX/VMS System other than the system designated in\nEnclosure 1. These prohibitions apply to members of the Recipients\norganization as well as others.\n2. NSSDC may, but is not required to, provide software updates to the\nRecipient as they are developed.\n3. The Recipient shall be responsible for installation, and reporting\nthe following to NSSDC; within one month after receipt of the Toolkit:\na.\n\nInstallation problems;\n\nb.\n\nErrors found in the software with respect to programs\nand documentation;\n\nc. A summary explanation and additional detailed documentation\ncovering all enhancements made by the Recipient to the\nToolkit;\n\n55\n\nSPAN SECURITY TOOLKIT\nd.\n\nSuggestions for possible enhancements or improvements to\nthe Tookit, supported by reasons why the Recipient believes\nsuch to be advantageous.\n\n4. Recipient accepts said toolkit as is. NSSDC makes no representations\nor warranties regarding the use or performance of said software and\nexpressly makes no warranty or merchantability of fitness for a particular\npurpose.\n5. In no event will NSSDC be liable for any damages resulting from\nactivities related to performance under this Agreement.\n6. In no event will NSSDC be liable for any fees or costs for\nactivities related to performance under this Agreement.\n7. Recipient shall supply NSSDC with the information requested in\nEnclosure 1 before distribution of the Toolkit.\n8. This agreement is the entire agreement of the parties hereto\nrelating to the Toolkit software. Any changes must be made in writing\nand agreed to by both NSSDC and the Recipient.\n9. Provisions of this Agreement relating to use, disclosure, copying,\ndistribution and release shall be perpetual.\n\nNASA/Goddard Space Flight Center\nSPAN Network Information Center\nCode 630.2\nGreenbelt, Maryland 20771\nATTN:\nRon Tencati\nSPAN Security Manager\ne-mail: NCF::NETMGR (DECNET)\n\nRecipient Electronic Signature:\nNAME:\nJOB TITLE:\nINSTITUTION:\nDATE:\n\n56\n\nSPAN SECURITY TOOLKIT\nSPAN Network Information Center (SPAN_NIC)\nOn-Line Data Base System\nPlease supply us with the following information about your SPAN host:\na) NODE NAME:\nb) NODE NUMBER:\nc) ROUTING TYPE:\n(ex: AREA, ROUTING IV, NONROUTING IV etc...)\nd) ROUTING CENTER:\n(ex. ARC, ESOC, GSFC, JPL, JSC, KSC, MSFC)\ne) HARDWARE:\n(ex. VAX 11/xxx, MICROVAX xx, IBM xxx, etc...)\n\nf) SOFTWARE VERSION:\n(ex. VMS V4.5, UNIX, etc...)\ng) BUILDING/ROOM (MACHINE LOCATION):\nh) DEFINED SPAN_WIDE (Y or N):\n(Do you want other NODEs to be able to access this info)\ni) CONTACT PERSONS NAME:\n(Systems Manager name)\nj) CONTACT PERSONS POSITION:\n(Systems Manager title)\nk) CONTACT SPAN ADDRESS:\n(ex. for me it would be NCF::NETMGR)\n1) CONTACT PERSONS PHONE NUMBER:\nm) SECURITY PERSONS NAME:\n(should be person responsible for security of your system)\nn) SECURITY PERSONS TITLE:\no) SECURITY PERSONS SPAN ADDRESS:\n(ex. for me it would be NCF::NETMGR)\np) SECURTIY PERSONS PHONE NUMBER:\nq) SCIENCE CONTACTS NAME:\nr) SCIENCE CONTACTS TITLE:\ns) SCIENCE CONTACTS SPAN ADDRESS:\n(ex. for me it would be NCF::NETMGR)\nt) SCIENCE CONTACTS PHONE NUMBER:\nInstitution Mailing Address\nu) INSTITUTION:\nv) DEPARTMENT:\nw) STREET:\n(street address for Institution)\nx) CITY:\ny) STATE:\nz) ZIP CODE:\naa) COUNTRY:\n\n57\n\nSPAN SECURITY TOOLKIT\nbb) DISCIPLINE:\nPossible Disciples are as follows:\nAstronomy\nGamma Ray Astronomy\nUltraviolet Astronomy\nInfrared Astronomy\nRadio Astronomy\n\nX-Ray Astronomy\nVisible Astronomy\nMicrowave Astronomy\nCosmic Ray Astronomy\n\nEarth Science\nAtmosphere\nInterior and Crust\n\nLand\nOcean\n\nPlanetary Science\nPlanetary Geophysics\nSmall Bodies\n\nPlanetary Atmospheres\nFields and Particles\n\nSolar Physics\nRadio Observations\nInfrared Observations\nUltraviolet Observations\nGamma Observations\n\nMicrowave Observations\nVisible Observations\nX-Ray Observations\n\nSpace Physics\nIonospheric Science\nMagnetospheric Science\nInterplanetary Studies\ncc) LINKS TO OTHER NETWORKS (NETWORK NAME/NETWORK TYPE):\n(ex. ARPAnet, BITnet, NICEnet, SESnet, etc...)\n\n58\n\nSPAN SECURITY TOOLKIT\n\nFOR YOUR INFORMATION:\nThe National Space Science Data Center (NSSDC) located at the Goddard\nSpace Flight Center has an online network information center called\nSPAN_NIC. The services provided in the online data base system are\nas follows:\n1.\n2.\n3.\n4.\n5.\n6.\n7.\n\nGeneral/administrative information on SPAN\nHow to access other network information centers\nQuery SPAN NIC data base for node information\nSPAN important news briefs\nSPAN InterMAIL addresses \xe2\x80\x94 proper syntax\nSPAN documentation library\nSubmit node\'s information for inclusion in SPAN_NIC data base\n\nIf you want to log into the SPAN_NIC data base system, you can do the\nfollowing:\n$ SET HOST NSSDCA <cr>\nUSERNAME: SPAN NIC <cr>\n\n59\n\n'