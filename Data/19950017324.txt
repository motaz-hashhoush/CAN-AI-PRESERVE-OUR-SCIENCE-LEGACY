b'N95- 23744\nDTS:\n\nBuilding\n\nCustom,\n\nOthar\n\nIntelligent\n\nHansson\n\nand Andrew\n\nHeuristicrats\n\nResearch,\n\nSchedulers\n\n1678 Shattuck\nBerkeley,\n(510) 845-5810,\n\nAvenue,\n\nMayer\nInc.\n\nSuite\n\n310\n\nCA 94709-1631\nFax: (510) 845-4405\n\n{othar, mayer }@heuristicrat.com\n\nKEY WORDS\nDecision\nzation,\n\nAND PHRASES\ntheory,\n\nscheduling,\n\nheuristic\n\nsearch,\n\noptimi-\n\nuser interface.\n\nABSTRACT\nDTS is a decision-theoretic\n\nscheduler,\n\nbuilt\n\non top of a flexible toolkit--this\npaper focuses\non how the toolkit might be reused in future\nNASA mission schedulers.\nThe toolkit includes a user-customizable\nface, and a "Just-For-You"\n\nscheduling\noptimization\n\ninteren-\n\ngine.\nThe customizable\n\ninterface\n\nis built on two\n\nmetaphors:\nobjects and dynamic\ngraphs. Objects help to structure\nproblem specifications\nand related data, while dynamic graphs simplify the specification\nof graphical\nschedule\neditors (such as Gantt charts). The interface\ncan be used with any "back-end"\nscheduler,\nthrough dynamically-loaded\ncode, interprocess\ncommunication,\nor a shared database.\nThe "Just-For-You"\noptimization\nengine\nincludes\nmatically\n\nuser-specific\nutility\ncompiled\nheuristic\n\nfunctions,\nautoevaluations,\nand a\n\npostprocessing\nfacility for enforcing\nscheduling policies.\nThe optimization\nengine is based\non BPS, the Bayesian\nProblem-Solver\n[ 1,2],\nwhich introduced\na similar approach to solving\nsingle-agent\nand adversarial\ngraph search\nproblems.\nDTS SYSTEM\n\nOVERVIEW\n\nThe Decision-Theoretic\ndesigned\nscribed,\n\nto support\nlong-running\n\nPRECEDg"C\n\nScheduler,\n\nscheduling\nprojects.\n\nDTS, is\n\nof over-subDTS is literally\n\n_",\n\n_\n\n_4"\n\n,- ._-\'_....!71 ,v" ./"_,_,*.\n_ ,\'t";* ;_._T F,L,,I_\n:: \'\n\nimplemented\nas a program\nin a specialized\nlanguage for the design of scheduling\nand optimization systems. This DTS Customization\nLanguage (DCL) is implemented\non top of the\npublic-domain\nTCL/Tk system [3].\nDTS has been designed\nfor science-planning on NASA missions. We are preparing\nto\ndeploy the system as one component\nof a costreduction\nprogram\nwithin the Extreme\nUltraviolet Explorer\nmission of the Center for Extreme Ultraviolet\nAstrophysics\nat the University of California,\nBerkeley\n[4].\nWe have explicitly\ndesigned DTS to be\ncustomizable\nby users, and thus transferrable\nto other missions.\n\nAn easily\n\ncustomized\n\nsched-\n\nuling system can reduce costs by eliminating\nthe mission-specific\npaperwork\nand\n"workarounds"\nthat result when a system does\nnot address a scheduling\nscenario completely.\nTo reduce mission costs further, we have\ndesigned DTS so that such extensions\ncan be\nmade quickly and without corrupting\nexisting\ncode or functionality.\nFor example,\nthe current\nDTS interface provides\nmuch of the functionality of commercial\nproject scheduling\ntools,\nbut is implemented\nin under 7000 lines of DCL\ncode. User modifications--such\nas an import\n"filter" for a pre-existing\nfile format, or a specialized report writer--typically\nrequire only a\nfew dozen lines of DCL code. Because DCL\ncode is interpreted,\nprogramming\nerrors are\nsafely trapped.\nBehind the scenes, the DTS "back-end"\ncontains a sophisticated\nconstraint-satisfaction\nsearch engine for use in automated\nscheduling.\nThe use of decision theory permits user preferences and requirements\nto be modeled in a\n\n357\n\nmathematicallycoherent ay.Theresultis\nw\nthat DTScantypically find near-optimal olus\ntions to the user\'sactualproblem,with optimality measured theuser\'sterms.Manyexin\nisting schedulingtechniquesestrictboth the\nr\ndefinition of optimality andthe representation\nof theproblem:theuseris forcedto usea system thatprovidesaquasi-optimalsolutionto\nan approximationof theproblem.\nOur research\ngoal in theDTSback-end\nhas\nbeento providea rich representation probfor\nlemsandpreferences,\nandstill find near-optimal solutionsthroughthe useof compilation,\nlearninganddecision-theoretic earch.\ns\nIn this paper,we describe\ncustomization\nin\nboth thefront-endandback-end, ndthencona\ncludewith a descriptionof futureplansfor applying DTSto NASA missions.\nUSER INTERFACE\n\nwould expect. These basic objects can be subclassed, or specialized,\nfor the needs of an individual application:\nin the NASA version of\nDTS, an Observation\nobject represents\neach\nTask that is an astronomical\nobservation.\nThe system also includes "management"\ninformation\nobjects such as (astronomical)\nTargets, (scientific)\nProposals,\nand Principal\nInvestigators.\nThis information\nis linked to\n"problem"\ninformation\nsuch as tasks by the use\nof cross-reference\nattributes.\nFor example,\neach Observation\nhas an attribute named Target that is a cross-reference.\nThe DTS interface is centered\non an object\nbrowser (Figure 2). Customization\nbegins by\ndefining a new object class, or redefining\nan\nexisting object class. Each object class has an\nassociated\nform, used to display and edit object instances in the browser. A simple default\nform is inferred from the "type" of each attribute (String, Date, etc.).\nMore complex forms require the use of\nDCL code. Figure 2 shows the form for aTemporalConstraint\ninstance. This is the most\n\nCUSTOMIZATION\n\nThe DTS interface\nuses objects and dynamic graphs to support customization.\nAll data in the system is represented\nwithin\nan object hierarchy.\nThe hierarchy\nincludes\nTask objects,\n\nConstraint\n\nobjects,\n\ncomplicated\nform in the system, but it requires\nonly 40 lines to produce a specialized\ndisplay\n\netc., as you\n\nDIS\nScheduler(s)\nInternal\n\nOther\nApplications\n\n-,t--\n\n& Editing\n\nDispatch-Rule\n\nUser\n\nManual\nReport\n\nFigure\n\nProblem\n\nFile I/O (import/export)\nBrowsing\n\nFile System\n\nPreprocessor(s)\n\nScheduling\n\nScheduling\nGeneration\n\n1. Overview\n\nof DTS System\n\n358\n\nArchitecture.\n\nDT$\n\ntell10\n\nTemporalConstraint\n\ntclPrEedu11\n\n"Window"\n\ntdPIr_13\n\nof\n\ntbclProcedosl 4\n\ntime\n\nj tclrrecedesZ\n! tclPrecodes3\n\nlag between\ntasks\n\ntclProcedosG\ntclPmcedos7\ntch_ndow12\n\naxis is\ntask2.start\n\n- taskl.start\n\nY axis is utility\nattribute value.\n\nare parameters\nof utility\n\nFigure\n\nfor a number\n\n2. Example\n\nof interrelated\n\nCustomized\n\nattributes.\n\nLike\n\nmost binary constraints,\nthe temporal constraint has two task parameters.\nIn addition, for\nconstraints\nof type "window,"\na utility function\nis defined by the parameters\nat the bottom of\nthe form. These parameters\nare "animated"\nin\na utility graph. Finally, each type of constraint\nhas an associated\ngraphical\nmnemonic\n(the\nupper left of the form), which reminds the user\nof the nature of the constraining\nrelationship.\nThe second major mechanism\nin the DTS\nuser interface is the dynamic graph. Dynamic\ngraphs are editable "views"\nof a number of objects, built using an X-Y graphing metaphor.\nFor example,\na typical Gantt chart is an X-Y\nplot of tasks (Y), using their start time and duration (X). The DTS dynamic graph permits\nviews such as Gantt charts, PERT charts, constraint matrices\nand resource histograms\nto be\nspecified easily. These graphs are dynamic\nin\nthat callbacks\ncan be associated\nwith user actions\n\n(e.g., mouse\n\nevents),\n\nand defined\n\nify the underlying\ndata appropriately.\nEach of the basic views implemented\nfar has required\n\napproximately\n\nto modthus\n\n250 lines of\n\nForm\n\nin the Object\n\nfunction\n\nBrowser.\n\nDCL code for layout and callbacks.\nApplication-specific\nviews (such as augmented\nGantt\ncharts, statistical\nsummaries,\netc.) should be\nimplementable\nOPTIMIZER\n\nwith similar\n\neffort.\n\nCUSTOMIZATION\n\nThe DTS back-end\n\nincludes\n\nC++ routines,\n\ncallable through DCL, that perform\nbasic preprocessing\nand scheduling\ntasks. This optimization engine uses decision-theoretic\nsearch\nmechanisms\ndeveloped\nby the authors in previous and ongoing work with the Bayesian\nProblem-Solver\n[ 1,2,5].\nThe use of decision theory [6,7,8] enables\nthe engine to guide its search by user-specific\nutility functions,\nin addition to heuristic evaluation functions.\nMany existing schedulers\nuse\nheuristic functions\nalone, but heuristic functions can confuse the role of schedule\nevaluation (utility) and search control (heuristics).\nDTS collects statistics that relate heuristic\nevaluations\nto attributes\nBecause these statistics\nthan outputs\n\n359\n\nof the utility function.\nrelate to inputs rather\n\nof the utility\n\nfunction,\n\nthe func-\n\ntion itself can be modified without invalidating\nthe statistics that have been gathered. The use\nof statistical\nestimation\nand probabilistic\ninference in DTS also permits multiple heuristic\nevaluations\nto be combined\nto focus the search\nmore effectively.\nFor example,\na general-purpose constraint-satisfaction\nheuristic might be\ncoupled\nwith a domain-specific\nheuristic [5].\nIn an early phase of development,\nwe\nfound that the costs of state generation\nand\nheuristic evaluation\nwere a significant\nbottleneck to the development\nof sophisticated\nscheduling\nsearch control. DTS thus also employs an experimental\ncompilation\nmechanism\nthat derives a specialized\ndata structure\nfor\nsearch tree "states" from a formal specification\nof the heuristic function.\nHand-coding\nof such\ndata structures\nreduces the overall cost of\nsearch significantly,\nand we anticipate\nthat the\nautomation\nof these data structures will permit\nthese benefits to be achievable\nfor users relying on domain-specific\nheuristics.\nHansson [9]\ndescribes\nthe compilation\nmechanism\nin more\ndetail.\nFinally, the use of DCL permits a user to\ncode a secure "audit" or "checker"\nroutine to\nvalidate\na finished schedule\nbefore execution,\nor to enforce certain scheduling\npolicies that\nare hard to represent\nwithin the system.\nAlong with other DTS features, these three\nmechanisms---decision-theoretic\nsearch with\nuser-specific\ncompilation\n\nutility functions,\nfor fast heuristic\n\ndata structure\nevaluation,\nand\n\npostprocessing\nfor schedule\nvalidity--have\nbeen designed\nto ensure that DTS finds solutions to the user\'s real problem with a minimum of search cost.\nCONCLUSION\nWe are presently\ncustomizing\nDTS for possible use within current and future NASA missions\n\n(including\n\nEUVE\n\nand CASSINI),\n\nand\n\ncollaborating\nwith NASA researchers\nto reuse\nthe DTS interface\non top of their schedulers.\nWe feel that the customizability\nof DTS\ncan permit future NASA missions to exploit\n"economies\nof reuse" and "economies\nof fidelity." Economies\nof reuse\nresult when development\n\nare well-known:\nthey\ncosts are cut by reus-\n\ning flexible software.\nEconomies\nof fidelity result when a system\ncan be made to solve a large portion of an application task, without a great degree of simplification.\nMany search and optimization\nframeworks\nrequire the user to simplify or abstract their problem into a restricted\nmodelling\nlanguage. This increases the cost of using such\nsystems, and reduces the benefits: the solutions\nfound are not always executable,\nlet alone\nnear-optimal,\nsolutions to the real problem.\nOn\nthe other hand, systems like DTS, and Muscettola\'s HSTS [ 10], attempt to provide a richer\nframework\nfor modeling\nthe problem.\nDTS focuses on preference\nmodeling,\nwhile HSTS focuses on constraint\nand state-variable\nmodeling. We anticipate\nthat compilation\nand\nlearning techniques\nwill permit these rich representations\nto be searched\nefficiently.\nBIBLIOGRAPHY\n[1] Hansson, O. and A. Mayer.\n"Heuristic\nSearch as Evidential Reasoning."\nIn Proc. of the\nFifth Workshop on Uncertainty in Artificial Intelligence, Windsor, Ontario, August 1989.\n[2] Mayer, A. Rational Search. Ph.D. Dissertation, Univ. of Califomia, 1994.\n[3] Ousterhout, J. TCL and the Tk Toolkit. Addison-Wesley, Reading, MA, 1994.\n[4] Center for EUV Astrophysics.\nEUVE Guest\nObserver\nProgram\nHandbook.\nAppendix\nG of\nNASA NRA 92-OSSA-5. Berkeley, Jan. 1992.\n[5] Hansson, O. and A. Mayer. "Decision-Theoretic Control of Artificial Intelligence Scheduling\nSystems." HRI Technical Report No. 90-1/06.04/\n5810, Berkeley, CA, September 1991.\n[6] Pearl, J. Probabilistic Reasoning in Intelligent Systems. Morgan Kaufmann, San Mateo, CA,\n1988.\n[7] Savage, L. J. The Foundations of Statistics.\nDover, New York, 1972.\n[8] yon Neumann, J. and O. Morgenstem. Theory of Games and Economic Behavior. Princeton\nUniversity Press, 1944.\n[9] Hansson, O. Bayesian Problem-Solving\napplied to Scheduling.\nPh.D. Dissertation, Univ. of\nCalifomia, 1994.\n[10] Muscettola,\nN. ttSTS-DDL\nManual,\nNASA\n1994.\n\n360\n\nAmes Research\n\nCenter,\n\nCode FIA, March\n\n'