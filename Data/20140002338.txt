b'Develop a Model Component\nTyler Ensey\nKennedy Space Center\nMajor: B.S. in Electrical Engineering\nKSC FO Fall Session\nDate: 29 07 2013\n\nNASA USRP -Internship Final Report\n\nDevelop a Model Component\nTyler S; Ensey\'\nUniversity of Central Florida, Orlando, FL, 32828\n\nDuring my internship at NASA, I was a model developer for Ground Support Equipment\n(GSE). The purpose of a model developer is to develop and unit test model component\nlibraries (fluid, electrical, gas, etc.). The models are designed to simulate software for GSE\n(Ground Special Power, Crew Access Arm, Cryo, Fire and Leak Detection System,\nEnvironmental Control System (ECS), etc. ~ .) before they are implemented into hardware.\nThese models support verifying local control and remote software for End-Item Software\nUnder Test (SUT). The model simulates the physical behavior (function, state, limits and\n110) of each end-item and it\'s dependencies as defined in the Subsystem Interface Table,\nSoftware Requirements & Design Specification (SRDS), Ground Integrated Schematic\n(GIS), and System Mechanical Schematic .(SMS). The software of each specific model\ncomponent is simulated through MATLAB\'s Simulink program. The intensiv~ model\ndevelopment life cycle is a.s follows: Identify source documents; identify model scope; update\nschedule; preliminary design review; develop model requirements; update model .. scope;\nupdate schedule; detailed design review; create/modify library component; implement\nlibrary components reference; implement subsystem components; develop a test script; run\nthe test script; develop users guide; send model out for peer review; the model is sent out for\nverific~tionlvalidation; if there is empirical data, a validation data package is generated; if\nthere is not empirical data, a verification package is generated; the test results are then\nreviewed; and finally, the user. requests accreditation, and a statement of accreditation is\nprepared. Once each component model is reviewed and approved, they are intertwined\ntogether into one integrated model. This integrated model is then tested itself, through a test\nscript and autotest, so that it can be concluded that all models work conjointly, for a single\npurpose. The component I was assigned, specifically, was a fluid component, a discrete\npressure switch. The switch takes a fluid pressure input, and if the pressure is greater than a\ndesignated cutoff pressure, the switch would stop fluid flow.\nNomenclature\nGIS\nCOTS\nGSE\nLCS\nSMS \xc2\xb7\nMTR\nMRDD\nGUI\nUCTS\nSLS\nPRSD\nDPI\np\n\nv\nT\nk\nq\n\nz\nA\n1\n\nGround Integrated Schematic\nCommercial off the Shelf\nGround Support Equipment\nLaunch G,ontrol Systems\nSystem Mechanical Schematic\nModel Test Report\nModel Requirements and Design Document\nGraphical User Interface\nUniversal Coolant Transporter System\n\xc2\xb7\nSpace Launch System\nPower Reactant Supply and Distribution\nDefault Physical Interface\npressure\nflow velocity\ntemperature\nk-value\nq-value\nelevation\narea\n\nKSC FO Intern, NE-Cl, Kennedy Space Center, University of Central Florida.\n\nKennedy Space Center\n\n1\n\n07/29/2013\n\nNASA USRP- Internship Final Report\n\np\n\ndensity of fluid\nHead Loss\nhL\ngravity (32.2 ft/sec 2)\ng\nsubscript 1 = input of container\nsubscript 2= output of container\n\nI. Introduction\nHE development of models is crucial for testing software before it is implemented into the hardware. Since the\nsoftware cannot be tested on the hardware immediately, because of possible issues that could arise, such as, in\nextreme cases, the possibility of breaking the hardware in question or other hardware as a result of the effects the\nsoftware has on the. hardware. Instead, a model of the hardware is made in an environment, so that the effectiveness\nof the software can be tested in a safe and feasible environment.\nEach model is ftrst made independently and tested, before it is incorporated into either another model, or into the\nlarger scale model, known as the Ground Integrated Schematic (GIS). This takes much cooperation and\ncoordination, something I learned a great deal about during my internship. This is because sometimes a different\nmodeler will create the system test for a model that was developed by a separate modeler. Therefore, the modeler\nwho created the model needs to put in adequate requirements, to make it easier for the system test to be made. Also,\nthe modeler designing the system test needs to be sure to coordinate with the original modeler, to be sure that any\nchanges made to the original model will not change the desired outcome of the component. Another consideration\nthat needs\' to be taken into account is the effect on the schematic. The modeler needs to be certain of the\nrequirements of their model and what should and should not be included as the inputs, outputs, subsystems,\nparameters, etc.\n\nT\n\nll. Description\nOn my ftrst day at NASA Kennedy Space Center, I was informed that I would be working ~owards designing and\ntesting my own fluid component, and also performing system tests on models that were already developed. The fluid\ncomponent that was assigned to me was a discrete pressure switch. The ftrst requirement was to do adequate\nresearch on the discrete pressure switch, the environments I would be working with, and all other considerations that\ngo into being a model developer, in order to thoroughly understand the operations I would be performing and\nunderstand why a pressure switch would be necessary in a system.\nA. Simulink\nEvery component is modeled in the Simulink environment. Simulink is a Commercial off the Shelf (COTS)\nsimulation tool, created by the company MathWorks. Simulink is used for multi-domain simulation and developing\nmodel based designs. Simulink provides the user with an environment that is both one that provides the user with\nboth a visual and interactive experience. Customizable block libraries are another feature that Simulink graces to the\nmodeler. These libraries are used to design, simulate, and test multiple time-varying systems within the Simulink\nenvironment. These systems include communications, controls, signal processing, video processing, and image\nprocessing. 1 Many different industries utilize Simulink for the development of mathematical models of physical\ndynamic systems. In specific, my coworkers and I, used/are using Simulink and multiple libraries, libraries provided\nwithin Simulink by MathWorks and also a set of KSC developed custom libraries, to construct models of Ground\nSupport Equipment (GSE). 2\nThere many ways of doing mathematical calculations. In this case, there are ftve recognizable ways designated\nby the Launch Control Systems (LCS) simulation group: Simulink blocks, embedded MATLAB functions, stateflow\ndiagrams, Simulink look-up tables, and truth tables. There are certain requirements for each of these. Simulink\nblocks should contain equations that are broken up into logical, contained units, and the equation should be\npresented in a readable way. This is often achieved using the Simulink "Subsystem" block. Simulink "Integrator"\nblocks are typically used within the developing community to represent physical quantities, such as pressure,\ntemperature, etc: Also, the parameters "Upper Saturation Limit" and "Lower. Saturation Limit," of the "Integrator"\nblock, should be populated with acceptable limits of the physical quantity. For example, most negative quantities\nwould not be expected in a real world situation, so most "Integrator" blocks would have a "Lower Saturation Limit"\nof "0." Lookup tables can be helpful, but the developer should not import data into lookup tables using Excel ftles.\nInstead, the ftle should be converted into a .csv ftle and then "csvread" should be used in the callback section of the\n\xc2\xb7 model to import data. Truth tables are useful as decoders and controllers, especially when used in multiple places.3\n\nKennedy Space Center\n\n2\n\n07/29/2013\n\nNASA USRP -Internship Final Report\n\nDesign\n\nImplementation\n\nApproval\n\nlmplemenl Library Component\nIdentifY Source\nDocuments or Data\n\nModel Requirements and\nDesign Document (MRDD)\n\nFigure I. GSE Library Component Lifecycle. This figure represents all of the planning and execution during the lifecycle of a\nGS\xc2\xa3 Library Component.\n\nB. GSE Library Component Lifecycle\nModel Development for a GSE model is broken into three phases: Design, Implementation, and Approval. A\nvisual representation of this process is shown in Fig. l.\nThe Design phase is focused on establishing structure and external interfaces. These models represent\ncomponents of the GSE Subsystem and they, without exception, must coincide with the LCS Simulation Modeling\nStandard. Design is begun once the necessity for a GSE component is recognized, and a schedule for the\ndevelopment has been created. Source documents must first be identified in the Design phase. These documents may\ninclude: GIS/System Mechanical Schematic (SMS), which identifies the manufacturer and model of a component\nand its functional parameters; Design Dictionary, which includes cutsheets of the specific component type and\nfunction parameters; and/or, ConOps, which describes the function of the component. Component scope is then\nidentified, which includes layout and unique feature identification. For layout, the user must identify internal\nstructures the will help in easily showing the complexity of certain interactions. Some great things to consider are\ngrouping blocks, within Subsystems, based on their function, and also the reusability of the component, as simplicity\nis the key if it will be used in multiple other components. For unique feature identification, the user must identify\nwhat internal functions are unique, meaning the component cannot be developed by using readily available library\nblocks or components. Requirements must be developed within the Design phase. There are three types of\nrequirements that should be concluded before moving to next phase: Test Scenario Requirements, which establishes\npoints of verification, to ensure that the component being testes functions as desired; Training Scenario\nRequirements, which establishes fail-safe requirements; and, finally, Functional Requirements, which are the\n\nKennedy Space Center\n\n3\n\n07/29/2013\n\nNASA USRP- Internship Final Report\n\nrequirements that the component must meet in order to be of use to the GSE Subsystem Model. The schedule is then\nupdated, as needed, and the modeler moves on to the next stage, known as Implementation.\nThe Implementation stage is focused on developing the component and the test scripts. Common-use\ncomponents, subsystem-specific components, and Simulink Primitive blocks should be arranged into Simulink\napproximations. Test Scripts must then be developed. Draft steps are created to verify the software is behaving\naccurately. Draft steps must also be produced to test the interface function, given that there are explicit interfaces\nwith another block. The Test Script is then run, and the test data \'is recorded in a Model Test Report (MTR). A\nModel Advisor check will verify that Simulation Standards are met. Finally, a Model Requirements and Design\nDocument (MRDD) will show the requirements, structure, parameters, and referenced libraries within a single\ndocument, and the user may now move on to the Approval phase.\nThe Approval phase is focused on reviewing the GSE Component model and approving it for use within the\nschematic. In the Approval phase, peer review will commence. The MRDD, MTR, and Test reports are distributed\nto the Simulation team, through a Graphical User Interface (GUI), known as AccuRev, so that peer review can\nbegin. Comments are gathered pertaining to the validity of the requirements, implementing logic, and test results.\nOnce a response from two SIM Team members and a Subject Matter Expert, appropriate changes are made to the\ncomponent, and the MRDD, MTR, and Model Advisor Report are regenerated. The fmal step is to prepare and\nsubmit the Approval Package. This package is objective evidence of the successful completion of the Library\nComponent Peer Review. Once the SIM Product Group Lead approves the model, the development of that\ncomponent is officially complete, and can now be used in the GSE Subsystem model. 4\nC. Universal Coolant Transporter System (UCTS)\nThe specific GSE that the pressure switch will be used for is known as the Universal Coolant Transporter System\n(UCTS), which was a Space Shuttle Orbiter support system, but is being upgraded and repurposed for the Space\nLaunch System (SLS) rocket. The UCTS is used for two main services, coolant servicing and Power Reactant\nSupply and Distribution (PRSD) servicing. Coolant servicing is used once the Orbiter lands; the Ammonia Boiler,\nwhich cools the avionics and payloads on board the orbiter, is shut off upon landing, so the Orbiter is connected to\nthe UCTS in order to keep the avionics and payloads from getting damaged by overheating. PRSD servicing allows\nfor the deservicing ofpropellants. 5 The operating system of the UCTS is shown in Fig. 2. The four main parts of the\nsystem, the primary loop, the secondary loop, the refrigeration subsystem, and the pump/reservoir operation are\ndescribed below:\nPRIMARY LOOP\n\nR-124 in the primary loop\ncan exit the Orbiter at 30 to\nI 00 degrees F with a\nmaximum heat load of\n128,000 Btu/h. Experience\nin operations has shown\nthat the Orbiter return\ntemperature is maintained\nat 60 ~.The R-124 return\nfluid first encounters the\nsystems\'\nprimary\ncirculation pump, located\non the reservoir I pump\nsubsystem. After which\nthe flow is split into two\npaths. A portion of the\nll\xc2\xb7JI 4\nprimary loop fluid is routed\nto\nthe\ntemperature\ncontrolled mixing valves,\nlocated on the circulation\ncontrol subsystem. This\npath is the source of the\nwarm fluid that is mixed\nwith the cold fluid which is conditioned by the secondary loop. The remaining portion of the primary loop is\nrouted to the secondary Figure 2. The Universal Coolant Transporter System. This is the mode/for the\nloop\nheat\nexchangers\n.\n\xc2\xb7 \xc2\xb7\nd\' . ed\noperatmg system of the UCTS.\nwhere 1t 1s con 1tton to\nI 0 \xc2\xb0 F. From the heat exchangers the fluid proceeds direct to the temperature controlled mixing valves. At the\n\n.....\n\nKennedy Space Center\n\n4\n\n.\n-...\n\n07/29/2013\n\nNASA USRP -Internship Final. Report\n\ntemperature controlled mixing val ves all or none of the fluid can be directed to flow through the secondary loop\nheat exchangers.\nSECONDARY LOOP\nThe secondary loop is simple. The PLC monitors only one variable (temperature) and adjusts it through a single\ndevice, the heater, into a constant. Flow in the secondary loop is preset and fixed. Empirical data taken at OPF-3\nhas proven the criticality of flow rate in order to make the system work. The secondary loop elimina~es all\nvariables ensuring the greatest reliability and ease in troubleshooting. ( ... ) As a result of the temperature\ncontrolled mixing val ves, all or part of the primary loop flow can be directed to the secondary loop heat\nexchangers. The portion of primary loop return fluid directed to the secondary heat exchangers, flow varies,\ncausing changes in the heat load and secondary fluid temperature; however, the thermostatically controlled\nheaters in the secondary loop maintain the fluid going to the refrigeration subsystems at a constant design\ntemperature.\nREFRIGERATION SUBSYSTEM\nThe UCTS has two identical refrigeration subsystems, piped in series into the primary loop, via the secondary\nloops. Each refrigeration subsystem is sized to handle 87,000 Btu/h at 110 \'degrees F desert conditions.\nExperience has shown that the maximum Orbiter heat load generated during post landing operations is 60,000\nBtu!h, and averages 40,000 Btu/h. The refrigeration subsystem is basic and consists of a positive displacement\ndiscus compressor; refrigerant receiver, air-cooled condenser; suction heat exchanger I accumulator; an\nexpansion val ve and chiller barrel.\nPUMP I RESERVOIR OPERATION\nThe primary pumps are configured in series. One pump is required for normal operation, and the second is\nprovided for back up. Series configuration was chosen to meet any future pressure increase requirement. The\npump operation is locked out by software preventing undesired operation of. two pumps simultaneously. }he\nsecondary pumps are also configured in series to accommodate space allocation. ( ... ) The reservoir maintains\nboth the primary and secondary loops. This decision was made to accommodate space allocations. The reservoir\nwas piped as an accumulator (out of the flow path) vs. in line to allow for system temperature stabilization of the\nsecondary loops. 5\n\nD. The Discrete Pressure Switch\nA pressure switch reads the input pressure of a certain fluid, allowing for normal operation. Once the pressure\nreaches a certain designated "cutoff\'\' pressure, the switch will turn to\xc2\xb7 open or closed, depending on the normal\noperation. The pressure switch is a simple but undeniably important part of the system. The pressure switch makes\nsure that a safe pressure is maintained, and once that safe pressure is exceeded, the pressure switch switches to the\nnon-normal state. The fluid component reads the input pressure \xc2\xb7and delivers a value, whether Boolean(O) or Boolean\n(1), depending on the normal condition, to an electrical model that will calculate the necessary electrical outputs,\nand cutoff the flow of electrical current.\nill. Fluid Component Model\nA. The Library Component\nOnce I had done adequate research on what I was\n.a\'t\nmodeling, what needed to be calculated, what variables RITCH. ......_ Qee:Mttl\n8WOioM\nt:iil\nneeded to be established, and how I would go about\ndeveloping this model, I was required to create a library\ncomponent for the discrete pressure switch. I designed a\npicture that coordinated with the desired image, specified\nin the GSE Standard document. 6 This image and my\ncoordinating drawing is shown in Fig. 3. There is a\npreviously developed library component known as a Figure 3. Mask Image. The above figures represent the\nDefault Physical Interface (DPI}, which represents all of desired and actual images for ihe Discrete Pressure Switch.\nthe important variables that should be inputs and The figure on top is the figure designated in the SMS, and the\ncalculated outputs. For fluids, these variables are figure below it is my created drawing.\npressure, P, flow velocity, V, temperature, T, k value, and\nq value. A DPI allows for all of the changes on these variables to be passed through a single port, which is important\nfor the detailed schematic diagram. A DPI was connected to a subsystem, named \'DoCalc\', which models the\nfunction of the pressure switch, and returns the output values for each variable, shown in Fig. 4. This is shown\nwithin the There is also a \'goto\' block, which takes either a Boolean(O) or Boolean(!) value, depending on the\ncutoff pressure and if the input pressure exceeds that cutoff pressure, and sends it to an electrical component which\nwill cutoff the electrical current. Temperature, k, and q are not affected by the pressure switch. Output velocity and\n\nEJ\n\nKennedy Space Center\n\n5\n\n07/29/2013\n\nNASA USRP -Internship Final Report\n\n-tP\n~ VOl U\n\np\n\nT\np\n\nT\n\nT\n\ns\n\nI\n\nu\n\nu\n--10 K\n\n0.0 \xe2\x80\xa2.;.\n\np ...\n\n.... ....\nN\n\n_r::l\n=w.;.\n\nI\n\n0\n\ns\n0\n\nI:;\n\n0.0\n\n..._.,\n\nTjo\n\n._ ...\n...\n\nIl l\n\nq\n\n10 1\n\nIOJOII\n\nF_OPI\n\n...\n\nVtLooA\n\n~\n------+ VtL"\n\ntt:z\n\n"""\n\n--;;;--\n\nr_out \'"\n\ntt:z\nT_in\n\nP_...\n\n,.........\n\n~~\xc2\xb7,\n\nE_M<h_Pnounatic;_PT....,._32t0_~\n\n....,\n\nGolD\nOoColc\n\nFigure 4. Model of the Connected DPI and \'DoCalc\' Subsystems. This figure represents the Discrete Pressure Switch in its\nsimplest form (without the actual calculations, which are represented within the \'Do Calc\' subsystem.\n\noutput pressure however will differ from their relative inputs and outputs, as a result of the component. Thus,\nvelocity and pressure must be calculated within the model. The equation for doing so is known as Bernoulli\'s\nequation. This equation is as follows:\n\n_\nP2 -\n\nP2g\n144\n\n[c\n\nZ1 -\n\n)+ - - + - - - h ]\n2\n2\nV1 - V2\n2g\n\n144\xe2\x80\xa2 Pt\nPig\n\nZz\n\nL\n\n(l)\n\nSince we do not know V2, we must calculate the output velocity first, using the following equation:\nAt * vl\nVz = - - Az\n(2)\nEquations (2) and (1) are represented within two separate subsystems within the \' DoCalc\' subsystem shown in Fig.\n4. Since V2 is needed for the calculation ofP 2, the output for the subsystem representing equation (2) is connected as\nan input for the subsystem representing equation (1). Pind is also an output of the subsystem, and is connected to a\n\'goto\' block; this output represents the Boolean(O) or Boolean(!) value that tells the electrical component what it\nshould perform. A test model was then created with another DPI connecting the 1/0 port to the pressure switch\'s\nmask, and a \' from\' block going to a separate output, which represents Pind in the test. For more information on the\ncomplex.ity of the Bernoulli \' s equation, see Ref. 7.\n\nB. The Test\nA MATLAB script is written within the test harness, in order to test if the desired outputs are indeed being\ncalculated. The test is then run, and the expected output values are compared to the actual output values, and a pass\nor fail prompt is returned to the user. A portion of the written test script is shown in Fig. 5. Once the test script\npasses on every iteration (the number of iterations is based on the number of user designated expressions for the\nlength of each input, and the program determines the calculated number of possible iterations), an autotest is run.\nThe autotest will run Model Advisor and the system test, and then produce the MTR, MRDD, System Test, and\nModel Advisor documents. These documents (only small portions, per their large sizes) are represented in Fig. 6.\nAfter these documents have been produced, the library component, the test model, the test script, and the documents\nare uploaded to AccuRev, and when ready, will be peer reviewed for acceptation.\nfor i - 1:nu\xe2\x80\xa2Steps\n\n\'!\n\nVelOexp{i) \xe2\x80\xa2 ((r1)A2 \xe2\x80\xa2 hl \xe2\x80\xa2 Valin) I ((r2)A2 \xe2\x80\xa2 h2);\nPOexp(i) - (ro \xe2\x80\xa2 32 .2 I 144) \xe2\x80\xa2 ((z1 - z2) + (144 \xe2\x80\xa2 Pin I (ro \xe2\x80\xa2 32.2)) ~ (((Ve1In)A2 - (Vel0exp(i))A2) I (2 \xe2\x80\xa2 32.2)) - hl);\n\nFigure 5. MATLAB Test Script. This is a representation of a small portion ofthe Test Script that is used to test the fUnctionality\nof the Discrete Pressure Switch.\nKennedy Space Center\n\n6\n\n07/29/2013\n\nNASA USRP - Internship Final Report\n\na)\n\nb)\n\n\xe2\x80\xa2\xe2\x80\xa2\xe2\x80\xa2\xe2\x80\xa2ll\xe2\x80\xa2k.,.,...w:,,.swttce._ Te\xe2\x80\xa2t\n,_,.,,.,._\n\n.......... .:UHI\n\nUbrary Component: F..PNssuN,.Swltch\n\n67oll1,uwd\n\nModel RequiNmentll and Decl8n Document (MRDD)\n\nc.n\xe2\x80\xa2 ,..a: u -J...atu 11:u,a\n\n1VIU..:\n\nDate::21\xc2\xb7Jwt-201S\n\xe2\x80\xa2 t Md: ..... l,IKaJ 11.......... . .. ,.... . _.. . . . . . fw bewa ............\n\nChapter 1. Root SvsWm\n\nllustd\n\n\xe2\x80\xa2\n\nltllltlf\'V . . . . MdH\n\nDla\xe2\x80\xa2ram\n\nu.... hi, ............ . ..... .-rts\n\nP.sA4\n\na) The Model Advisor Document\n\nc)\n\n.,..\n.,..,.,.,\n..,.\n...\n\n...,\n...\n\n::_ ,\n\n~ .... 1\n\nTo\n\n._\n\n1\' ,\n\n1\n\n1\n\n...\n\n,\n\nTOUf\n\n.. ,. ..,. ..\n\nT. . .\nTRUf\n\n~\n\nA\n10\n\n......... ,.,....\nPoltTttt\n\nRequi Nments\n<t_Pr_t_swudl.~_oot ,\n\n----\n\nftll r ...ruuw\xc2\xb7e_Jlritoll_3110 lt1.ook IMll Uif:a-t tM\n\n...,u- for\n\nYel.Ciut. tout. TOut. MQ.t,. - \' OOut\n\n.............. ..,.,..,~~JIIlot.MOOll.....,.....,_Do . . . . . . . . .tiP_,....._~\n\n\'..c ~~..~Tetl.rtWib:...\n1-fi\'- ~ ~ \xe2\x80\xa2 \xc2\xb7~\n~\n, ..P\'Nfl""\'-lhlctL.Tnt.JepoM_,.....,._SwlciL.TMl.,.,crll*ll\n!Oat . t\'ll\\\nUMt\xe2\x80\xa2kl:n\n\nOODt \xe2\x80\xa2\n\ncu:n\n\n..\n\n~~.~-= =~n-;::~r.. ~ ~~~Jr.:\':ro~\n1N1\n\n-.t.. u-w,.r .u.tput., 1.\n\n<W..I\'rn~_lritctt.IL,OOl l\n\nb) The MRDD Document\n\nc) The Test Script Document\n\nd)\n\nLibrary Component: F_Pressure_Switch\nMath Model Test Report (MTR)\nDate: 16\xc2\xb7JUI\xc2\xb7:Z013\n\nChapter 1.. Report Location\nAocurev l.ocatiorL :\n\n. /li bs/fluidltest/P_Ptee:wre_Svitchlreet/!\'_Preeeure_SVitch_l\xc2\xa31R. h tal\n\nChaptar 2. Ceneral Software Environment and Assumptions\nl , 1 Teot EnvirONOmt\nTesting will be pe\'ffon.ed en m i.Niividual baeis &t dadic&ted wo\'fk.abticme, euch u an office environunt.\nWhenever p o ~s ibl.e. te ~ti n g rill be pe rfonned with llathworb Siaulink/l!latlab suite of pro gramti ng and si.Jwlati on toola /onvi rollll.8ll.t.\n!;p~~~~~~t!:~a~!~~ ::~~t!d:ired that exceeds the scope of Sill\\llink te~;\xc2\xb7 ~uch a~ \'l1UCK i nterface . In thea e cases. the\n\n1. 2\n\nA!I :!IUIIption~\n\nAll aeabera of the test teu. are fu.iliar Vlth test1ng tool! , auch u the Mathvorks Surulink..,/Matlab auite of aof\'CW\'are toola or the \'l\'ftiCJ:. envirDNlent.\nAll a eahen of the te ~t team have COII,Patible veraiOM of the te!ltinq toob .\nAU aeabera of the teat team. have access aoftnlre sue repository, euch aa Aecurev, KDDl!IS, etc\nAll pathnue locations in this report are rel ative to the A\nccurev_path :\n. /libs/fluid/test/f_Pressure_Switch!Ie:st\n\n1. 3 Scope Purpose\nThi1 teat report provides a SUJUlary of the teste exeeuted agatnat a pArticular co11.ponent for the purpose of ve nflcatton\n\'the Tn t Swn.auy \'ection i dentifies the t ests that have been cun, the requirea ents satisfied with each test. any required\ni.r\\put fllea for the teat, the l ooation of the detatled teat report in accurev, tea t execut1on tnfot11111t1on and a Final Status for\nthe Pass /rail criteria for the test.\n\nChapter 3. Test Summary\nLoocation: ~lprjlmodeladvisor Jr_Pre ssur e_Swi tch_Tes t / repor t. htal\nP1nal Status : passed\n\nd) The MTR Document\n\nFigure 6. Documents for Discrete Pressure Switch. These are the MTR. MRDD, Test Script, and Model Advisor Documents for\nthe comoonent that reoresent all desirable asoects ofthe comoonent.\n\nKennedy Space Center\n\n7\n\n07/29/2013\n\nNASA USRP -Internship Final Report\n\nIV. Conclusion\nMy GCS component is currently awaiting peer review and will hopefully be reviewed and returned to me before\nmy internship has concluded. This internship has given me great insight as to what kind of workplace career can be\nexpected once my college career has concluded, and I can happily say that I look forward to every second of it. It\'s a\ncompletely different lifestyle than college, a more enjoyable lifestyle that is. Every day starts off early, and you are\ndone in time to enjoy your afternoons. You have your work life and your hom~ life, unlike college where work life\nand home life turns -into one big blur of work, to a point where you do not remember which is which. That\'s not to\nsay you can slack off on the clock. You are representing you and everything you stand for, something that I am\nunwilling to compromise. When I\'m here, it\'s not about getting by, it\'s about showing everyone, including myself,\nthe type of employee that I can be. So, if you are reading this as a future intern, money should not be your only\nmotivation; whether paid for or not, your pride and fortitude should drive you to be the best employee and coworker\nyou can possibly be.\n\xc2\xb7\nAcknowledgments\nI would like to thank a few people who were crucial to my success during my internship at KSC. First, I owe\nCheryle Mako my greatest gratitude for giving me this life changing opportunity, and giving me a chance to\nsucceed, while being able to see what my future has in store. Next, I would like to thank Lien Moore for all her hard\nwork and diligence towards everything she does. Although she is a perpetually busy employee, she consistently\nensured time to assess if I had any problems or questions in which she could provide solutions. She undoubtedly\ngave me the feeling that she genuinely was concerned with my well-being, something that I did and always will\ncherish deeply. Finally, I would like to thank Camiren Stewart; Cam was perhaps one of, if not the, most helpful\nmember ofNE-Cl. I felt that he could relate to me in a way that no one else could, because he was fairly recently an\nintern at KSC, but at the same time he is intelligent far beyond his years. The fact that he was in my shoes just a few\nyears before me, as I sit in a similar place and type on a similar computer as he did, is unbelievable. He is the perfect\nmodel of what I aspire to be in a year, when I graduate college. He is an asset that NASA should be immensely\nproud to have, but should be appalled at the thought of losing.\nReferences\n1\n\nMATLAB, Ver. 7.9.0 (R2009b), The MathWorks Inc., Natick, MA, 2009.\n2\nGrant, K., "Simulation CSCI Software Design Description," Document Number: KOOOOIII998-GEN, Archive URL:\nhttos://sp.ksc.nasa.gov/ne/simulation/Shared Documents, NASA Kennedy Space Center, Merritt Island, FL, 2013.\n3\n" LCS\nSimulation\nCSCI\nModeling \' Standard,"\nDocument\nNumber:\nGOP507228,\nArchive\nURL:\nhttps://sp.ksc.nasa.gov/ne/simulation/Shared Documents, NASA Kennedy Space Center, Merritt Island, FL, 2013.\n4\nMoore, L. , " E2E CC SDP Volume 4," Document Number: K0000143174-PLN, Archive URL:\nhttps: //sp.ksc.nasa.gov/ne/simulation/Shared Documents, NASA Kennedy Space Center, Merritt Island, FL, 2013 .\n5\nKatz, M., "Universal Coolant Transporter System Technical Manual & Operating Criteria," URL: https://usa2.usaspaceops.corn/tl/ucts/a80k59593 index.htm, NASA Kennedy Space Center, Merritt Island, FL, 2013.\n6\n"Graphic Symbols for Drawings Part 2 Standard for Ground Support Equipment," Document Number: KSC-STD-152-2C,\nArchive URL: https://sp.ksc.nasa.gov/ne/simulation/Shared Documents, NASA Kennedy Space Center, Merritt Island, FL, 2013.\n7\n" Bernoulli\'s Equation," Princeton Uni versity, URL: http://www.princeton.edu/-asmits/Bicycle web/Bernoulli.html, 29 July\n2013.\n\nKennedy Space Center\n\n8\n\n07/29/2013\n\n'