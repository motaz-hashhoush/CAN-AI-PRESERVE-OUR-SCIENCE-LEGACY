b'N90-\n\nvon Karman\n\nInstitute\n\nLecture\n\nSeries\n\nNUMERICAL\n\nGRID\n\nJune\n\nUNSTRUCTURED\n\nJ. Peraire,\nhnperial\n\n11-15,\n\nMESH\n\nfor Fluid\n\nDynamics\n\n1990-06\n\nGENERATION\n\n1990\n\nMETHODS\n\nK. Morgan,\nCollege,\n\n29 61_1\n\nFOR.\n\nJ. Peiro\n\nLondon,\n\nUK\n\nCFD\n\nCONTENTS\n\n1.\n\nINTRODUCTION\nTO FINITE\nIMPLEMENTATION\n\nELEMENT\n\n1. !\n1.2\n1.3\n2.\n\nStructured\n\nDiscretisation\ntechniques\nThe finite element method applied\n\nGEOMETRY\n2.1\n2.2\n\n3.\n\nDATA\n4, I\n4_2\n4.3\n4,4\n4.5\n\n5\n\n6\n\nmeshes\nto the compressible\n\nEuler equations\n\nMESH GENERATION\n\nBY THE\n\nADVANCING\n\nFRONT\n\nThe advancing front technique\nCharacterisation\nof the mesh: mesh parameters\nMesh control: the background mesh\nCurve discretisation\nTriangle generation in two dimensional domains\nSurface discretisation\nGeneration of tetrahedra\nMesh quality assessment\nApplication examples\nSTRUCTURES\n\n(in collaboration\n\nwith J. Boner)\n\nGeometric searching and intersection problems\nBinary tree structures\nThe ADT data structure\nGeometric intersection\nThe use of the ADT for mesh generation\nFOR STEADY\n\nSTATE\n\nPROBLEMS\n\nError indicator in 1D\nRecovery of the second derivatives\nExtension to multidimensions\nMesh enrichment\nMesh movement\nAdaptive\n\nTRANSIENT\n6. I\n6.2\n6.3\n(_.4\n\nAND\n\nCurve Representation\nSurface Representation\n\nADAPTIVITY\n_.!\n5.2\n5.3\n5,4\n5.5\n5.6\n\nALGORITHMS\n\nMODELLING\n\nUNSTRUCTURED\nMETHOD\n3.1\n3.2\n3.3\n3.4\n3.5\n3.6\n3.7\n3.8\n,3\'.9\n\n4\n\nand unstructured\n\nMETHODS,\n\nremeshing\nFLOWS\n\n(in collaboration\n\nTransient flows\nMesh enrichment\nTransient flows involving moving\nAdaptive remeshing for transient\n\nwith J. Probert\n\nand O. Hassan)\n\nbodies\nflows involving\n\nmoving\n\nbodies\n\n1. INTRODUCTION\nTO FINITE ELEMENT\nMETHODS,\nALGORITHMS\nAND IMPLEMENTATIONS\n\nI. I Structured\n\nand unstructured\n\nmeshes\n\nThe recent rapid development\nof solution algorithms in the field of computational\nmechanics means that it it presently possible to atlempt the numerical solution of a\nwide range of practical problems. The essential pre-requisite\nto a solution process of\nthis type is the construction of an appropriate mesh to represent the computational\ndomain of interest. In this section, we will briefly outline two alternative stralegies\nfor accomplishing\nthis task of mesh generation and make some observations about the\nimplications\nto the analyst arising from the choice of approach which is made. In the\ndiscussion,\nwe will assume, for brevity, thal the mesh is to be produced for a two\ndimensional domain.\nIn the most widely used approach {1,2], the domain is divided into a structured\nassembly of quadrilateral\ncells. The structure in the mesh is apparent from the fact\nthat each interior nodal point is surrounded by exactly the same number of mesh\ncells (or elements),\nas shown in figure 1.1. Note also that we can immediately\nidentify two directions\nwithin lhe mesh by associating\na curvilinear\ncoordinate\nsystem (_,q) with the mesh lines. If we number the nodes consecutively along lines\nof constant 1"1,and so that the numbers increase as _ increases, we can immediately\nidentify the nearest neighbours of any node J on the mesh, as shown in figure 1.2.\nGenerally,\nsuch grids are constructed\nby mapping the domain of interest into a\nsquare and then conslructing\na rectangular mesh over the square. If the equation\nitself is also mapped, this grid can be used to obtain a solution, otherwise the inverse\nmapping is applied to obtain the required mesh over the original domain. Various\napproaches\nmay be regarded as candidates for accomplishing\nthe mapping, such as\nconformal techniques, the use of differential equations or algebraic methods. All the\nmajor discretisation\nprocedures\nfor the equations of fluid flow can normally be\nimplemented\non meshes of Ihis type. A major advantage to lhe computational\nfluid\ndynamicist\narising from the use of a structured\nmesh is lhat he can choose an\nappropriate\nsolution melhod from among the large number of algorithms which are\navailable.\nThese algorithms\nhave the advantage\nthai they can normally\nbe\nimplemented\nin a computationally\nefficient manner. A disadvantage\nis Ihe fact that it\nis not possible to guarantee an acceptable mesh by applying the mapping method, as\ndescribed\nabove, to regions of general shape. This difficulty can be alleviated by\nappropriately\nsub-dividing\nlhe computational\ndomain into blocks and then producing\na grid by applying Ihe mapping method to each block separately. This results in an\nextrp.rnely powerful melhod 13], but problems can still be caused by the generation\nof elemenls of poor quality and by the elapsed time necessary to produce a grid for\ndr)mains of extremely complex shape.\nTh_-_alternative approach is to divide the computational\ndomain into an unstructured\nas_emt)ly of computational\ncells as illustrated in figure 1.1. The notable feature of an\nunstructured\nmesh is thai the number of cells surrounding a typical interior node of\nttm mesh is not necessarily\nconstant. It will be apparent that quadrilateral\ncells\nr:ould again be used in this context,\nas shown in figure 1.3, but we will be\nconcenlrating\nour attention upon the use of triangular meshes. The nodes and the\n_lernents are now numbered and, to gel the necessary information on Ihe neighbours,\nwe store the numbers of the nodes which belong to each element (see figure 1.4).\nFrom the detail of a typical unstructured\nmesh shown in figure 1.1, it is apparenl\nthai Ihere is no concept of directionality\nwithin a mesh of this type and that,\n\n_._.-\'-._\'.-_.,\'3_:X_,7/:,\n\nSTRUCTURED\n\nMESH\n\nUNSTRUCTURED\n\nFigure\n\n1.1\n\nSlruclured\ndomain.\n\nand unstructured\n\nMESH\n\nmesh discretization\n\na\n\n.,74"#,.\n\nof a computalional\n\n7:\n\nJ+n+l\nJ+n-1\n\n+1\nJ-1\n\n-n+l\n\nJ-n-\n\nFigure\n\n1.2\n\n1._\n\nNearest neighbours of a node J in a structured\nin the _, 11 directions\n\nFigure\n\n1.3\n\nAn unstructured\n\nquadrilateral\n\nmesh of n by m poinls\n\nmesh.\n\ntherefore, solution techniques based upon this concept (e.g. ADI methods) will not be\ndirectly\napplicable.\nThe methods\nwhich\nare normally\nadopted\nto generate\nunstructured\ntriangular\nmeshes are based upon eilher the Delaunay 14] or the\nadvancing\nfront [5] approaches.\nDiscretisalion\nmethods for the equations of fluid\nflow which are based upon integral procedures,\nsuch as the finite volume or the\nfinite elemenl method, are natural candidates for use with unstructured meshes. The\nprincipal advantage of the unstructured approach is thal it provides a very powerful\ntool for discrelising domains of complex shape [6,7], especially if triangles are used\nin two dimensions\nand tetrahedra\nare used in three dimensions.\nIn addition,\nunstructured\nmesh\nmethods\nnaturally\noffer\nthe possibility\nadaptivity\n[8]. Disadvantages\nwhich follow from adopting\nthe\napproach are that the number of alternative solution algorithms\nlimiled and that their computational\nimplementation\nplaces large\ncomputer\nmemory and CPU [9l. Further, these algorithms\nare\nthe quality of the grid which is being employed and so great care\nthe generation process.\n\n1.2 Discretisation\n\nof incorporating\nunstructured\ngrid\nis currently rather\ndemands on both\nrather sensitive to\nhas to be taken in\n\ntechniques\n\nWhen an acceptable mesh has been obtained for the compulational domain of interest,\nthe analyst is then faced with choosing a discretisation\nmethod. This will form the\nbasis of a suitable algorithm for solving the governing differential equation on this\nmesh. The most widely used discretisation\ntechniques\nare the finite difference\nmethod,\nthe finite volume method and the finile element method [10]. We will\nillustrate\nbriefly\nthe essentials\nof these three, approaches\nby considering\nthe\napplication\nof each method to the solution of a problem of steady linear heal\nconduction in a two dimensional region, _, which is bounded by a closed curve, r.\nThe temperature\n\ndistribution\n\nT(x,y)\n\nwill satisfy\n\ndiv(grad T) =\n\nLaplace\'s\n\nequation\n\na2T o_2T\no_x\n2+_y2 = 0\n\nsubject to appropriate boundary conditions. For convenience,\nthal the boundary conditions are given in the form\n\nT -- g(x,y)\ni.e.. lhe value of the temperature\n\non\n\nis specified\n\nin _\n\n(1.1)\n\nwe may assume\n\nr\n\nhere\n\n(1.2)\n\nat all poinls of the boundary\n\ncurve.\n\n_[l)_ .ELni_-le_Di_{[_rence\nMethod\n[or lhe purposes of this section, it is sufficient lo assume thai equation (1.1) is to\nb_ solved on a structured square mesh, of the lype shown in figure 1.5. We can adopt\na convenienl coordinate syslem, such thal a typical poinl on the grid has coordinates\n(,IA,KA).\nIf we use the subscripts JK to denote an evaluation at this point, equation\n(1.t) leads to the exact relationship\n\n+\naX2\n\nJK\n\n\';I\n\n=0\nJK\n\n(1.3)\n\n10\n__E__I_g n t\nm\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n9\n\nNodes\n5\n9\n8\n6\n5\n5\n11\n3\n3\n1\n4\n1\n1\n2\n\n8\n8\n7\n7\n6\n9\n5\n5\n4\n4\n6\n6\n2\n7\n\n9\n12\n12\n8\n8\n10\n10\n11\n5\n3\n5\n4\n6\n6\n\n11\n\n12\n\n3\n\n2\n\nFigure\n\n1.4\n\nConneclivity\n\narray\n\nfor an unstruclured\n\nlriangular\n\nA\n\nO\n\n_j,_\nI\n\nA\n(J,K)\nO\n\n._f-\n\nO\n\nO\n\nFigure\n\n1.5\n\nStruclured\n\nsquare mesh of constant\n\nmesh size A.\n\nmesh.\n\nUsing standard central differencerepresentations the secondderivalives,this\nfor\nequationcan be approximated all interiorpointsas\nfor\nTj\xc3\xb7IK-2TjK+Tj_IK TjK.I-2TjK+TjK_I\n_2\n\n+\n\nt_2\n\n= 0\n\n(1 .4)\n\nwhich is an equation coupling the values at the five mesh points illuslrated in figure\n1.6. Writing\nan equation\nof lhis lype at each interior point on the grid and\nincorporating\nthe known values along the boundary, the resulling equation set can be\nrepresenled\nin a matrix form\n\nK[ = _\n\n(1.5)\n\nwhere K is a symmetric constant matrix, r is the vector of unknowns and I is the\nforce vector which contains information from the boundary conditions. This equation\nsystem may be solved by using any suitable procedure. The important point to nole\nhere is that the matrix system can be formed directly from the approximation\nof\nequalion\n(1.4). This leads to efficient\ncompulational\nimplementations,\nwith low\nslorage demands and high vectorisation possibilities.\nT__he\nFinite Volume Method\nThe finite volume and finite element methods can also be implemented on structured\ngrids, but we will assume here that we are to use these methods on a given\nunstructured\ntriangular\ngrid\n(see\nfigure\n1.4).\nA possible\nfinite\nvolume\ndiscretisalion\nfor equation (1.1) follows from the requirement\nthat this equation\nshould be salisfied in an integral sense over each cell e i.e.\n\nI\n\n(1.6)\n\na2T]\n\n_:)e\nwhere\nwrillen\n\n_,2,,is the area of cell e. Using the divergence\n\ntheorem, this equation\n\nmay be\n\nas\n\n; ndr = 0\n\n(1.7)\n\n]\'e\n\nwhewe I,, denotes lhe boundary of cell e and n is the oulward normal direction to this\nb_mdary\nIf we associate\nthe unknown\nT e with cell e, this equation\ncan be\napproximated\n\nas\n\nJ K+I\n\nJ-1\n\nK\n\nJ+l K\n\n,I J\n\nFigure\n\n1.6\n\nFigure\n\nComputational\n\n1.7\n\nK-1\n\nstencil for Laplace\'s\n\nFinite volume\n\nequation.\n\ndiscretization\n\n3\nS=l\n\n(Tes-Te)\nAries\n\n8,,s = 0\n\n(1.8)\n\nwhere the summation extends over the three sides of the cell e, Tes is the unknown in\nIhe other cell es which is adjacent to side s, 8es denotes the length of side s and Anos\nis the projection onto the normal to side s of the distance between the centroids of the\ncells e and es (see figure 1.7). When each cell in the mesh is considered in this way,\nwe are led again to a system of equations which can be written in the matrix form of\nequation (1.5). Note that a convenient data structure in lhis case would be to number\neach cell side in the mesh and to store the numbers of the two cells which are\nadjacent to each side. Equation (1.8) can then be formed by looping over the cell\nsides and sending the appropriate (equal and opposite) confributions to the adjacent\nelemenls.\nIn this form, the conservation\nproperties\nof the resulting scheme are\nimmediately apparent as the total contribution made by each interior side is zero.\nVariational\n\nFormulations\n\nFinally, we illustrate\nhow the finite element\nmethod can be used to discrelise\nequation (1.1) on an unstruclured\ntriangular grid. The starting point is a varialional\nformulation of the problem [11]. Let 3 denote the set of all functions T which satisfy\nIhe problem boundary condition T = g(x,y) on F" and let I_ denote the set of all\nfunctions W which satisfy W = 0 on r. In addition, we shall see that the type of\nvariational\nformulalion\nwhich\nis employed\nwill place certain\ndifferentiability\nconditions upon the members of these sets. A possible variational formulation for the\nabove problem could now be : find T in 3 such that\n\nf {c-_l\n_2\n\n(1.9)\n\na2T 1\n\nlot every W in I_. The sets 3 and W are termed\n\nthe trial function\n\nand the weighting\n\nfunction sets respectively.\nI! will be apparent that the integral appearing in equation\n(1.9) is valid mathematically\nprovided thai the trial functions have continuous first\nderivatives,\nwhile the weighting\nfunctions\nmay be discontinuous.\nIt follows\nimmediately\nthai the function T which satisfies this variational\nformulation\nwill be\nidonlically\nequal to the solution of the problem as posed classically\nin equations\n(1.1) and (1.2).\nAn _lternative,\nso-called weak, formulation can be obtained by using the divergence\ntheorem in equation (1.9) and applying the fact thal each function W which is to be\n_:on.,;idered will vanish on I". The resulting formulation can be slated as " find T in T\nsHch lh_l\n\nSt _x W\nT _x\n\n+\n\naTaW}\n_y _-y\n\nd(_ = 0\n\n(t .t 0)\n\n_2\nfor each W in I_. Note that the trial function\n(1.10)\n\nrequires\n\nonly\n\nthal\n\nthe\n\ntrial\n\nfunctions\n\n10\n\nset may now be widened,\nbe continuous.\n\nAt the\n\nas equation\nsame\n\nlime,\n\nslricler condilionsneed\n\nto be applied to the members of the weighting function set,\nwhich must also now be conlinuous. Assuming lhat the actual solution is sufficiently\nsmoolh so that the steps involved are malhematically\nvalid, il is readily observed\nthal the above steps may be reversed and equation (1.9) regained. It follows lhat the\nsolulion of the weak formulalion will also be identical to lhe solution of the original\nproblem posed in equations (1.1) and (1.2).\nI_h___aLef._kin Method\nThe Galerkin method is a widely used approach\nsolulion to a problem posed in a variational\nform\nselecling a basis N_, N 2, N3........ for W. This means\nbe expressed as a linear combination of these basis\ndefining W by\n\n={WIW=alNI+a2N2+a3N3+\nwhere al, a2, a3....\nsalisfy the condilion\n\nfor constructing\nan approximate\n[12]. We begin Ihe process by\nthat each weighling function can\nfunclions and we indicate this by\n\n.......... ; W=00nr}\n\n(1.11)\n\ndenole arbitrary constanls. Note thai each\nNj = 0 on r\'. We can employ a trial function\n\nin the basis must\nset which is closely\n\nNj\n\nlinked to I_ and is defined by\n\n1 = { T I T = g + blNl+b2N2+a3N3+\n\n.......... ; T = g on r}\n\n(1.12)\n\nwhere\nb_, b2, b3 .....\ndenole\narbilrary\nconstants.\nThis set has been carefully\nconslrucled\nso thai each member of the set satisfies the required conditions on I". If\nwe define l-(p ) and 14(p) as the subspaces of 3 and la respectively which are spanned\nby lhe first p basis functions i.e.\n\n3(p) = { T(p) { T(p) = g + blNl+b2N2+baN3+\n\n..... +bpNp;\n\nT(p)= g on F}\n(1 .13)\n\nW(p) = { W(p) I W(p) = alNl+a2N2+a3N3+\nlhen\n\nlhe Galerkin\n\nformulalion\n\nmethod\n\nof equalion\n\n.......... +ap Np: W(p) = 0 on r )\n\nis !o seek an approximate\n\n(1.10) in lhe form : find\n\n--_x\n\n+\n\n,_v\n\n-hv\n\nT(p)\n\nsolution\n\nto the varialional\n\nin 3"(p) such that\n\nd.Q =0\n\n(1.14)\n\nhf\n\nf()f each W(p)in W(p) . However, since N_, N2, N3......... Np forms a basis for l#(p),\nequ_lion (1.14) can be replaced by the equivalent statement : find T(p) in 3-(p) such\nlhal\n\n_X--+\n\n-_-_\n\nd_2=O\n\n(,t\n\n11\n\ni=\n\n1,2,3\n\n........\n\np\n\n(1.15)\n\nInsertingthe assumedform for the functionT(p)\n\nL_xx ax\n\n+\n\nay\n\nfrom equation\n\n_--jd(:2\n\n(1.13) gives\n\nbj=\n\nK=I\n\n(1.16)\n\nax + ay -yJ\n\nwhich can be written\n\nin the matrix\n\nd_\n\nK = 1, 2, 3........ p\n\nform\n\nKb=I.\n\n(1.17)\n\nThis equation can be solved to determine the unknown coefficients bl, b2...... bp and\nso complete the approximation\nprocess. These unknowns only give information about\nthe value of lhe approximation\nat any point when they are combined as in equation\n(1.13). Note thai K is symmetric and will, in general, be a full matrix.\nThe Finite Element Method\nThe Galerkin finite element method results from making a particular choice for the\nbasis functions\nin equations\n(1.11) and (1.12).\nAlthough\nmore sophisticated\nrepresenlations\nare possible, we will consider here only the case in which, given a\ngeneral grid of triangles, we place nodes at the vertices of each triangle and associate\nan unknown Tj and a piecewise linear shape function Nj with each node J. In this case,\nthe shape functions are constructed (see figure 1.8) such that (a) Nj takes the value\nunity at node J and the value zero at all other nodes (b) Nj varies linearly (c) Nj is\nonly non-zero on the elements associated with node J. For notational purposes only,\nil will be convenient to assume that the nodes have been numbered such thai nodes 1\nI0 p ai\'e interior nodes while nodes p+l to q lie on the boundary. We define rs to be\nlhe assembly of the straight sides in the mesh which join the boundary nodes, so that\nI_ is an approximation\nto the exact boundary r. The given function g(x,y) defined on\nI in equation (1.2) is approximated on rs by the function g(s) constructed as\n\ng(s) =\n\n2.._ Tj\nJ=p+l\n\nTj = g(xj.yj)\n\nNj\n\n;_nd this approximation is exact at each of Ihe boundary\nof dimension p, defined by\n\n(1 . 1 8)\n\nnodes. We work with spaces,\n\n"i(_,) = { T(p) I T(p) = g(s) + T1NI+T2N2+T3N3+ ....... +TpNp ; T(p)= g(s) on I"s}\n(1.19)\nh)(r,) -_ { W(p) I W(p) = alNl+a2N2+a3N3+\n\n12\n\n.......... + apNp ; W(p) = 0 on [s}\n\nFigure\n\n1.8\n\nShape function associaled to node j\n\nwhere we have indicated in the definition of "]\'(p) thal lhe coefficient of Nj Is now the\nvahJe of T(p) at node J. The Galerkin procedure is followed exactly as above, with\nequation (1.16) being replaced by the requirement that\n\n/_xx\n\nax\n\n+\n\nay\n\na-yJ\n\nd_2\n\nTK =\n\n(1,20)\na N j aNK_\n\n-\n\nax\n\nThis equalion\n\nset can again be writlen\n\nd_\n\nTK\n\nJ=1,2,3\n\n........\n\np\n\nin a matrix form\n\nKT=f\n\n(1.21)\n\nwhere I is now a vector of the unknown approximations to the nodal values of the\ntemperature and a typical entry in the matrix K is given by\n\nf\n\n[K]JK=\n\nlohNj\n[-aX\n\naNK\nax\n\n+\n\na ayJ\nN\n\naNK\nay\n\n} d_\n\n(1,22)\n\nTo evaluale these entries, we make use of the local nature of the defined shape\nfunctions and the result thai the integral over Q is equal to the sum of the integrals\nover the individual triangles _:2e [12] i.e.\n\nE\n_.j\'{\n\nThis means thai the malrix\n\n.}\n\nd_;_ = e=l Je\n7_,\n\n{\')\n\nd_;2\n\n(1.23)\n\nK can be wrilten as\n\nE\n\nK = _\'. K e\n\n(1 .24)\n\ne=l\n\nwhere lhe individual\n\nIKIj, _- =\n\nelemenl\n\nf\n\nmalrices\n\nK e have lypical entries\n\n/__NJ_NKe - + aNj_aNK e } dq\n[ _x\nax\n_-v -i)-v-\n\n(1.25)\n\nt-h._r(_ j" h;ts been used to indicate the value of the shape funclion Nj on element e. We\nN\nnote lhal the only shape functions which are non-zero over element e are those\n\n14\n\nassociated\n\nwith\n\nthe\n\nnodes\n\nJ, K. L of this element.\n\nThis\n\nin lurn\n\nmeans\n\nthai\n\nthere\n\nwill\n\nb_ only 9 non-zero\nentries\nin K e which will occur in lhose positions\nwhich\nare in\nl_)oil-1 rows J, K.L and in columns\nJ, K, L. Explicit expressions\nfor the shape\nfunctions\nover element\ne are readily determined\nfrom the conditions\nwhich were used in their\ndefinition.\nIf\n\nNj e=\nwhere\n\nA; \'_ , aj e , Cj e are constants,\n\nAje\n\nThe\ne.g.\n\n(XK_(L___\n2_e\n\n=\n\nnon-zero\n\nit follows\n\nBje=\n\nentries\n\nin lhe\n\n(1.26)\n\nAj e +Bj ex + Cjey\n\nelement\n\nthai\n\n(yKYL)\n2_e\nmatrix\n\nK e can\n\nCje\n\nbe\n\n(XL- XK)\n2 i"2e\n\n=\n\nobtained\n\nby direct\n\n(1.27)\n\nintegration\n\n1\n[Ke]KL =\nWith\nIhe contributions\npossible\nto assemble\n\n4_ e {BKe BLe + CKeCL e}\n\nfrom a typical\nlhe contributions\n\n( 1 . 28 )\n\nelement\ncomputed\nin Ihis fashion,\nfrom all the elements\nin Ihe mesh,\n\nto equation\n(1 24) and thus Io obtain the final form\nI in equation\n(1.21)\ncan be similarly\nevaluated.\n\nfor K. The right\nThe symmetry\n\napparent\nfrom\n_par.se\nmatrix.\n\nbe\n\nequation\n\n(1.28)\n\nA (\'ompuler\nimplementation\nmahix\nK being\ndelermined\nconsidered,\nthe\nnon-zero\n\nlhe\n\nit should\n\nalso\n\nof lhis method\nwould\nfrom a loop over lhe\nlerms\nin its element\n\nr_xpressions\nsuch\nas equalion\nIo{;alion._ in K, making\nuse of\nnod_\nb_longing\nIo each element.\ng)l_lim_a!lityof\n\nand\n\nGalerkin\n\nobserved\n\nit is then\naccording\n\nhand side vector\nof K should\nbe\n\nthal\n\nlhis\n\nwill\n\nbe\n\na\n\nfollow\nidentical\nlines,\nwith the\nelements.\nAs each\nelemenl\nis\nmalrix\nare\ndetermined\nfrom\n\n(1.28)\nand these\nare\nthe stored connectivity\n\nassembled\ninformation,\n\ninto\nthe correcl\nwhich\ngives the\n\nMe_hl_b#..d\n\nr_r\n;t linear\nelliptic\ndifferential\nequation,\nof the type which\nhas been\nconsidered\nabove,,\nit is possible\nto prove\nthat an approximale\nsolution\nconstructed\nvia the\n(_al_kin\nmethod\npossesses\na certain\noptimality\nproperly\n[11]. To demonstrale\nthis,\nr,_Jpl_O_ that we have chosen\na suitable\nsel of basis functions\nand a value for the\ndim_n.sion\n(_al_,zkin\n\np of the subspace\nto be considered.\napproximation\nwill satisfy\n\n._" l___Tlp)_,)Wlpj + a-T-_\n[ ,,)x\n,-)x\n_y\n\nl()r any W_p) in\n\nI,I)(p).\n\nAs each\n\nsince I_\'(r, t is a subspace\n;llno nalisfy Ihe equation\n\nWe know\n\nfrom\n\nThus,\n\nfrom\n\nt\')\n\n(1.14)\n\naW-W-I_ } dO. = 0\nay\n\nW(p) is in l#(p), we can deduce\n\nof I#.\n\nequation\n\nequalion\n\n(1.10)\n\nthat\n\nlhe\n\n(1.29)\n\nthal\n\neach\n\nthe\n\nW(p} is also\n\nexact\n\nsolulion\n\nin I#,\nT will\n\n_"{0-r_w__ _ T0w___\nax + _\nay l d_=O\nj\n\n(1.3o)\n\nSublracting\nequation (1.29) from equation (1.30), we can deduce\nT - T(p) in the Galerkin approximation\nsatisfies\n\nI\n\nthat the error _ =\n\n{a_.._w_w__ax a_ayaVV(p_ dQ -- 0\n+\nlay J\n\n(1.31)\n\n,a\n\nfor every W(m in I_(p) Now choose any other function U(p) from the trial function\n\nset\n\n3-(p_. The objeclive\nis to show that such a function\nwill always\nbe a worse\napproximation\nto the exact solution, according to some measure, than Ihe Galerkin\napproximation.\nDefine\n\'\n\n_,, T\n=\n\n- U(p)\n\n=\n\nT - T(p)+ T(p)- U(p}= c\n\n+\n\n(I .32)\n\nV(p)\n\nwhere\n\nV(p)\nBy direct subslitulion,\n\n/t\n\nLr)xJ\n\n=\n\n(1.33)\n\nT(p) - U(p)\n\nit can be shown that\n\n+ Lo_yJ\n\n0o--\n\n}0\xc2\xb0\n\n+ Layj\n\n(1.34)\n+ 2\n\n_-X\n\nax\n\n+\n\n_-y\n\nay\n\nI d_ +\n\nL ax\n\ng\n\n+ L c)y J\n\nd(2\n\nFrom Ihe construction of equation (1.33), V(p) must be a member of the set I._(p) and\n_o lhe second term on the right hand side vanishes, by equation (1.31). The third\nterm on lhe right hand side is slriclly non-negative and so we deduce lhat\n\nLaxJ\n\n+ Lr_yJ\n\nLaxJ\n\n-\n\n16\n\n+ LayJ\n\nt d_\n\n(1.35)\n\nInlroducinglhe notation\n\nf { P I" + L@yJ\nLa\xc3\x97J\n\n(1.36)\n\nj d_2\n\nQ\n\nil can be seen that equation\n\n(1.35) can be written\n\nas\n\nI1_11 -> I1\xc2\xa211\n\n(1.37)\n\nSince lhe function\nU(p) was arbitrarily\nchosen from lhe set "]\'(p), we have lhus\ndemonstrated\nthe optimality\nof the Galerkin approximation\nT(p) among the set of\nfunctions "](p) according Io the error measure defined in equation (1.36).\n\n1.3 The Finite Element Method Applied to the Compressible\n\nEuler Equations\n\nWilh lhe essentials of the finite element approach briefly outlined above, we can now\nconsider facing the more challenging problem of developing a finite element scheme\nfor lhe solulion\nof the two dimensional\ncompressible\nEuler equations.\nThe\ndi._c.r_.fi._alion of the equations is to be accomplished using a mesh of linear triangular\nelemp.nl._. A Galerkin approach will again be applied, but the hyperbolic character of\nlhe equation set means that optimality, in the sense of equation (1.37), can no longer\nbe e_lablished\nThe approach to be followed will employ the time dependent form of\nlhp, equalions\nand steady slate solulions will be computed\nby means of a false\nIran_;innl A finite difference method will be used to advance the solution in time,\nwhich means Ihat the variational formulation will be applied to the space dimensions\nonly, in exactly the same form as above.\nJim Iwo dimensional\nequalions\nin lhe conservation\nform\n\ngoverning\n\n@U\n\ncompressible\n\n@E\n\ninviscid\n\nflow are considered\n\naE\n\nwhere tile unknown vector U and the flux vectors E and F are given by\n\nL_=\n\n[:o] i u]\nl Vl\n\n=\n\nPu2 + p\n\n[ (pE\n\n+\n\n,\np)uJ\n\n[0v]\n\nE=/\nL(pE\n\npuv\n\n+ p)vJ\n\nI ter_. p, p and E denote the density, pressure and specific total energy of lhe fluid,\nwhil_ vm\nand v are the components of the fluid velocity vector in the x and y directions\nr_lDeclively.\nThe equation set is compleled by the addition of the perfect gas equation\nof sl;tl_\n\n17\n\n1\n\nP -- (7-\n\n2\n\n1) p [E - 2(U\n\n(1 .40)\n\n+ v2)]\n\nwhere y is the ratio of lhe specific heats.\nTime-SteoDin0\n\nScheme\n\nTo develop a time-stepping scheme\nexpansion in time [13} in the form\n\nU\n\n=\n\nfor\n\n+At\n\nequation\n\nal I\n\n+ 2\n\n(1.38),\n\nwe consider\n\na Taylor\n\nat2[\n\n(1.41)\n\nwhere the superscript n denotes an evaluation at time t=t., the limestep At = t.+l t.. and t.+e = tn + e At, 0 < 0 < 1. This equation may be re-written, using equation\n(1.38), to give\n\nALL = - At ale\n+\n\nF\nayy\n\n"-2-[_x\n\n+\n\n_y\n\n_,_)J\n(I .42)\n\nn+l\n\nn\n\nwhere _U = U_ - U . A solution algorilhm can be produced by constructing a suilable\nlinearisation for the second order terms on the right hand side of this equation. A\nstraightforward\nlinearisation [14] leads to the equation\n\nAU_--:;;-\n\n_\n\nA"A n-\n\naX\n\n+\n\nAnB\n\nn\n\nay\n\n+\n\n_\n\nBnA\n\nn-\n\nax\n\n+ BnB\n\nn\n\na-y; jj\n\n(1.43)\n\nwhere\n\nA= dE\n\nand the approximations\nG_%llllllll_kin__Finile\nElement\nThe problem\n\ne=dE\ndU\n\n(I .44)\n\nA n+1= A" and B"_ = B n have been made.\nADproximalion\n\nof determining\n\nthe AU_ which\n\nsatisfies\n\nequation\n\n(1.43), over a domain\n\n(_, can be put into a varialional form by defining trial and weighting function sets as\nbeforP. It will be convenient\nto assume Ihat the boundary values of U on r are\nindependent\n\nof lime and that these\n\nvalues\n\n18\n\nare already\n\nsatisfied\n\nby U n. Physical\n\nbnundaries\ncon._idered\n\nsuch\nfurther\n\nas solid\nwalls\nrequire\na different\nhere. Then we can define\n\n_- = { aU I ,_U : 0 on F }\nand seek,\n\nfor each\n\nn, AU in 1 such\n\n.\n\n2\n\n+_.;\n\nfor\n\nall W in W.\n\nweak\n\ndiverqence\ntheorem.\nI such that\n\nThe\n\n.\n\n[W\n\nALl\n\nAriAn\n\nvariational\n\nWn\n\nwill\n\nW\n\n.(2\n\n#-----_ + A nBn\n\nvariational\n\ne_yJ\n\no_y\n\nstatement\n\n_-,,-\n\n_x +\n\nn\n\nAriA "-\n\nmay\n\nthen\n\nbe\n\nassume\n\nthat\n\nthe\n\nl(m :- ( A_pl\n\nspatial\n\nelements,\n\nbe\n\n(1.45)\n\nsolution\nwith\n\n[ AU(p ) = N, ,_UI+N2\n\ndomain,\n\nby\n\n\xe2\x80\xa2 find,\n\nusing\n\nfor each\n\nn\n\n_y\n\n_,\n\nB\n\nhas\n\nnodes\n\nthe\n\nn, AU in\n\n(1 .47)\n\n_yy _j. ]d_\n\nn\n\nAn\n\nthe inlerior\n\n(1.46)\n\na(AU_)-[,\n\na(,_u) + BnB\n.... ,]X\n\n_x\n\nayJ\n\nproduced\n\nbecomes\n\n+ AnB\n\nc)x\n\ndE2 -\n\n+\n\n_2\n\nr,_d_,d linear triangular\n(h:finr_ the sets\n\nnot\n\n_j\n\n+t_t\n\nformulation\n\n#w [\n+-_,Y-BnAn\n\nAt\n\nwill\n\nthat\n\n_-x\n\n+\n\nwhich\n\n={WlW=0onF}\n\no_--X---+ enB\n\nA\n\ntreatment\n\nn\n\n!_XX\n\n+\n\n\'"\n\nbeen\n\nolyJ\n\ndiscretised\n\nnumbered\n\nfrom\n\nd_\n\nusing\n\nAI,,L2+..... +Np,__U_p; A U..(m= 0 on F}\n\n(1.48)\nh,(p! = { W(p) I W(p) = alN_\n\nwhere\n\na_, a_ ......\n\n\xc2\xa2)f the\n\nnodal\n\n(I,17)\n\nand\n\nhrmn\n\nap are constanls.\n\nunknowns\nsatisfying\n\ndnle_mined,\n\n+a2N2\n\nThe\n\n+ ..... +apNp\n\nGalerkin\n\n,_U_, a,_lJ..2.......\n.\nthe\n\nresulting\n\nthe solulion\n\nA._\n\nequalion\n\nis updaled\n\nfor\n\naccording\n\n19\n\n; W(p)= 0 on F}\n\napproximalion\nby\n\ninserting\neach\n\nW(p)in\n\ndetermines\nAUIp I into\nl#(m.\n\n3\n\n1 to p, and\n\nthe values\nthe\n\nWhen\n\nto Urn) "*_ = U_m% z__.l.l_p)\n\nequation\nAU(m\n\nhas\n\nAn Explicit\n\nTime-SteDpina\n\nScheme\n\nIf Ihe value of e is set equal to zero in equation\nIhe form\n\nax\n\n+\n\n(1.47), the Galerkin\n\nstatement\n\ntakes\n\nay J\n(1.49)\n\n2\n\n[_--\n\nA (p)n +\n\n_\n\nB (p)n\n\n+\n\nay\n\nd.Q = 0\n\nfor J = 1, 2 ........\np. Although F,.(p),.E.(p), A(p) and B(p) at time level n could be\nexpressed directly in terms of U(p)n and the right hand side of this equation evaluated\nby numerical integration, a convenient computational\nimplementation\nis produced by\nlinearly interpolating\nF,,,..(p) _p) over each element and taking A(p) and Bin) to be\nand\nelement-wise\nconstant. The terms in equation (1.49) may now be evaluated exactly,\nby assembling lhe contributions\nfrom individual elements,\nand the resulting set of\nequations\nwritten in the form [15]\n\n]j K A-U-K= ]_L-H.._S.J\n\n(I .50)\n\n=J\n\n(1.51)\n\nK=I\n\nwhere\n\n[M]jK\n\nNj\n\nN K d_\n\nIn the form of equation\n(1.50),\nthe time-stepping\nscheme\nis implicit,\nas the\nconsistent\nmass matrix M is not diagonal. In Iransient simulations,\nlhis equation is\nsolved by explicit iteration\n{16]. For steady stale problems,\nthe simplification\nof\nreplacing\nthe consistent\nmass matrix by lhe standard\nlumped (diagonal)\nmatrix\n{12], with non-zero diagonal entries [MLIj,\ncan\nbe made, thus producing an explicit\nscheme. This explicit scheme is identical to the one step Lax-Wendroff\nmelhod {10]\nwhen it is implemented on a mesh of linear elements in one dimension.\n_Arlili.c_i_l Dissipation\nFor the successful\nsimulalion\nof flows wilh steep gradients,\nthe explicit scheme\ndo.scribed above needs the addition of an appropriate artificial viscosity model. The\nslandard approach is to smooth the compuled solution at the end of each lime step\nbefore proceeding\nwilh lhe computalion.\nThe smoothing\ncan be regarded as lhe\napplicalion\nof an explicit diffusion with a suitably defined diffusion coefficient.\nA\nconvenient\nmelhod of achieving\nthis effect, follows from the observation\nthat, on a\nmesh of linear elements,\nthere is a relatively\nsimple way of approximating\na\ndiffusion\noperator.\nAt an interior\nnode J on a mesh of linear elements in one\ndimension\n[17],\n2O\n\n[ (ME) 1 _,(rnE\n\n- mLE ) .U..E ]j\n\nE\n\n=\n\n6\n\n( h2\n\ndxx )J\n\n(1.52)\n\nwhere h(x) is the local mesh size. The summation in equation (1.52) represents the\noperalion of assembly of element values and m E, rnLE and UE denote the element mass\nmalri\xc3\x97, elemenl\nlumped mass matrix and element\nvector of nodal values of U\nre._p_.clively. By direct extension,\non a general 2D mesh of linear elements,\nthe\nsmoolhing\nin the case of the Euler equations\nis accomplished\nby replacing the\ncomputed nodal values .U.jn*r by smoothed values U.sj"*1 according to\n\n[ML]\n\nJ (__jn,l\n\n_ .u_jn+l\n\n)\n\n= _\n\nkE\n\n{[mE]JK\n\n-\n\n[mLE]JK}\n\nUEK\n\nn*1\n\n(1.53)\n\nE\n\nHere k E iS a pressure-switched\nartificial diffusion coefficient,\nthe mean of element nodal values kj defined according to\n\n{lmE]JK\nkJ = Cu\'_\'\n\nE\n\nI{[mE]JK\n\nwhich is computed\n\nas\n\n- [mLE]JK} 12-EK\n"\n\n[mLE]JK}\n\n___K\n\nI\n\n(1.54)\n\nwhere C,. is a user specified constanl, P-E is the vector of element nodal pressures and\nI \xe2\x80\xa2 I denotes that absolute values of the elemenl contributions\nare assembled. The\ncoefficient\nkj lakes values ranging from 0 to 1 and it can be shown that kj = 1 when\nIhe pressure has a local extremum at node J. In equations\n(1.53) and (1.54) the\nsummation exlends over all elements E which belong lo node J. The effectiveness of\nthis arlificial\nviscosity\nmodel, when it is applied in conjunction\nwith the explicit\ntime _loppinq procedure outlined above, is illustrated in figure 1.9 which shows the\nr_._ull of a computation\nof the steady flow past a circular cylinder, at a free stream\nM;_(:h m.nher of 3. Furlher examples, including a Iwo slep variant of the solution\nalqorilhm, can be found in a number of publications\n[18,19].\n\nh !!ig h_R_lu\n\niI_o_m_E__\n\nThe easiesl melhod of producing\na scheme of higher resolution\non a general\nun._Iruclured grid is Io apply the flux corrected Iransporl (FCT) ideas of Boris and\nt3(_ok 120] and Zalesak [21]. In their notation, we identify the basic explicit scheme\nwilh no added artificial viscosily\nas the higher order solution, while the basic\n_h_,..;\npI.s the addilion of a hefty amount of arlificial viscosity is the lower order\n\';_hdi_r_. The low order scheme must have the property thal it produces monotonic\n"_r_hHir_n_for lhe problem under investigation.\nBy combining the two schemes, the\n_hj_(;live\nis Io remove as much of Ihe arlificial viscosity\nas possible, while still\nrn;_i.laininq monolonicily.\nThis is achieved by limiting the contributions\nmade by the\nindividual elements to Ihe amount of added artificial viscosity. The first triangular\nqrid h.plernenlation\nof these ideas was made by Parrolt and Christie [22J, in lhe\n(.<_fll_\xc3\x97l _)f a single transport equation, and applications\nto Ihe Euler equations have\n_115_her_rl made [23,24]. A demonstration\nof the effectiveness\nof the procedure is\n(liv_.n in tiqure 1.10, which shows the results produced when lhe method is applied Io\nthe ,_olution of Iransporl in a rotational velocity field. In figure 1.10a we see the\ni.ilial \xc2\xa2_c_ncenlration, which lakes the form of a circular cylinder with a cut-out. In\n7.1\n\ni terat ions\n\n(a)\n\n--I\n\nlllil*t*J\n\nInJ**\n\n.\n\nlIi_\n\n400\n\ni*J111\n\n800\n\n-2E\nO_\nL\nV\n\no\n\n-3\n\no",\no\n\n-5E\n\n(c)\n\n(d)\n\n(c)\n\nt.B8\n,_2.101 Cp\nt\n\n(0\n\n._GL\n- .84\n\n\xe2\x80\xa2........j\n.........\n\nFigure\n\n1.9\n\n_.t\nfl .OPL..., .................\n\nExternal flow past a circular cylinder (Moo : 3)\n(a) Enlargement of the mesh near the cylinder\n(b) Convergence curve of the L2 norm of the density residual\n(c), (d) Contours and wall plots of the Mach number\n(e), (f) Contours and wall plots of the pressure coefficient\n(g) Flow detail behind the cylinder\n22\n\nX\n\n(a)\n\n(b)\n\nFigure\n\n1.10\n\nFCT algorithm\n(a) Initial solution\n(b) Solution\nafter\n\n628 timesteps\n\n(1/4 revolution)\n\nfi.clure 1.t0b we show the computed\nprofile after 628 time steps (one\nrelation) of the FCT algorithm. It is observed from the results that accuracy\n._ch_me compares well with more coslly Riemann-solver\nbased schemes.\nAf_ ILn_plicit Time-Sleppino\n\nquarter\nof this\n\nScheme\n\nIf a value of 0 other than zero in used in equalion\nleads to an implicit procedure [14] of the form\n\n_\'. IL]jK\n\n(1.47),\n\nlhe Galerkin\n\nA.U._K =BJ::_\n\nstatement\n\n(1.55)\n\nK=I\n\nwhere L can be expressed\n\nas\n\nL= M+0 K\n\n(1.56)\n\nFor computational\nefficiency,\nin steady\nstale simulations,\nlhe simplification\nof\nneglecling lhe cross derivative terms in the construction of K is generally made and\nthis does not seriously affect the convergence\nbehaviour of the method. Schemes of\nthis type appear to possess certain desirable features e.g. it may be possible to apply\nthem in the simulation\nof transonic flows without the necessity for inlroducing\narlilicinl\ndiffusion [25]. As the identification\nof appropriate\nsmoothing mechanisms\nfor elements which are higher than linear in order is still an unsolved problem, this\napproach would then allow the possibility\nof producing an algorithm which could be\nimplemented\non quadratic elements.\nThis would certainly have associated\naccuracy\nbenefits on general grids.\nHowever,\nalthough\nthe direct\nsolution\nof the equation\nsystem (1.55) can be\ncontemplated\nfor certain lwo dimensional\nflows, efficient ilerative techniques\nare\nneed_;d if an implicit approach is Io be adopted for any realistic three dimensional\n_imulnlion.\nIlerative stralegies based upon the use of line relaxation have met wilh\ncerWain success within the context of finite difference methods on structured\ngrids\nI101. On such grids, the grid lines themselves can serve as appropriate lines for the\nrelaxation\nprocess.\nTo describe\nsuch a process,\nit is useful Io introduce\na\nrenlJmb_.ring operator _\') associated\nIo a line such that o(.U.)denotes\nthe vector of\nnodal unknowns re-arranged\n(1.55) is then written as\n\n__._ !,_)([L]jK)I\')\n\nin the order\n\n"1\n\nimplied\n\nI_)(ALLK)\n\n=\n\nby the line. The equation\n\n_(_)\n\nsystem\n\n(1 .ST)\n\nK=I\n\nwhich leads to a new equalion\n\nsystem of the form\n\nP\n,_[L"\n\nI,K ALE = BH_ "\n\nJ=l\n\n24\n\n(1 .58)\n\nIf the matrixL"\n\nis now decomposed\n\nas\n\nL" = D" + (L"\n\nD\')\n\n(1.59)\n\nwhere D* is the block tri-diagonal of L*, this would\nscheme\n\n0\n\nE\n\n[D\']jK\n\nA.U._k(\'*I) =RHS_*-\n\nK=I\n\nf\n\n([L\']jK\n\nallow the use of the relaxation\n\n-[O\']jK\n\n) AUk\n\n(r)\n\nK=I\n\n(1 .60)\nwhere A li\'(o) is taken to be the last compuled increment and r is the iteration count.\nA possible two dimensional\nimplementation\nwould therefore use the two families of\nmesh lines, wilh one iteration on each line every timestep. The block tri-diagonal\nmatrices D" can be factorised every timestep or there is the possibility of using the\nsame factors for several iterations. A further refinemenl would be lhe incorporation\nof a line search minimisation.\nOn unstructured\ntriangular grids, lhe idenlificalion\nof suilable lines, for use with a\nline relaxation\nscheme of this lype, is not immediate.\nRecently [26], it has been\nshown thai il is possible to employ a rather simple mesh processing algorithm to\naccomplish\nIhis task.\nAn Algorithm\n\nfor Constructing\n\nLines in an Unstructured\n\nTriangular\n\nMesh\n\nHere we describe a general procedure for constructing\na line (or lines) through a\ngeneral triangular mesh which passes through each node of the mesh once only. The\nelernenls, nodes and sides in the mesh are numbered. The algorithm to be described\nwill then make use of lhe following conneclivily\narrays, which need to be determined\nbefore the process begins:\n[ F.P (IN:I\n\n:3; IE=I\n\n:NE)\n\nI EE\n\n(JE=]\n\n: 3; IE=I\n\n:NE)\n\nTES\n\n(IS =1:3;\n\nIn addilion,\n],PM\n\n(]\n\nIE=I:NE)\n\nthe following\n\nThe three elements sharing the sides of element\nThe three sides of elemen! IE.\n\narrays will be used during the construclion\n\nIE.\n\nprocess:\n\nNode marker.\nElement marker.\nSide marker.\n\n:NP)\n\n[,I<M ( 1 :NE)\nI,LFI(]\n\nThe three nodes of element IE.\n\n:NS)\n\nnr_(:l a list _,sE, which is initially empty (NLSE=0),\nwhich contains the so-called\nactive elements, in ascending order of a specified key variable . The elements in the\nli,;l are kepl in a heap dala structure. Given a prescribed direction n, the recursive\n_lgorilhm proceeds as follows:\nSet\n\nI.,PM(I:NP)\n\n=\n\n0\n\nSet\n\nLEM (1 : NE)\n\n:\n\n0\n\nSet\n\n[,sM(]\n\n=\n\n0\n\n:NS)\n\nZ5\n\n2 .-\n\nSelect\n\nany element as a starting element zE.\n\n3.-\n\nLet iPi,\nisland\nIEifori\n= l : 3 be the three points, sidesand\nsurrounding elements of Ihis element IE.\nIF(LPM(IPi)\nFOR\n\n_\ni\n\n=\n\nforanyi\n\n1\n\n1:3\n\n=\n\n1:3)THEN\n\nDO\n\nLSM(ISi)\n\n=\n\nLSM(ISi)\n\nLPM\n\n=\n\n1\n\n(IPi)\n\nIF(LEM(IEi)\n\n=\n\nLEM(IEi)\n\n=\n\n1\n\n0) THEN\n=\n\nInsert element\nNLSE\n\n+\n\n1\n\nIEi into LSE according to KEYi\n\nNLSE+I\n\nENDIF\nEN3DO\nEND(F\n4.-\n\nSelect\n\na new element IE\n\nIF(NLSE\n\n:_ O)THEN\n\nNLSE\nIE\n\n=\n=\n\nNLSE-I\n\nLSE(1)\n\nC-:_) 3\nTO\nELSE\nEnd process.The sides TS forwhich LSM(TS)\nENDIF\n\n= 1 form lhe line.\n\nIn the above KEYi is evaluated as the absolute value of the scalar product between\nand the unit vector in the direction joining the cenlroids of elements iv. and IEi.\n\nn\n\nThe operation of this algorithm is illustrated by considering the mesh of 18\ntriangular elements with 16 nodes shown in figure 1.11a. In this example direclionality is not taken into account, which means that elements are inserted inlo the list\n].,sF; without any directional preference. Starting from any element e.g. element 11,\nthe side marker for sides 8-9, 9-11 and 11-8 is set to 1. At this stage, the line\nconsists of these three sides. The node marker for nodes 8, 9 and 11 is sel to one and\nthe adjacent elements 10, 12 and 6 are marked and inserted into t,SE. NLSE is now\nequal to 3. The first element in LSE, which is element 10, is selected and, as one of\nits points is not marked, the marker of its sides is incremented by one. This means\nthat the common side with element 11, i.e side 11-8, is deleted from the current\nline and the sides 7-8 and 11-7 are added to the line. The marker for node 7 is set\nto one and the unmarked adjacent elements 3 and 9 are marked and inserted into LSE.\nThe situation is then as shown in figure 1.11b. The procedure is continued, with the\nnext slage being illustrated\nin figure 1.11c, until all the elements have been\nconsidered,\ni.e. NLSE is equal to zero. At this point, a line will have been constructed\nwhich passes\n1.1 Id.\nWhen\n\nthrough each node in the grid once and only once, as shown in figure\n\nthe above\n\nalgorithm\n\nis applied to the triangular\n\nproduces\nthe lines shown in figures\nangles to each other are prescribed.\n\n1.12b and 1.12c,\n\nmesh shown in figure 1.12a, it\nwhen two directions\n\nat right\n\nAn example\nis given which illustrates\nthe numerical\nperformance\nof the fully\nimplicil\nalgorilhm\nof equation\n(1.55) when the solution\nis obtained\nvia the\nrelaxalion procedure of equation (1.60). The example consists of an inviscid flow\n\n26\n\n13\n\n14\n\n15\n\n13\n\n16\n\nIZ,\n\n15\n\n16\n\n12\n\n13\n\nI0\n\nlt,\n\n2\n\n3\n\nI.\n\nS\n\n$\n\n(b)\n\n(a)\n\n13\n\nIZ,\n\n14\n\n15\n\n15\n\n16\n\n13\n11,\n\n2\n\nt\n\nI,\n\n2\n\n(c)\n\nFigure\n\n1.11\n\n3\n\nI.\n\n(d)\n\nThe construction\nof a relaxation\nline on an unstructured\nmesh\nshowing (a) starting line (b) line after one stage (c) line after two\nstages (d) final line.\n\n27\n\n5\n\n(a)\n\nFigure\n\n(c)\n\n(b)\n\n1.12\n\nUnstructured line relaxation\nline (c)\'vertical\'\nline.\n\n(a) unstructured\n\nmesh\n\n(b)\n\n\'horizontal\'\n\n(b)\n\n(a)\n/\n\ni \'"\n\ni\nimplicit\n41\n\n(c)\n\n(e)\n(d)\n\nFigure\n\n1.13\n\nUnstructured line relaxation\nline (c) \'vertical\'\nline (d)\nconvergence curve.\n\n(a) detail of the mesh (b) \'horizontal\'\nSteady slate pressure\ncontours (e)\n28\n\nexplicit\n\nover a NACA0012 airfoil with a free stream Mach number of 0.85 and 10 angle of\na11ack of one degree. The unstruclured\ntriangular mesh employed consists of 8378\nelements and 4292 points and a detail of the mesh is given in figure 1.13a. Details of\nlhe lwo lines used for the line relaxation procedure are shown in figures 1.13b and\n1.13c. The computed steady slate pressure contours are shown in figure 1.13d. The\nconvergence\nbehaviour of the implicit procedure is compared with thai of the expli_:i! approach of equalion (1.50) in figure 1.13e.\n\n29\n\n2. GEOMETRY\n\nMODELLING\n\nThe problem of producing an unstructured mesh over a general computational domain\nwill now be addressed. The boundary of the domain to be discretised\nneeds to be\nrepresented\nin a suitable manner before the generation procedure can start. If the\nautomatic discretisation\nof an arbitrary domain is to be achieved, the mathematical\ndescription of the domain topology ought Io possess the greatest possible generality.\nThe compuler\nimplementalion\nof lhis description\nmust provide\nmeans\nfor\nautomatically\ncomputing\nany geometrical\nquantity\nrelevant\nto the generation\nprocedure.\nSolid modelling\nprovides\n[27] the most general\nup-to-dale\nset of\nmethods\nfor the computational\nrepresentation\nand analysis\nof general\nshapes\nmatching the above requirements.\nIn this section we give a brief description of the geometry modelling strategy that we\nemploy. More sophisticated\nrepresentations\ngiving more accurate definitions\nas well\nas easing Ihe task of performing quick geometry modifications could be used [28].\nIn Ihe planar two dimensional\ncase, the boundary is represented by closed loops of\norientated composite cubic spline curves [28]. For simply connected domains these\nboundary\ncurves are orientated\nin a counterclockwise\nsense while for multiplyconnected\nregions the exterior\nboundary curves are given a counter-clockwise\norientalion and all the interior boundary curves are orientaled in a clockwise sense\n(figure\n2.1).\nIn three dimensions, lhe domain to be discrelised is viewed as a region bounded by\nsurfaces which inlersecI along curves. The podions of these curves and surfaces\nneeded to define the three dimensional domain of inlerest are called curve and surface\ncomponents\nrespectively.\nFigure 2.2 shows the decomposition\nof lhe boundary of a\nthree dimensional\ndomain into its surface and curve components.\nThe approximate\nrepresenlation of the boundary components is accomplished by means of composite\ncurves and surfaces [28]. In addition, boundary curves and surfaces are orientated\n(see figure 2.3). This is important in the generating process as it is used to define\nthe Iocalion of the region that is to be discrelised.\nThe orientation\nof a boundary\nsurface is defined by the direction of the inward normal. The orientation\nof the\nboundary curves is defined wilh respect to lhe boundary surfaces which contain\nthem. Each boundary curve will be common to two boundary surfaces and will have\nopposite orientations with respect to each of them. An example of the approximated\ngeomelry\nfor a surface component\nand its corresponding\ncurve componenls\nis\ndisplayed in figure 2.4. It can be observed thai lhe boundaries of the inlerpolated\ncomposite surface can be arbitrary and are not required to coincide with those of the\nsurface component.\n2. 1 Curve Representation\nThe parametric definition of a curve consists of a piecewise interpolation\nof cubic\npolynomials through an ordered set of data points. The order in which lhese points\nare given defines the orienlation.\nIn the Ferguson representation\n[29], each cubic\npolynomial is expressed, in lerms of the position and tangent veclors at the two end\npoints, as\n\n3O\n\nFigure\n\nBOUNI)ARY\n\n2.1\n\nEDGES\n\nBoundary\n\norienlation\n\nfor a two dimensional domain.\n\nBOUNDARY\n\nDISCRETIZATION\n\nFigure\n\n2.2\n\n3D DOMAIN\n\nFACES\n\nPROCESS\n\nDecomposition\nof the boundary\nsurface and curve components.\n\n31\n\nof a three\n\ndimensional\n\ndomain\n\ninto its\n\nFigure\n\n2.3\n\nOrienlalion\n\nof the boundary\n\n32\n\ncomponents\n\nin three dimensions.\n\nS UPPORT CURVE\nCURVE SUPPORT POINTS\n\nSURFACE COMPETENT\n\nTENSOR PRODUCT SURFACE\n\nCURVE COMPONENT\n\nSURFACE SUPPORT FOIN\'FS\n\nFigure\n\n2.4\n\nApproximated\n\ngeometry\n\nfor a surface component.\n\n[-r(t)-]\n\n/r<:)\n/\nc It<l)/\nLI(2)J\n_1\n\nr(v)=\n\n{i\n\n_<v<l\nvv 2 v 3 }\n\n7\n/\n\nXl\nP\'\n\n_\n\n_\n\nr(u)\n\n_\n\n_\n\n--_1_-\n\nU\n\n1\n\nFigure\n\n2.5\n\nInterpolation\n\nof a piecewise\n33\n\ncubic spline lhrough\n\na set of data points.\n\nr( I )]\n\nr_(v)=(lvv\n\n2v 3} C\n\nr_(2)|\n\nO<_v_< I\n\n.to\')\nI\n\n(2.1)\n\nI(2) J\nwhere [(1) and .[(_) are the coordinates of the end points of the segment, l(1) and [(2) are\ntheir respective tangents and C is a constant matrix given by\n\nC=\nI\n\nThe langenl to the curve is computed\n\n0\n-3\n1\n2\n\n0\n3\n0\n-2\n\n1\n-20\n1\n\naccording\n\nL(v) = r.\'(v) =\n\n0\n1 1\n0\n1\n\n(2.2)\n\nto\n\ndr(v)\n(:Iv\n\n( 2.3 )\n\nThe number of data poirts, and their spatial distribution,\nshould be given in such a\nmanner thai the interpolated\ncurve accurately\napproximates\nthe inlersection\nof the\ncorresponding\nsurface components.\nThe interpolation\nproblem, which is illustrated\nin figure 2.5, consists of fitting a parametric spline, defined in a piecewise manner,\nthrough a set of n points Ei; j=l ..... n. At interior points, continuity\nof slopes is\nguaranteed\nfor any choice of the tangent vectors, provided that a unique langenl\nvector is used for the definition of the two adjacent cubic segmenls.\nHowever, by\nemploying\na simple procedure\n[28], these vectors can be determined\nso thai\ncontinuity of curvature is achieved throughout the interpolaled curve. At lhe two end\npoints, zero curvature is assumed. Note that the expressions given above are valid in\nIwo and three dimensions. The only difference in the two cases being the number of\ncomponents of the vectors r and I.\n\n2.2 Surface\n\nRepresentation\n\nThe mathematical\nrepresentation\nof a surface\nis obtained\nby interpolating\na\ncomposite\nsurface,\nmade up of quadrilateral\npatches,\nthrough a topologically\nrectangular\nset of data points [4k;j=l ..... m ;k=l .... n (see figure 2.6). Two families\nof parametric\nlines are obtained by interpolating\nspline curves, first through the\npoints of constant j and then through the points of constant k. The procedure used for\ninterpolating\neach spline curve is that described\nin the previous\nsection.\nThe\nmathemalical\nexpression for every quadrilateral\nsurface patch is given, in terms of\nthe tour cubic curves that form its boundary and the twist vector at the four corner\npoints, as\n\nr<=\'\n[(v,w)\n\n= (1 v v 2 v3 )\n\nC\n\nLw")\n\n/ C\' lw\n\nL,v(1)\n\nL,v(4)\n\nL, vw(1 )\n\nL,vw(4)/\n\nW2\n\nL,v\n\nL,v\n\nL,vw\n\nr,vw(3)-J\n\nw 3\n\n(2)\n\n(3)\n\n0_<v_< 1; 0_<w<_ 1\n\n34\n\n(2)\n\n(2.4)\n\nr(v,w)---(l vv 2v 3)\n\nC\n\nr\'\'1\nII\n\nr(2)\nr(_)\nr,w(2)\nr,v(I) r,v (4) r,vw(I) r,v.(4)|\nr,v (2) r,vO) r,vw (2) r,vwO)J\n\nCt\n\nSURFACE\n\nr\n\n/\n\nr(ul,u2)\nXl\n\nu2\n\n1\nPARAMETER\n\nPLANE\n\n:._.3:.:..\n\xe2\x80\xa2 ... ,.\',\n.\'.\'C*:O\n\nI_i:::::::i\n\nFigure\n\n2.6\n\nInterpolation\n\nof a composite\n35\n\nsurface through a set of data poinls.\n\nw2\nw3\n\nwhere C is the matrix previously defined\ncomma denotes partial differentiation, i.e.,\n\no_r\nr,v = _v \'\n--\n\n.\n\nr.w\n\n_\n\nin (2.2),\n\no_r\ndw \'\n--\n\no\n\nC "r is its transpose,\n\no_2r\nr_,vw= o_vo_w\n\nand the\n\n(2.5)\n\nHere the notation employed to denote lhe corner points of the patch is\n\nr(\')= r(O,O);\n\n[(2) = r(1,0);\n\nd 3) = [(1,1);\n\n[_4) = r(O,1)\n\n(2.6)\n\nThis representation uses a Hermite interpolalion between opposile boundaries of the\npatch [30]. The twist vectors (r,v,)jk at the corner points are computed so that\noverall second\norder continuity is achieved\non the interpolated surface. The\nimplementation details of this algorithm can be found in 131]. For convenience,\nglobal\nparametric\ncoordinates\nu 1 and u2 are defined. For the patch (j,k) these\ncoordinates are relaled to the local patch coordinales v and w according to u1 = v + j\n-1 and g2 = w + k -1. In this way, a global mapping r.(u_,u2) is established between\nthe rectangular region in the parametric plane defir,ed by 0 _<u1 _<p ; 0 <_u2 _<q and\nthe lensor producl surface. The orientation of the surface is defined by specifying the\noulward normal which poinls towards the region to be discretised.\n\n36\n\n3. UNSTRUCTURED\n\n3. t The advancing\n\nMESH GENERATION\nMETHOD\n\nBY THE\n\nADVANCING\n\nFRONT\n\nfront technique\n\nThe algorithmic procedure to be described for the mesh generation is based upon the\nmethod originally proposed in [5] for two dimensions\nand then extended to three\ndimensions in [7,18]. The advocaled approach is regarded as a generalization\nof the\nadvancing\nfront technique\n[32,33] with the distinclive\nfeature lhat elements,\ni.e.\ntriangles or telrahedra, and poinls are generaled\nsimullaneously.\nThis enables the\ngeneration of elements of variable size and strelching and differs from lhe approach\nfollowed in tetrahedral generators which are based upon Delaunay concepts [4,34],\nwhich generally connect grid points which have already been dislribuled in space.\nThe generation problem consists of subdividing\nan arbitrarily complex domain into a\nconsislenl assembly of elemenls. The consistency of the generated mesh is guaranteed\nif the generated elemenls cover the entire domain and the inlerseclion\nbetween\nelements occurs only on common poinls, sides or Iriangular\nfaces in the three\ndimensional case. The final mesh is construcled\nin a botlom-up manner. The process\nslarls by discretising each boundary curve. Nodes are placed on the boundary curve\ncomponents and then contiguous nodes are joined with straight line segmenls. In later\nstages of the generalion process, lhese segments will become sides of some triangles.\nThe lenglh of these segments must therefore, be consistent with the desired local\ndistribulion\nof mesh size. This operation\nis repeated for each boundary curve in\nturn.\nThe next stage consists\nof generating\ntriangular\nplanar faces. For each two\ndimensional\nregion or surface to be discrelised,\nall the edges produced\nwhen\ndiscrelising\nils boundary curves are assembled into the so called inilial front. The\nrelative orienlation\nof the curve components\nwith respect to the surface must be\ntaken into account in order to give the correct orientation to the sides in the initial\nfront. The front is a dynamic data structure which changes continuously\nduring lhe\ngeneration process.\nAt any given lime, the fronl conlains lhe sel of all lhe sides\nwhich are currenlly available to form a lriangular face. A side is selected from the\nfront and a triangular element is generated. This may involve creating a new node or\nsimply connecling to an exisling one. After the triangle has been generaled, the front\nis updaled\nand the generation\nproceeds\nuntil the front is empty.\nFigure 3.1\nilluslrales lhe idea of the advancing front technique for a circular planar domain by\nshowing the initial front and the form of the mesh al various stages during the\ngeneration process. The size and shape of the generated\nlriangles must be consistent\nwith the local desired size and shape of the final mesh. In the lhree dimensional case,\nthese lriangles will become faces of the telrahedra to be generated laler.\nFor lhe generation of lelrahedra\nlhe advancing\nfront procedure is taken one step\nfurlher. The front is now made up of the triangular faces which are available to form\na letrahedron.\nThe initial front is obtained by assembling\nthe triangulalions\nof the\nboundary surfaces. Nodes and elements will be simultaneously created. When forming\na new lelrahedron, the lhree nodes belonging to a triangular face from the fronl are\nconnecled eilher to an existing node or to a new node. After generating a telrahedron,\nIhp. fronl is updated. The generation procedure\nis completed when the number of\nIriangles in Ihe fronl is zero.\n\n37\n\nFigure\n\n3.1\n\nThe advancing\nfront\ntriangulalion\nprocess.\n\ntechnique.\n\nDifferent\n\nstages\n\nduring\n\nthe\n\n3.2 Characterisation\n\nof the mesh: mesh parameters\n\nThe geometrical\ncharacteristics\nof a general mesh are locally defined in terms of\ncertain mesh parameters.\nIf N (=2 or 3), is the number of dimensions\nlhen, the\nparameters\nused are a set of N mutually orthogonal\ndirections .g,i; i=1 .... N, and N\nassociated\nelement sizes 5i; i=1 .... N (see figure 3.2). Thus, at a certain point, if all\nN element sizes are equal, the mesh in Ihe vicinity of thai point will consist of\napproximately\nequilateral\nelements.\nTo aid the mesh generation\nprocedure,\na\ntransformation\nT which is a function of _.i and 5i is defined. This transformation\nis\nrepresented by a symmetric N x N matrix and maps the physical space onto a space in\nwhich elements,\nin the neighbourhood\nof the point being considered,\nwill be\napproximately\nequilateral with unit average size. This new space will be referred to\nas lhe normalised space. For a general mesh this lransformation\nwill be a function of\nposition. The transformation T is the result of superimposing\nN scaling operations\nwith faclors 1/_5iin each c_i direction. Thus\n\nT(__i,Bi)\n\n=\n\nN i\n_ _T __i\xc2\xae g=i\ni=I ul\n\n(3.1)\n\nwhere \xc2\xae denotes lhe tensor product of two vectors. The effect of this transformation\nin two dimensions\nis illustrated\nin figure 3.3 for the case of constant\nmesh\nparameters throughout the domain.\n\n3.3 Mesh Control: The Background\n\nMesh\n\nThe inclusion of adequate mesh control is a key ingredient in ensuring the generation\nof a mesh of the desired form. Control over the characteristics\nis obtained by the\nspecification of a spatial distribution of mesh paramelers by means of a background\nmesh. The background mesh is used for inlerpolalion purposes only and is made up of\nlriangles in two dimensions\nand letrahedra in lhree dimensions.\nValues of o_i and 5i,\nand hence T, are defined at the nodes of the background mesh. At any point within an\nelement\nof the background\ngrid, the transformalionTis\ncomputed\nby linearly\ninlerpolating\nits components\nfrom the element nodal values. The background\nmesh\nemployed must cover the region to be discretised (see figure 3.4). In the generation\nof an initial mesh for the analysis of a particular problem, the background\nmesh will\nusually consist of a small number of elements. The generation of the background\nmesh can in lhis case be accomplished\nwithout resorting to sophisticated procedures\ne.g. a background mesh consisting of a single element can be used to impose the\nrequirement of linear or constant spacing and stretching through the computalional\ndomain. The generation process is always carried out in the normalised space. The\ntransformalion\nT is repealedly\nused to lransform regions in the physical space inlo\nre qions in the normalised space. In this way the process is greatly simplified, as the\ndn._ired size for a side, triangle or letrahedra in this space is always unity. After the\nelemenl has been generated, the coordinates of the newly created point, if any, are\ntransformed back to lhe physical space using the inverse transformation.\nThe effect\nof prr_.scribing a variable mesh spacing and stretching is illustrated in figure 3.5 for\na reclangular\ndomain and using a background\ngrid consisting\nof two Iriangular\nelements.\n\n39\n\nx2\n\n(a)\n\nx3\n\nx2\n\n(b)\n\nFigure\n\n3.2\n\nCharaclerisalion\nMesh\n\nof the mesh.\n\nparamelers:\n\n4O\n\n(a) In Iwo dimensions.\n(b) In three dimcnsion_.\n\n$-_-25\n8,\nSTRETCHING\n\nFACTOR\n\n\\\n\nFigure\n\n3.3\n\nThe effect of lhe transformation\n\nT for a constant dislribution of the\n\nmesh parameters.\n\nv\n\nFigure\n\n3.4\n\nSpecification\nof\nBackground mesh.\n\na\n\nspatial\n\ndistribution\n\nof\n\nmesh\n\nparameters.\n\n_=1\nS=1\n\n12\n\n_=0.1\nS=I\n\n_=I\nS=1\n\nS=4\n\nM\n#\n\n_=1\nS=I\n\nFigure\n\n3.5\n\nVariable\nmesh spacing and stretching.\nrectangular\ndomain using a background\ntriangles.\n\nMeshes generated\nmesh consisting\n\nfor a\nof two\n\n3.4\n\nCurve\n\nDiscretisation\n\nThe discretisation of the boundary curve components\nis achieved by positioning nodes\nalong the curve according to a spacing dictated by the local value of lhe mesh\nparameters. Consecutive points are joined by straight lines to form sides. In order to\ndetermine the position and number of nodes to be created on each curve component,\nlhe following steps are followed:\ni) Subdivide recursively\neach cubic segment into smaller cubic segments until\nIheir length is smaller than a certain prescribed\nvalue. A safe choice for this\nvalue is the minimum\nspacing specified\nin the background\nmesh but often,\nconsiderably\nlarger values can be taken. The length of each cubic segmenl is\ncomputed\nnumerically.\nWhen subdividing\na cubic segment,\nthe position and\ntangent vectors corresponding\nto the new data points can be found directly from\nthe original definition of the segment.\n^\n\nii) For all the data points ri; j=l ..... n (i.e. those used to define the curve and\nthose created\nto satisfy the maximum\nlength criterion),\ninterpolate\nfrom the\nbackground\nmesh the coefficients\nof the transformalion\nTjand\ntransform the\nposition\n\nand tangent\n\nvectors\n\ni.e. \'[i = Ti ri and\n\ni.j = Tj ti. The\n\nnew\n\nposition\n\nand\n\ntangent vectors _-i.-Li; j=t ..... n, define a spline curve which can be interpreted as\nthe image of the original curve component\nin the normalised space. II must be\nnoted that because of the approximate\nnature of this procedure, lhe new curve\nwill in general have discontinuities\nof curvature even though the curvature of lhe\noriginal curve varies continuously.\niii) Compute the length of the curve in the normalised space and subdivide it into\nsegments of approximately\nunit length. For each newly created point, calculate\nthe cubic segment in which il is contained and its parametric coordinate. This\ninformation is used to determine the coordinates of the new nodes in the physical\nspace, using the curve component definition.\n\n3.5 Triangle\n\ngeneration\n\nin two dimensional\n\ndomains.\n\nThe triangle generation algorithm utilises the concept of a generation front. At the\nstarl of the process the front consists of the sequence of straight line segments which\nconnect consecutive boundary nodes. During the generation process, any straight line\nsegment which is available to form an element side is termed active, whereas any\nsegmenl which is no longer active is removed from the front. Thus while the domain\nboundary will remain unchanged,\nlhe generation\nfront changes conlinuously\nand\nneeds to be updated whenever a new element is formed. This updating process is\nillustrated\nin figure 3.6.\nIn the process\n3.7):\n\nof generating\n\na new triangle\n\nthe following\n\nsteps are involved\n\n(figure\n\ni) Select a side AB of the fronl to be used as a base for the triangle to be\ngenerated. Here, lhe criterion is Io choose the shortesl side. This is especially\nadvantageous when generating irregular meshes.\n\nz_3\n\n1\n\n14\n\n1\n\n4\n\n5\n\n8\n\n9\n\n7\n\n6\n\n5\n\n8\n\n9\n\n7\n\n6\n\n4\n\n3\n\n5\n\n8\n\n9\n\n7\n\n11\n\n12\n\n10\n\n13\n\n15\n\n16\n\n14\n\n17\n\n18\n\n10\n\n13_0\n\n4\n\n11\n\n12\n\n2\n\n2\n3\n\n3\n\n13\n\n12\n\n15\n\n14\n\n17\n\n16\n\n18\n\n1\n\n11\n\n(a)\n\n(2)\n\n(b)\n\nI\nELIMINATED\n\n19\n\ny3\n\n1\n\n8\n\n9\n\n2\n\n4\n\n6\n\n5\n\n12\n13\n\n10\n12\n\n13\n15\n\n15\n14\n\n16\n17\n\n7\n\n(c)\n\nFigure\n\n3.6\n\nFront updating\nprocedure\n(a) Initial gcneration\nfmnL\n(b) Creating a new element\n(c) Front updating\n\n_\n.......\n\n9\n\n7\n\n"_--\'6--\':i- \'-_" "_i- :;\'i-i\nT\n.......\n11\n10\n\n5\n\n3\n\nin two\n\ndimensions.\n\n(i) No new point is created\n(2) A new point (19) is created\nfor the case b.2.\n\nt_tl\n\n14\n16\n\n17\n18\n\nADDED\n\n1\n\n18\'_:_.-9.!;_1\n1\n.............\n\n]\n\nii) Inlerpolale from the background\ngrid the transformation T at the celltre of the\nside M and apply it to the nodes in the front which are relevant to the\ntriangulalion.\nIn our implementalion we define the relevant points to be all those\nwhich lie inside the circle of centre M and radius three times the length of the\nside being considered. Let _,, _. and IV!denote the positions in the normalised space\nof the points A, B and M respectively.\niii) Determine,\nthe triangular\n\nin the normalised\nelement.\n\nspace,\n\nThe point\n\nside thal passes through\n\nthe ideal position\n\n151is located\n\nthe point M and at a distance\n\n0.55"L\n1\n2-L\n\nwhere L is the distance\nAB happens\nbackground\ninequalities\nExpression\nto serve the\n\nif\nif\nif\n\nvertex\n\non the line perpendicular\n\nof\n\nto the\n\n61 from the points _ and J_.\n\nThe direction in which 151 is generated\nis determined\nside. The value 81 is chosen according to:\n\n81 =\n\n151for the\n\nby the orientation\n\nof the\n\n0.55,L\n< 1\n0.55-L\n< 1 < 2*L\n1 > 2-L\n\n(3.2)\n\nbetween points _ and J_. Only in situalions\n\nwhere\n\nthe side\n\nto have characteristics\nvery different from those specified by the\nmesh will lhe value of 81 be differenl from unity. However, the above\nmust be taken into account to ensure geometrical\ncompatibility.\n(3.2) is purely empirical and different inequalities could be devised\nsame purpose.\n\niv) Select other possible\n\ncandidates\n\nfor the vertex\n\nand order them in a list. Two\n\ntypes of points are considered\nviz. (a) all the nodes (_1, (_2 -.- in the current\ngeneration\nfront which are, in the normalised\nspace,\ninterior Io a circle wilh\ncenlre\n\n151and radius r = 51, and (b) the set of points JS_\n..... P-s generated\n^\n\n_"\n\nA\n\nalong the\n\nA\n\nheight P1M. For each point Q_, construct\n\nthe circle\n\nwith centre\n\ndefined\n\nby points 15_and I_ and which passes through\n\nposilion\n\nQi, on the line\n\nof the centres -Qi, of these circles on the line P__11_I\ndefines\n^\n\nthe poinls (_i,/_ and _.. The\nan ordering\n\nof\n\nA\n\nthe the Q_points.\n\nA list\n\nis created\n\nwhich\n\ncontains\n\n^\n\nall the Q_ points\n^\n\nfurthest point from P1 appearing\nat Ihe end of this list.\n\nwith\n\nthe\n\n/*,\n\nat the head of list. The points P1 ..... .P_s\nare added\n\nv) Select the best connecling\npoint. This is the first point in the ordered list\nwhich gives a consistent\ntriangle. Consistency\nis guaranteed\nby ensuring lhat\nnone of the newly created sides intersects with any of the existing sides in the\nfront.\nvi) Finally, if a new node is created, ils coordinates\nobtained\nby using the inverse transformation\nT -1.\nvii) Store\nsides.\n\nthe new triangle\n\nin the physical\n\nand update the front by adding/removing\n\n45\n\nspace\n\nare\n\nthe relevant\n\nQ2\nQI\n/\nP!\n\nA\n\\\n\\\n\\\n\n\\\n\\\n\nB\n\n\xe2\x80\xa2\nX\nO\n\nFigure\n\n3.7\n\nGeneration\n\ntaft\n\nIDEAL\nHELP\nPOINTS\n\nof a new triangle.\n\nPOINT\nPOINTS\nIN THE FRONT\n\nJ DISCRETISE\nDOMAIN\nBOUNDARY\n\nJ\n\nASSEMBLE\nFRONT INITIAL\n\nJ SELECT A FRONT FROM\nTHE SIDE\n\nJ\n\nINTERPOLATE\nPARAMETERS MESH\n\nI\n\nI\ncriterion\n\nCREATE\nINTERIOR\n\nA\n\nNEW\nPOINT\n\nJ CHOOSE\nAN\nEXISTINGI\nPOINT\nFROM\nTHE FRONT l\n\nI\n\n=\n\nI\n\njTRAN_\nPHYSICAL\n\nSPACE\n\nJ\n\nI FORM A NEW ELEMENT\nI\n\nI\n\nNo\n\nUPDATE\n\n<Front\n\nFRONT\n\n]\n\nempty ?>\n\nYes\n\nFigure\n\n_ 3.8\n\nMesh\ngeneration\nprocedure\nusing\nthe advancing\nDouble\nline boxes\nare necessary\nto include\nthe\nmesh size and strelching.\n\n47\n\nfront\neffects\n\nlechnique.\nof variable\n\nThis mesh generation\nfigure 3.8\n\nprocedure is schemalically\n\npresented\n\nin the diagram shown in\n\nMesh aualitv enhancement\nIn order to enhance\nthe quality\nof the generated\nmesh, two post-processing\nprocedures are applied. These procedures, which are local in nature, do nol alter lhe\ntotal number of points or elemenls in the mesh.\nDiagonal swapping.- This changes the connectivities among nodes in the mesh\nwithout altering their position. This process requires a loop over all the\nelement sides excluding those sides on the boundary. For each side AB (figure\n3.9) common to the triangles ABC and ADB one considers the possibility of\nswapping AB by CD, thus replacing the two triangles ABC and ADB by the\ntriangles ADC and BCD. The swapping is performed if a prescribed regularity\ncriterion is satisfied better by the new configuration\nthan by the exisling one.\nIn our implementation, the swapping operation ts performed if the minimum\nangle occuring in the new configuration is larger than in the original one.\nMesh smoothing.This alters the positions of the interior nodes without\nchanging the topology of Ihe mesh. The element sides are considered as springs\nof stiffness proportional to the length of the side. The nodes are moved until\nthe spring system is in equilibrium. The equilibrium positions are found by\niteration. Each iteration amounts to performing a loop over the interior\npoints and moving their coordinates to coincide with those of the centroid of\nthe neighbouring points. Usually three to five ileralions are performed.\nThe combined application of these two post-processing\nalgorithms is found to be very\neffective in improving the smoothness and regularity of the generated meshes.\n\n3.6 Surface\n\nDiscretisation.\n\nThe method followed for the triangulation\nof lhe surface componenls is an extension\nof the mesh generation\nprocedure\nfor planar domains described above. The\ndiscretisalion of each surface component is accomplished by generating a two\ndimensional mesh of triangles\nin the parametric plane (ul,u 2) and then using the\nmapping r_(ul,u 2) defined in section 2.2. This mapping eslablishes a one to one\ncorrespondence\nbetween the boundary surface component and a region on the\nparametric plane (ul,u 2) (figure 3.10). Thus, a consistent triangular mesh in the\nparametric\nplane will be transformed,\nby the mapping [(ul,u2),\ninto a valid\nlriangulalion of the surface component. The construction of the lriangular mesh in\nthe parameter plane (ul,u 2) using the two dimensional mesh generator, requires lhe\ndetermination of an appropriate\nspatial distribution of the two dimensional mesh\nparameters. These consist of a set of two mutually orthogonal directions _.i\'; i=1, 2,\nand two associated element sizes 5i*; i=1, 2.\nThe two dimensional mesh parameters in the (ul,u 2) plane can be evaluated from the\nspatial distribution of the three dimensional\nmesh parameters and the distortion and\nstretching introduced by the mapping. To illustrate this process, consider a poinl P"\nin the paramelric\nplane of coordinates\n(utP,u2P) where the values of the mesh\nparameters\n8_*, _u*; i=1,2 are to be computed. Ils image on the surface will be the\npoint P--r(u_P,u2P).\nThe transformation\nbetween\nthe physical\nspace and the\nnormalised\nspace at this point Tp can be obtained by direct interpolalion\nfrom the\n\n48\n\nB\n\nA\n\nD\nD\n\nB\n\nA\n\nD\n\n(a)\n\nFigure\n\n3.9\n\n(b)\n\nDiagonal swapping procedure: (a) non-admissible,(b) admissible.\n\n/\n\nu2\nk\n\n\xe2\x80\xa2\n\nI\n\n!\n\nS\nr(ul,u2)\n\nY\nXl\n\nF igu re\n\n3.10\n\nMapping of a surface component onto a two dimensional domain.\n\n49\n\nbackground mesh. A new mapping, valid in the neighbourhood of point P, can now be\ndefined between the parametric plane (u1,u2) and the normalised space as\n\nFl(ul,u 2) = Tp [(u 1,u 2)\n\n(3.3)\n\nA curve in the parametric plane passing through point p_* and with unit tangent\nvector D. = ([}_,1\n_2) at this point, is transformed by the above mapping into a curve in\nthe normalised space passing through the point Tp P. The arc lenglh parameters ds\nand d_\', along the original and transformed\nexpression\n[35]\n\ni;j=l\n\ncurves respectively,\n\naul \xc2\xb0_ulI_ 13j\n\nare related by lhe\n\n(3\n\n(ds)2\n\n4)\n\nAssuming that this relation between the arc length parameters also holds for the\nspacings, we can compule the spacing 8p along the direction D. in the parameter plane\nas\n\ni;j=t\nThe\n\ntwo\n\ndimensional\n\nmesh\n\n_ui \xc2\xb0_ui j31J3J\n\nparameters\n\n_.i*, 5i\';i=l,\n\n(3.5)\n2 are determined\n\ndirections in which _ attains an extremum. This reduces\nand eigenveclors\nof a symmetric 2 x 2 matrix.\n\nto finding\n\nfrom\n\nlhe\n\nthe eigenvalues\n\nTo form the initial front, the (u_,u 2) coordinates of the nodes already generated on\nthe boundary curve components have to be computed. As the mapping r(u_,u2) cannot\nbe inverted\nanalytically,\nthe coordinates\n(u_,u 2) of such points are found\nnumerically\nby using a direct iteration procedure [31}.\n\n3.7 Generation\n\nof Tetrahedra.\n\nthe starting\npoint for Ihe discrelisation\nof the lhree dimensional domain into\ntetrahedra\nis the formalion of an initial generation fronl. The initial fronl is the set\nof oriented triangles which constilules the discretised boundary of the domain and is\nformed by assembling\nthe discrelised\nboundary surface components.\nThe order in\nwhich the nodes of these triangles are given defines the orientation, which is the\nsame as thai of lhe corresponding\nboundary surface component\nThe algorithm for\ngenerating\ntetrahedra\nis analogous to that described above for the generalion\nof\nIriangles\n(see figure 3.8). However, in the three dimensional\ncase the range of\npossible\noptions\nal each slage is much wider and the number of geometrical\noperations\ninvolved\nincreases\nconsiderably.\nThus, the ability of the method to\nproduce a mesh and the efficiency of its implemenlation\nrelies heavily upon the type\nof strategy selected. The generation of a generic lelrahedral\nelement involves the\nfollowing\nsleps (figure 3.11):\n\n5O\n\nh\n\n!\n\nr\n\nIDEAL\n\nX\n\xc2\xae\n\nFigure\n\n3.11\n\nHELP\nPOINTS\n\nPOINT\nPOINTS\nIN THE\n\nFRONT\n\nGeneralion of a tetrahedral element.\n\n51\n\n!\n\ni) Select a triangular face ABC from the front to be a base for the tetrahedron to\nbe generated. In principle, any face could be chosen, but we have found it to be\nadvantageous in practice to consider the smallest faces first. For Ihis purpose,\nthe size of the face is defined in terms of lhe size of its shortest height.\nii) Interpolate from the background\ngrid the transformation T at the centroid of\nthe face M and apply it to the nodes in the front which are relevant to the\ntriangulation.\nIn our implementation,\nwe define the relevant points to be those\nwhich lie inside the sphere of centre M with radius equal to three times the value\nof the maximum\nthe positions\n\ndimension\n\nof the face being considered.\n\nin the normalised\n\nLet F,, _.., _ and _ denote\n\nspace of the points A, B, C and M respectively.\n\niii) Determine,\n\nin the transformed\n\nspace,\n\nthe letrahedral\n\nelement. The point 151lies on the line which passes through the\n\npoint tvl and which is perpendicular\ngenerated\n\nis determined\n\nthe ideal position _1 for the vertex\n\nto the face.\n\nby the orientation\n\nof\n\nThe direction in which 41\n\nIs\n\nof the face. The location of 41\n\nis\n\ncomputed so thal the average length of the three newly created sides which join\npoint 151 with points ,_, __ and _ is unity. For faces whose size In the parametric\nplane is very different from unity, this step may have to be modified, as in\nexpression (3.2), to ensure geometrical compatibility. However, such cases\nrarely occur in practice. Let 51 be the maximum of the distances between point _1\nand points ,_, _ and ._.\niv) Select\n\nother possible\n\ncandidates\n\nfor the vertex and order them in a list. Two\n\ntypes of points are considered\nviz. (a) all the nodes -_I, (_2 ....\nin the current\ngeneration\nfront which are, in the normalised\nspace, interior Io a sphere with\ncentre\n\nI_1and radius r = 81, and (b) a new set of points 151\n..... _\n\ngenerated\n\nalong\n\nthe height P1M. Consider the set of points A, B and _ and denote by __ the member\nof this set which is furthest\n\naway from t_l. For each point.Qi, construct\n\nwith centre Q_i on the line defined\npoint (3, and D. The position\n\nby poinls\n\nof the centres\n\ndefines an ordering of the the ._i points\n\nthe sphere\n\n151and 1_Iand which passes\n_i\n\nof these spheres\n\nwith the furthest\n\nthrough\n\non the line _1_\n\npoint from 151appearing\n\nat the head of list. The points ._.1\n..... P-s are added at the end of this list.\nv) Selecl the best connecting\npoint. This is the first point in the ordered\nwhich gives a consistent tetrahedron. Consislency is guaranteed by ensuring\nnone of the newly created sides intersects with any of the existing faces in\nfront, and that none of the existing sides in the front inlersect with any of\nnewly crealed faces.\nvi) If a new node is created, its coordinates\nusing the inverse transformation\nT -1.\nvii) Store the new\nnecessary sides.\n\ntriangle\n\nand\n\nupdate\n\n52\n\nin the physical space are obtained\n\nthe\n\nfront\n\nby adding/removing\n\nlist\nthat\nlhe\nthe\n\nby\n\nthe\n\nNUMBER\n\nOF\n\nELEMENTS\n\nSURROUNDING\n\nA\n\nSIDE\n\nDIHEDRAL\nANGLE\n\n18\n\n148\n\n14\no_)\n\n_35\n\n\xc2\xa2e30\n\n-7\n\nl\n\n1\xc2\xa3\n\nII\ntu20\nt.)\nCE\n!\n\n4\n\ntO\n\n0\n\n0\n3\n\nNUMBER\n\n4\n\nS\n\nEL\n\n7\n\n0\n\nOF ELEMENTS\n\nNo.,=\n\n\xe2\x80\xa2\n\ni\n\nJ\n\nI\n\n15\ntO\nI\n\nS\n\n0\n\n10\n\ne_\n\nPER SIDE\n\nDIHEDRAL ANGLE/OPTIMAL ANGLE\n\n5.10\n\nOCop,= 70.53 \xc2\xb0\n(IN UNSI\'RETCHED\nTHE\nSPACF)\n\nFigure\n\n3.12\n\nMesh\n\nquality\n\n53\n\nstatistics.\n\noset\n\not\n\noeoe\n\nwe ii\n\n_l\n\nJJ\n\n14 I_\n\nII\n\nlY\n\nSIDE LENGTH/OPTIMAL LENGTH\n\n3.8 Mesh quafify assessment.\nAny discussion\nof mesh quality should be intimately\nrelated to the form of the\nsolution we are trying to represent on that mesh. Two factors need to be considered\nhere:\ni) Determination\nof the characlerislics\nof the optimal mesh for lhe problem\nhand. This inlroduces lhe concept of adaptivity\nand Ihis aspecl is considered\nsection 5.\n\nat\nin\n\nii) Assessment on how well the generated mesh meets the requirements specified\nby the mesh parameters. This assessment can be made by examining the generaled\nmesh and determining\nthe statistical\ndislribution\nof certain\nindicators.\nFor\nexample in figure 3.12 we have chosen as indicators the number of elements\naround a side, the magnilude of the element dihedral angles and the length of the\nside. These indicators are compared with optimal values i.e. those of a regular\nlelrahedron which has the exact dimensions specified by the mesh parameters.\n\n3.9 Applicalion\n\nexamples\n\nA lwo dimensional\ndiscretisation\nof the domain around a four componenl\nairfoil in\nlanding configuralion\nis shown in figure 3.13. The background mesh employed for lhe\ngpl_eralion, consisting of a few elements only, has been superposed on the generated\nmesh. The mesh in lhe vicinity of lhe airfoils is nearly of constant size and varies\nrapidly away from the airfoils.\nVery little distortion\nin the triangles is observed\neven Ihough large varialions in mesh size occur.\nG_\'n e[[o_.fJgJatP,_r\nconfiguratLg_n\nIr_ computational\naerodynamics,\na problem of currenl inleresl is lhe prediction of the\ninviscid flowfield about complete\naircrafl configurations.\nThe problem considered\nhere is the simulation of Ihe flow pasl a generic fighler with canard, 70-20 cranked\ndella wing, vertical fin and engine inlet. This same configuration\nhas been studied\npreviously using an algebraic grid generation approach [36]. Due to the symmetry\nof the problem only half of the fighter is modelled.\nFigure 3.14(a) shows the\ngeometry definition of lhe computational\ndomain. The background mesh employed is\nillustraled\nin figure 3.14(b).\nThe curve components,\ndefined in terms of cubic\nsplines and the discrelisalion\nof these componenls Is displayed in figure 3.14(c). The\nindividual\nsurface componenls\nare described\nby tensor product surfaces and Ihe\nsurface# di.qcrelisation\nis illustrated\nin figure 3.14(d). An intermediate\nstage during\nlhp letrah_qdra generation\nprocess is displayed in figure 3.14(e).\nThe final mesh\n(:on_islr_d of 76,522 lelrah_;dfa and included a full simulation of the engine inl_;t.\nSpacQ sbutlb, cq_n_i4lur_atk_\nrtm cl_-_omc, considered is lhat of HERMES like space shuffle. In figure 3.15(a) the\nlry\nr,tjrfac_, definilion for half of lho model which contained 13 surface componenls\nand\n29 curve componenls\nis shown. Two views of the triangulated surface are displayed\nin figurp 3.15(h). The Iriangulation\nconsi.,;ted of 5,776 etemenls of nearly constant\n\na)\n\nQ.\n\n\'-E\n\n(Da)\nC_\nr.C: (_\n\n"dE\n0"0\nr...= .._\n\n_n\n\nm\n::3-=-c: r"\n0"\nt\'t::=\n\n__\n\n_\n\no_\n\nQ._C:\nO\n\nc:\n\n._\n\nr-\n\n_E_\nlm\n\nO\nL_\n\n-i\nU..\n\n55\n\nL,,-\n\no\n\n0_\n\n14=\n\n\\\n-\\\n\ni\n/\n\n\\,I,\n\nm_\n\nt,-\n\ncn\n\nt,.\n\noo\n\n,,c\n\nC\n.-\n\n_0_\n\n_4\n0\n\n\xe2\x80\xa2\ne.-\n\n(a)\n\n(b)\n\nFigure\n\n3.15\n\nSpace shuttle\nconfiguration\n(a) surface definition\n(b) surface\n\ntriangulation.\n\nsize.\n\nThe\n\nincreasing\nBoeing\n\nthree\n\ndimensional\n\ndomain\n\nwas\n\nfilled\n\nin with\n\n87,896\n\nletrahedra\n\nof\n\nsize away from the body.\n\n747 irl landing\n\nconfiguration\n\nThe problem considered\nin this section is the subsonic flow over a Boeing 747\naircraft. The leading edge slats and trailing flaps in the wing are deployed in a landing\nconfiguration. The flaps are detached from the wing. This means that lhe generator is\nrequired to mesh the region between wing and flaps. For this reason the generation of\nstructured\ngrids for this type of configuration\npresents\nsevere problems.\nThe\ngeometrical\ndefinition of the aircraft by means of tensor product surfaces is shown\nin figure 3.16(a).\nDue to the symmetry\nof the geometry\nonly half aeroplane\nis\nconsidered\nin the computational\ndomain. The boundary\ndefinition\nconsists of 29\nsurface components\nand 57 curve components.\nThe outer boundary is a circular\ncylinder of radius equal to 30 times the mean chord of the wing. The discretisation of\nthe surface has 13,030 triangles and the computational\ndomain has been discrelised\nusing 194,307 telrahedra. An attempt has been made to generate a mesh which has\nnearly uniform element size in the vicinity of lhe aeroplane\nand increases rapidly\naway from it. An inviscid flow computation\nwas performed\nfor a free stream Math\nnumber of 0.3 and an angle of attack of 5 \xc2\xb0. Figure 3.16(b) shows two views of the\nmesh and the computed pressure contours on the surface of the complete aircraft. The\ncomputed\nsolutio,i\nwas obtained\nafter 700 timesteps\nof lhe explicit algorithm\ndescribed\nin section\n1.3. This results were not fully converged\nand are only\npreliminary.\nF-I___ fighter\n\nconfiguration\n\nHere the flow past an F-18 fighter aircraft, including the modelling of the engine\neffects is considered. The free stream Mach for the computalion\nis 0.9 and the angle\nof attack is 3o . The simulation of the effects is accomplished\nby specifying the Mach\nnumber al the engine inlel to be 0.4. The flow condilions\nat the outlet are those\ncorresponding\n1o a jet pressure ratio of 3 in lhe engine. Due to the symmetry of the\ngeometry only half of the domain is considered. The geometry of the boundary of the\ncornputalional\ndomain is defined by means of 37 surface components\nand 87 curve\ncomponents.\nThe spline definition of the aircraft surface and the engine ducts is\nrepresented\nin figure 3.17(a).\nThe outer boundary is a rectangular\nbox which is\nsilualed at an approximate\ndislance of 15 wing chords from the aircraft. The initial\ngeneration contains 30,743 triangular faces. The triangulation\nof the surface of the\nfull F 18 is depicted\nin figures 3.17(b),\nin which the engine ducts are shown\ndetached, and 3.17(c). The element size is almost uniform in the neighbourhood\nof\n1he aircraft and increases away from it. The generated mesh for half of the domain\nconsisls of 451,641 telrahedral\nelements and 84,827 points. The solution on this\nmesh was computed using 3,500 explicit timesteps. It required a total CPU lime of 6\nhours on a single processor of a Cray 2. The pressure solution on the surface of the\naircralt is shown in figure 3.17(d). Some of the features expecled in such a flow\nsuch as, for instance, the canopy and wing shocks can be apprecialed.\nFa]Cgn aeroDlane\nIn this section we consider the flow past a two engine Falcon aeroplane. The geometry\ndefinilion\nwhich required\n24 surface components\nand 52 curve components,\nis\ndisplayed in figure 3.18(a).\nThe pylons and nacelles\nare included in the model and\nflow through\nthe interior of lhe nacelles\nhas been allowed\nin the numerical\nsimulation. No engine elfects are considered. In this example an attempl has been\n\n59\n\n(a)\n\n(b)\n\nFigure\n\n3.16\n\nBoeing\n\n747 in landing\n\nconfiguration\n\n(M.=0.3,\n\nor.=5o)\n\n(a) Geometry definition - aircraft surface patches\n(b) Two views of the mesh and pressure contours on the surface.\n\n6{)\n\n(b)\n\n_\n\nFigure\n\n3.17\n\nFlow\n\npas!\n\nENGINE\n\nan\n\nF-18\n\nfighter\n\n(a) Geometry definition\n(b) Surface triangulation\n\nconfiguration\n\nDUCTS\n\n(M_=0.9,\n\n- aircraft surface patches\nshowing engine ducls\n\n61\n\no_=3 o)\n\n(c)\n\n(d)\n\nFigure\n\n3.17\n\nFlow\n\npast\n\nan\n\nF-18\n\nfighler\n\nconfiguration\n\n(c) Triangulation\nof the F-18 surface\n(d) Computed pressure solution\n\n_2\n\n(M_=0.9,\n\no_=3 \xc2\xb0)\n\n(conlinuation)\n\n(a)\n\nFigure\n\n3.18\n\nTwo engine\n\nfalcon\n\n(a) Geometry\n\ndefinition.\n_3\n\naircrafl\n\n(M.=0.85,\n\no_=2\xc2\xb0)\n\n(b)\n\nFigure\n\n3.1B\n\nTwo\n\nengine\n\nfalcon\n\naircraft\n\n(M_=0.85,\n\nc(=2 \xc2\xb0)\n\n(continuation)\n\n(b) Triangulation\nof the aeroplane surface and plane\n(c) Surface triangolation\nfor the complete aeroplane\n\nof symmetry\n\n(d)\n\n(e)\n\nFigure\n\n3.18\n\nTwo\n\nengine\n\n(d) Computed\n(e) Computed\n\nfalcon\nvelocity\nsurface\n\naircraft\n\n(M.=0.85,\n\no.=20 )\n\nvectors oil the surface\npressure contours\n\n(continuation)\n\nmade to produce a mesh which has increased resolution in those regions where high\ngradients in the solution can be expected e.g. leading/trailing edges, nose el\xc2\xa2. This can\nbe appreciated in figure 3.18(b) which shows the generated triangulation on the\nsurface of the aeroplane and on the plane of symmetry. A view of the sur|ace mesh,\nwhich contains 30,628 triangles for the complete aeroplane, is displayed in figure\n3.18(c). The volume surrounding\nthe aeroplane was discretised using 720,859\nletrahedra and 133,080 points. The generation of the mesh was performed on a Cray\nYMP machine and required approximately two hours of CPU time using a single\nprocessor. A flow simulation of steady state flight al a free stream Mach number of\n0.85 and an angle of attack of 2o was performed. The flow simulalion needed about 8\nand a half hours of CPU lime on a Cray 2 machine. The velocity vectors on the surface\nof the complete aeroplane are displayed in figure 3.18(d). The pressure contours on\nthe surface of the aircraft are depicted in figure 3.18(e).\nThe solution is rather\noscillatory. This may indicate that the solution is not fully converged yet. The\nformation of a lambda shock pattern on the wing and the shock structure on the\npylons and nacelles can be observed.\n\n66\n\n4. DATA STRUCTURES\nthis sectionhas been written in collaboration\nwith\nJ. Bonet\nInstitutefor NumericalMethodsin Engineering\nUniversity\nCollegeSwansea\nSWANSEA A28PP,UK\nS\nFrom the previous section it is apparentthai a successfulimplementationof the\npresented algorithm will require the use of data structureswhich enable certain\nsorting and searching operationsto be performed efficiently. For instance, the\ngeneration front will require a data structure which allows for the efficient\ninsertion/deletion sides/facesandwhich also allows for the efficient identification\nof\nof the sides/faces\nwhichintersectwith a prescribedregionin space.\nThe problemof determiningthe membersof a set of n points which lie inside a\nprescribedsubregionof an N dimensional pace is knownas geometric searching.\ns\nSeveral algorithms have been proposed [37-40] which solve the above or equivalent\nproblems\nwith a computational\nexpense\nproportional\nto log(n). The problem\ncomplexity\nincreases considerably\nwhen, instead of considering\npoints, one deals\nwith finite size objects such line segments,\ntriangles\nor tetrahedra.\nA common\nproblem encountered\nhere, namely geometric\nintersection,\nconsists of finding the\nobjects which overlap a certain subregion of the space being considered. Algorithms\nfor solving this problem in two dimensions\nexist [41] and have been applied in\ndetermining\nthe intersection\nbetween\ngeometrical\nobjects in the plane. To our\nknowledge, the only algorithm capable of solving this problem in three dimensions is\nbased on the use of the alternate digital tree [42]. The particular application which\nmotivated the development of this data structure was the implementation of the mesh\ngeneration algorithm described in the previous section.\nIn what follows, we shall describe an algorithm and associated data structure, called\nthe alternating\ndigilal tree (ADT), which allows for the efficient solulion of the\ngeometric\nsearching\nproblem. It naturally offers the\npossibility\nof inserting and\nremoving\npoints and optimally searching\nfor the points contained\ninside a given\nregion. It is applicable to any number of dimensions, and is a natural extension of the\nso called digital tree search technique\nwhich is exhaustively\nin [43] for one\ndimensional\nproblems. A procedure which allows treatment of any geometrical object\nin an N dimensional space as a point in a 2N dimensional\nspace will be introduced;\nthereby allowing the proposed technique to be employed for the solution of geometric\nintersection\nproblems.\n\n4.1\n\nBinary\n\ntree structures\n\nBinary trees provide the basis for several searching algorithms, including the one to\nbe presented here. It is therefore necessary to introduce some basic concepts and\nterminology related to binary tree structures. More detailed expositions can be found\nin 141,44].\n\n67\n\nADDRESS:\n(ROOT)\n\nNA\n\nNE\n\nN.\n\nND\n\nNc\nNB\n\nNF\n\nNG\n\n(a}\n\nFigure\n\n4.1\n\n{b)\n\nA simple binary tree and its storage in computer memory.\n\nADDRESS:\nNA\n\nNE\n\nNH\n\nNo\nNc\n\nNB\n\nNF\n\nNG\n\n(a}\n\n(b}\n\nFigure\n\n4.2\n\nDeletion process.\n\nDefinition\n\nand Terminology\n\nTree struclures provide a systematic way of storing a colle;tion of dala items which\nenables not only a quick access to the information stored, but also frequen| insertions\nand delelions of items. This degree of flexibility requires the storage of data ilems in\nnon-sequential\nlocations of the computer\nmemory. As figure 4.1a illustrates,\nto\nachieve this, each data item is extended by the addilion of two integer valLles, known\nas lhe left and right links, and stored in what is known as a node of the Iree. Each\nadded link can either be equal to zero or equal to the position in memory where\nanother node of lhe tree can be found. Hence, from one node of the tree it is possible\nto reach at mosl lwo other nodes. Moreover, in order to ensure that every node can be\nreached, these links must be such that for each node except one, known as the root,\nthere is one and only one link pointing at it. This definition establishes a hierarchy of\nnodes: the root at the lop level of the hierarchy points at 0, 1 or 2 nodes at the next\nlevel; each of these in turn points at other 0, 1 or 2 nodes at lhe next level of lhe\nhierarchy;\nand so forth. This\nhierarchical\nslructure\ninspires\nthe graphical\nrepresentation\nshown in figure 4.1b for a simple tree comprising only eight nodes\n{A, B, C, D, E, F, G, H}.\nGenealogical terms are normally used to describe the relalive position of nodes in a\ntree: when a node points at a second node, the former is called the father of the latter,\nand this the son of the former node. A node wilhout sons, that is, with both links\nblank, is called a terminal node, and the only node without a father is the root (node A\nin figure 4.1b). Given a node, the set of nodes formed by itself together with all ils\ndescendants\nconstitutes a subtree of the main tree. For instance, in figure 4.1b the\ntrees {C, D, E, F, G, H} and {E, G, H} are subtrees of the main tree rooted at C and E\nrespeclively.\n\nTo retrieve informalion stored in a given node requires knowledge of its location in\nmemory, which is kept by its father. Hence, a node in lhe Iree can only be examined\nor visited\nif all its ancestors\nare visited\nfirst.\nHowever,\nil is possible\nto\nsystematically\nexamine each node in such a way that every node is visited exactly\nonce. Such an operation is known as traversing the free and provides the basis for lhe\nsearching melhods discussed below. Although several algorithms can be found in the\nliteralure to traverse a binary tree [44], altention will be centred here on the socalled preorder traversal melhod. This technique is embodied in the following three\nsteps:\n\n1. Visit the root of the current sublree\n2. If the left link of the root is nol zero then traverse the left subtree.\n3. If the right link o/ the root is not zero then traverse the right subtree.\nThe procedure determined by these lhree steps is clearly recursive, that is, steps 2\nand 3 invoke again the algorithm\nwhich they define. In order 1o illustrate\nlhis\nprocess, consider again the tree shown in figure 4.1b; for this tree, the repeated\napplicalion of the above algorilhm yields the following sequence:\n\n1. Traverse\n\nthe tree {A, B, C, D, E, F, G, H}\n\n69\n\n1.2. Traverse\n\nthe tree {B}\n1.2.1.\n1.2.2. Skip\n1.2.3. Skip\n1.3. Traverse the tree {C, D, E, F, G, H}\n1.3.1.\n1.3.2.\n\nTraverse\n1.3.2.1.\n\nthe tree\n\n{D, F}\n\n1.3.2.2. Traverse the tree {F}\n1.3.2.2.1\n1.3.2.2.2 Skip\n1.3.2.2.3\nSkip\n1.3.2.3 Skip\n1.3.3. Traverse the tree {E, G, H}\n1.3.3.1. Vis/t E\n1.3.3.2. Traverse\n1.3.3.2.1\n\nthe tree\n\n{G}\n\n1.3.3.2.2 Skip\n1.3.3.2.3 Skip\n1.3.3.3. Traverse the tree {H}\n1.3.3.3.1 ..V_\nL,S..t_,._H_\n1.3.3.3.2\n1.3.3.3.3\n\nSkip\nSkip\n\nThus, the nodes of lhe tree in figure 4.1b in preorder\n\nare A, B, C, D, F, E, G and H.\n\nWe notice in the above algorithm that, before moving on to traverse the left sublree\n- step 2 in the previous algorithm\nit is necessary to store lhe value of lhe right\nlink, that is, Ihe address of the right son, in order to enable the subsequent Iraversal\nof the right sublree.\nMoreover,\nwhilst traversing\nthe left sublree it is likely thal\nadditional right links will have to be stored. In fact, a lisl containing the addresses of\nall right sublrees encountered\nalong the way which are yet Io be traversed, must be\nkept and has to be continuously updated as follows. After visiting each node, the righl\nlink, if different from zero, is added to the lisl and if Ihe left link is not zero the left\nsubtree is traversed.\nWhen a zero left link is encountered,\nthe last right link\ninserted in the list is retrieved, as well as removed, from the list and the sublree\nrooted at this address is traversed.\nThis type of list, in which items are inserted one by one and extracted, also\nlime, in the reverse order, is known as a stack [44]. A stack consists of\narray, or vector, logelher with an integer variable to record the number of\nthe array. This variable, being initially zero, is increased by one every lime\nis added to the stack and decreased by one when an item is extracted from it.\n\none at a\na linear\nilems in\nan item\n\nWilh lhe help of a stack, any recursive algorithm can be implemenled\nwilhoul the\nneed Io use recursive routines. For inslance, a non-recursive\nimplemenlalion\nof the\nlraversal algorilhm given above can be symbolically expressed as:\n\nO.a Set _oot\nO.bSetsrack\n1.\n2.\n\naddress\n= address of the root node\nsize = 0\n\nVisit t[_e node stored at root\n]_nk = o then:\n\n//riqht\n\n7O\n\naddress\n\nSetstack\n\nsize\n\nSetstack(stack\n\n=\n\nstack\nsize)\n\nsize\n=\n\n+i\n\nright_llnk\n\nendif\n3a.\n\nIf left\n].ink\nS_root\n\n_ 0 then:\naddress\n= left\n\nlink\n\ngo to I\n3b.\n\nendif\nIf]eft\n\n]:ink\n= 0 then:\nIf stack\nsize\n:_ 0 then:\nSet root address\n= stack(stack\nsize)\nSet stack size = stack\nsize - 1\ngo to 1\nendif\n\nendif\nIf stack\n[n$oding\n\nsize\n\n=\n\n0\n\n-4,\n\nterminate\n\nthe process\n\naO__[_DoJe\nfing_ n._\n\nIn order to add a new dala ilem to a bi\'lary\ntree, a node containing\nthe new item of\ninformation\nmusl be crealed\nand stored ,n a convenienl\nmemory\nlocation.\nThe left and\nright links of this node are set Io zero.\nIf the current\ntree is emply,\nIhe new node\nbecomes\nlhe root of lhe tree, otherwise\nlhe node must be inserted\nor linked to the\nexislin,:]\nbee.\nTo achieve\nlhis, the Iree is followed\ndownwards,\nslarling\nfrom the root\nand jumping\nfrom falher\nto son, unlil a blank link is found.\nThis link is then set to\nthe memory\nposilion\nof the new node. When moving\ndown the tree, a crilerion\nmust\nbe. provided\nat each node lo chose between\nthe left or righl branches.\nThis crilerion\ndelerminr<n\nthe final position\nin lhe tree of lhe new node and, consequenlly,\nthe shape\nof the tree itself.\nDelelinq\na node from a binary\ntree is a straighlforward\noperation\nif the undesired\nnode\nis a h-.,rminal\nnode;\nchanging\nto zero\nIhe corresponding\nlink of ils father\nelfeclively\n\'prunrm*\nthe node from the tree and renders\nlhe memory\noccupied\nby il\nav;_ib#-)Io fo[ fiJtHre uses. In the case of an intermediate\nnode, the process\nbecomes\n*;lightly morn complicated\nsince a gap can not be lefl in Ihe free. To overcome\nthis\npr,_bh_m. 1t_e unwanlr, d node is replaced\nby a terminal\nnode chosen\nfrom among\nits\nd_,\';c_n_];mts.\nThis operation\ncan be carried out by modifying\nthe links to suit the new\n*;Ir_Jch,e of the tree and without\nmoving\nlhe nodes\nfrom\nIheir memory\npositions.\nl-iglJrrm 4.2a and 4.2b illustrate\nthe deletion\nof node C from lhe tree shown in figures\n4.1a anti 4.tb and its replacemenl\nby node H.\nIf tim application\nal hand demands\nfrequent\ndeletion\nand insertion,\na memory\nbook\nke_pinfl\nsyslem\nis necessary\nfor the efficient\nimplementation\nel Iree slructures.\nThis\nis rr_q_med so lhal new nodes\ncan be placed\nin the memory\nspace released\nby Ihe\ndelelion\nof previous\nnodes.\nThis problem\ncan be solved\nby using\na linked\nlisl\nshuChlrf;\nIo record all the available\nmemory\nspaces.\nA linked lisl is a data struclure\nlhal diff_,rs from lhe binary\nfree dala slruclure\ndescribed\nabove\nin that every node\nh;_.\'; alw_ys only one link pointing at another node, and every node has always one link\np.oinlmg _tl it. l-here are lwo exceptions,\nwhich are the head\nand lhe end nodes. The\ntm;_d i..; a node wilh no link pointing\nat it - the address\nof which is kepl separately\na,d Ihe r, nd is a node wilh a blank link.\nAs .<hewn in figure\n4.3 lhe two data\nslructures,\nbinary\ntree and linked\nlisl, are\n_pd_tnd\nsim_dtaneously.\nInitially,\nthe available\nmemory\nis partitioned\ninto cells of\nth_ corTor\',f\nsi;,._; 1o slore\ntree\nnodes.\nThese\ncells,\nwhich\ncontain\nno relevant\n\n71\n\n(\n\na\n\nC\n\n0\no\n\n\xe2\x80\xa2 _.\n-:.\n\nm\n\nc\n"_\n\n_o\n\n,-._,\n_=\n\n..-,_\n\xc2\xb0\xc2\xb0\n\n_I\n\n=-_\n\nr_\n\nL.\n\nC\n\nO_\n\xc2\xb0_\n\nI.L\n\nC\nC_\n\nv\n\nW\n\nOF\n\nr,,,_-,\'\n,..,,-\'_\n_U_.LrT\'Y\n\ninformation\nolher than a single link, are then joined logether to form a linked list.\nEvery time a node needs to be inserted into the tree, the memory space required by\nthis new Iree node is generated by removing a node from the lisl (see figure 4.3b).\nSimilarly, when a node is deleted from the tree it is added to the lisl (see figure\n4.3c). Inserting and deleting nodes in the list always takes place at the head. To\ninsert a node into the lisl, the link of the new node is set equal to the address of the\nhead and lhe inserted node becomes the new head of the list. The deletion of the head\nnode can be done by simply allowing its link to be the new head.\n\n4.2 The Alternating\n\nDigital\n\nTree\n\nConsider a set of n poinls in a N dimensional\nspace (R N ) and assume for simplicity\nlhal the coordinate\nvalues of their position\nvectors {xl, Z_2... _},\nafter adequate\nscaling, vary within the interval [0,1). The aim of geometric searching algorithms\nis to select from lhis set those points that lie inside a given subregion of the space. To\nfacilitate\ntheir representation,\nonly rectangular\n- or \'hyper-reclangular\'\n- regions\nwill be considered,\nthereby\nallowing\ntheir definilion\nin terms of the scaled\ncoordinates of the lower and upper vertices as (a, b.).\nComparing\nsubregion\n\nthe coordinates\nof each point k wilh the vertex coordinates\nof a given\nto check whether the condition\na_ <_Xk_-<b_is salisfied for i = 1, 2 ... N,\n\nwould render the cost of the searching operation proportional to the number of points\nn. This computational\nexpense, however, can be substantially reduced by storing the\npoints in a binary tree, in such a way that the structure of the tree reflects the\npositions of the points in space. There exist several well known algorithms that will\naccomplish\nthis effect for one dimensional\nproblems;\nthe most popular\nare the\nbinary search Iree and digital tree methods [41,43]. Binary search trees have been\nextended to N dimensional\nproblems in [45], but the resulting tree structure, known\nad N-d trees, do not allow the efficient deletion of nodes. The algorithm presented\nhere is a natural extension\nof the one dimensional\ndigital tree algorithm\nand\novercomes\nthe difficulties encountered\nin N-d trees.\nDefinilion\n\nand node insertion\n\nBroadly speaking, an alternaling digital tree can be defined as a binary tree in which\na set of n points are stored following certain geometrical criteria. These criteria are\nbased on the similarilies\narising between the hierarchical\nand parental structure of\na binary tree and a recursive bisection process: each node in the tree has two sons,\nlikewise a bisection process divides a given region into two smaller subregions.\nConsequently,\nit is possible to establish\nan association\nbetween tree nodes and\nsubregions of the unit hypercube as follows: the root represents the unit hypercube\nilself; this region is now bisected across the x1 axis and the region for which 0 _<x 1 <\n0.5 is assigned to the left son and the region for which 0.5 _<x1 < 1 is assigned to Ihe\nright son; at each of these nodes lhe process is repeated across the x2 direction as\nshown in figure 4.4. In a two dimensional\nspace this process can be repeated\nindefinilely\nby chosing\nx 1 and x2 direclions\nin alternating\norder; similarly,\nin a\ngeneral N dimensional space, lhe process can be continued by choosing directions x 1,\nx 2.... xN in cyclic order.\nGenerally, if a node k al the hierarchy level\na region (ck, _d_k), he subregions\nI\nassocialed\n((;k,, dk,)\ncoordinate\n\nm - the root being level 0 - represents\nto its left and right sons, (.C_ki,\ndki) and\n\nresull from lhe biseclion\nof (\xc2\xa3_, 0..k) by a plane normal to the\naxis, where j is chosen cyclically from the N space direclions as:\n\n73\n\nj-th\n\n.1\n\nX2\n\nOz\n\n01\n\nX1\n\n03\n\nl]l\nCz\n\nC 1\n\nFigure\n\n4.4\n\nQO\n\nC3\n\nRelation between a binary tree and a bisection process.\n\nQ\n\n,,A\n\n(R00T=I}\n\n2\n3\n(,\nS\n\n0\n\nO\n\n3\n\nC\n\n0\n\nk\n\nA\n\nZ\n\n0\n\nB\n\n3\n\n0\n\nC\n\no\n\no\n\n0\n\no\n\nz,\n\nA\n\n?\n\n5\n\nB\n\n3\n\n0\n\ne( _\n\nA\n\n0\n0\n\n\xe2\x80\xa2\n\n(\n\n0\n\n,\n\no-7-_ o\n0\n\nFigure\n\n4.5\n\nBOO\n\nE\n\n2\n\no\n0\n\nBuilding an ADT by successive insertion.\n\n"7/1\n\nj = 1 + mod(m,N)\nand mod(m,N)\n(_k,, _,)\n\ndenotes the remainder\n\nare obtained\n\n(4.1)\n\nof the quotient of m over N. Hence (\xc2\xa3,k_, J.k_)\n_\nand\n\nas:\n\nCkli = Ck dkli = dk i\ni,\n\nfor i _ j and\n\n\xe2\x80\xa2\nCkr\' = Ck dkri\ni,\n\nfor i _ j and\n\n1\nCkjl = Ok dklj = _- (Ok + dk j)\nj,\ni\n1\n\n= dk i\n\nCkti =\n\n_-\n\n(Ck\nj\n\n+ dki),\n\ndkl j = dk i\n\n(4.2a)\n\n(4.2b)\n\nThis correlation between nodes and subdivisions of the unit hypercube allows an ADT\nto be further defined by imposing that each point in the tree should lie inside the\nregion corresponding\nto the node where it is stored. Consequently, if node k of an ADT\nstructure\ncontains\na point with coordinates\n2, the following condilion\nmust be\nsatisfied:\n\nCki < Xki < dk i\n\nfor i = 1,2 ... N\n\n(4.3)\n\nDue to this additional requirement lhere exists only one possible way in which a new\npoint can be inserted in the tree. As discussed in the previous section the tree is\nfollowed downwards until an unfilled position where the node can be placed is found.\nDuring this process, however, left or right branches are now chosen according to\nwhether the new point lies inside the region related to the left or right sons, thereby\nensuring that condition (4.3) is satisfied.\nGiven a predetermined\nset of n points, an ADT structure can be built by placing\nanyone point at the root and then inserting the remaining points in consecutive order\naccording to the algorithm described\nabove. This is illustrated in figure 4.5 for a set\nof 5 points {A,B,C,D,E}. The shape of the tree obtained in this way depends mainly on\nthe spatial distribution of the points and somewhat on the order in which the points\nwere inserted. The cost of operations\nlike node insertion/deletion\nand geometric\nsearching depends strongly on the shape of the tree; generally poor performances are\nto be expected from highly degenerated\ntrees (see figure 4.6), whereas well balanced\ntrees (see figure 4.7), as those obtained for fairly uniform distributions\nof points,\nwill result in substanlial reductions of the searching cost. In these cases the average\nnumber of levels in the tree, and therefore the average cost of inserting a new point,\nbecomes proportional to log(n); clearly a considerable cost if compared with the cosl\nof storing the points in a sequential\nlist, but fully juslifiable in view of the reduction\nin searching costs thal ADT structures will provide.\n\nConsider now a set of poinls stored in an ADT structure. The fact that condition (4.3)\nis satisfied by every point provides\nthe key to the efficient solulion of a geomelric\nsearching problem. To illustrate this, note first that the recursive structure of the\nbisection process described above implies that the region related lo a given node k\ncontains all Ihe subregions\nrelated to nodes descending\nfrom k; consequently,\nall\npoints stored in these nodes must also lie inside the region represented by node k. For\ninstance, all points in the ADT structure are stored in nodes descended from the root\n\n75\n\nFigure\n\nFigure\n\n4.6\n\n4.7\n\nDegenerated trees.\n\nWell balanced tree.\n\n76\n\nand, clearly, all\n\nof them lie inside the unit hypercube - the region associated with\nthe root. Analogously,\nthe complete set of points stored in any subtree is inside the\nregion represented by the root of the sublree.\nThis feature can be effectively used to reduce the cosl of a geomelric searching\nprocess by checking, at any node k, the intersection between the searching range (a,\nb) and the region represented by node k, namely (_, _1_). If these two regions fall to\noverlap, then the complete set of poinls stored in the subtree rooted at k can be\ndisregarded\nfrom the search, thus avoiding the need to examine the coordinates of\nevery single point.\nConsequently,\na systematic procedure to select the points that lie inside a given\nsearching\nrange (a, b) can be derived from the traversal\nalgorithm\npreviously\npresented.\nNow the generic operation\n\'visit the root\' can be re-interpreted\nas\nchecking\nwhether\nthe point stored in the root falls inside the searching range.\nAdditionally,\nthe left and right subtrees need to be traversed only if the regions\nassociated\nwith their respective root nodes intersect with the range. Accordingly,\na\ngeometric searching algorilhm emerges in a recursive form as:\n\n1.\n\nCheck\n\nwhether\n\nthe coordinates\n\nof the node stored in the root, say _k, are\n\ninside (a, b) i.e. check whether a i <_Xk < bi for i = 1,2 ... N.\ni\n2.\n\nd.k_)overlaps\n\n(_t, b) i.e. if dk_ _> a iandck_ _ <_ b _for i = 1,2...\n_\n.\n\nIf the left rink of the root is not zero and the region (_,\n\nthe left subtree.\n\nN, search\n\nwith\n\nIf the right link of the root is not zero and the region (\xc2\xa3,.kr, t;]kr) overlaps\nwith(_,b)\nsubtree.\n\ni.e. ifdk, i _> a iandck,\n\ni -< b i fort=\n\n1,2 _. N, search\n\nthe\n\nright\n\nIn order to illustrate this process, consider the set of points and the searching range\nshown in figure 8a and the corresponding\nalternating digital free depicted in figure\n8b. For this simple example, the algorithm\ngiven above results in the following\nsequence of steps:\n\nSearch\n\nthe tree {A,B,C,D,E,F,G,H}:\n1. Check\n\nif a _<_xA_<_b ifor i--\n\n1,2\n\n2. Since dB__>a _and cej < b i search the tree {B,C,D,E}:\n2.1. Check if a=< XB\n=<_b i\n2.2. Since dc i _>a aand Cc_<_b i search the tree {C,E}:\n2.2.1. Check if a i <_Xc__<b _\n2.2.2. Skip (left link is zero)\n2.2.3. Skip (CE1 > b 1)\n2.3. Skip (CD > b2)\n2\n3. Skip (CF1 > b 1)\nAgain a \'non-recursive\'\nstack in a very similar\n\nimplementation\nof this algorithm can be achieved using a\nway to that previously described for the lraversal algorithm.\n\n77\n\nD\noA\n\xe2\x80\xa2H\n\nx\n\nI\n\nl\n\nX2\n\nb\n\noE\n\no 6\n\n\xe2\x80\xa2 B\n\n\xe2\x80\xa2\n\n__x\n\n,\n\n1\n\n2\n\nx\n\n1\n\nX\n\n(b)\n\n(a)\n\nFigure\n\nx\n\n4.8\n\nSearching\n\nproblem\n\nin R 2.\n\n3\n\nelement\n\nk\n\n\'__\n\nx\n\nf\n\nX\n\n2\n\nXk\'max\n\n_\n\nI\n\n(a)\n\n_.\\1\n\nk,mtn _\n\nXo,max\n\n(b)\n\nXo,m\n\nTarget Line\nsegment\n\nFigure\n\n4.9\n\nDefinilion\n\nof\n\ncoordinate\n\nlimits\n\nline segments.\n\n78\n\nfor Iriangular\n\nelements\n\nand\n\nstraight\n\nNote thal, with this technique, only the coordinates\nof points A,B and C ale actually\nexamined,\nthe rest being immediately\ndisregarded\nin view of their posilion in the\ntree. In general,\nonly those points\nstored\nin nodes with associated\nregions\noverlapping\n(a. b) will be checked during the searching process.\n\n4.3 Geometric\n\nIntersection\n\nGeometrical\nintersection problems can be found in many applications; for instance, a\ncommon problem that may emerge in contact algorithms [46], hidden line removal\napplications\nor in the advancing\nfront mesh generation\nalgorithm\npresented\nIn\nseclion 3, is to determine from a set of three noded triangular elements those which\nintersect with a given line segment. Similar problems, involving other geometrical\nobjects, are encountered\nin a wide range of geomelrical\napplications.\nIn general, a\ngeometric intersection\nproblem consists of finding from a set of geomelrical\nobjects\nthose which intersect\nwith a given object.\nIf every one-to-one\nintersection\nis\ninvestigated,\nthe solution of these problems can become very expensive, especially\nwhen complex objects such as curves or surfaces are involved. Fortunately, many of\nthese one-to-one\nintersections\ncan be quickly discarded\nby means of a simple\ncomparison\nbetween\nthe coordinate\nlimits of every given pair of objects.\nFor\ninstance,\na triangle with x-coordinate\nvarying from 0.5 and 0.7 cannot intersect\nwith a segment\nwith x-coordinate\nranging\nfrom 0.1 to 0.3. Generally,\nthe\ninlersection between two objects in the N dimensional Euclidean space, requires each\nof the N pairs of coordinate ranges to overlap. Consider for instance the intersection\nproblem\n\nbetween\n\ntriangular\n\nfacets and a target\n\nstraight\n\nline segment\n\nin R3; then, if\n\n(_.,_n, __km_,) are the coordinate\nlimits of element k and (._.m_n, Z_O.max)\nare the\nlower and upper limits of the target segment (see figure 4.9), an important step\ntowards lhe solulion of a geometric intersection\nproblem is to select those which\nsatisfy the inequality:\n\nX k,mn\n\n<\n-\n\nXO,max i\n\nfort=\nX k,max _\n\nXo,min\n\n1,2 ... N\n\n(4.4)\n\ni\n\nThe cost of checking condition (4.4) for every element grows proportionally\nto n,\nand for very numerous sets may become prohibitive.\nThis cost, however, can be\nsubstantially reduced by using a simple device whereby the process of selecting those\nelements which satisfy condition (4.4) can be interpreted as a geometric searching\nproblem. Additionally,\nsince the number of elements that salisfy condition (4.4) will\nnormally be much smaller than n, the cost of determining\nwhich of these intersects\nwith the target segment becomes affordable.\nIn order 1o interpret condition (4.4) as a geometric\nsearching problem,\nil is first\nconvenienl\nto assume that all the elements\nto be considered\nlie inside a unil\nhypn.rcube\na requirement that can be easily satisfied through adequate scaling of\nIhe coordinate values. Consequently, condition (4.4) can be re-written as:\n\n0 --< Xk.min 1 -<\n\nXO,max 1\n\n0 _< Xk,min N ---< Xo.max N\n\n79\n\n(4.5)\nXO,min 1 <_\n\nXo,min N <\n\nConsider\n\nnow a given\n\ncombining\n\nobject\n\nXk,max 1 _< 1\n\nXk,max N _<\n\n1\n\nk in R N with coordinate\n\nthis two sets of coordinate\n\nas a point in R TM with coordinates\n\nvalues,\n\nlimils _.ml,,\n\nit is possible\n\nand _,m,,x;\n\n1o view an object k In R N\n\n,_t for i = 1,2 ... 2N defined\n\nas (see figure\n\n4.10):\n\n1"\n_,k =\n\nUsing this representation\n\n[ Xk,min 1 ....\n\nXk,min N,\n\nof a given\n\nXk,max I ....\n\nobject k, condition\n\na _ <_Xk\n__<b _\nwhere\n\na and b can be interpreted\n\n(4.6)\n\nXk.max N]\n\n(4.5) becomes\n\nsimply:\n\nfor i -- 1,2 ... 2N\n\nas the lower and upper vertices\n\n(4.7)\n\nof a \'hyper-\n\nrectangular\' region in R TM and, recalling (4.5), their components can be obtained in\nterms of the coordinate limits of the target object (see figure 4.11) as:\n\na\n\n-- [ 0 ....\n\n0,\n\nXo,max 1 ....\n\nX0,maxN]\n\n(4.8a)\n\nT\nT\n\nb-\n\nConsequently,\n\nthe problem\n\n[ Xo,min\n\nX0.min 1....\nN,\n\n1 ....\n\nof finding\n\nwhich\n\nobjects\n\n(4 .Sb)\n\n1]\nin R N\n\nsatisfy\n\ncondition\n\n(4.4)\n\nbecomes equivalent to a geometric searching problem in R TM i.e. obtaining the points\nwhich lie inside the region limited by a and b. Once this subgroup of elements has\nbeen selected, the intersection of each one of them with the target object must be\nchecked to complete the solution of the geometric intersection problem.\n\n4.4. The use of the ADT for mesh generation\nIt is obvious from the advancing\nfront algorithm described in section 3 that\noperations such as searching for the points inside a certain region of the space and\ndetermining\nintersections between geometrical objects - in this case stdes and faces\nwill be performed very frequently.\nThe complexity of the problem is increased by\nthe facl that the set of faces forming Ihe generation front changes continuously as new\nfaces need lo be inserted and deleted during the process. Clearly, for meshes\nconsisting of a large number of elements the cost of performing this operations can\nbe very important.\nA successful\nimplementation\nof the above algorithms\nhas been accomplished\nby\nmaking extensive\nuse of the ADT data structure. For instance, the algorithm of\nsection 3.5 for tetrahedra generation employs two tree structures; one for the faces\nin the front and the other for the sides defined by the intersection between each pair\nof faces in the front (see figure 3.11). This combination\nallows a high degree of\nflexibility\nand the operations\nof insertion,\ndeletion,\ngeometric\nsearching\nand\n\n8O\n\nX ITlaX A\n\njT\nI\n\nI\n\n0\n\nJ\n\nII\n\nXmin\n\nFigure\n\n4.10\n\n"=X\n\n|\n\nI\n!\n\n"\n\nX rain\n\nXma x\n\nRepresenlation of a region in R 1 as a point in R2.\n\nX\n\nmax\n\nb\nA\nV\n\n0\n\n<\n\nX mi n <\n\nX\n\no,max\n\nX o,min < X ma x < 1\n\na\nXo,min\n\nt\n\n[\n\n0\n\nX o,min\n\nFigure\n\nJ,\n\n4.11\n\nI\n\nX o.max\n\nm,,,,_\n\n"_X\n\nI\n\nInterseclion\n\nproblem\n\nX rain\n\nX o,max\n\nin R 1 as a searching problem In R2.\n\n81\n\n1\n\nLU\n\nZ\n0\nN\n\nUJ\n\nZ\n\nz\n\no\n\n0\nE\n0\n0\n.0\n\nE\n\\\n0..\nc\nII\n\n.o\n\ne,\')\n\nK\nr\n\xc2\xae\n\n7\n\nQ\n\no_\n\no\n\n82\n\ngeometric\nintersection\ncan be performed\noptimally.\nThe overall computational\npertormance\nof the algorithm\nis demonstrated\nby generating\ntetrahedral\nmeshes,\nusing the above method, for a unit cube (see figure 4.12). Different numbers of\nelements have been obtained by varying the mesh size. In figure 4.12 the computer\ntime required on a VAX 8700 machine has been plotted against the number NE of\nelements\ngenerated.\nIt can be observed that a typical NE*Iog(NE)\nbehaviour\nis\nattained. Using this approach meshes containing up to one million elements have been\ngenerated and no degradation in the performance has been detected.\n\n5. ADAPTIVITY\n\nFOR STEADY\n\nSTATE\n\nPROBLEMS\n\nThe procedures described above allow for the computation of an initial approximalion\nto the steady slate solution of a given problem. This approximation can generally be\nimproved by adapting the mesh in some manner. Here, we follow the approach of\nusing the computed solution to predict the desired characteristics\n(i. e. element size\nand shape) for a new, adapted mesh. The ultimate aim of the adaptation procedure is\nto predict the characteristics of the optimal mesh. This can be defined as the mesh in\nwhich the number of degrees of freedom required to achieve a specified level of\naccuracy is a minimum. Alternatively,\nit can be interpreted as the mesh in which a\ngiven number of degrees of freedom are distributed in such a manner thal the highest\npossible\nsolution accuracy is achieved.\nIn practical silualions\nhowever, there are\nseveral factors which make the achievement\nof such optimal meshes extremely\ndifficult. Some of these factors are:\ni) The concept of optimality is intimately linked to thai of accuracy, which is nol\nuniquely defined. Hence optimality of a mesh needs to be defined with respect to a\ngiven norm or measure of the error. An additional inconvenience\nrelated to lhe\nmeasure of accuracy, in lhe present contexl, arises from the fact that we are\nattempting to solve a coupled set of non linear partial differential equations and,\nlherefore,\na rigorous\nmeasure\nof the error should involve all lhe relevant\nvariables.\nii) For linear elliptic operators, as we have shown in Section 1, Galerkin finite\nelement algorithms are readily derived which guarantee that the approximation\nobtained is the most accurate amongst all the possible approximations wilhin lhe\ntrial space of functions. Here, accuracy is defined with respecl to a norm implied\nby the operalor itself (the energy norm). For the Euler equalions, however, such\nan energy norm do_,s not exist and no numerical\nschemes are known which\npossess lhis optimality property.\niii) This besl approximation\nproperty\nmeans thai the error of Ihe computed\nsolution, measured in the energy norm, is bounded above by thai of Ihe exact\ninterpolanl,\ni.e. lhe approximation\nin Ihe space of currenl trial functions which\nhas exact nodal values. Using results of interpolation\ntheory [47], it is then\npossible\nto produce\nriaorous\nbounds\non 1he error\nof the numerical\napproximalion.\nThese results are based on cerlain regularily assumplions\non the\nsolution,\nwhich for the Euler equalions\nwill be invalid\nin the vicinity\nof\ndiscontinuities in the. flow.\niv) Finally, the error eslimales produced are based on the compuled solution. As\nthis is only an approximale solution, such error eslimates will only be as good as\nlhe computed .qolulion Tills means that, even in lhe besl situalion, the oplimal\nmesh will only be achieved in lhe asymptotic\nlimil, i.e. when Ihe solulion is so\ngood that lhe computed error becomes very reliable.\nIn view of these observalions and limitations, we have made an altempl to develop a\nheurislic adaplive strategy. This slrategy uses error estimates which are based upon\nconcepts from inl_rpolation\nlheory. The possible presence of discontinuities\nin the\nsolution is laken into accounl and, in addition, the procedure provides information\nabout any directionality\nwhich may be presen! in the solution. The advanlages\nof\nusing directional\nerror indicalors become apparent when we consider the nature of\nthe solutions to be computed involving flows with shocks, contact disconlinuilies\netc.\n\nSuchfeaturescan be mosteconomically\nrepresented mesheswhich are stretched\non\nin appropriale directions. Allhough, Ihese error estimates have no associated\nmalhematical\nrigour,\npraclical\nsituations.\n\nconsiderable\n\nsuccess\n\nhas\n\nbeen\n\nachieved\n\nwith\n\nIheir\n\nuse\n\nin\n\nThe computed\nerror, estimated\nfrom the current solution,\nis transformed\ninto a\nspalial distribution\nof \'oplimal\'\nmesh spacings which are inlerpolaled\nusing the\ncurrenl mesh. The currenl mesh is lhen modified with the objective of meeting Ihese\n\'optimal\'\ndistribulion\nof mesh characlerislics\nas closely\nas possible,\nThree\nalternative procedures will be discussed here for performing the mesh adaption. The\nresulting mesh is employed Io produce a new solution and this procedure can repeated\nseveral times until the user is satisfied with the quality of lhe computed solution.\n\n5.1 Error\n\nindicator\n\nin 1D.\n\nThe developmenl\nof a melhod for error indication is considerably\nsimplified\nif we\nreslricl\nconsideration\nto problems\ninvolving\na single scalar variable.\nFor lhis\nreason, when solving the Euler equations,\na key variable ts identified and then the\nmesh adaptation is based on an error analysis for thai variable alone. The choice of\nlhe best variable to use as a key variable remains an open queslion, but lhe the Mach\nnumber has been adopted for the computations reported in these noles.\nConsider\nfirsl lhe one dimensional\nsituation\nvariable (_ are approximated\nby a piecewise\ndefined as\n\nin which the exact values of the key\nlinear funclion (_. The error E is then\n\n(5.1)\n\nE = c_(xt) - ,_(x 1)\nWe note here that if the exact solution is\nvanish. This is because our approximation\nfinile element shape functions. Moreover,\nsmoolh, then il can be represented, Io any\nfunclinns.\nI-o a firsl\n\norder of approximation,\n\na linear function of x _ then the error will\nhas been obtained using piecewise linear\nif the exact solution is not linear, but is\norder of precision, using polynomial shape\n\nlhe error\n\nE can be evaluated\n\nas the difference\n\nbetween a quadratic finite element solution (3 and the linear computed solution. To\noblain a piecewise quadratic approximation\none could obviously solve a new problem\nusing quadratic shape functions. This procedure however, although possible, is not\nadvisable\nas il would be even more costly lhan the original computation.\nAn\nalternalive approach for estimaling a quadralic approximation\nfrom the linear finite\nelement\nsolulion is lherefore\nemployed.\nAssuming thai the nodal values of lhe\nquadratic and linear approximations\ncoincide i.e. the nodal values of E are zero, a\nq_Jadralic solulion can be constructed on each element, once the value of the second\nderivalive\nis known. Thus the varialion of the error E within an element e can be\nexpressed as\n1\nEe = _)-((he\n\nd28\n- _,) dx12\n\n( 5.2 )\ne\n\nwhere t_ denotes a local element coordinate\nand h e denotes the elemenl length.\nprocedure\nfor estimaling\nlhe second derivative\nof a piecewise linear function\ndescribed below.\n\n85\n\nA\nis\n\nThe root mean square value\n\nEe RMs of\n\nE, rims =\n\n_\n0\n\nwhere\n\nI - I stands for absolute\n\nthis error over the element can be computed\n\ndr.,\nhe\n_"\n\n1\nI d2e\n= -_/-1-,_0he2 Idx12\n\nas\n\n( 5.3 )\n\ne\n\nvalue.\n\nWe define the \'optimal\' mesh, for a given degree of accuracy, as the mesh tn which\nthis root mean square error is equal over each element. In the presenl context, this\nrequirement\nmay be regarded as being somewhat arbitrary. However, it has been\nshown [48] that the requirement\nof equidistribution\nof Ihe error leads Io optlrnal\nresults when applied to certain elliptic problems.\nThis requirement\nis therefore\nwrilten as\n\nI d2el\nhe2 idx121 =C\n\n(5.4)\n\nwhere C denotes a positive constant.\nFinally, the requirement\nof equation (5.4) suggests that lhe \'optimal\'\nlhe new adapted mesh should be computed according 1o\n\nspacing\n\nI\n\nIdx121 =C\n\n5.2 Recovery\n\n8 on\n\n(5.5)\n\nof the second derivatives.\n\nThe first derivative of Ihe computed solution on a mesh of linear elements will be\npiecewise conslanl\nand discontinuous\nacross elemenls.\nTherefore, straightforward\ndifferenlialion\nof 6 leads Io a second derivalive which is zero inside each element and\nis not defined at the nodes. However, by using a recovery process, based upon a\nvariational\nor weighted\nresidual statement\n[12], it is possible Io compute nodal\nvalues of the Second derivalives from element values of the first derivatives of 6.\nTo illustrate\n\nIhis process,\n\nbeen discrelised\ninlo (n-l)\ndislribulion\nof the computed\n\nconsider\n\na one dimensional\n\ndomain\n\nlinear two noded finile elements.\nsolulion _ is expressed as\n\n0 < x 1 < L which has\nThe piecewise\n\nlinear\n\nn\n\n= _ Nj6j\n\n(5.6)\n\nJ=l\n\nwhere Nj is lhe standard linear finile element shape funclion [12] associated to node\nJ. Similarly,\na piecewise\nlinear approximalion\nto the distribution\nof the second\nderivalive, which we seek to determine, can be written as\n\n86\n\nd2(3 n\ndx12 = _\'. Nj\n\n(5.7)\n\nJ--\'l\n\nThe nodal values of the second\nvariational\nrequirement\nthat\n\nderivative\n\nn\n\n( J\'NjNK\n\nI\n\nd(2)d_\n\nJ=l\n_\'_\n\nmay be computed\n\nc_\n\nL\'_\n\nfrom the approximate\n\n0NK\n\n= -\n\nJ\n\n(_xl\n\nJ\n\ndx _ \xc2\xb0_,J)_Tx\nldD\nJ=l\n\nd_\nNK)xl=\n\n0\n\n+\n\n(_xlNK)xl=L\n\nK=\n\n1.....\n\nn\n\n(5.8)\n\nThe values of the derivatives at the two end points can be inserted, if known, or can\nbe taken Io be equal to the constant value of the derivative in the adjacent elements.\nThe resulting set of algebraic equations can be solved, in a few iterations, by using a\nJacobi procedure [16] or alternalively,\nthe consistent\nmass matrix appearing on the\nleft hand side of equation (5.7) can be lumped, thus yielding a diagonal system of\nequations.\nNumerical\nresulls obtained\nto date do not indicate any _ignificant\ndifferences in the meshes produced by using these lwo approaches.\n\n5.3 Extension\n\nto multidimensions\n\nFollowing the process described above, nodal values of the second derivative can be\nobtained from the approximale\nsolution on lhe currenl mesh. The use of expression\n(5.5) lhen yields direclly a nodal value of the \'optimal\' spacing for the new mesh.\nExpre._sion (5.5) can be direclly\nquadratic\nform\n\nextended\n\nto the N dimensional\n\ncase by writing\n\nthe\n\n(5.9)\n\nwhere ,6 is an arbitrary unil vector, _13 the spacing along the direclion\nis\nare the componenls of a NxN symmelric matrix of second derivatives\n,a2(_\nmiJ = r)xir)xj\n\nof ,6., and m_i\n\n(5.1 O)\n\nTtmne derivatives are computed, at each node of the current mesh, by using the N\ndimensional\nequivalenl\nof Ihe procedure\npresented\nin the previous section. The\nrn_.aning ol equalion (5.9) is graphically\nillustrated\nin figure 5.1 which shows how\nlhe value of ihe spacing in the D-direclion can be obtained as the distance from the\norigin to lhe point of intersection of the vector _. with the surface of an ellipsoid. The\ndirections and lenglhs of the axes of the ellipsoid are the principal directions and\neigenvatues of /he matrix m respeclively.\n\n87\n\n\\\n\n/\nl\n\nx3\n\n- i,,- x7\nXl\n\nFigure\n\n5.1\n\nDetermination\n\nof\n\nthe\n\nvalue\n\n8t\n\nof the\n\nspacing\n\n8 along\n\nthe _\n\ndirection.\n\nSeveral alternative procedures\nexist for modifying an existing mesh in such a way\nthal the requiremenl expressed\nby equation (5.8) is more closely satislied.\nThree\nsuch methods will be described here. In the first procedure, called mesh enrichment,\nthe nodes of lhe current mesh are kept fixed bul some new nodes/elements\nare\ncrealed. In the second procedure, referred Io as mesh movement, the total number of\nelements\nand nodes remains fixed but their position is altered.\nFinally, in the\nadaptive\nremeshing\nalgorithm,\nthe mesh adaplion is accomplished\nby completely\nregenerating a new mesh using the mesh generation algorithm presented in section 3.\n\n5.4 Mesh enrichment\nIn order to adapt a mesh using mesh enrichment,\na sweep over all the sides in lhe\nmesh is made and the \'optimal\' spacing in the direction of each side is computed\naccording to expression (5.9). For each side, the matrix m is taken to be the average\nof ils value al the two nodes of the side. The enrichment\nprocedure consists of\nintroducing an additional node for each side for which the calculated spacing Is less\nthan the lenglh of the side. For interior sides, this additional node is placed at the\nmidpoint\nof the side, whereas for boundary sides, il is necessary Io refer to the\nboundary definition and to ensure thal the new node is placed on the true boundary.\nWhen any side is subdivided in this manner, the elements associated with thai side\nwill also need to be subdivided in order to preserve the consistency of Ihe final mesh.\nFigure 52 illustrates\nlhe three possible\nways in which this element subdivision\nmight have to be performed in two dimensions.\nThe number of sides to be refined\ndepends on the choice of the constant C in equation 5.9. To avoid excessive refinement\nin the vicinity of discontinuities,\na minimum\nlhreshold\nvalue for the computed\nspacing can be used. When the mesh enrichment procedure has been completed, the\nvalues of the unknowns at the new nodes are linearly interpolated from Ihe original\nmesh and the solution algorithm is re-started. This procedure has been successfully\nimplemented\nin two and three dimensions\nand several impressive demonstrations\nof\nlhe power ol this lechnique have been made. I8,19,49,50].\nThe application\nof the enrichment\nprocedure\nin the solution of a two dimensional\nexample P, illuslraled in figure 5.3. The problem solved is a Mach 8.15 flow past a\ndoubl_\nellipse configuration\nat 300 angle of attack. The initial mesh and two\nadaptively\nenriched meshes are shown together wilh the computed Mach number\nsolutions. The application of the enrichment algorithm in three dimensions is shown\nin figure 5.4. The inviscid flow past a 30 \xc2\xb0wedge\nis solved. The free slream Mach\nnumber is 3. This is a two dimensional\nproblem computed on a three dimensional\nmesh. Two vi_.ws of the initial mesh and solution are shown. A single application of\nlhe enrichment algorilhm produces lhe mesh and solution which are also displayed in\nfigure 5.4.\nIt can be observed, from the examples presented,\nsignificantly\nimproved by lhe application\nof. the\ndrawback of the approach is lhat lhe number of\nfollowing each application of Ihe procedure.\nThis\npraclical three dimensional\nproblems, only a small\nbe contemplaled.\n\nhow the quality of the solution is\nenrichment\nprocedure.\nThe main\nelemenls increases considerably\nmeans 1hat, in lhe simulalion of\nnumber of such adaptations can\n\n5.5 Mesh movement\nFor the mesh movement alogrilhm, the element sides are considered\nprescribed\nstiffness\nand the nodes are moved until lhe spring\n\n89\n\nas springs of\nsyslem\nis in\n\nFigure\n\n5.2\n\nMesh enrichment:\n\nthree possible cases of refinement\n\n9O\n\nfor a triangle\n\nFIRST\n1\n\nMESH\n\n713\n913\n\nSECOND\nMESH\n5 311\nelements\n\nelemenls\npoints\n\n2\n\n752\n\n10\n\nTHIRD\nMESH\n649 elements\n5\n\npoints\n\n444\n\n"\\\nz\n\n/\n\nJ\n\nf\n\n7\n\nI\n\n"X\n\n?\n\nJ\n\nMACH\n\nFigure\n\n5.3\n\nNUMBER\n\nSOLUTIONS\n\nSupersonic\nflow past\nmeshes and solulions\n\na double\noblained\n\nM.\n\nellipse\nusing\n\n= 8.15\n\n(X =\n\n30 o\n\nconfiguralion.\nSequence\nadaptive\nenrichmenl,\n\nof\n\npoints\n\n(d)\n(a)\n\n(e)\n\n(b)\n\nI\ni\n\n(f)\n\n(c)\n\nFigure\n\n5.4\n\nMach 3 inviscid flow pas! a 300 wedge in 3D: (a), (b) two views of\nthe initial mesh and (c) the compuited density contours;\n(d), (e) two\nviews of the enriched mesh and (f) the final density contours.\n\n92\n\nequilibrium. onsidertwo adjacentnodesJ andK as shownin figure5.5. TheforceIJK\nC\nexerledby Ihe springconnecling\nthesetwo nodescanbe takento be\nLtK\n\n=\n\nCJK\n\n( [.J - [.K\n\n(5.11)\n\n)\n\nwhere CjK is lhe stiffness of lhe spring and [j\nnodes J and K respectively. Assuming thai\n\nh =\n\nand 5< are the posilion\n\nvectors\n\nIr.J-_1\n\nthe adaptation\nrequirement\nsliffnesses are defined as\n\nof\n\nof\n\n(5.12)\n\nequalion\n\n(5.9)\n\nwill\n\nbe\n\nsalisfied\n\nif\n\nthe\n\nspring\n\nN\nCjK\n\n= h\n\nm il\n\nnjKinjK\n\n(5.13)\n\ni\n\ni;j= 1\nHere I]_jK is the unit veclor in the direction of lhe side joining nodes J and K. For\nequilibrium,\nthe sum of spring forces at each node should be equal to zero. The\nassembled\nsystem can be brought into equilibrium\nby simple iteration.\nIn each\niteration, a loop is performed over all lhe interior nodes and new nodal coordinates\nare calculated according Io the expression\nsj\n_, CJK\nK =1\n.r.j NEW\n\n=\n\n(5.14)\n\nSJ\nK =1\n\nwhere\n\nthe summation\n\nSulficienl convergence\nprocedure\n\nextends\n\nover the number\n\nis normally\n\nachieved\n\nof nodes, Sj,\nafter three\n\nwhich surround\n\nIo five passes\n\nnode J.\n\nthrough\n\nthis\n\nThis lechnique will nol necessarily produce meshes of belier quality, as badly formed\nelemPnl_ can appear in regions (such as shocks) in which the spring coefficients CjK\nvary rapidly over a short distance. To avoid this problem, lhe definition of lhe value\nof CjK given in equalion is (5.13) can be replaced by an expression of the form\n\nCJKMOD = 1+\n\nA\nB +\n\nCjK\n\nCjK\n\n(5.15)\n\nThis can be regarded as a blending function definition for the spring stiffnesses and il\nhas been conslrucled\nso as to ensure lhal, with a suitable choice for the constants A\nand P,, excessively small or excessively large element sizes are avoided. This, in turn\nmeans lhal meshes of acceptable\nquality will be produced.\nMore sophisticated\nprocedures\nfor conlrolling\nthe quality of the mesh during movemenl\ncan also be\ndevised [51] and mesh movement algorithms have been successfully used in two and\nIhree dimensional\nflow simulations\non both structured\nand unstructured\nmeshes\n[15,51,52]\n\n93\n\nThe mesh movement lgorilhmdescribed\na\nhasbeenapplied!o lhe\n\nproblem of flow pasl\na double ellipse configuration\nwhich has been treated previously. Figure 5.6 shows\nthe solutions\nproduced\nfollowing two mesh adaptations.\nIt can be seen thal the\nimprovement\nobtained after the second adaptation\nis minor. This Is because the\nalgorithm does not allow for the crealion of new nodes and so the qualily of the final\nsolution is very much dependenl on the topology of the initial mesh. This ts a major\ndrawback of the mesh movement strategy.\nA possible remedy to this problem Is to\ncombine mesh enrichment and mesh movemenl procedures. This is demonstrated\nin\nfigure 5.7 which shows the application\nof the movement\nprocedure\nto the final\nenriched mesh of figure 5.3.\n\n5.6 Adaptive\n\nremeshing\n\nThe basic idea of the adaplive remeshing technique is to use the computed solution Io\nprovide\ninformalion\non the spatial\ndistribution\nof the mesh parameters.\nThis\ninformation will be used by the mesh generalor described in section 3 to generate a\ncompletely new adapted mesh for the problem under investigation.\nThe \'optimal\' values for Ihe mesh paramelers\nare calculated at each node of the\ncurrent mesh. The directions (z_;i=1 ..... N. are laken to be lhe principal directions of\nthe matrix m. The corresponding\nmesh spacings are computed from the eigenvalues\ne_; i=1 ..... N, as\n\n=\n\nfor\n\ni=1 .....\n\nN\n\n(5.1 6)\n\nThe spatial distribution of the mesh parameters is defined when a value is specified\nfor the constant C. The lotal number of elemenls in the adapled mesh will depend upon\nthe choice of this conslanl.\nFor smooth regions of the flow, Ihis conslant\nwill\ndetermine\nthe value of the rool mean square error in the key variable thal we are\nwilling Io accept. Therefore lhis constant should be decreased each time a new mesh\nadaption is performed. On the other hand, solutions of lhe Euler equations are known\nto exhibit disconlinuilies.\nAt such discontinuities,\nthe rool mean square error will\nalways remain large and therefore a different strategy is needed in Ihe vicinity of\nsuch fealures.\nIn the practical implementation\nof the presenl melhod, two threshold values for lhe\ncomputed\nspatial dislribulion\nof spacing are used: a minimum spacing _min and a\nmaximum spacing (_r,,x, SO lhal\n,5,,,n < (_t-< (%max\n\nfor\n\ni:1 .....\n\nN\n\n(5.17)\n\nThe reason for defining lhe maximum value (_max is to account for the possibilily of a\nvanishing\neigenvalue\nin (5.16) which would render lhat expression\nmeaningless.\nThe value of (_r_a,is chosen as lhe spacing which will be used in the regions where Ihe\nflow is uniform (the far field, for instance). On the olher hand, maximum values of\nthe second derivatives\noccur near the discontinuities\n(if any) of the flow where lhe\nerror indicalor\nwill demand thal smaller elements\nare required. By imposing a\nminimum\nvalue\n,5,,in for the mesh size, we allempt\nto avoid an excessive\nconcentration\nof elemenls\nnear discontinuities.\nAs the flow algorithm is known !o\nspread disconlinuities\nover a fixed number of elements (i.e. two or three), at, In is\ntherefore set to a value lhat is considered appropriate to ensure that discontinuities\n\n94\n\nCJK\n\nFigure\n\n5.5\n\nMesh\n\nmovement\n\nalgorithm.\n\nElement\n\n95\n\nsides\n\nare\n\nreplaced\n\nby springs.\n\n_f\n\n1 713\n913\n\nMACH\n\nFigure\n\n5,6\n\nNUMBER\n\nSOLUTIONS\n\nelements\npoints\n\nM_\n\n= 8.15\n\n(_ = 300\n\nSupersonic\nflow past a double ellipse configuration.\nmeshes and solulions obtained using adaptive movement.\n96\n\nSequence\n\nof\n\n10\n\n649 elements\n5 444 points\n\nMACH\nM.\n\nFigure\n\n5.7\n\nNUMBER\n= 8.15\n\nSupersonic\nflow past a double ellipse configuration.\nsolulion obtained after applying the adaptive movement\na previously enriched mesh.\n\n97\n\nSOLUTION\n(X =\n\n300\n\nMesh and\nprocedure to\n\nare represented\nto\nof shocks\n\na required accuracy. This treatment also accounts for the presence\nof different strength in which, since the numerical values of the second\n\nderivative\nare different, equation (5.16) will assign them different\n(e.g. larger spacings in the vicinity of weaker shocks).\n\nmesh\n\nspacings\n\nThe total number of elemenls generated\nin the new mesh will now depend on the\nvalues selected for C, 8max, and 8rain. However,\nit turns out that this number is\nmainly determined by the choice of the constant C, which is somehow arbitrary. The\ncriterion\nemployed\nhere is to select a value that produces\na computalionally\naffordable number of elements.\nThe adaptive remeshing strategy presented in this section is illuslraled in figure 5.8\nby showing the various stages during the adaptation process. Figure 5.8(a) shows the\ninitial mesh employed for the computation\nof the supersonic flow past a double\nellipse configuration.\nThe Mach number conlours of the solution obtained on the\ninital mesh are shown in figure 5.8(b).\nThe flow condilions are a free stream Mach\nnumber of 8.15 and an angle of attack of 30 \xc2\xb0. The application of expression 5.16 Io\nthe solution oblained produces the distribution of spacing and stretching displayed in\nfigures 5.8(c) and 5.8(d) respectively.\nIn figure 5.8(c) the contours corresponding\nto the value of the minimum spacing occuring in any direction is shown, whereas in\nfigure 5.9(d) lhe value of and the direction of stretching is displayed in the form of a\nvector field. The magnitude of the vector represents the amount of stretching i.e.\nratio between\nmaximum and minimum\nspacings, and the direction of lhe vector\nindicates\nthe direction\nalong which the spacing is maximum.\nIn Ihis example\nexpression 5.17 has been applied to lhe computed spacings wilh values of 8max = 15\nand F,m_,_ 0.9. Figures 5.8(e) - 5.8(h) show various stages during the regeneration\n=\nprocess. It can be observed how small elements are generated firsl as discussed in\nsection 3.5. The completed mesh is shown in figure 5.8(i) and Ihe solution computed\non this adapted mesh is shown in figure 5.8(j). It can be observed how a very\nsignificant\nimprovemenl\nin the solution\nis oblained\nusing, in this case, a single\nadaptalion.\n[__s_ti_matLng number of elements\nthe\n\nto be generated.\n\nThe regeneralion\nprocess uses the current mesh as the background mesh. Such a\nbackground\nmesh clearly represents\naccuralely\nthe geomelry of lhe computational\ndomain. In this case, the number of elements to be generaled, denoted by Ne, can be\nestimaled as follows. Once the values of C, 8max, and 8m,_ have been selected, the\nspalial\ndistribution\nof mesh parameters\n8_, g_; i=1..... N is computed.\nFor each\nelement of the background mesh, Ihe values of lhe transformation T is compuled at\nthe centroid. The transformation is applied to the nodes of the element and its volume\nV_ in the normalised space is computed. The number of elemenls Ne is assumed to be\nproporlional\nto the tolal volume in the unstrelched space, i.e.\nNb\n\nNe = X. _\ne=l\n\nVe\n\n(5.18)\n\nwhere N b iS the number of elements in the background mesh and X.is a conslanl. The\nvalue of _[ is calculated as a slalistical\naverage of the values oblained for several\ngeneraled meshes.\nThe calculated value is X = 9. This procedure gives estimates of\nthe value of Ne with an error of less Ihan 20%, which is accurate enough for most\npractical purposes. If the estimated value of Ne is either too big or too small, lhen\n\n98\n\n(b)\n\n(a)\ni....\n\n-.,J1 i _\n\n.--\'T\n_I_\'_ I.-_-\n\n._K-.\n_,_\n\n210\n\nM=8.15\n_= 300\n\nMACH NUMBER SOLUTION\n\nINITIAL ESH\nM\n1 599 elemenls\n882 poinls\n\n(c)\n\n\xe2\x80\xa2\n\n/I\n\n= 0.9\n\n.\xc2\xb0\n\n5=15\n\nSPACING\n\nFigure\n\n5.8\n\nSTRETCHING DISTRIBUTION\n\nDISTRIBUTION\n\nIllustration of the adaptive remeshing procedure\n(n) Initial mesh\n(b) Mach number solution obtained on the initial mesh (M.=8.15, rx= 30 \xc2\xb0)\n(c) Computed distibution of minimum spacings (\'_min-- 9, 6max = 15)\n(d) Computed values and direclions for the stretching\n(3(3\n\n(d)\n\n(e)\n\n(f)\n\n(i\n\n(h)\n\n_ = 0.9S=2\n\n15\n\nM=8.15\n\\\n\n(7=300\n\nREGENERATED MESH\n\nMACH NUMBER SOLUTION\n\n3 181 elements\n1 664 points\nFigure\n\n5.8\n\nIlluslration of the adaptive remeshing procedure (continuation)\n(e) - (h) different stages during the regeneration proccess\n(i) Final regenerated mesh\n(j) Solution obtained on adaptively regenerated mesh (M.=8,15, o.= 30 \xc2\xb0)\n1I)O\n\nthe value of\n\nC is reduced\nproduces\na number of\nacceplable.\n\nor increased and the process repeated until the value of C\nelements\nwhich is regarded\nas being computatlonally\n\nAlZe.l_atio n e xam,el__\nJ_2JJbLe,_,j]jg_.- The adaptive remeshing procedure is applied twice to the problem of\nflow past a double ellipse.\nThe flow conditions are those previously considered\nfor\nthis configuration.\nThe inital and two adapled meshes and the solutions for Mach\nnumber are shown in figure 5.9. The characteristics\nof the meshes employed\nare\ndisplayed in table 5.1.\n\nMesh\n\nElements\n\nPoints\n\n8min\n\n1\n\n4.0\n\n3557\n\n1864\n\n0.9\n\n3\n\n5.1 Double\n\n1110\n\n2\n\nTable\n\n2027\n\n6403\n\n3294\n\n0.25\n\nellipse\n\n(M==8.15,\n\nrz=30o):\n\nmesh\n\ncharacteristics.\n\nII is observed how the application of the adaplive procedure, when compared 1o Ihe\nenrichment stralegy, allows for a larger increase in the resolution al the expense of\na smaller increase on total number of elements. On the olher hand the remeshing\nprocedure\ndoes not suffer from the limitations\ninherenl in the mesh movement\nalgorithm.\n.Shock\n\ninteraction\n\non a sweD!\n\ncylinder.-\n\nThis\n\nis a problem\n\nof practical\n\ninterest\n\nbecause ils implicalions to the design of hypersonic vehicles [53]. The experimental\napparalus and the computational\ndomain adopted are shown diagramatically\nin figure\n5.10(a). The numerical simulation has been carried out for a sweep angle of 15 o on\na cylinder of diameter D equal to 3 inches and length L equal to 9 Inches. The\nundislurbed free stream Mach number is 8.03. The fluid which has been turned by\nlhe shock generator enters the compulational\ndomain wilh a Mach number of 5.26.\nThe inilial mesh and those obtained after two adaplive remeshings and the density\nconlours\ndistribulion\nare shown\nin figure 5.10(b).\nThe characleristics\nof lhe\nmeshes are shown in lable 5.2.\n\n51\nI_ M\n\nsh\n\n.....\n\nTable\n\n5.2 3D Shock\n\n190\n\nElements\n100\n071\n171\n800\n\ninteraclion\n\n10\n\n041\n\nPoints\n18 083\n31 660\n\n1.0\n\n1.0\n\n5rain\n0.5\n0.18\n\n8max\n3.0\n3.0\n\non a swept cylinder:\n\n101\n\nmesh characterislics.\n\n102\n\nr-\n\nE\n\no\n0\n\n\xc2\xa2::\n\nli .o\n\n"0\n\n0\nt_)\n\n_\n\nE\n\no\nx\n\nc\n.__\n\naJ\n0\n\n0\n\nv\n\nU_\n\nC)\n\n0\n\n.._J\n\n__1\n\nLI_\n\nLL-\n\n10_\n\n\xe2\x80\xa2\n_\n\n(b)\n\nSE\n\n51,190\n10,041\n\nelements\npoints\n\nRD MESH\n\n100,071\n18,660\n\n_mln\n\nelements\npoints\n\n= 1.0\n\n171,800\n31,083\n\nelements\npoints\n\n8rain " 0.5\n\n_min "O. 18\n_max\n\nDENSITY\n\nFigure\n\n5.10\n\nShock\n\ninteraction\n\n(b) Sequence\n\nSOLUTION\n\non a swept\n\nof meshes\n\n="3.0\n\ncylinder\n\nand density\n\n10/4\n\n(M_=8.03,\n\nsolutions\n\nobtained\n\n4=15 \xc2\xb0)\n\n(continuation)\n\nusing adaptive\n\nremeshing\n\n\xc2\xa3.)\nv\n\n-r\nM.J\nC\n\n._(2\n\n,1p.-\n\nL\\\n\n\xc2\xb0_\n\n---.\nC\n0\n\n\xc2\xae\n"10\nc\n\nv\n0\n\n6-\'\xc2\xae\n\nr..-\n\nII i_\n\',0 c\n._o\n\nI\nr-\n\nZ\n\n:E\n\nQ\n\nZ\n\n0\nU\nI.M\n\no\n\no\n\ne..\n\n.__ _\n""\n\n/\n\n0\n\n\xc2\xa3\nm_\n\n-lb,)\nM.I\n\nI-C_\n,,,_,1 ,. \xc2\xa2..4.-_\n\nw\n\n105\n\nm\n\ni _.,/_//z\n\n\xe2\x80\xa2\n\n,vr_._.\n\nLL\n\nu\n\n\xc2\xb0_\n\ni1\n\n.o\n\n0\no\n\nv\n\n_"\n\n.=\n\nto\n\nI\n\n\xc2\xb0_\n\nu\n\no\no\n\nJ\n\nJ\n\no\xc2\xae\nc\n\nE,-\n\n8\n\n.__ ._ -_\n0\n\nID\n\n0\n\nv\n\n_4\n\nI=\nU.\n\n106\n\n(a)\n\nJ\n\n>\nH\n\nJ\n!\n\n\\\n(c)\n\n\xc2\xa3o)\n\nF\n\nF\nFigure\n\n5.11\n\nGeneric\n\nfighler\n\nconfiguration\n\n(M.=2,\n\no_=3.79 o)\n\n(a) Geometry definition - aircraft surface and outer boundary.\n(b) Initial mesh and computed pressure solution in the symmetry plane.\n(c) Second mesh and computed pressure solution in the symmetry plane.\n107\n\nFigure\n\n5.11\n\nGeneric\n\nfighter\n\nconfiguralion\n\n(M_=2,\n\n(x=3.79\xc2\xb0)(continuation)\n\n(d) Initial mesh and computed pressure solution.\n(e) Second mesh and computed pressure solution.\n\nThe potential advantages of lhe adaptive remeshing procedure are clearly illustrated\nin this three dimensional example. The final adapted mesh has a resolution of more\nthan five limes thai of the inital mesh whereas the total number of degrees of\nfreedom increases by only a factor of 3.4. The effects of the three dimensional\nadaptation are best shown in figure 5.10(c) which shows the cross section through\nthe meshes half way along the cylinder. Two views of the three dimensional mesh for\nthe final adaptation together with the solution obtained are shown in figures 5.10(d)\nand 5.10(e) respectively.\nGeneric\nfiohter\nconfiguration.This example concerns the simulation of lhe flow\npast a generic fighter configuration. The generation of the initial mesh for thai\nproblem has been described in section 3.9. The flow conditions considered correspond\nlo a free stream Mach number of 2 at an angle of attack of 3.79 \xc2\xb0. The engine inlet is\nmodelled by prescribing a Mach number of 0.3 within the engine. At the outlet\nsupersonic flow conditions are assumed. Because of the symmetry of the problem\nonly half of the domain is modelled. The spline definition of the geometry is shown in\nfigure 5.1 l(a) and consists of 23 surface components and 53 curve components. Two\nmeshes have been employed in an initial demonstration of adaptive remeshing applied\nto full aircraft configuration.\nThe inital mesh contains 76,522 tetrahedral\nelements\nwith 4,128 triangular\nfaces on the boundary.\nA preliminary\nfirst solution was\ncomputed using 1,500 iterations of the basic explicil scheme. A second mesh was\nadaptively\ngenerated\nusing the Mach number as the key variable in the error\nanalysis. The new mesh is formed by 70,125 telrahedra with 7,262 triangles on the\nboundary. It is interesting to notice that the number of elements in the two meshes is\napproximately\nthe same whereas the number of faces on the surface has increased.\nMoreover, the minimum spacing on Ihe adapled mesh is 3.5 limes smaller than the\none on the initial mesh, thus indicating also an increase in the mesh resolution. The\nsolution on Ihe new mesh was obtained after 2,000 iterations. The meshes and\ncomputed solutions at the plane of symmetry are shown in figures 5.11(b) for lhe\ninitial mesh and 5.11(c) for the adapted mesh. The effect of the adaptation in the\nvicinity of the engine inlet can be observed. The mesh and solution on the surface of\nthe aircraft is shown in figure 5.11(d) for the initial mesh and in figure 5.11(e)\nfor the adapted mesh. In lhis case the adaptation is very mild and is hardly noticeable.\nThe main reason for this is that the resolution on the initial grid is rather poor and\nsome importanl flow features are not properly captured.\n\n109\n\n6.TRANSIENT\nthis section\n\nFLOWS\n\nhas been written in collaboration with\n\nJ. Probert and O. Hassan\nComputational Dynamics Research\nInnovation Centre, University College Swansea\nSWANSEA SA2 8PP, UK\n6. 1 Transient\n\nflows\n\nSolutions of the Euler equations are smooth over large areas of the computational\ndomain and exhibit large gradients in localised parts of the flow. In transient\nsimulations, these localised regions will generally move through the computational\ndomain and may sweep across very large areas e.g. the case of flows involving\npropagating shocks. This means that, unless adaptivity is used, a globally fine mesh\nwill be necessary to provide the required resolution. Thus lhe use of adaptivity, with\nthe possibilily for local mesh refinement and coarsening, offers the potential for\nconsiderable computational savings. We have already seen lhat only a few mesh\nadaptations are generally needed to obtain a salisfaclory solution 1o a steady problem,\nbut we can expect that mesh adaptation will have to be performed several thousand\ntimes in a transient flow simulation. Thus any potential computational savings which\nappear to be offered by the use of adaptivity in this case will only be realised if the\nadaptation of the mesh can be performed in an efficient manner. Successful\nimplementations\nof adaptivity to the solution of lransient problems have already\nbeen made within the context of both structured [54] and unslructured meshes\n\n155,561.\n6.2 Mesh enrichment\nAn obvious method of achieving mesh adaptation for transient flow Simulation is the\nextension of the mesh enrichment ideas introduced above for the solution of steady\nstate problems. An exlremely successful implemenlation on unstructured triangular\nmeshes has been made by LOhner [55]. In his method, the grid is automatically\nrefined and de-refined as necessary according to the results of an error Indicating\nprocess. An example [56] of the application of this procedure to shock-bubble\ninteraction problem is shown in figure 6.1. This problem involves the interaction\nbetween a weak shock, travelling at a Mach number of 1.29 in air, and a bubble of\nheavier material (freon). From the figure it can be seen how the shock speed inside\nthe bubble decreases, owing to the higher density of the freon, whereas the outer\nshock bends over. The inner shock focuses at the right hand end of the bubble,\nproducing a significant over-pressure and intialing a small circular blast wave.\nThis method has also recently been applied to three dimensional\nflow simulations\n[57], but much less resolution\ncan now achieved, as only a limited number of\nrefinement levels can be afforded computationally.\n\n6.3 Transient\n\nflows involving\n\nmoving\n\nThe complexily\ninvolved in transienl\nproblems\nin which certain boundaries\n\nbodies\nflow simulalion\nincreases\nif one considers\nof the computational\ndomain are allowed to\n\n110\n\n(a)\n\n(c)\n\n!\n\nNELEM=6635.\n\n,_\n\n.\n\nq\n\nNPOIN=3374\n\nNELEM=16738,\n\nNPOIN=8464\n\n0 34 5 I\nDENSITY\n\ni\n\nDENSITY\n\n[ I 39,8 ]\n2 1_3J\n\n.\n\n00\n00\nI 875_\n\nPRESSVRE\nPRESSURE\n\n(b)\n\n(d)\n\n\\\n\nNELEM=I4528,\n\nNPOIN=7335\n\nNELEMffi18571,\n\nNPOIN=8386\n\nDENSITY\n\nDENSITY\n\n\\\n\nPRESSURE\n\nFigure\n\n6.1\n\nShock-bubble\n\ninleraclion\n\nproblem\n\nusing lransient\n\n(a) Initial mesh and solution contours\n(b) Mesh and solution at t=0.6\n(c) Mesh and solution at t=O.7\n(d)\n\nMesh\n\nand\n\nsolution\n\nat\n\nI=0.8\n\n111\n\nPRESSURE\n\nadaptation\n\nbased on enrichment\n(from\n\n[56])\n\nmove, so\nmesh\n\nIhal the geometry of the domain changes with time. This means thai the\nmust be modified during the computation in order to accommodale\nthese\n\ngeometrical\nchanges. One approach which has proved to be successful for tackling\nsuch problems is the chimera approach,\nin which each individual geometry\ncomponent\ncan have its own associaled\nstructured mesh which can move\nindependently of the other meshes. Three dimensional viscous simulations\ninvolving\nmoving bodies have already been produced by this method [58]. Unstructured meshes\nhave been applied to the solution\nof inviscid lwo dimensional transient flows\ninvolving moving bodies [59,60], using a method which is an extension of lhe\nremeshing procedures presented in section 5.6 and lhis is the approach that will be\npresenled here.\nWe restrict our\nbasic variational\nthe fact that the\nsolution .U_, at a\n\nconsideralion\nto two dimensional\ninvlscid flows and note thal the\nstalemenl for the problem will need 1o be modified to account for\nspatial domain _ is varying with time. Suppose that we have the\ncertain time level In. We attempt to satisfy lhe compressible Euler\n\nequations\n(1.38)\nthis problem in a\nfunction sets. We\nthe boundary 1"of\n\nover the space-time\ndomain D = (_(I), tn <- t _<In,,,). TO express\nvariational form we need to introduce suitable trial and weighting\nassume, for the purposes of this discussion, that the conditions on\n_ can be expressed in the form\n\nU : 0\n\non r(t)\n\n(6.1)\n\nAlthough such conditions are somewhal unrealislic, the aclual boundary conditions\nwhich would need Io be applied in the simulalion of a given problem can be readily\nincorporated by making appropriate modifications to the following analysis. We may\ndefine\n\n3. = ( U I U = 0 on r; U = _\nw = {WlW=\nand a variational\n\non _ at t = t.}\n(6.2)\n\n0on 1-}\n\nformulation of the problem\n\ncan be stated as \xe2\x80\xa2 find U in 3" such thai\n\ntn+l\n\n._\n\nW\n\n_-+\n\n_xx +\n\n_yy\n\ndQdl =0\n\n(6.3)\n\nIn\n\nfor every W in It). We will assume\n\nthai the spatial domain\n\nusing 3 noded linear triangular elements,\nand introduce the sets\n\n3.(p) =\n\n{ .U.(p)\n\nI U_(p)\n\n----\n\nwith inlerior\n\n.Q has been discretised\n\nnodes numbered\n\nfrom\n\n1 to p\n\nM1UI+M2_U.2+ ..... +Mp .Up: U._p)=0 on F; .U.(p)= U.n on _ at I = In}\n\n(6.4)\nW(p)\n\n= {W(p)\n\nIW(p)=\n\nalMl+a2M2+..+apMp\n\n;W(p)=0\n\n112\n\non\n\nr\'}\n\nIn the approach which is to be followed here, certain nodes In the mesh will be fixed,\nwhile others will move with a prescribed velocity. The shape functions Mj are linear\nfunctions of space and time which satisfy\n\nMj(x, tn) = Nn(x)\n\nMj(x, tn+l) = Nn+l(x)\n\nwhere Nn is the standard\nfinite element shape function,\nassociated\nto node J at time t,. Working with the function\n(6.4),\nlhal\n\nthe Galerkin\n\napproximation\n\nstatement\n\ntakes\n\n(6.5)\n\ndefined in section 1.2,\nsets defined in equation\n\nthe form\n\n\xe2\x80\xa2 find .U..(p)in \'T(p) such\n\ntn+l\n\noo,,t\n=.0.\n\nIn\n\nfor J = 1,2 ...... p. Considering\nto show that\n\n\xc2\xa22 MJ _-_t\nI\n\nd!\nd_ = _l:\n\nthe first term appearing\n\nMj\'U-(p)\n\nin this integral,\n\nd_ "Ir y-\'BMJ-U-(p) dr-\n\n(6.6)\n\nit is possible\n\nI --_-L,_p) d_\nn aMJ\n\n(6.7)\n\nwhere y_denotes the velocity of the moving nodes. Wilh y.(p) = (vx, vy) interpolated\nlinearly between the nodal values of v, an observer moving with the mesh will not\ndetect any change in the shape functions i.e.\n\nDMj\naMj\naMj+\nDt = at + v, _\nwhere D/Dr denotes differentiation\n\nFinally, combining\nsatisfies\n\nequations\n\no_Mj\nvy a--y-= 0\n\n(6.8)\n\nfollowing the moving mesh and so\n\n(6.6),\n\n(6.7)\n\nand\n\n(6.9),\n\nlhe Galerkin\n\napproximation\n\n|n+l\n\nI MJ ,.U..(p)\nd_ _\'_n+ I\n\nf\nJ Mj .LL(p)\nd.Q\nQn\n\nI\n\nf\n\nMj\n\n+\n\nay\n\nJ\n\ntn\n\n(6.1o)\nwhere\n\n113\n\n_p)+\n\nvyU p\n\n+=\n\n-- F.,_Q) Vx U_(p)\n-\n\nInserting the assumed form for .U.(p)from equation\n\n(6.11)\n\n(6.4),\n\ntn+l\n\n[M U_]J\n\n-[M\n\nU.Ja\nn\n\no\n\na\n\n+\n\ndQ\n\ndt\n\n(6.12)\n\ntn\n\nThe integral appearing here can be evaluated by first employing one point integration\nin time (at l= ln.1/2) and then using a two-step approximation\n[18,19]. Artificial\nviscosity will again be needed with a scheme of this type and the resolution of the\nresulting scheme may be improved by the use of the FCT ideas mentioned in Section\n1.3.\n6.4\n\nAdaptive\n\nremeshing\n\nfor transient\n\nflows involving\n\nmoving\n\nbodies\n\nThe method described above, whereby a grid may be adapted by remeshing, Is a\nnalural approach to follow for the simulation of flows involving moving bodies. II\nwill be assumed lhat the motion of any moving boundary is prescribed and the\nobjective is to determine the resulting flow field. The description of an algorithm\nwhich can be devised to advance the solution of equation (6.11) in time can be\nwritten as follows:\n.\n\nGenerate an initial mesh to represent the computational domain and fo\nadequately resolve the initial solution.\n\n2.\n\nStart the timeslep loop\n\n2.1\n2.2\n2.3\n\nAdvance the solution one timestep\nUpdate the coordinates of the points on the moving boundaries\nUse an error indicator to examine the current solution and define an\n\n2.4\n2.5\n2.6\n\n\'optimal\' distribution of mesh spacing and slrelching\nCompare the current mesh with the \'oplimar mesh. Delete the\nelements whose size and shape is log different from the optimal\nTriangulate the regions where elements have been deleted according to\nthe new distribution of mesh parameters\nDetermine, by interpolation, the flow variables at the new nodes\nEnd the timeslep\n\nloop\n\nIt is apparent that the crucial phase in this process is the mesh adaplalion in sleps\n2.3-2.5. The mechanics\nof this process is illustrated diagramalically\nin figure 6.2.\nThe success of the procedure depends upon the reliability\nof the error indicator\nwhich is employed. The indicator of equation (5.9) has again been used for this\napplication.\nApplication\n\nexamples\n\n1D Shock DroDaaation.- The first example considered consists of a two dimensional\nsimulation of the transienl development of the flow in shock tube. The purpose of this\n114\n\n(a)\n\n,_},\n\\\n>/\\\n/K..\n\nJ Jv\\\n\\/V\\/\\/\\/I\n\n(b)\n\n_/\\/\\/\'v%\n\n_\'/\n\n\\<\n\nZl\\.- ..lJ / \\%\nz\n\\/\n\n>/\n\n(c)\n\n_/V\\\n\nF_,TV v,v_\n\n(e)\n\n/V\\/v\n\nZ\n\'\\/\\/\'_,,%,\'_----]\n\nl_,4v_" _/\\7X-I\n/\n\n/\n\n>\n>\n>\n\\\n\nFigure\n\n6.2\n\n__/1\n\n,,./ v\n\n_v v"l\n\nIllustration of the adaptive remeshing procedure applied to transient problems\n(a) Initial mesh\n(b) Marked unwanted nodes and elements\n(c) Elements are removed from the mesh\n(d) Boundary sides are generated according\na closed loop arround each hole\n(e) Triangulation\nspacings\n\nto the new spacing\n\nof the holes using the advancing\n\ndistribution\n\nto\n\nfront and the new distribution\n\nform\nof\n\n(a)\n\n558\n\nelements\n\n334\n\npoints\n\nI I\n(b)\n\n544 elements\n329\npoints\n\n!\n\n1\n\n(c)\n\n585\nelements\n353\npoints\n\n!\nFigure\n\n6.3\n\nShock tube\n(a) Adapted\n(b) Adapted\n(c) Adapted\n\nexample\nmesh and\nmesh and\nmesh and\n\nusing adaplively refined meshes.\ndensity contours at t=0\ndensity contours at t=4\ndensity contours at t=8\n\n116\n\n(b)\n\n(c)\n\n(d)\n\nFigure\n\n6.4\n\nSpace\n\nshuttle\n\nvehicle\n\nand booster\n\nrocket\n\nsimulation\n\n(M.=2,\n\n_.=-4o).\n\nThe\n\nshuttle moves upwards and away from the rocket with a prescribed molion.\nSequence of meshes and pressure solutions obtained during the transient\nsimulalion starting from a steady state solution. The meshes consist ot: (a)\n7,870 elements and 4,130 points (b) 7,377 elements and 3,867 points\n(\'c) 6.847 elements and 3,580 points and (d) 8,459 elemenls and 4,379\n\nACKNOWLEDGEMENTS\n\nThe authors would like to acknowledge\nDrs. Javler Bonet, Luca Formaggia, Oubay\nHassan, Jane Probert and Professor O. C. Zienkiewicz whose collaboration was\nessential for the development of the work presented here. Our work in INs area has\nbenefited greatly from the support over several years of the Aerothermal Loads\nBranch, NASA Langley Research Center, under grants NAGW-478 and NAGW-1809\nand we are pleased to acknowledge this contribution. We also acknowledge the\nassistance of the U. K. Science and Engineering Research Council for providing time\non the Cray computer at the Rutherford Appleton Laboratory; Avions Marcel Dassault\nfor partially funding this work and providing the geometry definitions of the Hermes\nand the Falcon aeroplane; NASA Ames for the support provided under grant NCCW008 and Cray UK for providing computer time which allowed us to perform the\ncomputation of the flow past the Falcon plane. The discussions and comments of Dr. N.\nP. Weatherill and the assistance of S. Soltani in providing the adaptive unstructured\nmesh of figure 1.1 are also acknowledged.\n\n118\n\nREFERENCES\n\n[11 N. P. Weatherill,\n[21\n[3]\n\n[4]\n[5]\n[6]\n[7]\n[8]\n\n[9]\n\n[10]\n\n[11]\n[12]\n[13[\n\n[14]\n[15]\n[16]\n[17]\n118]\n\n\'Mesh generation\nin computational\nfluid dynamics\',\nyon\nKarman Institute\nfor Fluid Dynamics,\nLecture Series 1989-04,\nBrussels,\n1989.\nJ. F. Thompson, Z. U. A. Warsi and C. W. Mastin, \'Numerical grid generation foundalions\nand applications\',\nNorth-Holland,\n1985.\nS. AIIwright,\n\'Multiblock\ntopology\nspecificalion\nand grid generation\nfor\ncomplete\naircraft configurations\',\nin Applications\nof Mesh Generation\nto\nComplex 3-D Configurations,\nAGARD Conference Proceedings No. 464, 11.111.11,\n1990.\nT. J. Baker, \'Unstructured\nmesh generation\nby a generalized\nDelaunay\nalgorithm\',\nin Applications\nof Mesh\nGeneration\nto Complex\n3-D\nConfigurations,\nAGARD Conference\nProceedings No. 464, 20.1-20.10,\n1990.\nJ. Peraire, M. Vahdati, K. Morgan and O. C. Zienkiewicz, \'Adaptive remeshing\nfor compressible\nflow computations\',\nJ. Comp. Phys. 72, 449-466,\n1987.\nA. Jameson,\nT. J. Baker and N. P. Weatherill,\n\'Calculation\nof inviscid\ntransonic flow over a complete aircraft\', AIAA Paper 86-0102, 1986.\nJ. Peraire, J. Peiro, L. Formaggia, K. Morgan and O. C. Zlenkiewlcz,\n\'Fintte\nelement Euler computations\nin three dimensions\', Int. J. Num. Meth. in Engn.,\n26, 1988.\nR. LShner, K. Morgan and O. C. Zienkiewicz, \'Adaptive grid refinement for the\ncompressible\nEuler equations\',\nin Accuracy\nEstimates\nand\nAdaptive\nRefinements\nin Finite Element\nComputations,\nEdited by I. Babuska el al,\nWiley,\n281-297,\n1986.\nL. Formaggia, J. Peraire, K. Morgan and J. Peiro, Implemenlalion\nof a 3D\nexplicit Euler solver on a CRAY computer\', in Proc. 4th Int. Symposium\non\nScience and Engineering\non CRAY Supercomputers,\nMinneapolis,\n45-65,\n1988.\nC. Hirsch, \'Numerical computation\nof internal and external flows, Volume 2\',\nWiley,\n1990.\nC. Johnson, \'Numerical solutions of partial differential equations by the finite\nelement method\', Cambridge\nUniversity Press, 1987.\nO. C. Zienkiewicz and K. Morgan, \'Finite Elements and Approximation\',\nWiley,\n1983.\nJ. Don(_a, \'A Taylor-Galerkin\nmethod for convective transport problems\',\nInt.\nJ. Num. Meth. Engng. 20, 101-119, 1984.\nO. Hassan, K. Morgan and J. Peraire, \'An adaptive implicit/explicit\nfinite\nelement scheme for compressible\nviscous high speed flows\', AIAA Paper 890363,\n1989.\n\nK. Morgan and J. Peraire, \'Finite element melhods for compressible\nflows\',\nvon Karman\nInstitute\nfor Fluid Dynamics,\nLecture\nSeries\n1987-04,\nBrussels\n1987.\nJ. Don(}a and S. Giuliani, \'A simple method to generate high-order\naccurate\nconveclion\noperators for explicit schemes based on linear finite elements\',\nInt. J. Num. Meth. Fluids 1, 63-79, 1981.\nK. Morgan and J. Peraire, \'An introduction\ntO finite elemenl methods for\ncomputalional\nfluid\ndynamics\',\nInstitute\nfor Numerical\nMethods\nin\nEngineering\nReport C/R/608/88,\nUniversity College of Swansea 1988.\nJ. Peraire, K. Morgan and J. Peiro, \'Unstructured\nfinite element mesh\ngeneration\nand adaptive\nprocedures\nfor CFD\', In Applications\nof Mesh\nGeneration to Complex 3-D Configurations,\nAGARD Conference Proceedings\nNo. 464, 18.1-18.12,\n1990.\n\n110\n\n[19]\n[20]\n[21]\n[22]\n\n[23]\n\n[24]\n[25]\n[26]\n[27]\n[28]\n[29]\n[30]\n[31]\n[32]\n133]\n[34]\n\n[35)\n[36]\n\n[37]\n\n[38]\n[39]\n[40]\n\n[41]\n\nR. LShner, K. Morgan, J. Peraire and o. C. Zienkiewicz, \'Finite element\nmethods for high speed flows\', AIAA Paper 85-1531-CP,\n1985.\nJ. P. Boris and D. L. Book, \'Flux corrected transport I : SHASTA, a fluid\ntransport algorithm that works\', J. Comp. Phys. 11, 8-69, 1973,\nS. T. Zalesak, \'Fully multidimensional flux corrected transport algorithm for\nfluids\', J. Comp. Phys. 31, 335-362, 1979.\nA. K. Parrolt and M. K. Christie, \'FCT applied to the 2D finite element solution\nof tracer transport by single phase flow in a porous medium\', in Numerical\nMethods for Fluid Dynamics, Edited by K. W. Morton and M. J. Baines, Oxford\nUniversity\nPress, 27-53,\n1986.\nR. Lt_hner, K. Morgan, J. Peraire and M. Vahdati, \'Finite element flux\ncorrected transport (FEM-FCT)\nfor the Euler and Navier-Stokes\nequations\',\nin Finite Elements in Fluids, Volume 7, Edited by R. H. Gallagher el al, 105121, 1988.\nK. Morgan, J. Peraire and R. LShner, \'Adaptive finite element flux corrected\ntransport techniques for CFD\', in Finite Elements - Theory and Application,\nEdited by D. L. Dwoyer et al., Springer-Verlag,\n165-175, 1988.\nA. Leral and J. Sides, \'Efficient solution of the steady euler equations with a\ncentered implicit scheme\', in Numerical Methods for Fluid Dynam/cs III, K.W\nMorton and M. J. Baines ed., 65-86, Clarendon Press, Oxford, 1988.\nO. Hassan, K. Morgan and J. Peraire, \'An implicit finite element method for\nhigh speed flows\', A/AA Paper-90-0402,\n1990\nA. A. G. Requicha and H. B. Voelcher,\' Solid modelling: A Historical Summary\nand contemporary assessment\', /EEE Computer Graphics and Applications, 3,\nn. 2, 9-24, 1982.\nI. D. Faux and M. J. Pratt, Computational\nGeometry\nfor Design and\nManufacture, Ellis Horwood, Chichesler, 1981.\nJ. C. Ferguson, \'Mullivariate curve interpolation\', J. ACM 11, 221 ,1964.\nS. A. Coons, \'Surfaces for Computed Aided Design of Space Forms\', Report\nMAC-TR-41,\nProject MAC, M.I.T., 1967.\nJ. Peiro,\'A finite element procedure for the solution of the Euler equations\nusing\nunstructured\nmeshes\',\nUniversity\nof Wales\nPh.D.\nThesis,\nC/Ph/126/89,\n1989.\nA. J. George, \'Computer implementation of the finite element method\', Ph.D.\nThesis, Stanford\nUniversity, STAN-CS-71-208,\n1971.\nS. H. Lo, \'A new mesh generation scheme for arbitrary planar domains\', Int.\nJ. Numer. Methods Engng. 21, 1403-1426 (1985).\nJ. C. Cavendish, D. A. Field and W. H. Frey, \'An approach to automatic three\ndimensional finite element mesh generation\', Int. J. Num. Met/?. Engng. 21,\n329-348,1985.\nJ. J. Stoker, Differential\ngeometry, Wiley Interscience, New York, 1969.\nL.-E. Eriksson, R. E. Smith, M. R. Wiese and N. Farr, \' Grid generation and\ninviscid flow computation\nabout cranked-winged airplane geometries\', AIAA\nPaper\n87-1125,1 987.\nJ.L. Bentley and J.H. Friedman, \'Data structures\nfor range searching\',\nComputing Surveys,\n11, 4, 1979.\nM.I. Shamos and D. Hoey, \'Geometric inlerseclion problems\', in 17th Annual\nSymposium on Foundations of Computer Science, IEEE, 1976.\n\'Fundamental algorithms for computer graphics\', edited by R. A. Earnshaw,\nNA TO AS/Series F, vo/. 17, Springer Verlag 1985.\nJ.Boris, \'A veclorised algorithm for determining the nearest neighbours\', J.\nComp. Phys., 66, 1-20, 1986.\nR. Sedgewick, \'Algorithms\', Addison Wesley, Reading, 1988.\n\n120\n\n[42]\n[43]\n[44]\n\n145]\n[46]\n[47]\n\n[48]\n[49]\n\n[50]\n[51]\n\n[52]\n\n[53]\nI54]\n\n155]\n[56]\n\n[57]\n\n158]\n\n159]\n\n160]\n\nJ. Boner and J. Peraire, "An alternaling\ndigital tree (ADT) algorithm\nfor\ngeometric searching and intersection problems", Int. J. Num. Meth. Engng., in\npress\n(1990).\nD. Knuth, \'The art of computer programming - Sorting and searchil_g\', vol. 3,\nAddison Wesley, 1973.\nD. Knuth, \'The art of computer programming\n- Fundamental\nalgorithms\', vol.\n1, Addison Wesley, 1969.\nJ.L. Bentley, \' Multidimensional\nbinary search trees used for assoclalive\nsearching\', Communications\nof the ACM, 18, 1, 1975.\nJ. Boner, \'Finite\nelement\nanalysis\nof thin sheel\nsuperplastic\nforming\nprocesses\',\nUniversity of Wales Ph.D. Thesis, C/PhD/128/89.\nP. G. Ciarlet and P. A. Raviarl, \'General Lagrange and Hermite interpolation in\nR n with applications\nin finite element methods\', Arch. Rat. Mech. Anal., 46,\n177-199,\n1972.\nJ. T. Oden, \'Grid optimisation and adaptive meshes for finite element methods,\nUniversity of Texas at Austin Notes, 1983.\nB. Palmerio,\nV. Billey, A. Dervieux and J. Periaux,\n\'Self-adaplive\nmesh\nrefinements\nand finile element methods for solving the Euler equations\',\nin\nNumerical Methods for Fluid Dynamics II, K.W Morlon and M. J. Baines ed.,\n369-388, Clarendon\nPress, Oxford, 1985.\nJ. Peraire, K. Morgan, J. Peiro and O. C. Zienkiewicz,\n\'An adaptive ainlte\nelement method for high speed flows\', AIAA Paper 87-0558, 1987.\nB. Palmerio and A. Dervieux, \'2D and 3D unstructured\nmesh adaption relying\non physical analogy\', in Proc. of the Second International\nConference\non\nNumerical Grid Generation in Computational\nFluid Mechanics, Miami Beach,\nFlorida,\n1988.\nK. Nakahashi and G.S. Deiwert, \'A practical adaptive-grid\nmethod for complex\nfluid flow problems\',\nLecture\nNotes in Physics,\nvol. 218,\n422-426,\nSpringer Verlag, 1985.\nC. Glass, A. R. Wieting and M. Holden, \'Effect of leading edge sweep on shockshock interference heating at Mach 8\', AIAA Paper 89-0271, 1989\nP. Woodward and P. Colella, \'The numerical simulation\nof two dimensional\nfluid flow with strong shocks\', J. Comp. Phys. 54, 115-173 , 1984.\nR. Lt_ner, \'An adaptive finite element scheme for transient problems in CFD\'\nComp. Meth. in Appl. Mech and Engn. 61, 323-338, 1987.\nR. L_ner,\nK. Morgan,\nJ. Peraire\nand M. Vahdali,\n\'Finite\nelement\nflux\ncorrected Iransport for the Euler and Navier-Stokes\nequations\',\nInt. J. Num.\nMeth. in Fluids 7, 1093-1109,\n1987.\nR. L_ner\nand J. D. Baum, \'Numerical simulation\nof shock Interaction\nwilh\ncomplex geometry\nthree-dimensional\nstructures using a new adaptive\nhrefinement scheme on unstructured\ngrids\', AIAA Paper 90.0700, 1990.\nP. G. Bunning, I. T. Chiu, S. Obayashi, Y. M. Rizk and J. L. Steger, \'Numerical\nsimulation of the integrated space shuttle vehicle in ascent\', AIAA Paper 884359-CP,\n1988.\nL. Formaggia, J. Peraire and K. Morgan, \'Simulation\nof a store separation\nusing the finite elemenl\nmethod\',\nAppl. Math.\nModelling\n12, 175-181,\n1988.\nE. J. Probert, \'Finite element methods for transients\ncompressible\nflows\',\nUniversity of Wales Ph.D. Thesis,\nC/Ph/123/89,\n1989.\n\n121\n\n'