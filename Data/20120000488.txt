b'The model library can be used to support SysML user models in various ways.\nA simple approach is to define and document libraries of reusable systems of\nunits and quantities for reuse across\nmultiple projects, and to link units and\nquantity kinds from these libraries to\n\nUnit and QuantityKind stereotypes defined in SysML user models.\nThis work was done by Nicolas F. Rouquette of Caltech, Hans-Peter DeKoenig of the\nEuropean Space Agency, Roger Burkhart of\nDeere & Company, and Huascar Espinoza of\nthe French Centre of Atomic Energy for\n\nNASA\xe2\x80\x99s Jet Propulsion Laboratory. For more\ninformation, contact iaoffice@jpl.nasa.gov.\nThe software used in this innovation is\navailable for commercial licensing. Please contact Daniel Broderick of the California Institute of Technology at danielb@caltech.edu.\nRefer to NPO-47251.\n\nSptrace\nNASA\xe2\x80\x99s Jet Propulsion Laboratory, Pasadena, California\nSptrace is a general-purpose space\nutilization tracing system that is conceptually similar to the commercial\n\xe2\x80\x9cPurify\xe2\x80\x9d product used to detect leaks\nand other memory usage errors. It is\ndesigned to monitor space utilization\nin any sort of \xe2\x80\x9cheap,\xe2\x80\x9d i.e., a region of\ndata storage on some device (nominally memory; possibly shared and possibly persistent) with a flat address\nspace. This software can trace usage of\nshared and/or non-volatile storage in\naddition to private RAM (random access memory).\n\nSptrace is implemented as a set of C\nfunction calls that are invoked from\nwithin the software that is being examined. The function calls fall into two\nbroad classes: (1) functions that are embedded within the heap management\nsoftware [e.g., JPL\xe2\x80\x99s SDR (Simple Data\nRecorder) and PSM (Personal Space\nManagement) systems] to enable heap\nusage analysis by populating a virtual\ntime-sequenced \xe2\x80\x9clog\xe2\x80\x9d of usage activity,\nand (2) reporting functions that are embedded within the application program\nwhose behavior is suspect. For ease of\n\nuse, these functions may be wrapped privately inside public functions offered by\nthe heap management software. Sptrace\ncan be used for VxWorks or RTEMS realtime systems as easily as for Linux or\nOS/X systems.\nThis work was done by Scott C. Burleigh of\nACRO for NASA\xe2\x80\x99s Jet Propulsion Laboratory.\nFurther information is contained in a TSP\n(see page 1).\nThis software is available for commercial licensing. Please contact Daniel Broderick of\nthe California Institute of Technology at\ndanielb@caltech.edu. Refer to NPO-41626.\n\nS-Band POSIX Device Drivers for RTEMS\nNASA\xe2\x80\x99s Jet Propulsion Laboratory, Pasadena, California\nThis is a set of POSIX device driver level\nabstractions in the RTEMS RTOS (RealTime Executive for Multiprocessor Systems real-time operating system) to SBand radio hardware devices that have\nbeen instantiated in an FPGA (field-programmable gate array). These include\nA/D (analog-to-digital) sample capture,\nD/A (digital-to-analog) sample playback,\nPLL (phase-locked-loop) tuning, and\nPWM (pulse-width-modulation)-controlled gain. This software interfaces to Sband radio hardware in an attached Xilinx\n\nVirtex-2 FPGA. It uses plug-and-play device\ndiscovery to map memory to device IDs.\nInstead of interacting with hardware devices directly, using direct-memory\nmapped access at the application level,\nthis driver provides an application programming interface (API) offering that\neasily uses standard POSIX function calls.\nThis simplifies application programming,\nenables portability, and offers an additional level of protection to the hardware.\nThere are three separate device drivers\nincluded in this package: sband_device\n\n(ADC capture and DAC playback), pll_device (RF front end PLL tuning), and\npwm_device (RF front end AGC control).\nThis work was done by James P. Lux, Minh\nLang, Kenneth J. Peters, and Gregory H. Taylor of Caltech for NASA\xe2\x80\x99s Jet Propulsion Laboratory. For more information, contact iaoffice@jpl.nasa.gov.\nThis software is available for commercial licensing. Please contact Daniel Broderick of\nthe California Institute of Technology at\ndanielb@caltech.edu. Refer to NPO-47496.\n\nMaROS: Information Management Service\nNASA\xe2\x80\x99s Jet Propulsion Laboratory, Pasadena, California\nThis software is provided by the Mars\nRelay Operations Service (MaROS) task\nto a variety of Mars projects for the purpose of coordinating communications\nsessions between landed spacecraft assets and orbiting spacecraft assets at\nMars. The Information Management\nService centralizes a set of functions\n\nNASA Tech Briefs, September 2011\n\npreviously distributed across multiple\nspacecraft operations teams, and as\nsuch, greatly improves visibility into the\nend-to-end strategic coordination process. Most of the process revolves\naround the scheduling of communications sessions between the spacecraft\nduring periods of time when a landed\n\nasset on Mars is geometrically visible by\nan orbiting spacecraft. These \xe2\x80\x9crelay\xe2\x80\x9d sessions are used to transfer data both to\nand from the landed asset via the orbiting asset on behalf of Earth-based spacecraft operators.\nThis software component is an application process running as a Java virtual\n\n51\n\nmachine. The component provides all\nservice interfaces via a Representational\nState Transfer (REST) protocol over\n\xe2\x80\x9chttps\xe2\x80\x9d to external clients. There are two\ngeneral interaction modes with the service: upload and download of data. For\ndata upload, the service must execute\nlogic specific to the upload data type\nand trigger any applicable calculations\nincluding pass delivery latencies and\noverflight conflicts. For data download,\nthe software must retrieve and correlate\n\nrequested information and deliver to\nthe requesting client.\nThe provision of this service enables\nseveral key advancements over legacy\nprocesses and systems. For one, this service represents the first time that end-toend relay information is correlated into\na single shared repository. The software\nalso provides the first multimission latency calculator; previous latency calculations had been performed on a mission-by-mission basis.\n\nThis work was done by Daniel A. Allard,\nRoy E. Gladden, Jesse J. Wright, Franklin H.\nHy, Gregg R. Rabideau, and Michael N.\nWallick of Caltech for NASA\xe2\x80\x99s Jet Propulsion\nLaboratory. Further information is contained\nin a TSP (see page 1).\nThis software is available for commercial licensing. Please contact Daniel Broderick of the California Institute of Technology at danielb@caltech.edu. Refer to\nNPO-47454.\n\nInterplanetary Overlay Network Bundle Protocol\nImplementation\nNASA\xe2\x80\x99s Jet Propulsion Laboratory, Pasadena, California\nThe Interplanetary Overlay Network\n(ION) system\xe2\x80\x99s BP package, an implementation of the Delay-Tolerant Networking (DTN) Bundle Protocol (BP)\nand supporting services, has been specifically designed to be suitable for use on\ndeep-space robotic vehicles. Although\nthe ION BP implementation is unique in\nits use of zero-copy objects for high performance, and in its use of resource-sensitive rate control, it is fully interoperable\nwith other implementations of the BP\nspecification (Internet RFC 5050).\nThe ION BP implementation is built\nusing the same software infrastructure\nthat underlies the implementation of the\nCCSDS (Consultative Committee for\nSpace Data Systems) File Delivery Protocol (CFDP) built into the flight software\n\nof Deep Impact. It is designed to minimize resource consumption, while maximizing operational robustness. For example, no dynamic allocation of system\nmemory is required. Like all the other\nION packages, ION\xe2\x80\x99s BP implementation is designed to port readily between\nLinux and Solaris (for easy development\nand for ground system operations) and\nVxWorks (for flight systems operations).\nThe exact same source code is exercised\nin both environments.\nInitially included in the ION BP implementations are the following: libraries of\nfunctions used in constructing bundle\nforwarders and convergence-layer (CL)\ninput and output adapters; a simple prototype bundle forwarder and associated\nCL adapters designed to run over an IP-\n\nbased local area network; administrative\ntools for managing a simple DTN infrastructure built from these components; a\nbackground daemon process that silently\ndestroys bundles whose time-to-live intervals have expired; a library of functions\nexposed to applications, enabling them\nto issue and receive data encapsulated in\nDTN bundles; and some simple applications that can be used for system checkout and benchmarking.\nThis work was done by Scott C. Burleigh of\nARCO for NASA\xe2\x80\x99s Jet Propulsion Laboratory.\nFurther information is contained in a TSP\n(see page 1).\nThis software is available for commercial licensing. Please contact Daniel Broderick of\nthe California Institute of Technology at\ndanielb@caltech.edu. Refer to NPO-41628.\n\nSTRS SpaceWire FPGA Module\nNASA\xe2\x80\x99s Jet Propulsion Laboratory, Pasadena, California\nAn FPGA module leverages the previous work from Goddard Space Flight\nCenter (GSFC) relating to NASA\xe2\x80\x99s Space\nTelecommunications Radio System\n(STRS) project. The STRS SpaceWire\nFPGA Module is written in the Verilog\nRegister Transfer Level (RTL) language,\nand it encapsulates an unmodified\nGSFC core (which is written in VHDL).\nThe module has the necessary\ninputs/outputs (I/Os) and parameters\nto integrate seamlessly with the SPARC\nI/O FPGA Interface module (also developed for the STRS operating environment, OE).\nSoftware running on the SPARC\nprocessor can access the configuration\n\n52\n\nand status registers within the\nSpaceWire module. This allows software to control and monitor the\nSpaceWire functions, but it is also used\nto give software direct access to what is\ntransmitted and received through the\nlink. SpaceWire data characters can be\nsent/received through the software interface, as well as through the dedicated interface on the GSFC core. Similarly, SpaceWire time codes can be\nsent/received through the software interface or through a dedicated interface on the core.\nThis innovation is designed for plugand-play integration in the STRS OE.\nThe SpaceWire module simplifies the in-\n\nterfaces to the GSFC core, and synchronizes all I/O to a single clock. An interrupt output (with optional masking)\nidentifies time-sensitive events within\nthe module. Test modes were added to\nallow internal loopback of the\nSpaceWire link and internal loopback of\nthe client-side data interface.\nThis work was done by James P. Lux, Gregory H. Taylor, Minh Lang, and Ryan A.\nStern of Caltech for NASA\xe2\x80\x99s Jet Propulsion\nLaboratory. For more information, contact\niaoffice@jpl.nasa.gov.\nThis software is available for commercial licensing. Please contact Daniel Broderick of\nthe California Institute of Technology at\ndanielb@caltech.edu. Refer to NPO-47434.\n\nNASA Tech Briefs, September 2011\n\n'