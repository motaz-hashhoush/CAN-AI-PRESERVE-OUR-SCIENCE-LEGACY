b'Writing Custom Nagios Plugins\nJanice Singh\n\nIntroduction\n\xe2\x80\xa2 About the Presentation\n\xe2\x80\x93 audience\n\xe2\x80\xa2 anyone with basic nagios knowledge\n\xe2\x80\xa2 anyone with basic scripting/coding knowledge\n\xe2\x80\x93 what a plugin is\n\xe2\x80\x93 how to write one\n\xe2\x80\x93 troubleshooting\n\xe2\x80\xa2 About Me\n\xe2\x80\x93 work at NAS (NASA Advanced Supercomputing)\n\xe2\x80\x93 used Nagios for 5 years\n\xe2\x80\xa2 started at Nagios 2.10\n\xe2\x80\xa2 written/maintain 25+ plugins\n\nNASA Advanced Supercomputing\n\xe2\x80\xa2 Pleiades\n\xe2\x80\x93 11,312-node SGI ICE supercluster\n\xe2\x80\x93 184,800 cores\n\xe2\x80\xa2 Endeavour\n\xe2\x80\x93 2 node SGI shared memory system\n\xe2\x80\x93 1,536 cores\n\xe2\x80\xa2 Merope\n\xe2\x80\x93 1,152 node SGI cluster\n\xe2\x80\x93 13,824 cores\n\xe2\x80\xa2 Hyperwall visualization cluster\n\xe2\x80\x93 128-screen LCD wall arranged in 8x16 configuration\n\xe2\x80\x93 measures 23-ft. wide by 10-ft. high\n\xe2\x80\x93 2,560 processor cores\n\xe2\x80\xa2 Tape Storage - pDMF cluster\n\xe2\x80\x93 4 front ends\n\xe2\x80\x93 47 PB of unique file data stored\nRef: http://www.nas.nasa.gov/hecc/\n\nNagios at NASA Advanced Supercomputing\n\xe2\x80\xa2 one main Nagios server\n\xe2\x80\xa2 systems behind firewall send data by nrdp\n\xe2\x80\xa2 some clusters behind firewall\n\xe2\x80\x93 one cluster uses nrpe for gathering data\n\xe2\x80\x93 other clusters use ssh\n\xe2\x80\xa2 Post processor prepares visualization (HUD) data\n\xe2\x80\x93 separate daemon\n\xe2\x80\x93 Nagios APIs provide configuration and status data\n\xe2\x80\x93 provides file read by HUD\n\xe2\x80\x93 general architecture adaptable for other uses\n\nHUD\n\nPlugins \xe2\x80\x93 Nagios extensions\n\xe2\x80\xa2 Built-in plugins\n\xe2\x80\x93 Aren\xe2\x80\x99t truly built-in, but they come standard when you install\nnagios-plugins\n\xe2\x80\xa2 check_disk\n\xe2\x80\xa2 check_ping\n\xe2\x80\xa2 Custom plugins\n\xe2\x80\x93 Let you test anything\n\xe2\x80\x93 The sky\xe2\x80\x99s the limit - if you can code it, you can test it\n\nWhat are Plugins?\nNagios configuration to define a service that will use the plugin\ncheck_mydaemon.pl:\ndefine service {\nhost\nlinuxserver2\nservice_description Check MyDaemon\ncheck_command\ncheck_mydaemon\n}\ndefine command {\ncommand_name\ncommand_line\n}\n\ncheck_mydaemon\ncheck_mydaemon.pl \xe2\x80\x93w 5 \xe2\x80\x93c 10\n\nReasons to write your own plugin\n\xe2\x80\xa2 There isn\xe2\x80\x99t a plugin out there that tests what you want\n\xe2\x80\xa2 You need to test it differently\n\nGuidelines\n\xe2\x80\xa2 Any Language you want\n\xe2\x80\xa2 There is only one rule: it must return a nagios-accepted value\n\nok (green)\n\n0\n\nwarning (yellow)\n\n1\n\ncritical (red)\n\n2\n\nunknown (orange)\n\n3\n\nPlugin Psuedocode\n\xe2\x80\xa2 General outline of what a plugin needs to do:\n\xe2\x80\x93 initialize object (if object oriented code)\n\xe2\x80\x93 read in the arguments\n\xe2\x80\x93 set variables\n\xe2\x80\x93 do the test\n\xe2\x80\x93 return results\n\xe2\x80\xa2 This is just a suggestion\n\nFor Perl: Nagios::Plugin\n# Instantiate Nagios::Plugin object (the \'usage\' parameter is mandatory)\nmy $p = Nagios::Plugin->new(\nusage => \xe2\x80\x9dusage_string",\nversion => $version_number,\nblurb => \xe2\x80\x98brief info on plugin\',\nextra => \xe2\x80\x98extended info on plugin\xe2\x80\x99\n);\n\nFor Perl: Nagios::Plugin (cont).\n# adding an argument ex: check_mydaemon.pl -w\n# define help string neatly \xe2\x80\x93 use below instead of qq\nmy $hlp_strg = \xe2\x80\x98-w, --warning=INTEGER:INTEGER\\n\xe2\x80\x99 .\n\xe2\x80\x98 If omitted, warning is generated.\xe2\x80\x99;\n$p->add_arg(\nspec => \'warning|w=s\xe2\x80\x99,\nhelp => $hlp_strg\nrequired => 1,\ndefault => 10,\n);\n#accessing the argument\n$p->opts->warning\n\nFor Perl: Nagios::Plugin (cont).\n# finishing the script:\n$p->nagios_exit(\nreturn_code => $p->check_threshold($result),\nmessage => " info on what $result means"\n);\n# if you are not using check_threshold use text for return code:\nreturn_code => \xe2\x80\x98OK|WARNING|CRITICAL|UNKNOWN\xe2\x80\x99\n\nFor Perl: Nagios::Plugin (cont).\n\xe2\x80\xa2 When you\xe2\x80\x99ve done your code and have $result to compare\n\nto the thresholds:\n\xe2\x80\x93 $return_code = $p->check_threshold($result)\n\xe2\x80\x93 follows nagios convention of min:max\n\xe2\x80\xa2 check_mydaemon.pl \xe2\x80\x93w 5 will warn on anything > 5\n\xe2\x80\xa2 check_mydaemon.pl \xe2\x80\x93w :5 will warn on anything > 5\n\xe2\x80\xa2 check_mydaemon.pl \xe2\x80\x93w 5: will warn on anything < 5\n\xe2\x80\xa2 check_mydaemon.pl \xe2\x80\x93w 5:7 will warn on anything <5\nor >7\n\xe2\x80\xa2 if you overlap critical and warning, critical has\nprecedent\n\nOvercoming issues\n\xe2\x80\xa2 Test needs elevated privilege\n\xe2\x80\xa2 nagios can be run as root but is not secure\n\xe2\x80\x93 run the test as root via cronjob; write info to a flat file\n\xe2\x80\x93 use nagios plugin to read and process the file\n\xe2\x80\xa2 Output of the test was too big\n\xe2\x80\x93 the resulting nrdp command hit a kernel limit\n\xe2\x80\x93 use ssh to get the output to the main nagios server\nex: ssh blah blah\n\xe2\x80\x93 use plugin on the main server to process it\n\nNagios perfdata\n\xe2\x80\xa2 Nagios is designed to allow plugins to return optional\nperformance data in addition to normal status data\n\xe2\x80\x93 in nagios.cfg enable the process_performance_data option.\n\xe2\x80\x93 Nagios collects this information to be displayed on the GUI\n\xe2\x80\x93 in the format \xe2\x80\x9c|key1=value1,key2=value2,\xe2\x80\xa6,keyN=valueN\n\xe2\x80\x93 this can be anything that has a numerical value\n\nTroubleshooting\n\xe2\x80\xa2 The Nagios display says: return code XXX is out of bounds\n\xe2\x80\x93 your script returns anything other than 0,1,2,3\n\xe2\x80\x93 otherwise it is a nagios error.\n\xe2\x80\xa2 Google is your friend\n\xe2\x80\x93 ex: 13 usually means a permission error\n\xe2\x80\x93 sometimes all it tells you is \xe2\x80\x9csomething went wrong\xe2\x80\x9d\n\xe2\x80\x93 these disappeared at our site when we switched to\nNagios::Plugin\n\xe2\x80\xa2 try running the plugin from the command line\n\xe2\x80\x93 verify who you are running as\n\xe2\x80\x93 verify the arguments passed in\n\nTroubleshooting (cont).\n\xe2\x80\xa2 Timing is everything!\n\xe2\x80\x93 launching too many processes\n\xe2\x80\x93 files can get overwritten\n\xe2\x80\xa2 by cron jobs\n\xe2\x80\xa2 by multiple nagios processes\n\xe2\x80\xa2 if perfdata is enabled, the perfdata log is the most useful\n\nQuestions\n\xe2\x80\xa2 Any Questions\n\n'