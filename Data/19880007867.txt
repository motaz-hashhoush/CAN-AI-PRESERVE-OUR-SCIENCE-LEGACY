b'N 8 8- 1 7 2 5 1\nAUTWlATlC ROUTING MODULE\n\nJanice A. Malip\nSystems Control Technology, I n c .\n1801 Page M i l l Road\nPalo Alto, C a l i f o r n i a 9430.3\n\nABSTRACT\nAutomatic Routing Module (ARM), a t o o l t o p a r t i a l l y automate A i r Launched Cruise M i s s i l e (ALCM)\nrouting, i s i n s t a l l e d a t HQ-SAC and i s used operationally by JSTPS mission planners. For any\naccessible launch point/target p a i r , nRM creates f l y a b l e routes that, w i t h i n the f i d e l i t y o f the\nmodels, are optimal i n terms o f t h r e a t avoidance, clobber avoidance, and adherence t o vehicle and\nplanning constraints.\nAlthough h i g h l y algorithmic, ARM i s an expert system i n the sense t h a t i t : (1) r a p i d l y creates plans\nbased on h e u r i s t i c s , o r rules, supplied by planning experts; (2) relieves planners o f much o f the\ntedious and time-consuming portions o f the route planning process; ( 3 ) supports both expert and\nnon-expert planners i n route creation; (4) allows the planner t o change the r u l e base; (5) recommends a\ncourse o f a c t i o n and provides the planner w i t h a means t o modify t h a t recommendation; (6) provides a\nmenu-driven, user f r i e n d l y i n t e r f a c e plus i n t e r a c t i v e graphics; and ( 7 ) r e l i e s on a statespace, paths,\nand decision t r e e t h a t must be searched, complete w i t h cost function, t o a r r i v e a t an optimal route.\nBecause o f the h e u r i s t i c s applied, ARM-generated routes closely resemble manually-generated routes i n\nr o u t i n e cases. I n more complex cases, ARM\'S a b i l i t y t o accumulate and assess t h r e a t danger i n\nthree-dimensions and trade t h a t danger o f f with the p r o b a b i l i t y o f ground clobber r e s u l t s i n the safest\npath around o r through d i f f i c u l t areas. The t o o l s available p r i o r t o ARM d i d not provide the planner\nw i t h enough information o r present i t i n such a way t h a t ensured he would select this safest path.\n1.\n\nINTRODUCTION\n\nSystems Control Technology (SCT) began working on basic research i n optimization applied t o automated\nplanning systems i n 1978 under DARPA sponsorship. The motivation f o r this work was t o :\n1.\n2.\n\n3.\n4.\n\nreduce planning t i m e and manpower requirements,\nimprove planning effectiveness,\nproduce timely responses t o scenario changes, and\nuse e x i s t i n g technologies t o solve the problem.\n\nThese e f f o r t s resulted i n a basic approach t o planning and a demonstration model r e f e r r e d t o as\nAUTOPATH. AUTOPATH, as outlined i n Figure 1, has broad a p p l i c a b i l i t y t o a v a r i e t y o f mission planning\nproblems. I t has already been successfully used i n cruise m i s s i l e routing, force l e v e l planning, u n i t\nl e v e l planning, asset allocation-, and an on-board processing experiment.\n\nERR"\nTHREATS\nTARGETS\nWEAPONS SYSTEMS\nNACRAFTPERFORMANCE\nPLANNING OBJECTIVES\nP U " N G CONSTFWNTS\n\nAUTOPATH\nTECHNOLOGY\n\n*STRATEGIC MISSIONS\nBOMBER AND CRUISE MlsSlLE\n\n.TAcncm\n\nMS N\nSO\nII\nTAcTlcALAlRcRAFT\n\n*SINGLE SORTIE PVINS\n\n* OPERATIONSRESEARCHTECWKXIES\ntiEuwm.s\n*DATA EASE MANAGEMENT\n*PERFORMANCEMEASURES\n\n* MULTIPLE AIRCRAFTMULTIPLETARGETS\n\nFigure 1 The AUTOPATH Technology Operates on M u l t i p l e Data Sources w i t h Sophisticated\nMathematical Algorithms and Optimi,zation \'Techniques t o Generate a Variety\no f High Level Mission Plans\n\n327\n\nThis paper focuses on SCT\'s experience i n using t h i s b a s i c tec.hnology t o develop an automated A i r\nLaunched Cruise M i s s i l e (ALCM) r o u t i n g t o o l f o r the J o i n t S t r a t e g i c Target Planning S t a f f (JSTPS) a t\nO f f u t t AFB. The JSTPS i s colocated w i t h Headquarters, Strategic A i r Command (HQ SAC). The AUTOPATH\nresearch and development e f f o r t s l a i d the groundwork f o r a prototype system t h a t was i n s t a l l e d a t HQ\nSAC i n 1984. The Automatic Routing Module (ARM) t h a t grew out o f the prototype was i n s t a l l e d i n 1985.\nThe transformation from research and development t o an operational system was a complete success; ARM\ni s used operationally a t HQ-SAC t o a i d i n the ALCM planning p o r t i o n o f the SIOP. ARM i s a major\nsoftware module. .This paper i s intended t o b r i e f l y h i g h l i g h t c e r t a i n aspects o f the ARM software and\ndevelopment experience r a t h e r than t o cover any aspect o f ARM i n d e t a i l . I n t h a t l i g h t , the t o p i c s\ncovered are an overview o f the p r o j e c t and i t s goals; the basic technology used t o solve the problem;\nthe implementation o f the solution; and lessons learned from the p r o j e c t .\n2.\n\nARM OVERVIEW\n\nThe RLCM planning problem has many complex p a r t s , a l l o f which are labor and/or computer intensive\nprocesses. Computer processing plays a major r o l e i n the planning, p r i m a r i l y i n creating and managing\ndata bases and i n analyzing and evaluating missions t h a t were generated by expert human planners. SCT\nset o u t t o automate the mission generation aspect o f planning beginning i n 1983.\n2.1\n\nThe Planning Problem\n\nThe mission generation planning problem i s t o create a f l y a b l e r o u t e between a launch p o i n t and a\nt a r g e t . This problem i s e a s i l y stated but not e a s i l y solved. The ALCM i s a long-range,\n.errain-following m i s s i l e . I t must f o l l o w a programmed path t h a t guides i t from launch t o t h e t a r g e t\nwhile ensuring t h a t i t does not run i n t o any high ground ( i . e . , clobber). Using the t e r r a i n f o l l o w i n g\nc a p a b i l i t y , the m i s s i l e \' s path must a l s o avoid f l y i n g i n t o enemy defenses o r r i s k being destroyed\nbefore reaching the t a r g e t . Avoiding clobber and enemy defenses along a s i n g l e f l i g h t path i s a\nd i f f i c u l t task t h a t i s compounded by a growing navigation e r r o r as the m i s s i l e progresses t o the\nt a r g e t . To keep t h i s e r r o r under c o n t r o l , the I n e r t i a l Navigation System requires p e r i o d i c updates\nfrom a f i n i t e number o f h i g h l y surveyed areas o f t e r r a i n known as TERCOMs. Therefore, the f i n a l route\nmust take advantage o f the a v a i l a b l e TERCOMs and s t i l l avoid ground clobber and enemy defenses.\nA human planner uses d e t a i l e d maps which include the defenses and TERCOMs t o perform t h i s r o u t i n g\ntask. The planner has t o determine the best path through the defenses and the best a l t i t u d e f o r each\nl e g o f the f l i g h t . This i s a gross oversimplication o f the task because o f many other considerations\nand constraints, some o f which w i l l be discussed l a t e r . The planner\'s task becomes very d i f f i c u l t i n\nh e a v i l y defended areas and i s f u r t h e r complicated by the number o f missions t o be planned.\n\nOnce s a t i s f i e d w i t h a mission, the planner provides the mission\'s f l i g h t plan t o very d e t a i l e d\nevaluation software which uses accurate vehicle performance models, l o c a l t e r r a i n , and d e t a i l e d t h r e a t\nmodels t o determine how good the path r e a l l y i s . The software can make some modifications t o the path,\nb u t generally flags e r r o r s f o r the planner t o rethink, f i x , and resubmit the route f o r analysis.\nBecause o f the f i d e l i t y o f the models, t h i s software has been slow, making good candidate routes on the\nf i r s t pass h i g h l y desirable.\nThe o b j e c t i v e o f the ARM program i s t o create good q u a l i t y candidate routes and t o do so i n a t i m e l y\nmanner, i . e . , less than t e n seconds each. By meeting t h i s objective, ARM r e l i e v e d the mission planners\no f much of the tedious and time-consuming portions o f the route planning process. I t freed them t o\nspend more t i m e on d i f f i c u l t routes t h a t do n o t f o l l o w a l l the r u l e s given t o the automated system, t o\nf i n e tune routes, o r t o work other problems.\nARM can be given one o r many missions, described by launch p o i n t / t a r g e t p a i r s , t o plan. For each\nmission, ARM creates a f l y a b l e route t h a t i s optimal i n terms o f t h r e a t avoidance, clobber avoidance,\nand adherence t o r o u t i n g c o n s t r a i n t s . Routing constraints include vehicle performance c h a r a c t e r i s t i c s\nand h e u r i s t i c s , o r r u l e s o f thumb, that a mission planner would apply i f the route were t o be created\nmanually. Some o f these r u l e s are given i n Table I.\n\nBecause o f the h e u r i s t i c s applied, ARM-generated routes closely resemble manually-generated routes i n\nr o u t i n e cases. Manually created routes and A R M generated routes may diverge i n more complex cases.\nA R M \' S use o f three-dimensional t h r e a t models allows the system t o r a p i d l y determine the safest path\naround o r through areas o f high danger. This a b i l i t y t o use a d e t e r m i n i s t i c approach r a t h e r than t o\nr e l y on the human eye and b r a i n t o s o r t through the myriad o f p b s s i b i l t i e s r e s u l t s i n a r o u t e o f equal\no r b e t t e r q u a l i t y than a manually generated route. Obviously, these complex cases a r e the ones f o r\nwhich ARM saves the most human planner time.\n\n328\n\nTable I\nVEHICLE COYSTRAIUTS\n\nRRM Rule Base Examples\nP W Y I Y O SULKS\n\nPLAnrIffi HmJRIStICS\n\nelimbldive rates\n\ne terrain avoidance\n\n0\n\nturn radius\n\ne threat avOidMCe\n\ne apeed\n\nminiulmuinr\nnumber of TKRaYLS\nper mute\n\ne avoidance\n\ne maximum f u e l load\n\nm i n k f u e l reaerv(\n\nw miniuumlmuilua\n\ndistance b e t m n\nroute seylcntation\npoint.\n\ne Uarhead Arming\nWaneuver\nI n e r t i a l Yavigation\nsystem\n\ne m i n i r u acceptable\ntarget damwe\n\nupdate frequency\n\ne route disperaion\ne\n\ntamet avoidanCe\nouiun diatance\nbetween T K R C W\n\n0 r\n\nU d\n\n8CCWhted\n\ndanger\n\n2.2\n\nNan-in-the-Loop\n\nWhiie ARM i s a success, automation i n mission planning has not reached the stage where the\nman-in-the-loop i s not required. Rs one would expect, RRM requires a considerable amount o f external\ndata. Target, launch point, TERCOM, and defense data are j u s t some o f the data t h a t must be provided\nand v e r i f i e d . Nominally t h i s i s the job o f one person, the Mission Controller/Data Base Manager. I n\naddition, a l l o f the r u l e s must be provided. These are saved from session t o session, but can be\nchanged as desired.\nARM provides the c a p a b i l i t y t o review the routes and a l l intermediate information. The planner module\ni s completely i n t e r a c t i v e and supports f u l l , high-resolution, c o l o r graphics displays o f the scenario,\nincluding latitude/longitude g r i d , launch points, targets, TERCOMs, and defenses. One very useful\ndisplay feature t h a t i s provided and t h a t i s missing from planning maps i s altitude-dependent danger\ncontours f o r clobber danger, enemy defenses, o r combined danger plus t o t a l danger contours a t the\noptimal a l t i t u d e f o r each statespace c e l l . With these displays, the planner has a much b e t t e r\nunderstanding o f why RRM chose a c e r t a i n t h r e a t penetration, f o r example.\n\nThe graphics module a l s o allows the planner t o r a p i d l y change the recommended route and reevaluate i t .\nThe planner has f u l l c o n t r o l over changes t o T R O selection, navigation p o i n t placement, leg-by-leg\nECM\na l t i t u d e and t u r n radius selection, as w e l l as launch p o i n t and t a r g e t s p e c i f i c a t i o n .\n2.3\n\nFIRM Rs Fn Expert System\nI\n\nRRM i s no$ a t r u e expert system as t h a t term has come t o be accepted today.\nthe sense that i t :\n1.\n2.\n3.\n4.\n5.\n\n6.\n\nARM i s an expert system i n\n\ncreates plans based on r u l e s supplied by planning experts,\nsupports the planner i n h i s task,\nallows the planner t o change i t s rules,\nrecommends a course o f a c t i o n and provides the planner w i t h a means t o modify t h a t\nrecommendation,\nprovides a user-friendly, menu-driven i n t e r f a c e plus a graphics display t o support the\nplanning process and understanding o f the problem and i t s solution, and\nr e l i e s on a statespace, paths, and decision t r e e t h a t must be searched, complete w i t h cost\nfunction, t o a r r i v e a t an optimal route.\n\nFIRM i s not a standard expert system i n the sense t h a t i t i s w r i t t e n i n FORTRRN 77 rather than i n a\nsymbolic language, i s highly algorithmic, and i s data and 1/0 intensive.\n2.4\n\nSummary\n\nThe RRM system i s l a r g e l y a parameter o r data d r i v e n system t h a t provides mission planners w i t h an\ne f f e c t i v e t o o l f o r generating good q u a l i t y candidate routes t o be input t o the d e t a i l e d evaluation\n\n329\n\nprograms. ARM f u r t h e r provides the c a p a b i l i t y t o support real-time, r a p i d - s t r i k e r o u t e generation as\nw e l l as studies o f proposed vehicle modifications, r o u t i n g l o g i c a l t e r n a t i v e s , t h r e a t analyses,\nmodeling a l t e r n a t i v e s , and various "what-if" hypotheses.\n3.\n\nARM TECHNOLOGY\n\nThe SCT AUTOPATH approach i s based on decomposing the o v e r a l l problem i n t o several smaller, manageable\npieces. The i n t e n t i s t o d e f i n e f u n c t i o n a l l y self-contained modules t h a t are computationally p r a c t i c a l .\nf i g u r e 2 provides a f i r s t l e v e l decomposition.of the SCT FIUTOPATH mission planning approach. The f i v e\nmain steps pictured are described i n mare d e t a i l below, as they r e l a t e t o the cruise m i s s i l e case.\n\nf\n\nFigure 2\n\nARM Incorporates Many M i l i t a r y Planning Factors\n\nStep 1: Statespace Construction: The statespace r e f l e c t s a three-dimensional quantization o f the\ngeographic area o f i n t e r e s t . The geographic area i s divided i n t o l a t i t u d e - l o n g i t u d e c e l l s w i t h\nd i s c r e t e a l t i t u d e l e v e l s . FIssociated w i t h each c e l l , and with each o f the e i g h t basic d i r e c t i o n s o f\nt r a v e l i n g through the c e l l , i s the \' c o s t \' o f t r a v e r s i n g the c e l l . This cost i s based p r i m a r i l y on the\ndanger from enemy defenses; however, any number o f other cost f a c t o r s can be considered. For the\nc r u i s e missile, i t i s important t o consider the p r o b a b i l i t y o f the m i s s i l e running i n t o the ground.\nThus, FIRM also uses models t h a t p r e d i c t \'ground clobber\' p r o b a b i l i t y as a f u n c t i o n o f the v e h i c l e \' s\na l t i t u d e and the t e r r a i n roughness. The t e r r a i n roughness i s extracted from D i g i t a l T e r r a i n Elevation\nOata (DTED). Danger from the enemy defenses are incorporated i n t o the statespace through the\ncross-range and down-range t h r e a t models ( o r t h r e a t \'templates\'). These templates are used t o estimate\nthe danger t o the vehicle as a f u n c t i o n o f the distance and o r i e n t a t i o n from a p a r t i c u l a r t h r e a t type.\nA example o f such a template i s given i n Figure 3 .\nn\nStep 2:\n\'Node\' Construction: I n most mission planning applications, the vehicle has a number o f\nr o u t i n g constraints t h a t have t o be met. Most o f these can be modeled by prescribing various\ngeographic points, o r nodes, through which ( o r through some o f which) the vehicle must t r a v e l . I n ARM,\nthe nodes are launch points, TERCOMs, and t a r g e t s . A complete mission can be represented by a sequence\no f nodes. The o b j e c t i v e o f the node construction step i s t o d e f i n e a network t h a t describes a l l\npossible p a i r s o f nodes between which an ALCM could p o t e n t i a l l y t r a v e l i n the given scenario. I t i s\nimportant t o minimize the size o f the t h i s network. Thus, as many constraints as possible are\nconsidered. For example, i f navigation updates are required every \' x \' miles, the connections longer\nthan t h i s are not included i n the network. Quotas o f accessible nodes are also e f f e c t i v e . These\nconstraints are e i t h e r hard constraints d i c t a t e d by the vehicle o r l o g i c a l h e u r i s t i c s that are key t o\nplanning f o r a s p e c i f i c system. These constraints are defined during the \'knowledge a c q u i s i t i o n \' o r\nrequirements analysis phase o f the e f f o r t .\nStep 3: Route Segment Generation: The purpose o f t h i s step i s t o compute optimum route segments, o r\narcs, between each o f the node p a i r s i n the node network. For each node p a i r , one node i s the o r i g i n\nnode and the other i s the d e s t i n a t i o n node. For each d e s t i n a t i o n node, a multipass dynamic programming\nalgorithm (MDPA), i s executed on a subset o f the statespace that contains the node pair. The MDPA\ncomputes an optimum set o f controls ( d i r e c t i o n s o f t r a v e l ) f o r each c e l l i n the statespace t o the\n\n330\n\nFigure 3 Sample Threat Template f o r a Left-to-Right Heading\ndestination node. Following the MDPR, the route retrieval algorithm i s used t o extract the optimum\nroute segment that connects the origin node t o t h e destination node. The route retrieval algorithms\nalso perform whatever route smoothing i s required. Once the route segment has been extracted, the\nt o t a l t r a n s i t cost between the nodes i s known and i s stored f o r further processing.\nStep 4 : Route Generation: The next step i n the process i s t o l i n k these route segments into nearly\ncomplete routes, o r paths. To preserve f l e x i b i l i t y and t o reduce the number o f paths, the launch\npoints and targets are not l i n k e d t o the routes during this step. The basic algorithm used i s the\nDijkstra shortest path algorithm which provides a very efficient way t o extract the set of route\nsegments that produces a minimum cost route between an initial and terminal llXDil node pair. Since\neach initial TERCOM can ultimately reach many other TERCOMs, the Dijkstra algorithm actually results i n\na tree f o r each i n i t i a l TERCOM containing the best paths from the fERCOM to every other TERCOM it can\npossibly reach. The t r a n s i t cost f o r each p a t h of each t r e e i s known and preserved.\nStep 5: Route Selection and Evaluation: I n FIRM, the starting nodes i n the Dijkstra search s e t are\nT R O s accessible t o launch points and the terminal nodes are T R O s accessible t o targets. The\nECM\nECM\no\nnumber of paths t h a t can connect a launch point/target pair is n w a inanageable number w i t h the t r a n s i t\ncost of each readily available. Working backward from the target, it i s a simple matter t o select the\ntree and path t h a t , together w i t h the cost of traveling from the launch point to the tree and from the\nt r e e t o the target, optimizes either the probability of a r r i v a l (Pa) o r the probability of Damage (Pd)\nfor the launch point/target pair. I n doing so, FIRM evaluates a l l potential routes i t investigates\nagainst the planning c r i t e r i a , but saves only the route description and evaluaton f o r the route it\nselects. Figure 4 shows a very simplistic example of one tree and i t s accessible launch points and\ntargets.\nThis metnod of attaching the launch points and targets as the l a s t step provides the capability t o\nq u i c k l y l i n k different launch points o r targets to a validated p a t h .\n\nFigure 4 Sample Route Selection Options\n\n33 1\n\n4.\n\nIMPLEMENTATION CONSIDERATIONS\n\nBecause o f the r u l e base and decision l o g i c used i n ARM, one may expect t h a t i t i s w r i t t e n i n a\nsymbolic language. I t i s n o t . ARM i s implemented i n FORTRAN /7 and i n s t a l l e d on an I B M 3090-200 and\nVAX 11/780. The I B M i s the primary host w i t h the VAX used f o r demonstration and o f f - s i t e development\nand maintenance. FORTRAN was chosen f o r a v a r i e t y o f reasons and, i n retrospect, appears t o have been\na reasonable choice. The d r i v i n g f a c t o r s were:\n\n-\n\n-\n\n-\n\nh i g h l y algorithmic problem solution,\nmanipulation o f up t o two gigabytes o f data,\nrequired computational and I/O speed,\nl i m i t e d v i r t u a l memory on the t a r g e t I B M host computer necessitating overlays o r task\nswapping,\nlower development cost using the FORTRAN prototype as a baseline, and\nthe available compilers on the host computer a t the time.\n\nA l l o f these f a c t o r s precluded selecting a symbolic language. This l i s t o f constraints i s s t i l l v a l i d\nfour years a f t e r the i n i t i a l choice was made. C e r t a i n l y FOKrRAN i s not the only answer f o r the near\nfuture, and technology i s r a p i d l y advancing; however, a caution must be raised here. While\ndemonstrations w r i t t e n i n symbolic languages may appear t o solve the problem a t hand, constraints such\nas those l i s t e d above should be evaluated before launching i n t o the development o f an operational\nautomated system w r i t t e n i n a symbolic language.\n\nOnce the language was chosen, core space, a l l o c a t i o n o f d i s k space, computational speed, and I / O speed\nbecame the c r i t i c a l design f a c t o r s . As configured, the host computer provides only about seven\nmegabytes o f v i r t u a l memory. This i s an absolute physical c o n s t r a i n t while a l l the others were\np r a c t i c a l requirements. The v i r t u a l memory c o n s t r a i n t was s a t i s f i e d by using code overlays, increased\nd i s k 1/0 and, therefore, execution time, and a small loss o f modeling f i d e l i t y , e.g., l a r g e r statespace\nquantization.\nObviously, the solutions t o the core space problem compounded the other design problems.\n\nExecution\n\nt i m e f o r arc and t r e e generation became an issue because o f the increased 1/0 and the sheer volume o f\n\ndata t o be processed. There were a l i m i t e d number o f d i s k packs available, and we desired not t o have a\ns i n g l e f i l e span two d i s k packs. I f r u n unrestricted, ARM would generate arcs between each pair o f\nnodes and create a t r e e f o r every TERCOM. This could r e s u l t i n hundreds o f thousands o f arcs and many\nmore trees than necessary. These problems were mostly solved by the h e u r i s t i c s . For instance,\nminimum/maximum TERCOM separation i s considered plus a quota system f o r determining the number o f arcs\nthat w i l l be generated f o r a IERCOM. Trees need only be b u i l t f o r those TERCOMs accessible t o a launch\np o i n t . Therefore, algorithms used i n the prototype had t o be redesigned t o be more time e f f i c i e n t .\nA commercial data base management system might have made the design easier, b u t a t l e a s t a t that time,\nwould not have provided the speed needed. The data base management system i s w r i t t e n e n t i r e l y i n\nFORTRAN and is adapted t o ARM\'S needs. Many linked l i s t s are used r a t h e r than wasting d i s k space f o r\nf i x e d format f i l e s . With the larger, f a s t e r disks a v a i l a b l e now, t h a t same decision might n o t be made\ntoday.\n\nP o r t a b i l i t y was not a design issue, but several standards invoked on the p r o j e c t , mostly t o promote\nm a i n t a i n a b i l i t y , a c t u a l l y provided a reasonable b a s i s f o r a portable system:\n\n-\n\n-\n\nVery few extensions o f FORTRAN 77.were used;\nThe only c a l l s t o IBM-specific functions are t o open f i l e s and t o the system clock;\nNo machine s p e c i f i c data base management system;\nA core standard graphics package i s used;\nThe overlays are not embedded i n the code.\n\nToday, the software can be run under I B M MVS, VM/CMS,\n5.\n\nand MicroVAX on upward under VMS.\n\nLESSONS LEARNED\n\nThe ARM p r o j e c t s t a r t e d i n the Summer o f 1983 r e s u l t i n g i n a Phase 0 prototype i n s t a l l e d i n the Summer\nof 1984; a Phase Iprototype i n the F a l l o f 1984; and an operational system i n the F a l l o f 1985. I t i s\nc u r r e n t l y i n a maintenance and m o d i f i c a t i o n mode. During these phases, there have been several\nhard-learned lessons t h a t p o i n t out t h a t no shortcuts can be taken i n the development o f an operational\nsystem. The main lessons were:\n\n--\n\nF l e x i b i l i t y breeds user confusion and introduces a source o f errors;\nAutomation has an impact on operational procedures;\nDemonstration models only solve one aspect o f the design problem;\n\n332\n\n-\n\n-\n\nEnd user involvement i s c r i t i c a l from the beginning o f the p r o j e c t t o f o s t e r t o t a l acceptance\no f and e f f i c i e n t t r a n s i t i o n t o the use o f the end product;\nFrequent user t r a i n i n g i s required i n l i g h t o f frequent user ( m i l i t a r y ) turnover and program\nmod i f i c a t i o n s ;\nAcceptance t e s t i n g should be conducted w i t h i n the t o t a l operational environment--not as a\nstand-alone program;\nRedundancy i n documentation i s a configuration management nightmare;\nDocumentation standards do not guarantee a document t h a t leads the user through the system\nstep-by-step.\n\nThe l a s t f i v e of the above problems are common t o any system and need no f u r t h e r explanation. The\nf i r s t three have major implications f o r large automation e f f o r t s l i k e ARM and deserve more\nelaboration. The need f o r f l e x i b i l i t y i n a large automated system cannot be denied. F l e x i b i l i t y i n\nClRM i s provided through parameterization. There are several hundred tuning parameters i n the system\nt h a t are used t o ensure r o u t e q u a l i t y . Some o f them describe the planning h e u r i s t i c s , some the\nplanning constraints, some the vehicle performance c a p a b i l i t i e s , and s t i l l others r e f e r t o the options\nsuch as t e r r a i n masking. This places a heavy burden on accurate documentation plus an overwhelming\ntask on the selected users t o review the documentation and the chosen data s e t t i n g s t o ensure sound\nvalues. There i s the added problem o f determining which l e v e l s o f users should have permission t o\nchange which variables.\nThe f o l l o w i n g steps have been implemented i n ARM t o help solve these problems:\n\n-\n\n-\n\no p t i o n a l range o f value check on each numeric variable, e.g., 0\nvalue check on monotonic sequences,\nvalue checks on some i n t e r r e l a t e d variables,\nuser access l e v e l s f o r each variable,\nuser write-access l e v e l s f o r each f i l e , and\ncommon on-screen o r o f f - l i n e data base update c a p a b i l i t y .\n\n<\n\nPs\n\n<\n\n1.0,\n\nYet, none o f these tools, nor extensions o f them, r e l i e v e the primary data base manager from having t o\nreview the data base f o r consistency. What i s needed f o r FIRM and systems o f i t s kind are f r o n t end\nsystems t h a t w i l l review the data base and explain t o the user the consequences o f h i s composite data\nbase. Such a system should be d i r e c t e d a t i n d i v i d u a l modules and a t the system as a whole.\nOperational Procedures are i n v a r i a b l y a l t e r e d by the i n t r o d u c t i o n o f a new t o o l t h a t automates a\np o r t i o n o f the procedures. The t o o l automates a process, but i t i n t u r n requires support (e.g., data\nbase preparation, program monitoring, computer graphics replacing paper maps and drawing, a d d i t i o n a l\nemphasis on other processes). Hopefully, t h i s does not take more time than the o r i g i n a l process t h a t\nhas been automated! This change i n procedures needs t o be w e l l thought o u t and new r o l e s assigned t o\nt h e s t a f f who w i l l use the t o o l w e l l i n advance o f i t s i n t r o d u c t i o n .\nThe f i n a l points are d i r e c t e d a t demonstration models. A demonstration model may show a s o l u t i o n t o be\nf e a s i b l e but i n f a c t the s o l u t i o n may not be p r a c t i c a l when a l l the r e a l world constraints are\napplied. I n ARM\'S case, the enormous data bases and core space l i m i t a t i o n s were unknown when the model\nwas b u i l t and were not considered i n the model. Many o f the algorithms used had t o be modified t o\nsupport these c o n s t r a i n t s . Thus, i t i s not necessarily t r u e t h a t the algorithms used f o r a p r o t o t y p e\ncan o r shauld be applied t o a system r e q u i r i n g an operational data base many orders o f magnitude l a r g e r\nthan the t e s t case. For other prototypes, the lesson i s t h a t these problems should be determined\nbefore the hardware i s selected. I n the FIRM case, t h a t was not an option. Fortunately, the ORM\nsoftware was u l t i m a t e l y ported t o a much more powerful I B M computer than the o r i g i n a l t a r g e t machine.\nThis allowed the intermediate data base t o be generated i n about one day. This equates t o a saving o f\nmonths o f human e f f o r t f o r each planning cycle.\nA f u r t h e r problem w i t h demonstration models f o r brand-new systems i s t h a t they may only solve one p a r t\nof the problem. Figure 5 shows the components t h a t contributed t o the operational version o f ORM.\nOnly the portions of the problem indicated i n gray were addressed i n the demonstration model. This i s\nt y p i c a l o f software r e s u l t i n g from research and development e f f o r t s . The p r e v a i l i n g thought i s t h a t\nthe operational system should not cost very much since the problem has already been solved. The f a c t\ni s t h a t these other areas are equally important and become a d r i v i n g cost f a c t o r .\n\n333\n\nFigure 5\n\n6.\n\nCOMPUTER BASED\nANALYSIS. PLANNING,ALLOCATKN.\nASSESSMENT A D\n\nSuccessful Application o f Optimization Requires\nMore Than an Understanding o f the Algorithms\n\nCONCLUSION\n\nI R M i s a powerful and extremely f l e x i b l e t o o l t o support ALCM planning. The FIRM p r o j e c t has shown\nthat, u i t h ingenuity, i t i s possible t o automate a large problem. ARM has e f f e c t i v e l y automated the\n\ngeneration o f candidate FlLcM missions f r e e i n g the mission planners from tedious and time-consuming\nproblems t o plan more e f f i c i e n t l y and concentrate on more d i f f i c u l t problems.\nKICKNOWLEDGERENTS\n\nI would l i k e t o thank everyone on the ARM team from SCT, JSTPS, SAC, and DARPA who believed i n the\np r o j e c t and worked so hard t o make FIRM the success t h a t i t i s today. Steve Rainbolt, M i l t Grossberg,\nJack Murphy, Kemp Deicke, John Russell, Sandy Henninger, Carol Tycko, John Mordeson, Tim C r o l l , Rich\nVargus, E l l e n Rubin, and Tina Youngs from SCT and Maj. Dale Richter, Maj. C l i f Banner, Lt.Co1. Dave\nEnos, and Maj. Fred Guice from SIX-JSTPS deserve special r e c o g n i t i o n f o r t h e i r r o l e s i n developing,\nguiding, and maintaining the ARM system.\nREFERENCES\n1.\n\n2.\n3.\n4.\n\n"User\'s Manual, 1986 Automatic Routing Module (ARM) Maintenance and Enhancement Software," 8008,\nSystems Control Technology I n c . , Palo Alto, C a l i f o r n i a , September, 1986.\n"Data Base S p e c i f i c a t i o n , 1986 Automatic Routing Module (ARM) Maintenance and Enhancement\nSoftware," 8021. Systems Control Technology Inc., Palo Fllto, C a l i f o r n i a , September, 1986.\n"System/Subsystem Specification, Program Specification, and Maintenance Manual, 1986 Automatic\nRouting Module (ARM) Maintenance and Enhancement Software," 8016, Systems Control Technology I n c . ,\nPalo Alto, C a l i f o r n i a , September, \'1986.\n"Software I n t e r f a c e Control Document, Volume I, 1986 Flutomat-ic Rduting Module (ARM) Maintenance\nand Enhancement," 8012. Systems Control Technology I n c . , Palo Alto, C a l i f o r n i a , September, 1986.\n\n334\n\n'