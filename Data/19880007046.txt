b'N88-16428\n\nPrototype\n\nResupply\n\nScheduler\n\nSteve Tanner and Angi Hughes\nGeneral Research Corporation\n635 Discovery Drive\nHuntsville, AL 35806\nJim Byrd\nUnited Space Boosters Incorporated\n188 Sparkman\nDrive\nHuntsville, AL 35805\n\nAbstract\nResupply scheduling for the Space Station presents some\nformidable\nlogistics problems.\nOne of the most basic problems is\nassigning supplies to a series of shuttle resupply missions.\nSome\nsupplies relate to life-support, others are required by critical\nexperiments,\nand still others are necessary for routine maintenance.\nIf an emergency occurs or the space station inventories are depleted\nunexpectedly,\nresupply plans must be quickly adapted.\nThe speed at\nwhich a logistics expert can replan schedules is a critical factor in the\nsuccessful operation of the space station. The logistics expert\nrequires a great deal of knowledge to construct a resupply schedule\nwhich satisfies the life-support, experiment-support,\nand maintenance\nconstraints.\nThe Artificial Intelligence Department of General Research\nCorporation (Huntsville) with the logistics expertise of United Space\nBoosters Incorporated constructed a prototype logistics expert system\nwhich constructs resupply schedules. This prototype is able to\nreconstruct feasible resupply plans and, in addition, analysts can use\nthe system to evaluate the impact of adding, deleting or modifying\nlaunches, cargo space, experiments, etc.\n1 Introduction\nIn this paper the Heuristic Assistance in Tactical Scheduling (HATS)\nprototype system is described.\nThis system was built by Steve Tanner and\nAngi Hughes of GRC with domain expertise provided by Jim Byrd of USBI. It\nwas implemented\non a Symbolics 3670 lisp machine with the use of the KEE\nsoftware tool. A more advanced implementation\nwill be undertaken using\ntools developed in house and which will work in VAX and PC environments.\nThe system, while still very much in its infancy has proved viable for small\nscheduling tasks, and with time will work with larger more complex problems.\n\n\';\'_ECEDING PAGE BLANK NOT FILI_="D\n\n383\n\nThe system is general enough in nature to help with many types of scheduling\nand logistic problems, however, the main problem domain addressed by\nHATS is the supply and resupply payload schedules for shuttle launches\nnecessary to maintain the space station.\nSome of the techniques that HATS incorporates are: object oriented\nstructures that take full advantage of inheritance facilities, hypothetical\nreasoning features that allow the system to try different solution paths without\ndata corruption, heuristic methods to allow for some level of control and\nconstraint of the immense search space that scheduling problems often\ngenerate, and rule based reasoning to help with the capture of domain expert\nknowledge.\n2\n\nStructure\n\nof the\n\nKnowledge\n\nBase\n\nBy using a rich object oriented environment\nin which to implement this\nsystem, a great deal of reusable and interrelated information can be stored in\na concise, consistent and understandable\nmanner. The two main categories\nof objects dealt with are the supplies that must be scheduled on launches and\nthe launches themselves.\nThe supplies that are to be scheduled include a\nbroad range of supplies necessary to operate and maintain the space station,\nsupport experiments\nand deploy, retrieve and maintain communications\nand\nobservation satellites.\nThis means that criticalities I, II, and III items are\nscheduled as well as the experiment containers, platforms and any equipment\nthat the experiments\nthemselves need. Extra crew and scientists that a\nparticular experiment needs are simply represented as another necessary\nsupply.\nThanks to the use of inheritance,\nmuch generic information about each of\nthese categories is defined in their high level object abstraction.\nThe specific\ninformation about each individual launch and supply is stored in each\nindividual object instantiation.\nStored information for launches includes such\ndata as projected launch date, maximum payload size and weight, crew size\n(excluding experiment\nscientists), and other pertinent launch information.\nSupply information is considerably\nmore complex.\nThe supply objects have\nbasic size and weight information, but in addition, they have date needed by,\nand date needed after information.\nAlso, because of the interrelated nature of\nsome supplies, relationships\nbetween supply objects are also possible.\nFor\nexample, as mentioned above, extra crew needed for a particular experiment\nare scheduled as another supply.\nIt would do little good to schedule the extra\ncrew for one launch and the experiment equipment for another.\nThere must\nbe some way for each supply to know what other supplies it requires.\nThis\ntype of information is easily stored in attribute slots on the objects themselves.\nAs another more complicated\nexample of supply interrelationships,\nthere\ncan be several scheduling paths based on interrelationships\nof supplies.\nIn\nthe above case, the experiment equipment could indeed go up on a launch\nprior to the experiment crew. The equipment could sit dormant on the space\nstation until the required personnel finally showed up. It is also possible, but\n\n384\n\nnot likely, that the crew could go up before the experiment equipment and sit\naround until it arrived. This scenario happens quite frequently with field\nservice personnel back on earth. The three different schedules mentioned\nhere (crew and equipment on one launch, equipment first, crew first) are all\nthree possible and even workable supply schedules.\nWays to make the\nsystem favor one schedule over the others is discused a little later on, but the\nability for objects to have defined relationships with one another is a great\nhelp in sorting out these problems.\nBecause objects in this environment allow for methods, these supply\nobjects can be made to automatically\nmake changes of themselves\nand other\nobjects as the data changes.\n(Methods are like programs that can be run\nwhen certain events occur.) For example, adding an extra crew member for\nan experiment will mean that more food and oxygen will be consumed during\na specific time period. This means that there must be a corresponding\nchange\nin the food and oxygen supply objects. Either current objects must be\nincreased, dates shifted, or new objects created. This type of automatic\nreadjusting can be handled by methods that are keyed to run whenever\nsupply objects are added. Also methods can be used to create supply objects\nto help with cyclic types of resource use. For example, the user may tell the\nsystem that 100 pounds of gas x is used per month. The methods may\nautomatically\ngenerate the necessary gas x objects to make sure this\nrequirement\nis met. Direct down links will eventually provide on-orbit\ninventory quantities against which the system will automatically\nplan\nreplenishment\npayloads.\nAnother type of interrelationship\nof supplies is one supply with a fixed\ndate of need and another supply with no known date, but with a known link to\nthe first. Because the first supply has a fixed date, the second supply must be\nscheduled either before or concurrent to the first supply. This means that even\nthough the second supply has no obvious date itself, there is a necessary\nscheduling date inherent in its relationship with the first supply.\nThe initial state of the knowledge has the basic set up of the supply and\nlaunch data. The user of HATS has a graphical user interface to help with this\ninitial set up. The dates placed on the supplies is optional, and as the system\nworks, any unknown dates are taken to mean that the supply can go on any\nlaunch, unless of course there are relationships\nwith other supplies.\n3\n\nHypothetical\n\nWorlds\n\nand\n\nRules\n\nOnce the initial data has been set up, the system tries to find a way to\nplace all the supplies on the limited number of launches available.\nThis is\naccomplished\nby the use of a rule base and two techniques\nknown as\nhypothetical\nreasoning and worlds. As rules in a rule base are fired, they\ngenerally assert new facts. In hypothetical\nreasoning these new facts are\nconsidered\nhypothesis rather than true facts. These hypothesis are asserted\nonly in separate autonomous worlds.\nIn this way, if a trail of asserted facts\nleads to a dead end, there is no need to retract all the facts. Often it is\n\n385\n\nimpossible to retract a fact, and at the very least it is time consuming and\ndifficult. With hypothetical worlds, if a path leads to a dead end, the useless\nworlds are ignored or thrown away, and no facts need to be retracted.\nAs the system runs, a trail of worlds is created as a tree. Each world\nleads to at least one more world until a dead end is reached.\nA dead end\nmeans that either a workable schedule has been found and the system can\nquit, or this current path is unworkable and another must be found. Each\nworld has one supply placed on one launch. If there are 10,000 supplies to\nbe scheduled, a branch of worlds with a depth of 10,000 nodes represents a\nworkable solution.\nIf the branch does not go 10,000 deep, then some supplies\nwould not fit the current launch configuration.\nThese worlds can be used as a simple brute force method for finding all\npossible scheduling solutions.\nIt is a simple matter to try all supplies on all\nlaunches until a complete path is found. However, this is combinatorial\nand\neven with the use of several super computers, would require an unreasonable\namount of time. This is especially problematic for last minute payload\nchanges.\nThat is where the use of the rule base can really pay off.\n\nL\n\nBecause rules are used to create the world tree, they can help to trim the\ntree and eliminate many of the paths that will probably lead to unworkable\ndead ends. As a very simple example, scheduling larger items on launches\nbefore looking at the smaller items will point out dead ends far faster than the\nother way around. Also Criticality I items can be scheduled before other items\nso that if only partial schedules are found, then the critical items are\nscheduled and optional equipment can be left behind.\nAnother advantage with the combination\nof worlds and rules is that new\nideas can be tested quickly and effectively.\nIt is fairly easy to change or add\nrules to the rule base. If a change speeds things up and finds solutions faster,\nthen the new technique can be left in place. If not, then the changes need\nonly be taken out of the rule base.\n4 Future\n\nWork\n\nAs funding allows, work will concentrate on several areas. The rule\nbased heuristics that help trim the search tree will be improved considerably.\nThe current rule base takes about thirty criteria into account. As domain\nexpertise is codified, this will improve and expand. This expansion will be\naimed specifically at speeding up the system by trimming unfruitful branches\noff the world search tree.\nThe interrelationships\nbetween objects will be expanded.\nThis area is\nfairly rudimentary now and should be revamped and improved.\nMany types of\nrelationships\nhave been defined and need only be incorporated\ninto the\nsystem. The infrastructure\nis already in place to do this, and is flexible enough\nto take new relationships\ninto account as well.\n\n386\n\nThe system will be rewritten to use an Entity Attribute Relationship\ndatabase and rule system that we are currently working on in house.\nThis\nsystem will be considerably\nfaster than the current knowledge base and rule\nsystem now being used. During this rewriting, a more generic form of HATS\nshould emerge.\nThis generic tool will be useful as a baseline for other types\nof scheduling\nproblems.\nAn improved user interface will be implemented.\nThe current interface is\nvery useful for creating launch and supply objects and placing them in the\nobject hierarchy, however there are several things that need to be added. The\ninterface needs to make defining relationships between objects easier and\nfilling in slot attributes easier.\nThe entire system will be ported to more mainstream types of machines.\nThe Symbolics is a very good environment\nin which to develop systems like\nthis, however at this time it is unreasonable\nto assume that eventual users of\nHATS will have such equipment on their desks.\nMore forward looking analysis techniques should be added to the\nsystem.\nFor example, if no complete schedule can be found, the system could\nsuggest other solutions.\nIt might determine what items would cause the least\ntrouble if left behind, or suggest the fewest number of additional launches that\nwould alleviate the problem.\n5 Conclusions\nThe HATS system has shown that several AI techniques are useful when\napplied to scheduling problems.\nBasic object oriented structures are good for\nsetting up the types of data that are required and in defining the relationships\nbetween the data. Objects that represent launch and supply items are easy to\nmanipulate and alter. A world tree is a useful way to represent the planning\npaths taken while determining\na schedule.\nRule based reasoning is very\neffecting in both creating the tree and constraining\nthe search paths that the\ntree represents.\nThe system is flexible and can expand as domain expertise is\nincorporated.\nApplication of this system to logistics support will not only\nimprove support response and effectiveness,\nbut also provide a valuable tool\nfor future program planning.\n\n387\n\n'