b'NASA USRP \xe2\x80\x93 Internship Final Report\n\nConstellation Training Facility Support\nJose M. Flores 1\nUniversity of Puerto Rico, Mayaguez, Puerto Rico, 00680\n\n1\n\nUndergraduate Student, Department of Mechanical Engineering, University of Puerto Rico, Mayaguez Campus\n\n1\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\nAbstract\nThe National Aeronautics and Space Administration is developing the next set of vehicles that will take\nmen back to the moon under the Constellation Program. The Constellation Training Facility (CxTF) is a\nproject in development that will be used to train astronauts, instructors, and flight controllers on the\noperation of Constellation Program vehicles. It will also be used for procedure verification and validation of\nflight software and console tools. The CxTF will have simulations for the Crew Exploration Vehicle (CEV),\nCrew Module (CM), CEV Service Module (SM), Launch Abort System (LAS), Spacecraft Adapter (SA),\nCrew Launch Vehicle (CLV), Pressurized Cargo Variant CM, Pressurized Cargo Variant SM, Cargo Launch\nVehicle, Earth Departure Stage (EDS), and the Lunar Surface Access Module (LSAM). The Facility will\nconsist of part-task and full-task trainers, each with a specific set of mission training capabilities. Part task\ntrainers will be used for focused training on a single vehicle system or set of related systems. Full task trainers\nwill be used for training on complete vehicles and all of its subsystems. Support was provided in both\nsoftware development and project planning areas of the CxTF project. Simulation software was developed\nfor the hydraulic system of the Thrust Vector Control (TVC) of the ARES I launch vehicle. The TVC system\nis in charge of the actuation of the nozzle gimbals for navigation control of the upper stage of the ARES I\nrocket. Also, software was developed using C standards to send and receive data to and from hand controllers\nto be used in CxTF cockpit simulations. The hand controllers provided movement in all six rotational and\ntranslational axes. Under Project Planning & Control, support was provided to the development and\nmaintenance of integrated schedules for both the Constellation Training Facility and Missions Operations\nFacilities Division. These schedules maintain communication between projects in different levels. The CxTF\nsupport provided is one that requires continuous maintenance since the project is still on initial development\nphases.\n\n2\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\n\nI. Introduction\nThe following report entails a full description of the development support provided to the Constellation\nTraining Facility at the National Aeronautics and Space Administration (NASA), Lyndon B. Johnson Space Center\nthrough the Undergraduate Student Research Program (USRP). This was a 15 week internship that consisted in both\ntechnical and professional experiences under the supervision of mentors which contributed to the ongoing\ndevelopment of the Constellation Program. This report serves as an overview of the Constellation Training Facility\nand as an explanation of the achievements and experiences acquired during the internship. A detailed description on\nassigned tasks and tools utilized will be presented. It is expected from the reader, after reading thoroughly this\nreport, to have a better understanding of one of the main projects that will enable astronauts to go back to the Moon,\nand to have an insight on the contributions made to achieve these goals.\n\nII. Constellation Training Facility\nThe Constellation Training Facility will provide a venue for training crew members, flight controllers,\ninstructors, and other identified personnel associated with the Constellation Program. This facility will include\ntraining devices and supporting infrastructure for the simulation of mission operation tasks required to perform ISS,\nLunar, and eventually, Mars missions. The CxTF will provide the resources to support nominal and contingency\noperations for all mission phases of the Constellation Program.\n\nFlight Crew Members\n\nTest & Integration Personnel (from other facilities)\nProcedure Verification Engineers\n\nMission Management Personnel\nFlight Controllers\n\nInstructors\n\nOutreach Personnel\n\nMission Analysis Personnel\n\nOther Students\n\nUsers\n\nUsers\n\nCxTF\n\nSupporters\n\nSimulation Developers\n\nSupporters\n\nLogistics Personnel\n\nSustaining Personnel\nOperations Personnel\n\nT&V Personnel\n\nSystem Administrators\n\nFlight Software Developers\nGround Control Personnel\n\nMaintenance Personnel\n\nSafety & Mission Assurance Personnel\nFigure 1. CxTF Stakeholders\nThe Constellation Program consists of multiple elements. The launch vehicles include the Ares I Crew Launch\nVehicle (CLV) and the Ares V Cargo Launch Vehicle (CaLV). The crew vehicles include the Orion Crew\nExploration Vehicle (CEV) and the Lunar Lander (Altair). There will be an Earth Departure Stage (EDS) for lunar\nmissions. Finally, the Lunar Surface Systems (LSS) will consist of all additional systems associated with lunar\nsurface operations. The crews for each mission will also interface with Extra-Vehicular Activity (EVA) suits and\n\n3\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\nFlight Crew Equipment (FCE).\nThe Constellation Training Facility simulations and training devices will be developed for all Constellation\nelements, including Ares I, Ares V, Orion, Altair Lander, EDS and LSS. The CxTF will initially support ISS and\nLunar Sortie missions, with Lunar Outpost and Mars mission simulation capability in the long term. The trainers\nwill run in conjunction with the Mission Control Center (MCC) and/or the Space Station Training Facility (SSTF).\nThe development philosophy behind CxTF consists of an evolutionary increase of capability over the life of the\nConstellation program.\nThe CxTF will provide both part-task (PTT) and full-task (FTT) training environments. The PTT environment\nwill support crew, flight controller, instructor, and other identified personnel training on partial spacecraft systems.\nThe FTT environment will provide full-system and mission training for flight crews and flight control teams.\nThe PTT environment includes the Orion Part-task Trainers (OPT), Lunar Part-task Trainers (LPT), and Flight\nController Part-task Trainers (FCPT). The OPT and LPT are primarily intended for crew training, while the FCPT\nis designed for flight controller training. OPT and LPT will include instructor stations with capabilities for\nmalfunction insertion/removal and simulation control. It will also include a crew station, with various degrees of\nfidelity, depending on the training needs. Some trainers will include image generation capabilities to support crew\ndynamic skills training. Part-task training simulations may execute real flight software or functional flight software,\ndepending on the application and specific user requirements.\nThe FTT environment includes the Orion Mission Simulation (OMS) and Lunar Mission Simulation (LMS), and\nwill include high-fidelity Orion and Lander crew stations, full high-fidelity image generation, aural cue capability,\nand instructor stations co-located with the crew stations. These FTT devices will execute real flight software as a\ndefault, but will include the capability to execute functional flight software as required.\nCxTF Computational Platforms\nHost Processors\n\nOperations\nSupport\nSystem (OSS)\n\nFlight Computers\nSupport Equipment\n\nFull Task Environment\n\nPart Task Environment\n\nOrion Mission\nSimulation (OMS)\n\nOrion Part-task\nTrainers (OPT)\n\nLunar Mission\nSimulation (LMS)\n\nLunar Part-task\nTrainers (LPT)\n\nExternal\nInterfaces\n\nSoftware\nProduction\nEnvironment (SPE)\n\nDesktop\nTrainers\nOnboard\nTrainers\n\nFlight Controller\nPart-task\nTrainers (FCPT)\n\nFigure 2. Conceptual CxTF Architecture Overview\nTraining for the Constellation Program will also make use of various additional training applications, including\nDesktop and Onboard trainers. The Desktop Trainer is envisioned as a capability for a user to access PTT\nsimulations directly from an office personal computer (PC). The Onboard Trainer is envisioned as a PTT simulation\nthat will run on a laptop computer onboard the flight vehicle.\nThe CxTF will also provide a platform for procedure verification and test and integration support for other\nConstellation facilities, such as the MCC at the Johnson Space Center (JSC) or the Launch Control Center (LCC) at\nthe Kennedy Space Center (KSC).\nAs the Constellation Program continues to mature and formal crew and flight controller task analyses are\ncompleted, training objectives and simulator requirements will continue to be evaluated and developed. The overall\nCxTF design concept will be developed to be able to readily adapt to future program and training requirement needs.\n\n4\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\nBelow is presented a list of essential features of the Constellation Training Facility.\n\xe2\x80\xa2 Part task trainers - for training focused on a single vehicle system or set of related systems\n\xe2\x80\xa2 Full task trainers - for training on complete vehicle(s) and all of the subsystems\n\xe2\x80\xa2 Instructor/Operator stations (IOS) - location that provides an individual instructor, or a team of instructors\nunder the direction of a Team Lead, the ability to monitor, control, and mode the associated full task/part\ntask training facility, and provides the instructor(s) monitoring access to crew and flight controller displays.\n\xe2\x80\xa2 Crew stations - portion of the full task trainer which is a full-scale replica of the CEV crew module, with\nidentical cockpit layout and functional controls and displays. Also, portion of the part task trainer which\nhas a set of controls and displays tailored for crew training in the part task training environment.\n\xe2\x80\xa2 Student stations - portion of the part task trainer which has a set of controls and displays tailored for flight\ncontroller training in the part task training environment\n\xe2\x80\xa2 Simulation Control Area (SCA) - provides (a) a team of instructors under the direction of a Simulation\nSupervisor (Sim Sup) with the ability to monitor flight control disciplines and to monitor, direct, and\ncontrol (if necessary) the full task training facility working under the Sim Sup\'s direction, (b) real-time\nmission monitoring capability of any flight control discipline for instructors, and (c) a team or disciplinespecific group of instructors, or individual instructors, with the ability to monitor and control part task\ntraining conducted using flight control consoles and assets. This may be located within the Mission Control\nCenter complex.\n\xe2\x80\xa2 Flexible architecture - platform hardware and operating systems are available from multiple vendors\n\xe2\x80\xa2 Audio and video capabilities- to provide a realistic training environment, for communication between\nstudent and instructor, communication between CxTF and external facilities, and for out-the-window\ngraphics\n\xe2\x80\xa2 Interfaces to the MCC and SSTF - for integrated/combined simulations\n\xe2\x80\xa2 Systems training - train students to operate the CEV/CLV vehicle systems in a safe, efficient manner\n\xe2\x80\xa2 Mission specific training - enable students to execute tasks planned for actual missions\n\xe2\x80\xa2 Team training - students train with other facilities such as the Mission Control Center (MCC) and/or the\nSpace Station Training Facility (SSTF)\n\xe2\x80\xa2 Procedures verification - fidelity of the CxTF models and its display and controls are sufficient to support\nprocedure verification\nThe Constellation Training Facility will be developed following a multiple stage approach. The initial phases\nwill develop the CxTF to support missions to the ISS and subsequent phases will develop the CxTF to support lunar\nmissions. The CxTF will evolve in capabilities as the Constellation program progresses. In the early phases of the\nConstellation program, prior to the first test flight, part-task trainers will be used to train flight controllers to react to\ncommand and telemetry streams that pass through the MCC. The part task trainers for flight controller training will\nbe operational with sufficient lead time. Prior to the first manned mission to the ISS an Orion mission simulator,\nincluding real-world flight software, will be developed, tested and certified for training the crew and flight\ncontrollers. A reuse and commonality strategy will be employed by the development teams to leverage software\nmodels, hardware interfaces and data architectures to reduce the development and maintenance costs of the CxTF.\n\nIII. Simulation Software development\nDuring the course of the internship software development support was provided to the Constellation Training\nFacility utilizing the Trick simulation environment. This is the main tool for simulation development that provides a\nsuitable environment to achieve realistic simulations using mathematical models in real and non-real time. Trick\nenables ways to develop simulations of all the required components of the vehicles and deploy them simultaneously\nfor training purposes. The following is an overview of the Trick simulation environment and its capabilities.\n\n5\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\n\nFigure 3. Workstation for simulation software development\n\xce\x91. Trick Simulation Environment\nTrick is a generic simulation toolkit that can be used extensively for training astronauts through real-time\ninteractive simulations. A Trick simulation is a run-time executive designed for both real-time and non-real-time\napplications having both time-based and event-based scheduling requirements, including hardware-in-the-loop,\nhuman-in-the-loop, multi-processor and multi-box applications.\nTrick simulations are designed to be data driven wherever possible. The run-time executive provides a simple\ninterface that allows the user to configure model parameters, integration schemes, and real-time controls for each\napplication.\nTrick takes the burden off the modeler to create simulation executive ware. Trick does this by fusing its own\nsimulation executive with the developer\'s models. It takes the responsibility of creating all source code for run-time\ninput, data recording output and data communication between model components. The developer\'s responsibility is\nreduced to build a simulation definition file and the model code. This plug-in approach coupled with multi-platform\nand multi-programming support allows modeling groups to create reusable, shared and versatile models across\ndistributed locations.\nTrick features the following:\n\xe2\x80\xa2 Supports Linux, MAC, SGI and Sun platforms\n\xe2\x80\xa2 Models developed in C/C++ may be linked in Ada and FORTRAN libraries\n\xe2\x80\xa2 Simulations may be driven by events defined by the developer through run-time input files.\n\xe2\x80\xa2 Simulations are configurable through textual C-like input files.\n\xe2\x80\xa2 Data logging.\n\xe2\x80\xa2 Simulations may dump and load simulation states as well.\n\xe2\x80\xa2 Models can interface with most hardware and link in most low level hardware drivers.\n\xe2\x80\xa2 Facilitates rapid development of high fidelity math models that are easily integrated into the Trick\nExecutive.\n\xe2\x80\xa2 Jobs may be assigned to synchronous/asynchronous P-threads by tagging the job in the simulation\ndefinition file.\n\xe2\x80\xa2 Built in support for distributed simulations.\nSource code was developed using trick to model the hydraulics system in the Thrust Vector Control System of the\nAres I Launch Vehicle.\n\n6\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\n\xce\x92. Ares I Thrust Vector Control Hydraulics simulation modeling\nSimulation software using Trick was developed for the Thrust Vector Control (TVC) system of the upper stage\nof the Ares I Crew Launch Vehicle. Ares I is an in-line, two-stage rocket configuration topped by the Orion crew\nvehicle and its launch abort system. In addition to the vehicle\'s primary mission of carrying crews of four to six\nastronauts to Earth\xe2\x80\x99s orbit, it may also use its payload capacity to deliver resources and supplies to the International\nSpace Station.\n\nFigure 4. Ares I Crew Launch Vehicle.\nDuring launch, the first-stage booster (See Figure 4) powers the vehicle toward low Earth orbit. In mid-flight, the\nreusable booster separates and the upper stage\'s J-2X engine ignites, putting the vehicle into a circular orbit. During\nthe ascent stage the TVC system keeps the gimbals of the J-2X engine in a lock position and during nominal\noperations it provides maneuvering capabilities for the vehicle.\n\nFigure 5. Ares I Upper Stage.\n\nFigure 6. Hydraulic System for Thrust\nVector Control of the J-2X engine.\n\n7\n\nFall 2008 Session\nFigure 5. Ares I Upper Stage.\n\nNASA USRP \xe2\x80\x93 Internship Final Report\nThe Upper Stage TVC system consists of various hydraulic components including hydraulic reservoirs,\naccumulators, circulation pumps, the Turbine Pump Assembly (TPA) and the hydraulic actuators (See Figure 7).\nBefore launch, the gimbals are kept in a locked position using the circulation pumps that are powered externally by\nthe Ground Control Equipment (GCE). During launch, the upper stage gimbals are locked using a tap off from the\nMain Propulsion System (MPS). Once The Upper Stage is separated the locks are removed thus providing gimbals\nfunctionality for vehicle maneuvering. Under nominal conditions the hydraulic actuators will provide the necessary\nforce to maneuver the vehicle with pitch and yaw control.\n\nFigure 7. Upper Stage Thrust Vector Control Hydraulic System\nThe simulation software under development is in charge of monitoring the lock/unlock states as well as the\npressure in the hydraulic system during its operation. The software provides malfunction flags that will be enabled\nas required by training to simulate malfunctions of the TVC. The state of this system will be fed to the Command\nand Data interface units for them to take the proper actions for each state. The Thrust Vector Control system is a\ncritical system during orbit insertion of the vehicle thus it is required for it to be simulated with high fidelity for\ncrew and flight controller training.\n\n8\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\n\nFigure 8. Simulation of CEV docked with the ISS.\nThe code was compiled under the Trick environment and tested in conjunction with the overall CxTF simulation that\nconsists of multiple simulated systems of the Crew Exploration Vehicle. This part of the mechanical simulations of\nthe CEV it is still under development since it requires specific design data of the launch vehicle provided by the\nAres I design group. Once this data is acquired, higher fidelity models can be developed for the hydraulic subsystem of the Thrust Vector Control thus enabling more realistic conditions for the training of all end users.\n\n\xce\xa7. CxTF Cockpit Hand Controllers\nAs an additional task, software was developed for a set of hand controllers to be used in the long term for the\ndifferent vehicle trainers. Using standard C libraries under a Linux workstation communication was established\nbetween the controllers and the workstation using serial communication standards. The software was developed\nfollowing portability requirements so it could be used without much manipulation in other systems. Also,\nadjustments were made to the source code so it could be exported to the Trick simulation environment for future\nintegration in CxTF simulations.\nThe controllers consist of a Rotational Hand Controller (RHC) and Translational Hand Controller (THC).\n\xe2\x80\xa2\n\nRotational\n\nHand Controller (RHC)\n\n\xef\x82\xa7\n\xef\x82\xa7\n\nTrigger Up - Down switch\n\n\xef\x82\xa7\n\nPush Button\n\n\xef\x82\xa7\n\nToggle Up-Down\n\n\xef\x82\xa7\n\xe2\x80\xa2\n\nRotation in 3 axes (Pitch, Roll, Yaw)\n\nSlide button\n\nTranslational Hand Controller (THC)\n\xef\x82\xa7\n\nTranslation in 3 axes (Longitudinal, Vertical,\nLateral)\nFigure 9. Rotational hand Figure 10. Translational\nController (RHC)\n\n9\n\nhand Controller (THC)\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\nRHC powers both controllers through a 9 volt power supply and contains a RS-232 serial interface for data\ntransmission. The serial RS-232 port is configured using standard POSIX (Portable Standard for UNIX) terminal\ncontrol functions and C language libraries.\nPrinciples of Serial Communication\nSerial communication refers to the transfer of computer data one bit a time.\nTypical devices that use serial communications are network devices, keyboards,\nmice, modems, and terminals. In this case hand controllers were adapted with a\nserial communications microprocessor to enable data transfer to and from a\nworkstation. During serial communications each word (i.e. byte or character) of\ndata sent or received is transferred one bit a time. It is said that each bit is either on\nor off. The speed of the serial data is expressed in bits-per-second ("bps") or baudot\nrate ("baud"). This represents the number of ones and zeroes that can be sent in\nFigure 11. RS-232 Connector\none second. At the beginning of the computer age 300 baud was considered the\nfastest speed, but with advances in technology computers today can handle RS-232\nspeeds as high as 430,800 baud.\nRS-232 is a standard electrical interface for serial communications defined by the\nElectronic Industries Association. The most commonly used is RS-232C, which defines a mark (on) bit as a voltage\nbetween -3V and -12V and a space (off) bit as a voltage between +3V\nand +12V. The RS-232 standard defines 18 different signals for serial\ncommunications. Only six are generally available in the UNIX\nenvironment.\nGND - Logic Ground\nTXD - Transmitted Data\nRXD - Received Data\nDCD - Data Carrier Detect\nDTR - Data Terminal Ready\nCTS - Clear To Send\nFigure 12. RS-232 Connector showing signal types.\nRTS - Request To Send\nUsing the previous concepts source code was developed using the following C libraries to communicate with the\nhand controllers under the linux environment. Each one of them provides functionalities to the overall script\ndeveloped for specific actions that have to take place to read data from the serial port.\nstdio.h \xe2\x80\x93 Standard input/output definitions\nstring.h \xe2\x80\x93 String function definitions\nunistd.h \xe2\x80\x93 UNIX standard function definitions\nfcntl.h \xe2\x80\x93 File control definitions\nerrno.h \xe2\x80\x93 Error number definitions\ntermis.h \xe2\x80\x93 POSIX terminal control definitions\nCertain steps have to take place in order to read data from the port. In a Linux workstation the serial port can be\naccessed through a system file where data can be read and written as a normal text file. As a first step the open()\nfunction is invoked to open file or port to accept read and write commands. If the port can be open this functions\nreturns a positive integer that is used as a tag to identified the port that we are working with. Once the port is open\nthe current settings assigned to the port by the system are read and reconfigured to the specifications of the hand\ncontrollers. The port is set for a 9600 baud rate, no parity bit and 8 bit data read support. Also the data is read as raw\ninput meaning that the system will read the data as it comes through the port. Once the serial port is reconfigured an\narbitrary byte is written to the port using the write() function. This is done as specified by the manufacturer since it\nis required for the controllers to receive some kind of data before being able to start sending information back to the\ncomputer. The data is read using a conditional loop that continuously reads the serial port file for the 9 bytes\nprovided by the controllers and writes them to a file where they will be available for future manipulation.\nFrom the specifications provided by the controller manufacturer it is known that the data values received from\nthe serial port should lie within the ranges shown below in relation to the physical position of the controllers in the\ndifferent axes. The actual values are read from the serial port file under a Linux machine as character values\nconverted to integer bits that range from 0 to 255. An arbitrary byte needs to be written to the serial port first to then\nin turn receive these 9 bytes of positional information from the controllers. Notice that bytes 8 and 9 are spare bytes\n\n1\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\nthat receive data but are not necessarily related to any axis or switch. These can be programmed by modifying the\ncontroller\xe2\x80\x99s\ninternal\nhardware.\n\nTable 1. Vector values received from serial port\nThe source code developed with the above specifications was ported to the Trick simulation environment to be\nused within simulations. By using common structures that Trick understands parts of the source code were\ntranscribed as source and data files in their respective directories. The conditional loop where the data from the port\nis continuously read was rewritten as a scheduled job that runs every 0.01 seconds for real time input reading. This\nis all done in accordance to the standards on which simulations for CxTF are written so it can later be added to full\nCxTF simulations.\n\nIV. Project Planning and control\nSupport was provided to Project Planning and Control with the development and maintenance of integrated\nschedules for both the CxTF project and the Missions Operations Facilities Division (MOFD). The CxTF integrated\nschedule consisted of important milestones such as\n\xe2\x80\xa2\nSDR \xe2\x80\x93 Systems Definition Review\n\xe2\x80\xa2\nPDR \xe2\x80\x93 Preliminary Design Review\n\xe2\x80\xa2\nCDR \xe2\x80\x93 Critical Design Review\n\xe2\x80\xa2\nSAR \xe2\x80\x93 Systems Acceptance Review\nThese Milestones are the driving force between the all the events that need to happen to successfully develop the\nfacility. The schedule also provided information of related dates to these milestones and events that will occur\nbetween them. These were updated and maintained by interacting with different sources that provided the necessary\ninformation to keep a useful schedule in place.\nFor the MOFD integrated schedule support was provided by maintaining and updating milestones for the CxTF,\nMission Control Center System (MCCS) and Missions Operations Reconfiguration Systems (MORS) projects. The\nschedule also provided information on integration dates between all the projects or facilities related to MOFD. These\nare\n\xe2\x80\xa2 OTF (Operations Technology Facility)\n\xe2\x80\xa2 MCCS (Mission Control Center System)\n\xe2\x80\xa2 SSTF (Space Station Training Facility)\n\xe2\x80\xa2 QUAD Integration (CxTF/Cx MCC - ISS MCC/SSTF)\n\n1\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\nAll these facilities will require integration in the future for training purposes. These facilities provide specific\nproducts for the training of crew and flight controllers. The Quad integration consists of putting together all MOD\nfacilities necessary to provide realistic training using actual Constellation resources. This means joining the\nConstellation Training Facility with the Constellation Mission Control Center and the International Space Station\nMission Control Center with the Space Station Training Facility and at the same time joining these two sets of\nfacilities into one consolidated simulation environment.\nBoth integrated schedules required constant interaction with schedulers from different projects. Integrated\nschedules provide the means to maintain communication between projects of different levels to achieve a better\nunderstanding of the events that need to happen for a project or set of projects to be successful.\n\nV. Future work\nIt is expected that the software developed for the hydraulic system of the TVC for the Ares I simulations is\nverified and rewritten as necessary to include all recent changes to the design of the real system. The written code is\nto be integrated to the overall CxTF simulation taking into consideration other systems that are involved with the\nThrust Vector Control system.\nAs part of future developments the feedback from the controllers will be read and manipulated to any extent\nnecessary to convert it into useful parameters during simulations. The code developed under the Trick simulation\nenvironment needs to be further improved in terms of how the serial data is read. That is, to make data read more\nreliable and test it for periods of long duration. This should be added later on added to the CxTF simulation to\nenable interfaces between the required systems and subsystems and be deployed as needed.\nThe integrated schedules are to be maintained and observed for future changes in milestones across the\nConstellation Training Facility and Missions Operations Facilities Division.\n\nVI. Conclusion\nAll the supported tasks during the 15 week internship at Johnson Space Center in Houston, Texas were\ncompleted satisfactorily. Knowledge and skills were developed in many areas including, C/C++, Trick, Thrust\nVector Control, Serial Communications Programming, and Project Planning and Scheduling. All contributions made\nto the Constellation Training Facility will have impacts in current and future events related to the Constellation\nprogram overall. NASA will face new challenges in the future with the Constellation Program that will require\nknowledge and experience in all aerospace related fields. The Undergraduate Student Research Program provides\nthe means to prepare future generations for these new challenges by providing opportunities like the CxTF support\nprovided during this internship.\n\nAcknowledgments\nThanks to the Undergraduate Student Research Program and the Universities Space Research association for\nproviding the internship funding and opportunity. Thanks to the National Aeronautics and Space Administration\nspecifically to the Johnson Space Center Missions Operations Facilities Division for the opportunity of working and\ncollaborating with their current projects. Special thanks to my mentor Shashi Gowda for providing the time to guide\nand teach me all that was required to have a successful internship. Finally, thanks to all of those that provided\nsupport and mentorship on the different tasks that were supported in particular to Brandon Lloyd, Toby Martin,\nRachel Obeidzinsky, Veronica Seyl, and Robert Paul.\n\n1\n\nFall 2008 Session\n\nNASA USRP \xe2\x80\x93 Internship Final Report\n\nReferences\nSchild, S., C++: The Complete Rerence, 4th ed., McGraw-Hill, 2002.\nSweet, M., \xe2\x80\x9cSerial Programming Guide for POSIX operating systems,\xe2\x80\x9d 5th ed. 2005. URL:\nhttp://www.easysw.com/~mike/serial/serial.html#3_1_3\n\xe2\x80\x9cConstellation Program: America\'s Fleet of Next-Generation Launch Vehicles,\xe2\x80\x9d NASA Facts, George C. Marshall Space\nFlight Center, National Aeronautics and Space Administration, 2008. URL:\nhttp://www.nasa.gov/mission_pages/constellation/ares/aresl/index.html\n\xe2\x80\x9cNASA\'s Ares I Upper Stage: Powering the Second Phase of a Rocket\xe2\x80\x99s Journey to Space,\xe2\x80\x9d NASA Facts, George C. Marshall\nSpace Flight Center, National Aeronautics and Space Administration, 2008. URL:\n\nhttp://www.nasa.gov/mission_pages/constellation/ares/aresl/index.html\n\n\xe2\x80\x9cThe J-2X Engine: Powering NASA\xe2\x80\x99s Ares I Upper Stage and Ares V Earth Departure Stage,\xe2\x80\x9d NASA Facts, George C.\nMarshall Space Flight Center, National Aeronautics and Space Administration, 2008. URL:\nhttp://www.nasa.gov/mission_pages/constellation/ares/aresl/index.html\n\n1\n\nFall 2008 Session\n\nAres I and Ares I Thrust Vector Control System\nhttp://www.nasa.gov/mission_pages/constellation/ares/aresl/index.html\nhttp://www.nasa.gov/pdf/187391main_aresI_fs_nov08.pdf\nhttp://www.nasa.gov/pdf/230922main_1stStage_FS.pdf\nhttp://www.nasa.gov/pdf/231430main_UpperStage_FS_final.pdf\nhttp://www.nasa.gov/pdf/187393main_j2x_fs_nov08.pdf\nhttp://spaceflightsystems.grc.nasa.gov/LaunchSystems/UpperStage/Thrust/\nhttp://www.nasa.gov/pdf/293938main_Ares_I_V_Expanded_nov08.pdf\nSerial Programming (External to NASA)\nhttp://www.easysw.com/~mike/serial/serial.html\n\nConstellation Training Facility Support\nJose M. Flores\nUniversity of Puerto Rico\nNovember 20, 2008\n\n11/20/2008\n\nJose M. Flores / DD33\n\n1/17\n\nAgenda\n\xe2\x80\xa2 Personal Background\n\xe2\x80\xa2 USRP Overview\n\xe2\x80\xa2 CxTF Overview\n\xe2\x80\xa2 Contributions to CxTF Project\n\xcc\xb6\n\n\xef\x82\xa7 Software Development\n\xcc\xb6\n\nAres I Thrust Vector Control Hydraulics\nCxTF Cockpit Hand controllers\n\n\xef\x82\xa7 Project Planning and Control\n\xe2\x80\xa2 Acknowledgments\n\n11/20/2008\n\nJose M. Flores / DD33\n\n2/17\n\nPersonal Background\n\xe2\x80\xa2 Education\n\xef\x82\xa7 University of Puerto Rico\n\xe2\x80\x93 Bachelor of Science in Mechanical Engineering\n\xe2\x80\x93 Senior year. Graduating December 2009\n\xe2\x80\xa2 Undergraduate Research\n\xef\x82\xa7 Undergraduate Research on internal channel flow with added roughness\n\xe2\x80\x93 Pratt & Whitney sponsored project\n\xe2\x80\x93 Internal channel roughness analysis to improve turbine efficiency\n\xe2\x80\xa2 Professional\n\xef\x82\xa7 NASA \xe2\x80\x93 LaRC Intelligent Machines and Robotics Laboratory (D203)\n\xe2\x80\x93 Robotic arm development for the Platform for Science Instruments (PSI)\n\xef\x82\xa7 Formula SAE - Colegio Racing Engineering\n\xe2\x80\x93 Powertrain support\n11/20/2008\n\nJose M. Flores / DD33\n\n3/17\n\nConstellation Training Facility\n\xe2\x80\xa2 The Constellation Training Facility will provide a venue for training\n\xef\x82\xa7 Crew members\n\xef\x82\xa7 Flight controllers\n\xef\x82\xa7 Instructors\n\xef\x82\xa7 Other identified personnel (procedure verification engineers,\nmission analysis personnel, etc)\n\xe2\x80\xa2 The facility includes training devices and supporting\ninfrastructure for the simulation of mission operation tasks\n\n\xe2\x80\xa2 CxTF will support training for the following:\n\xef\x82\xa7 ISS (Lower Earth Operations) missions\n\xef\x82\xa7 Lunar missions\n\n11/20/2008\n\nJose M. Flores / DD33\n\n4/17\n\nConstellation Training Facility Overview\n\xe2\x80\xa2 Trainers\n\xef\x82\xa7 Full Task Trainer (FTT)\n\xe2\x80\x93 Orion Mission Simulator (OMS) \xe2\x80\x93 Crew Station\n\xef\x82\xa7 Part Task Trainer (PTT)\n\xe2\x80\x93 Orion Part-task Trainer (OPT)\n\xe2\x80\x93 Flight Controller Part-task Trainer (FCPT)\n\xef\x82\xa7 Desktop Trainer\n\xe2\x80\x93 Provides training simulation access from office environment\n\xef\x82\xa7 Onboard Trainer\n\xe2\x80\x93 Laptop based simulation suitable for onboard training\n\n11/20/2008\n\nJose M. Flores / DD33\n\n5/17\n\nSoftware Development Support\n\xe2\x80\xa2\n\nSoftware development support using Trick\n\xef\x82\xa7 Simulation of the hydraulic system of the Thrust Vector Control\n(TVC) for the upper stage of the Ares I Crew Launch Vehicle\n\xef\x82\xa7 Serial communication for hand controllers to be used in CxTF\nsimulations\n\n11/20/2008\n\nJose M. Flores / DD33\n\n6/17\n\nSoftware Development - Trick\nTrick Simulation Environment\n\xe2\x80\xa2 Generic simulation toolkit that is used extensively for training\nastronauts through real-time interactive simulations and for\nengineering analysis\n\xe2\x80\xa2 Run-time executive designed for both real-time and non-real-time\napplications\n\xef\x82\xa7 Time-based scheduling\n\xef\x82\xa7 Event-based scheduling\n\xe2\x80\xa2 The run-time executive provides a simple interface that allows the\nuser to configure\n\xef\x82\xa7 Model parameters\n\xef\x82\xa7 Integration schemes\n\xef\x82\xa7 Real-time controls\n11/20/2008\n\nJose M. Flores / DD33\n\n7/17\n\nAres I Launch Vehicle\n\xe2\x80\xa2 Trick was used to develop a simulation model for the hydraulics in the\nTVC system of the upper stage of the Ares I Crew Launch Vehicle.\n\n11/20/2008\n\nJose M. Flores / DD33\n\n8/17\n\nAres I Thrust Vector Control\n\xe2\x80\xa2 The simulation software developed is in charge of monitoring the\nstate of the hydraulic system\n\xef\x82\xa7 Pressure\n\xef\x82\xa7 Hydraulic fluid level\n\xef\x82\xa7 Hydraulic System being used\n\xe2\x80\xa2 The software provides malfunction flags that will be enabled as\nrequired by training to simulate malfunctions\n\n11/20/2008\n\nJose M. Flores / DD33\n\n9/17\n\nCxTF Cockpit Hand controllers\n\xe2\x80\xa2 Hand Controllers\n\xef\x82\xa7 Rotational Hand Controller (RHC)\n\xe2\x80\x93 Rotation in 3 axes (Pitch, Roll, Yaw)\n\xe2\x80\x93 Trigger Up - Down switch\n\xe2\x80\x93 Push Button\n\xe2\x80\x93 Toggle Up-Down\n\xe2\x80\x93 Slide button\n\xe2\x80\xa2 Translational Hand Controller (THC)\n\xe2\x80\x93 Translation in 3 axes (Longitudinal, Vertical, Lateral)\n\xe2\x80\xa2 RS-232 Serial connection\n\n11/20/2008\n\nJose M. Flores / DD33\n\n10/17\n\nCxTF Cockpit Hand controllers\n\xe2\x80\xa2 RS-232 serial interface for data transmission on RHC\n\xe2\x80\xa2 The serial RS-232 port is configured using standard POSIX (Portable\nStandard for UNIX)\n\n11/20/2008\n\nJose M. Flores / DD33\n\n11/17\n\nCxTF Cockpit Hand controllers\n\xe2\x80\xa2 Reading data from the serial port\n\xef\x82\xa7 open() function is called to open port to accept read and write\ncommands\n\xef\x82\xa7 Current port settings are read and reconfigured to the specifications\nof the hand controllers\n\xe2\x80\x93 9600 baud rate,\n\xe2\x80\x93 No parity bit\n\xe2\x80\x93 1 stop bit\n\xe2\x80\x93 Raw input\n\xef\x82\xa7 Arbitrary byte is written to the port using the write() function\n\xef\x82\xa7 Conditional loop to read the port for 9 bytes of data continuously\n\n11/20/2008\n\nJose M. Flores / DD33\n\n12/17\n\nProject Planning and Control\n\xe2\x80\xa2 Updated and Maintained CxTF integrated schedule\n\xef\x82\xa7 CxTF Milestones (SDR, PDR, CDR, SAR, etc.)\n\xef\x82\xa7 Updated and Maintained MOFD (DD) integrated schedule\n\xef\x82\xa7 Milestones for CxTF, MCCS and MORS\n\xef\x82\xa7 Integration Dates Between Projects\n\xe2\x80\x93 OTF (Operations Technology Facility)\n\xe2\x80\x93 MCCS (Mission Control Center System)\n\xe2\x80\x93 Quad Integration (CxTF/Cx MCC \xcc\xb6 ISS MCC/SSTF)\n\xe2\x80\x93 SSTF (Space Station Training Facility)\n\n11/20/2008\n\nJose M. Flores / DD33\n\n13/17\n\nAcquired Knowledge and Skills\nC/C++\nTrick Training\nThrust Vector Control\nSerial Communications Programming\nProject Planning and Scheduling\n\n11/20/2008\n\nJose M. Flores / DD33\n\n14/17\n\nContact Information\nJose M. Flores\nDD33\n281 483 4848 (B30A/1042)\n281 244 8147 (B16/179)\n787 220 8689 (mobile)\njose.m.flores-1@nasa.gov\njose.marcos.flores@gmail.com\n\n11/20/2008\n\nJose M. Flores / DD33\n\n15/17\n\nBackup Slides\n\n11/20/2008\n\nJose M. Flores / DD33\n\nUpper Stage Thrust Vector Control\n\xe2\x80\xa2 How the TVC hydraulics works\n\n11/20/2008\n\nJose M. Flores / DD33\n\nCxTF Cockpit Hand controllers\n\xe2\x80\xa2 Vector values received from the controllers\nBYTE\n\nUNIT\n\nAXIS\n\nVECTOR\nVALUE\n\nVECTOR\nVALUE\n\nVECTOR VALUE\n\nBYTE 1\n\nRHC\n\nPITCH\n\nDOWN - 65\n\nCENTER - 128\n\nUP- 189\n\nBYTE 2\n\nRHC\n\nYAW\n\nLEFT - 80\n\nCENTER - 128\n\nRIGHT - 172\n\nBYTE 3\n\nRHC\n\nROLL\n\nLEFT - 65\n\nCENTER -128\n\nRIGHT - 189\n\nBYTE 4\n\nTHC\n\nY LT-RT\n\nLEFT - 65\n\nCENTER - 128\n\nRIGHT - 189\n\nBYTE 5\n\nTHC\n\nZ UP-DN\n\nUP - 65\n\nCENTER - 128\n\nDOWN - 189\n\nBYTE 6\n\nTHC\n\nX AFT-FD\n\nAFT - 0\n\nCENTER - 128\n\nFWD - 255\n\nBYTE 7\n\nNONE\n\nSPARE\n\nN/A\n\nFLOAT - 128\n\nN/A\n\nBYTE 8\n\nNONE\n\nSPARE\n\nN/A\n\nFLOAT - 128\n\nN/A\n\nBYTE 9\nRHC\nSWITCHES\n\n11/20/2008\n\nTRIGGER DOWN - 1; TRIGGER UP - 2; SLIDE FWD - 4\nN/A\nPUSHBUTTON - 8; TOGGLE UP - 16; TOGGLE DN - 32\n\nJose M. Flores / DD33\n\n'