b'Introduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nTurbocharging View Factor Computation with\nQuad- and Octrees\nJustin Droba\n\nLyndon B. Johnson Space Center\n\nMSU SURIEM REU\nJuly 3, 2015\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n1/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nConcept of View Factor\n\nHave a mesh with its boundary elements. Pick one.\nHeat as blackbody radiation radiates from this face\nHeats up other faces the radiation impinges\nA view factor quanti\xef\xac\x81es radiation transfer between areas:\nradiation leaving A1 and impinging upon A2\nF (A1 , A2 ) =\nall radiation leaving A1\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n2/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nBinary Trees, Quadtrees, and Octrees\n\n%\n\nCan compute view factors by Monte Carlo ray casting\nNo info in ray on where it lands; must check all faces in set\nOk for small meshes, but gets glacially slow quickly\nBinary trees used in computer science for e\xef\xac\x83cient searches\nBecause meshes are 2D and 3D, quadtrees and octrees are\nthe weapon of choice to speed up the searches\n\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n3/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\n\xe2\x80\x9cGlacially Slow\xe2\x80\x9d?\nOrion tile cavity problems\ntake too long:\n\n\xe2\x80\x9cThe Monster\xe2\x80\x9d\n26,000+ faces\nBonus: add capability to solve\nEric\xe2\x80\x99s \xef\xac\x81ber problem.\nJ. Droba (NASA JSC)\n\n\xe2\x80\x9cThe Nightmare\xe2\x80\x9d\n75,000+ faces\nTurbocharging View Factors, 7/3/2015\n\n4/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nA Tree Grows in Data\nSuppose a data set that has some sort of spatial association.\nBin Size b:\n99\n32\n16\n8\n4\n\nBinary trees are formed by dividing data set in half repeatedly.\nDo that in each dimension until each box has b items.\nData associated with space: Boundary faces F\nPlacement criterion: F \xe2\x86\xaa B if F \xe2\x88\xa9 B d\xe2\x88\x921 > 0\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n5/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nThe Hyperplane Separation Theorem\nWe pull out the artillery: convex analysis. We will power our\nintersection algorithm with this theorem:\nTheorem (Hyperplane Separation Theorem)\nLet A \xe2\x8a\x82 Rd be closed and K \xe2\x8a\x82 Rd be compact with both convex.\nThen A \xe2\x88\xa9 K = \xe2\x88\x85 if and only if there is a separating hyperplane\nP = {x \xe2\x88\x88 Rd x \xe2\x8b\x85 p = \xce\xb1} for some \xce\xb1 \xe2\x88\x88 R and p \xe2\x88\x88 Rd /{0} such that\n1\n\np \xe2\x8b\x85 a > \xce\xb1 for all p \xe2\x88\x88 P, a \xe2\x88\x88 A and p \xe2\x8b\x85 k < \xce\xb1 for all p \xe2\x88\x88 P, k \xe2\x88\x88 K\nor\n\n2\n\np \xe2\x8b\x85 a < \xce\xb1 for all p \xe2\x88\x88 P, a \xe2\x88\x88 A and p \xe2\x8b\x85 k > \xce\xb1 for all p \xe2\x88\x88 P, k \xe2\x88\x88 K\n\nTheorem (Plain Language Version)\nTwo nice sets A and K don\xe2\x80\x99t intersect if we can divide space\ninto A\xe2\x80\x99s half and K\xe2\x80\x99s half with a line (2D) or plane (3D).\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n6/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nThe Separating Axis Theorem\nTwo vectors span a plane in 3D, so testing for hyperplanes\ndirectly is expensive. Cheaper to test for separating axes:\nDe\xef\xac\x81nition (Separating Axis)\nLet P \xe2\x8a\x82 Rd be a separating hyperplane. \xce\xbe \xe2\x8a\x82 Rd is a separating\naxis if \xce\xbe \xe2\x8a\xa5 P.\nBecause dim P = d \xe2\x88\x92 1, dim \xce\xbe = 1. This leads to an obvious result:\nTheorem\nLet A \xe2\x8a\x82 Rd be closed and K \xe2\x8a\x82 Rd be compact with both convex.\nThen there exists a separating hyperplane for A and K if and\nonly if there exists a separating axis between them.\nThe key: when A and K are orthogonally projected onto \xce\xbe,\nA \xe2\x8b\x82 K = \xe2\x88\x85 if and only if the projection intervals do not overlap.\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n7/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nCollecting the Candidates\nThere are six ways for intersection to occur:\n\n! face\xe2\x80\x93node\n! edge\xe2\x80\x93node\n! node\xe2\x80\x93node\n\nface\xe2\x80\x93face\nface\xe2\x80\x93edge\nedge\xe2\x80\x93edge\n\nSame\nin 2D\n\nCan perturb non-intersecting faces and still maintain\nseparation. Gives these candidate separating axes:\n1\n\nFace normals from K\n\n2\n\nFace normals from K\xe2\x80\xb2\n\n3\n\nP\n\nCross product of edge from K\nwith one from K\xe2\x80\xb2 (3D only)\n\nK\n\nK\xe2\x80\xb2\n\nIn 2D, these are su\xef\xac\x83cient. In 3D, they cover face\xe2\x80\x93face and\nface\xe2\x80\x93edge cases. Edge\xe2\x80\x93edge cases can look like this\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n8/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nSAT for Symmetric Objects\nAlgorithm (SAT for Symmetric Objects)\n1\n2\n\nLet ck \xe2\x88\x88 K and ck\xe2\x80\xb2 \xe2\x88\x88 K\xe2\x80\xb2 be the centroids of K and K\xe2\x80\xb2 .\nLet \xce\xa0(x) denote the projection of x \xe2\x88\x88 Rd onto \xce\xbe. De\xef\xac\x81ne\nrk \xe2\x89\x9c max \xce\xa0(ni \xe2\x88\x92 ck )\nrk\xe2\x80\xb2 \xe2\x89\x9c max \xce\xa0(n\xe2\x80\xb2 \xe2\x88\x92 ck\xe2\x80\xb2 )\ni\n0\xe2\x89\xa4i\xe2\x89\xa4N \xe2\x88\x921\n\n3\n\n0\xe2\x89\xa4i\xe2\x89\xa4N \xe2\x88\x921\n\n\xcf\x81 \xe2\x89\x9c \xce\xa0(ck \xe2\x88\x92 ck\xe2\x80\xb2 )\nIf rk + rk\xe2\x80\xb2 < \xcf\x81, then \xce\xbe is a separating axis.\nP\n\nn0 \xe2\x88\x92ck\n\nn0 \xe2\x88\x92ck\n\nck \xe2\x80\xb2\nK\n\nK\n\nK\xe2\x80\xb2\n\n\xe2\x80\xb2\nn\xe2\x80\xb2 \xe2\x88\x92ck\xe2\x80\xb2\n0\n\nck\n\nK\n\nn\xe2\x80\xb2 \xe2\x88\x92ck\xe2\x80\xb2\n0\n\nck\n\xce\xbe\n\n\xce\xbe\nr k\xe2\x80\xb2\n\nr k\xe2\x80\xb2\nrk\n\n\xcf\x81\n\nJ. Droba (NASA JSC)\n\nrk\n\xcf\x81\n\nTurbocharging View Factors, 7/3/2015\n\n9/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nHow It Works\nThe SAT for symmetric objects works so e\xef\xac\x83ciently because\n1 K and K\xe2\x80\xb2 are symmetric about centroids c and c \xe2\x80\xb2 .\nk\nk\n\n\xe2\x87\x92 Projection intervals symmetric about \xce\xa0(ck ) and \xce\xa0(c\xe2\x80\xb2 ).\nk\n\xe2\x87\x92 It is su\xef\xac\x83cient to project the \xe2\x80\x9cradii\xe2\x80\x9d of K and K\xe2\x80\xb2 .\n\n2\n\nBy linearity of projection operator, we can project the\ncentroid-to-centroid segment.\n\nFor non-symmetric objects, it is a bit more complicated:\n1\n2\n\nMust project every node of K and K\xe2\x80\xb2 .\n\nMust project every node of the convex hull of K and K\xe2\x80\xb2 .\n\nBecause K and K\xe2\x80\xb2 are convex, extreme points of convex hull\ncome from nodes of K and K\xe2\x80\xb2 . Can reuse values from Step 1.\n\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n10/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nSAT for Non-symmetric Objects\nP\n\nAlgorithm\nK\xe2\x80\xb2\n\nK\n\n1\n\n\xce\xbe\n\n2\n\xcf\x81\n\nCompute lengths of proj. intervals:\nrk \xe2\x89\x9c max pi \xe2\x88\x92\n\nmin pi\n\n0\xe2\x89\xa4i\xe2\x89\xa4N \xe2\x88\x921\n\nK\n\n0\xe2\x89\xa4i\xe2\x89\xa4N \xe2\x88\x921\n\nmin p\xe2\x80\xb2\ni\n\n0\xe2\x89\xa4i\xe2\x89\xa4N \xe2\x88\x921\n\n\xce\xbe\n\n\xcf\x81\n\n0\xe2\x89\xa4i\xe2\x89\xa4N \xe2\x88\x921\n\n\xcf\x81 \xe2\x89\x9c max { max pi , max p\xe2\x80\xb2 }\ni\n0\xe2\x89\xa4i\xe2\x89\xa4N \xe2\x88\x921\n\n\xe2\x88\x92 min { min pi , min p\xe2\x80\xb2 }\ni\n\nr k\xe2\x80\xb2\n\nrk\n\n0\xe2\x89\xa4i\xe2\x89\xa4N \xe2\x88\x921\n\nrk\xe2\x80\xb2 \xe2\x89\x9c max p\xe2\x80\xb2 \xe2\x88\x92\ni\n\n\xe2\x80\xb2\n\nK\n\nbe nodes\n\np\xe2\x80\xb2 \xe2\x89\x9c n\xe2\x80\xb2 \xe2\x8b\x85 \xce\xbe\ni\ni\n\npi \xe2\x89\x9c ni \xe2\x8b\x85 \xce\xbe\n\nr k\xe2\x80\xb2\n\nrk\n\nN \xe2\x80\xb2 \xe2\x88\x921\n\nN \xe2\x88\x921\n\nLet {ni }i=0 and {n\xe2\x80\xb2 }i=0\ni\nof K and K\xe2\x80\xb2 . Put\n\n0\xe2\x89\xa4i\xe2\x89\xa4N \xe2\x88\x921\n\n3\n\n0\xe2\x89\xa4i\xe2\x89\xa4N \xe2\x88\x921\n\n\xce\xbe is separating axis if rk + rk\xe2\x80\xb2 < \xcf\x81.\n\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n11/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nSAT for Insertion in 2D\nCandidates for separating axes are face normals of box and\nnormal to the face/edge w \xe2\x89\x9c n1 \xe2\x88\x92 n0 :\n\xce\xbe 1 = (1, 0)T\n\n\xce\xbe 3 = ( \xe2\x88\x92 w(1) , w(0) )\n\nT\n\n\xce\xbe 2 = (0, 1)T\n\nBoth B and F are symmetric: can use SAT for symmetric\nobjects. Project w, box radius d \xe2\x89\x9c xmax \xe2\x88\x92 xmin , and\ncentroid-to-centroid vector m \xe2\x89\x9c n0 + n1 \xe2\x88\x92 xmax \xe2\x88\x92 xmin onto \xce\xbe:\nAxis\n\n\xce\xbe\n\nrk\n\n1\n\n(1, 0)\n\n2\n\n(0, 1)T\n\n3\n\n( \xe2\x88\x92 w(1) , w(0) )\n\nrk \xe2\x80\xb2\n\n(0)\n\n\xcf\x81\n\n(0)\n\nm(0)\n\nd(1)\n\nT\n\nw(1)\n\nm(1)\n\nd(0) w(1) + d(1) w(0)\n\n0\n\nw(0) m(1) \xe2\x88\x92 w(1) m(0)\n\nd\n\nT\n\nw\n\nBecause d(i) > 0, we can lose some absolute values in column 3.\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n12/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nSAT for Insertion in 3D\nIn 3D, we do not expect F to be symmetric. But B is! Can\ncompute the max and min of projection nodes vi of B directly:\nM \xe2\x89\x9c max(vi \xe2\x8b\x85 \xce\xbe) = \xce\xbe \xe2\x8b\x85 x+\n\nm \xe2\x89\x9c min(vi \xe2\x8b\x85 \xce\xbe) = \xce\xbe \xe2\x8b\x85 x\xe2\x88\x92\n\ni\n\n\xe2\x8e\xa7 (i)\n\xe2\x8e\xaa\n(i) \xe2\x8e\xaa xmax\nx+ = \xe2\x8e\xa8\n\xe2\x8e\xaa x(i)\n\xe2\x8e\xaa min\n\xe2\x8e\xa9\n\nif \xce\xbe\n\n(i)\n\ni\n\n\xe2\x8e\xa7 (i)\n\xe2\x8e\xaa\n(i) \xe2\x8e\xaa xmin\nxi = \xe2\x8e\xa8\n\xe2\x8e\xaa x(i)\n\xe2\x8e\xaa max\n\xe2\x8e\xa9\n\n\xe2\x89\xa50\n\nif \xce\xbe (i) < 0\n\nif \xce\xbe (i) \xe2\x89\xa5 0\nif \xce\xbe (i) < 0\n\nFirst set of candidate are B\xe2\x80\x99s face normals \xce\xbe 1 = (1, 0, 0)T ,\n\xce\xbe 2 = (0, 1, 0)T , and \xce\xbe 3 = (0, 0, 1)T and normal \xce\xbd from F:\nAxis\n\n\xce\xbe\n\nrk\n\nrk \xe2\x80\xb2\n(0)\nni\n\n1\n\n(1, 0, 0)T\n\nd(0)\n\nmax\n\n2\n\n(0, 1, 0)T\n\nd(1)\n\nmax ni\n\n3\n\n(0, 0, 1)T\n\nd(2)\n\nmax ni\n\n4\n\n\xce\xbd\n\nM \xe2\x88\x92m\n\n(1)\n(2)\n\n\xcf\x81\n\n(0)\n\xe2\x88\x92 min ni\n(1)\n\n\xe2\x88\x92 min ni\n\n(2)\n\n\xe2\x88\x92 min ni\n\nmax \xce\xbd \xe2\x8b\x85 ni \xe2\x88\x92 min \xce\xbd \xe2\x8b\x85 ni\n\nJ. Droba (NASA JSC)\n\n(0)\n(0)\n(0)\n(0)\nmax {xmax , max ni } \xe2\x88\x92 min {xmin , min ni }\n(1)\n\n(1)\n\n(1)\n\n(1)\n\n(2)\n\n(2)\n\n(2)\n\n(2)\n\nmax {xmax , max ni } \xe2\x88\x92 min {xmin , min ni }\nmax {xmax , max ni } \xe2\x88\x92 min {xmin , min ni }\nmax {M, max \xce\xbd \xe2\x8b\x85 ni } \xe2\x88\x92 min {m, min \xce\xbd \xe2\x8b\x85 ni }\nTurbocharging View Factors, 7/3/2015\n\n13/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nSAT for Insertion in 3D (continued)\nSecond set of axes given by cross products of box edges with\nface edges fi \xe2\x89\x9c ni+1 \xe2\x88\x92 ni :\n\xce\xbe 5,i = (1, 0, 0)T \xc3\x97 fi\n\n\xce\xb1j,i \xe2\x89\x9c nj \xe2\x8b\x85 \xce\xbe 5,i\n\n\xce\xbe 6,i = (0, 1, 0) \xc3\x97 fi\n\n\xce\xb2j,i \xe2\x89\x9c nj \xe2\x8b\x85 \xce\xbe 6,i\n\n\xce\xbe 7,i = (0, 0, 1)T \xc3\x97 fi\n\n\xce\xb3j,i \xe2\x89\x9c nj \xe2\x8b\x85 \xce\xbe 7,i\n\nT\n\nCan compute everything without forming fi or ever computing\ncross product. Also have \xce\xb1j,i = \xce\xb1j+1,i , similarly for \xce\xb2j,i and \xce\xb3j,i .\nAxis\n\n\xce\xbe\n\nrk\n\n5, i\n\n(2) (1) T\n(0, \xe2\x88\x92fi , fi )\n\nM5,i \xe2\x88\x92 m5,i\n\nmax \xce\xb1j,i \xe2\x88\x92 min \xce\xb1j,i max {M5,i , max \xce\xb1j,i } \xe2\x88\x92 min {m5,i , min \xce\xb1j,i }\n\n6, i\n\n(fi , 0, \xe2\x88\x92fi )\n\nM6,i \xe2\x88\x92 m6,i\n\nmax \xce\xb2j,i \xe2\x88\x92 min \xce\xb2j,i max {M6,i , max \xce\xb2j,i } \xe2\x88\x92 min {m6,i , min \xce\xb2j,i }\n\n7, i\n\n( \xe2\x88\x92 fi , fi , 0)\n\nM7,i \xe2\x88\x92 m7,i\n\nmax \xce\xb3j,i \xe2\x88\x92 min \xce\xb3j,i max {M7,i , max \xce\xb3j,i } \xe2\x88\x92 min {m7,i , min \xce\xb3j,i }\n\n(2)\n\n(1)\n\n(0) T\n\n(0)\n\nT\n\nrk \xe2\x80\xb2\nj\xe2\x89\xa0i\n\nj\xe2\x89\xa0i\n\nj\xe2\x89\xa0i\n\n\xcf\x81\nj\xe2\x89\xa0i\nj\xe2\x89\xa0i\nj\xe2\x89\xa0i\n\nj\xe2\x89\xa0i\n\nj\xe2\x89\xa0i\n\nj\xe2\x89\xa0i\n\nj\xe2\x89\xa0i\n\nj\xe2\x89\xa0i\n\nj\xe2\x89\xa0i\n\nMj,i and mj,i are de\xef\xac\x81ned/computed like M and m of last slide.\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n14/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nTrees Are Made for Climbing\nHave a mesh. With a tree built from it.\nShoot a ray from one of the faces.\nNow want to identify which boxes the ray visits.\n\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n15/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nIntersection with Child Boxes\nSAT gives no info about intersection point, so poor for\nrecursion. Traversal algorithm will look like \xe2\x80\x9c\xef\xac\x81rst attempt.\xe2\x80\x9d\nSuppose we have ray r(t) = p + tr. p is inside mother box, so we\nneed to move it out: p \xe2\x86\xa4 p \xe2\x88\x92 nr\xe2\x88\x86t, where\n\xe2\x8e\xa7 (i)\n\xe2\x8e\xaa xmax \xe2\x88\x92 x(i) \xe2\x8e\xab\n\xe2\x8e\xaa\n1\n\xe2\x8e\xaa\nmin \xe2\x8e\xaa\n\xe2\x88\x86t \xe2\x89\x9c min \xe2\x8e\xa8\n\xe2\x8e\xac\n\xe2\x8e\xaa\n5 1\xe2\x89\xa4i\xe2\x89\xa4d \xe2\x8e\xaa\nr(i)\n\xe2\x8e\xaa\n\xe2\x8e\xaa\n\xe2\x8e\xa9\n\xe2\x8e\xad\n(0)\n(0)\n(0)\nxmid\n\nxmin\n\nxmax\n\n(1)\nxmax\n\n(1)\n\nt1\n\nv1\n\nv0\n(1)\n\nEntry\n\n(1)\ntm\n\n(1)\nxmid\n\nxmin\n\nv3\n\n(0)\nt1\n\nCompute times:\n\n(0)\n\ntm\n\nExit\nv2\n\n(1)\nt0\n\nMidpoint\n\n(0)\n\np t0\n\nJ. Droba (NASA JSC)\n\n(i)\nt0\n(i)\n\n(i)\n\n\xe2\x89\x9c\n\nt1 \xe2\x89\x9c\n\n(i)\n\nxentry \xe2\x88\x92 p0\n\nr(i)\n(i)\n\xe2\x88\x92 p0\nr(i)\n\n(i)\nxexit\n\n1 (i) (i)\nt(i) \xe2\x89\x9c [t0 + t1 ]\nm\n2\n\nTurbocharging View Factors, 7/3/2015\n\n16/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\n2D Ray Traversal\n(0)\n\n(0)\n\n(0)\n\nxmid\n\nxmin\n\nxmax\n\n(1)\nxmax\n\n(1)\n\nt1\n\nv1\ntm\n\nv0\n(1)\n\n(0)\n\nt1\n\n(1)\n\n(1)\n\nxmid\n\nxmin\n\nv3\n\n(0)\ntm\n\nv2\n\n(1)\n\n(0)\n\n(1)\n\n(1)\n\n(0)\n\n(0)\n\n(1)\n[t(0) , t1 ] = [t(0) , t1 ] \xe2\x8b\x82 [tm , t1 ]\nm\nm\n\nv1\n\n(0)\n\n(0)\n\n(1)\n[t(0) , t(1) ] = [t(0) , t1 ] \xe2\x8b\x82 [t0 , tm ]\nm\nm\nm\n\nv3\n\np t0\n\nChild Box\n\n(1)\n\n(1)\n[t0 , t(0) ] = [t0 , t(0) ] \xe2\x8b\x82 [t0 , tm ]\nm\nm\n\nv0\nv2\n\n(1)\nt0\n\nTime spent in:\n\n(0)\n\nCondition for Entry\n\nEntry Times\n\nv0\n\n(0) (1)\nmax {t0 , t0 }\n\nv1\n\nmax {t0 , tm } < min {tm , t1 }\n\nv2\n\nmax {tm , t0 } < min {t1 , tm }\n\nv3\n\nmax {tm , tm } < min {t1 , t1 }\n\n<\n\n(1)\n\n(1)\n= [t0 , t(0) ] \xe2\x8b\x82 [tm , t1 ]\nm\n\n\xe2\x88\x85\n(0) (1)\nmin {tm , tm }\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\nExit Times\n\n(0)\nt0\n\ntm\n\n(0)\n\nt0\n\n(0)\n\ntm\n\n(0)\n\ntm\n\n(1)\nt0\n(1)\n\ntm\n\n(1)\n\nt0\n\n(1)\n\ntm\n\n(0)\n\n(0)\n\ntm\n\n(0)\n\nt1\n\n(0)\n\nt1\n\n(1)\n\ntm\n\n(1)\n\nt1\n\n(1)\n\ntm\n\n(1)\n\nt1\n\n...but this table will only be valid if r(i) > 0 for each i.\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n17/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\n2D Ray Traversal\n(0)\n\n(0)\n\n(0)\n\nxmid\n\nxmin\n\nxmax\n\n(1)\nxmax\n\n(1)\n\nt1\n\nv1\ntm\n\nv0\n(1)\n\n(0)\n\nt1\n\n(1)\n\n(1)\n\nxmid\n\nxmin\n\nv3\n\n(0)\ntm\n\nv2\n\n(1)\n\n(0)\n\n(1)\n\n(1)\n\n(0)\n\n(0)\n\n(1)\n[t(0) , t1 ] = [t(0) , t1 ] \xe2\x8b\x82 [tm , t1 ]\nm\nm\n\nv1\n\n(0)\n\n(0)\n\n(1)\n[t(0) , t(1) ] = [t(0) , t1 ] \xe2\x8b\x82 [t0 , tm ]\nm\nm\nm\n\nv3\n\np t0\n\nChild Box\n\n(1)\n\n(1)\n[t0 , t(0) ] = [t0 , t(0) ] \xe2\x8b\x82 [t0 , tm ]\nm\nm\n\nv0\nv2\n\n(1)\nt0\n\nTime spent in:\n\n(0)\n\nCondition for Entry\n\nEntry Times\n\nv0\n\n(0) (1)\nmax {t0 , t0 }\n\nv1\n\nmax {t0 , tm } < min {tm , t1 }\n\nv2\n\nmax {tm , t0 } < min {t1 , tm }\n\nv3\n\nmax {tm , tm } < min {t1 , t1 }\n\n<\n\n(1)\n\n(1)\n= [t0 , t(0) ] \xe2\x8b\x82 [tm , t1 ]\nm\n\n\xe2\x88\x85\n(0) (1)\nmin {tm , tm }\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\nExit Times\n\n(0)\nt0\n\ntm\n\n(0)\n\nt0\n\n(0)\n\ntm\n\n(0)\n\ntm\n\n(1)\nt0\n(1)\n\ntm\n\n(1)\n\nt0\n\n(1)\n\ntm\n\n(0)\n\n(0)\n\ntm\n\n(0)\n\nt1\n\n(0)\n\nt1\n\n(1)\n\ntm\n\n(1)\n\nt1\n\n(1)\n\ntm\n\n(1)\n\nt1\n\n...but this table will only be valid if r(i) > 0 for each i.\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n17/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\n2D Ray Traversal\n(0)\n\n(0)\n\n(0)\n\nxmid\n\nxmin\n\nxmax\n\n(1)\nxmax\n\n(1)\n\nt1\n\nv1\ntm\n\nv0\n(1)\n\n(0)\n\nt1\n\n(1)\n\n(1)\n\nxmid\n\nxmin\n\nv3\n\n(0)\ntm\n\nv2\n\n(1)\n\n(0)\n\n(1)\n\n(1)\n\n(0)\n\n(0)\n\n(1)\n[t(0) , t1 ] = [t(0) , t1 ] \xe2\x8b\x82 [tm , t1 ]\nm\nm\n\nv1\n\n(0)\n\n(0)\n\n(1)\n[t(0) , t(1) ] = [t(0) , t1 ] \xe2\x8b\x82 [t0 , tm ]\nm\nm\nm\n\nv3\n\np t0\n\nChild Box\n\n(1)\n\n(1)\n[t0 , t(0) ] = [t0 , t(0) ] \xe2\x8b\x82 [t0 , tm ]\nm\nm\n\nv0\nv2\n\n(1)\nt0\n\nTime spent in:\n\n(0)\n\nCondition for Entry\n\nEntry Times\n\nv0\n\n(0) (1)\nmax {t0 , t0 }\n\nv1\n\nmax {t0 , tm } < min {tm , t1 }\n\nv2\n\nmax {tm , t0 } < min {t1 , tm }\n\nv3\n\nmax {tm , tm } < min {t1 , t1 }\n\n<\n\n(1)\n\n(1)\n= [t0 , t(0) ] \xe2\x8b\x82 [tm , t1 ]\nm\n\n\xe2\x88\x85\n(0) (1)\nmin {tm , tm }\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\nExit Times\n\n(0)\nt0\n\ntm\n\n(0)\n\nt0\n\n(0)\n\ntm\n\n(0)\n\ntm\n\n(1)\nt0\n(1)\n\ntm\n\n(1)\n\nt0\n\n(1)\n\ntm\n\n(0)\n\n(0)\n\ntm\n\n(0)\n\nt1\n\n(0)\n\nt1\n\n(1)\n\ntm\n\n(1)\n\nt1\n\n(1)\n\ntm\n\n(1)\n\nt1\n\n...but this table will only be valid if r(i) > 0 for each i.\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n17/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\n2D Ray Traversal\n(0)\n\n(0)\n\n(0)\n\nxmid\n\nxmin\n\nxmax\n\n(1)\nxmax\n\n(1)\n\nt1\n\nv1\ntm\n\nv0\n(1)\n\n(0)\n\nt1\n\n(1)\n\n(1)\n\nxmid\n\nxmin\n\nv3\n\n(0)\ntm\n\nv2\n\n(1)\n\n(0)\n\n(1)\n\n(1)\n\n(0)\n\n(0)\n\n(1)\n[t(0) , t1 ] = [t(0) , t1 ] \xe2\x8b\x82 [tm , t1 ]\nm\nm\n\nv1\n\n(0)\n\n(0)\n\n(1)\n[t(0) , t(1) ] = [t(0) , t1 ] \xe2\x8b\x82 [t0 , tm ]\nm\nm\nm\n\nv3\n\np t0\n\nChild Box\n\n(1)\n\n(1)\n[t0 , t(0) ] = [t0 , t(0) ] \xe2\x8b\x82 [t0 , tm ]\nm\nm\n\nv0\nv2\n\n(1)\nt0\n\nTime spent in:\n\n(0)\n\nCondition for Entry\n\nEntry Times\n\nv0\n\n(0) (1)\nmax {t0 , t0 }\n\nv1\n\nmax {t0 , tm } < min {tm , t1 }\n\nv2\n\nmax {tm , t0 } < min {t1 , tm }\n\nv3\n\nmax {tm , tm } < min {t1 , t1 }\n\n<\n\n(1)\n\n(1)\n= [t0 , t(0) ] \xe2\x8b\x82 [tm , t1 ]\nm\n\n\xe2\x88\x85\n(0) (1)\nmin {tm , tm }\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\nExit Times\n\n(0)\nt0\n\ntm\n\n(0)\n\nt0\n\n(0)\n\ntm\n\n(0)\n\ntm\n\n(1)\nt0\n(1)\n\ntm\n\n(1)\n\nt0\n\n(1)\n\ntm\n\n(0)\n\n(0)\n\ntm\n\n(0)\n\nt1\n\n(0)\n\nt1\n\n(1)\n\ntm\n\n(1)\n\nt1\n\n(1)\n\ntm\n\n(1)\n\nt1\n\n...but this table will only be valid if r(i) > 0 for each i.\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n17/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\n2D Ray Traversal\n(0)\n\n(0)\n\n(0)\n\nxmid\n\nxmin\n\nxmax\n\n(1)\nxmax\n\n(1)\n\nt1\n\nv1\ntm\n\nv0\n(1)\n\n(0)\n\nt1\n\n(1)\n\n(1)\n\nxmid\n\nxmin\n\nv3\n\n(0)\ntm\n\nv2\n\n(1)\n\n(0)\n\n(1)\n\n(1)\n\n(0)\n\n(0)\n\n(1)\n[t(0) , t1 ] = [t(0) , t1 ] \xe2\x8b\x82 [tm , t1 ]\nm\nm\n\nv1\n\n(0)\n\n(0)\n\n(1)\n[t(0) , t(1) ] = [t(0) , t1 ] \xe2\x8b\x82 [t0 , tm ]\nm\nm\nm\n\nv3\n\np t0\n\nChild Box\n\n(1)\n\n(1)\n[t0 , t(0) ] = [t0 , t(0) ] \xe2\x8b\x82 [t0 , tm ]\nm\nm\n\nv0\nv2\n\n(1)\nt0\n\nTime spent in:\n\n(0)\n\nCondition for Entry\n\nEntry Times\n\nv0\n\n(0) (1)\nmax {t0 , t0 }\n\nv1\n\nmax {t0 , tm } < min {tm , t1 }\n\nv2\n\nmax {tm , t0 } < min {t1 , tm }\n\nv3\n\nmax {tm , tm } < min {t1 , t1 }\n\n<\n\n(1)\n\n(1)\n= [t0 , t(0) ] \xe2\x8b\x82 [tm , t1 ]\nm\n\n\xe2\x88\x85\n(0) (1)\nmin {tm , tm }\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\n(0)\n\n(1)\n\nExit Times\n\n(0)\nt0\n\ntm\n\n(0)\n\nt0\n\n(0)\n\ntm\n\n(0)\n\ntm\n\n(1)\nt0\n(1)\n\ntm\n\n(1)\n\nt0\n\n(1)\n\ntm\n\n(0)\n\n(0)\n\ntm\n\n(0)\n\nt1\n\n(0)\n\nt1\n\n(1)\n\ntm\n\n(1)\n\nt1\n\n(1)\n\ntm\n\n(1)\n\nt1\n\n...but this table will only be valid if r(i) > 0 for each i.\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n17/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nRays with Negative Components\nConsider the reversal of the previous example:\n(0)\n\n(0)\n\n(0)\n\nxmid\n\nxmin\n\nv2\n\nv\n%\n\n1\n\n3\n\n(1)\n\nv3\nv0\n\n(1)\n\n(0)\n\nv1 (Failure)\n\nt0\n\nReversal\n\n%\n\n(0)\n\ntm\n\nv1\nv2\n\n%\n\n(0) (0)\n[tm , t1 ]\n\nPrevious\n\n(1)\ntm\n\nxmid\n\n(1)\nxmin\n\n(1)\nt0\n\nv0\n\nv\n%\n\np\n\nxmax\n\n(1)\nxmax\n\n[t0 , tm ] \xe2\x8b\x82 [tm , t1 ]\n\n(0)\n\n(0)\n\n(1)\n\n(1)\n\n(1)\n\n(1)\n\n\xe2\x8b\x82 [t0 , tm ]\n\nt1\n\n(0)\n\nt1\n\nv3\nReversal\nPrevious\n\n(0) (0)\n[t0 , tm ]\n(1) (0)\n[tm , t1 ]\n\n\xe2\x8b\x82\n\xe2\x8b\x82\n\nv2\n(1) (1)\n[t0 , tm ]\n(1) (1)\n[tm , t1 ]\n\n(0) (0)\n[t0 , tm ]\n(0) (0)\n[tm , t1 ]\n\n\xe2\x8b\x82\n\nv0\n(1) (1)\n[tm , t1 ]\n(1)\n\n(1)\n\n\xe2\x8b\x82 [t0 , tm ]\n\n(0) (0)\n[tm , t1 ]\n(0)\n\n(0)\n\n(1)\n\n(1)\n\n(1)\n\n(1)\n\n\xe2\x8b\x82 [tm , t1 ]\n\n[t0 , tm ] \xe2\x8b\x82 [t0 , tm ]\n\nA simple relabeling of boxes will allow reuse of previous table!\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n18/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nThe Relabeling Scheme\nThe general mapping for box relabeling is \xe2\x86\xa6 \xe2\x8a\x95 a, where\na\xe2\x89\x9c{\n\n2\xcf\x83(0) + \xcf\x83(1)\n4\xcf\x83(0) + 2\xcf\x83(1) + \xcf\x83(2)\n\xcf\x83(i) \xe2\x89\x9c {\n\n0\n1\n\nif r(i) \xe2\x89\xa5 0\nif r(i) < 0\n\nif d = 2\nif d = 3\n\nWritten as binary string, a encodes the signs of the components\nof r (1 negative, 0 nonnegative).\nv3\nv7\nIn 3D, the box labeling order\ncompatible with the relabeling\nscheme is this goofy thing:\n\nv2\n\n(1)\n\nv6\n\nv7\n\nxmax\n\nv6\n\nv2\n\nv6\nv5\n\n(1)\n\nxmid\n\nWith this, we can make a table\nfor 3D very similar to 2D one.\n\nv1\n\n(0)\n\n(\nxm 2)\nax\n\n(2\nm )\nid\n\nx\n\nv0\n\n(1)\nxmin\n\nxmin\n\nJ. Droba (NASA JSC)\n\nv4\n\nv4\n\n(0)\n\nxmid\n\nx ( 2)\n(0) m\nxmax in\n\nTurbocharging View Factors, 7/3/2015\n\n19/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nOne Last Thing: In\xef\xac\x81nite Arithmetic Module\nComputation of entry/exit times totally fails if r(i) = 0.\nIf r(i) < \xce\xb5 \xe2\x89\xaa 1, then the numerics are bad too.\nSmall (positive) direction value is inducer of exit only if\n\xe2\x88\x9a\n1\n(i\xe2\x80\xb2 )\n(i\xe2\x80\xb2 )\n(i)\n(i)\n\xe2\x88\x921\nxmax \xe2\x88\x92 p > (xmax \xe2\x88\x92 p )\n2\xce\xb52\nSolution: when r(i) < \xcf\x84 , set\n(i)\n\n(i)\n\nt0 = \xe2\x88\x92\xe2\x88\x9e\n(i)\n\nt1 = +\xe2\x88\x9e\n(i)\n\nSays that xmin \xe2\x89\xa4 r(i) (t) \xe2\x89\xa4 xmax for all t.\n(i)\nComputation of tm as before is unde\xef\xac\x81ned. Instead, de\xef\xac\x81ne\n\xe2\x8e\xa7\n(i)\n\xe2\x8e\xaa\n\xe2\x8e\xaa +\xe2\x88\x9e if p(i) < xmid\nt(i) = \xe2\x8e\xa8\nm\n\xe2\x8e\xaa \xe2\x88\x92\xe2\x88\x9e if p(i) \xe2\x89\xa5 x(i)\n\xe2\x8e\xaa\n\xe2\x8e\xa9\nmid\nJ. Droba values have Turbocharging View Factors, 7/3/2015\nwhenever in\xef\xac\x81nite(NASA JSC)\nbeen set.\n\n20/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nRogues Gallery (Part I)\n3D Concentric Spheres (5k Rays)\n768 faces, Trunk: 47.69s\n\n768 faces\n\nBin Size\n30\n20\n10\n5\n\nRun Time\n9.72s\n7.99s\n5.97s\n4.44s\n\nSpeed Up\n4.9x\n6.0x\n8.0x\n10.7x\n\nRays Di\xef\xac\x80.\n\nCorrected\n\n2452\n\n0.063854%\n\n3D Concentric Spheres, 2-Plane Symmetry (5k Rays)\n192 faces, Trunk: 20.52s\n\n192 faces\n\nBin Size\n30\n20\n10\n5\n\nRun Time\n2.59s\n2.15s\n1.86s\n1.51s\n\nJ. Droba (NASA JSC)\n\nSpeed Up\n7.9x\n9.5x\n11.0x\n13.6x\n\nRays Di\xef\xac\x80.\n\nCorrected\n\n2951\n\n0.255420%\n\nTurbocharging View Factors, 7/3/2015\n\n21/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nRogues Gallery (Part II)\n3D Cylinder, 1-Plane Symmetry (10k Rays)\n764 faces, Trunk: 77.22s\n\n764 faces\n\nBin Size\n30\n20\n10\n8\n\nRun Time\n17.16s\n9.03s\n7.37s\n5.90s\n\nSpeed Up\n4.5x\n8.5x\n10.5x\n13.1x\n\nRays Di\xef\xac\x80.\n\nCorrected\n\n8\n\n0.000104%\n\n3D Cylinder (10k Rays)\n1528 faces, Trunk: 307.05s\n\n1528 faces\n\nBin Size\n30\n20\n10\n8\n\nRun Time\n41.41s\n21.83s\n17.95s\n14.07s\n\nJ. Droba (NASA JSC)\n\nSpeed Up\n7.4x\n14.1x\n17.1x\n21.8x\n\nRays Di\xef\xac\x80.\n\nCorrected\n\n16\n\n0.000104%\n\nTurbocharging View Factors, 7/3/2015\n\n22/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nRogues Gallery (Part III)\n3D Cylinder, Fine Mesh (10k Rays)\n6414 faces, Trunk: 9892.82s\n\n6414 faces\n\nBin Size\n30\n20\n10\n8\n\nRun Time\n203.97s\n121.03s\n84.40s\n75.02s\n\nSpeed Up\n48.5x\n81.5x\n117.2x\n131.9x\n\nRays Di\xef\xac\x80.\n\nCorrected\n\n34\n\n0.000053%\n\n2D Cavity (5k Rays)\n216 faces, Trunk: 3.01s\n\n216 faces\n\nBin Size\n30\n20\n10\n5\n\nRun Time\n1.48s\n1.39s\n1.27s\n1.02s\n\nJ. Droba (NASA JSC)\n\nSpeed Up\n2.0x\n2.2x\n2.4x\n3.0x\n\nRays Di\xef\xac\x80.\n\nCorrected\n\n0\n\n\xe2\x80\x94\n\nTurbocharging View Factors, 7/3/2015\n\n23/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\n\xe2\x80\x9cThe Monster\xe2\x80\x9d\nThe primary motivation for doing all this work was this beast:\n\n!!!\nup\n\n26,232 Faces\n1,000,000 Rays\n\n5x\n18\n\ndee\nSp\n\n\xe2\x80\x9cBrute Force\xe2\x80\x9d\n96 hours\n12 Restarts\nJ. Droba (NASA JSC)\n\nTree\n31 minutes\n0 Restarts\nTurbocharging View Factors, 7/3/2015\n\n24/25\n\nIntroduction\n\nTree Building\n\nTraversal Algorithm\n\nPerformance\n\nSummary and Conclusions\n\nTree-based search:\nHas three speeds: Fast, Blazing, and Ludicrous\nNumerically robust thanks to Separating Axis Test\nPretty simple to implement\n\nJ. Droba (NASA JSC)\n\nTurbocharging View Factors, 7/3/2015\n\n25/25\n\n'