b'NASA Technical Memorandum 86711\n\nNASA-TM-86711 19850024482\n\nThe NAS Kernel Benchmark\nProgram\nDavid H. Bailey and John T. Barton\n\nAugust 1985\n\nl! Bn] nv ~ nryy\nAUG 2 j 1985\n1.I.I:Glft !<\'_S\'::I,RCI-i :::ErJlEI<\nl CR.lr.y. /JI,SA\n\n.\'Ii \'1111-\'.\' IN, \\I\'RGI~,r,\n\nNJ\\SJ\\\n\nNational Aeronautics and\nSpace Administration\n1111111111111 1111 1111111111 111111111111111111\n\nNFOI068\n\nNASA Technical Memorand\\,lm 86711\n\nThe NAS Kernel Benchmark\nProgram.\nDavid H. Bailey, Informatics General Corporation, Palo Alto, California\nJohn T. Barton, Ames Research Center, Moffett Field, California\n\nAugust 1985\n\nNI\\S/\\\n\nNational Aeronautics and\nSpace Administration\n\nAmes Research Center\nMoffett Field, California 94035\n\nTHE NAS KERNEL BENCHMARK PROGRAM\nDavid H. Baileyl and John T. Barton2\nAmes Research Center\n\nSUMMARY\nA benchmark test program that measures supercomputer performance has been developed for the use of the NAS (Numerical Aerodynamic Simulation) Projects Office at\nNASA Ames Research Center. This benchmark program is described in detail and the\nspecific ground rules for running the program as a performance test are discussed.\n\n1 Employee of Informatics General Corp., Palo Alto, California, under contract NAS2-1l555.\n2Employee of NASA Ames Research Center in the NAS Projects Office.\n\n1\n\nINTRODUCTION\nA benchmark test program has been developed for use by the NAS program at NASA\nAmes Research Center to aid in the evaluation of supercomputer performance. This program consists of seven Fortran test kernels that perform calculations that are typical of\nAmes supercomputing. It is expected that the performance of a supercomputer system\non this program will provide an accurate projection of the performance of the system on\nactual NAS program computer codes. This paper describes the test program in detail and\nlists the specific ground rules that have been established for running the program as a\nperformance test.\n\nPROGRAM DESCRIPTION\nThe NAS Kernel Benchmark Program consists of approximately 1000 lines of Fortran\ncode, organized into seven separate tests. Each individual test consists of a loop that\niteratively calls a certain subroutine. These subroutines were chosen after review of many\nof the calculations currently being performed on Ames supercomputers and by recommendations from a number of Ames scientists and programmers, particularly those working\non computational fluid dynamics problems. In most cases, these subroutines have been\nextracted from actual programs currently in use, and they have been incorporated into\nthe NAS Kernel Benchmark Program with only minor changes. Thus it is felt that these\ntest kernels are a representative cross section of expected NAS program supercomputing,\nand the performance of a computer system (both its hardware and its Fortran compiler)\non these tests should be a reliable predictor of the actual system performance on NAS\nuser programs.\nThe seven selected programs all emphasize the vector performance of a computer system. Almost all of the floating-point operations indicated in these Fortran subroutines are\ncontained in loops that are computable by vector operations, provided that the Fortran\ncompiler of the computer system being tested is sufficiently powerful in its vectorization\nanalysis, and provided that the hardware design of the computer includes the necessary\nvector instructions. Most serious supercomputer programs currently in use at Ames are\nfairly highly vectorized, and it is expected that programs to be developed in the future\nwill virtually all be designed to effectively use the vector processing capabilities of supercomputers. Some programs that have substantial scalar processing will continue to be\nused, but it is expected that their numbers will decline as algorithms and codes that are\nmore suitable for vector processing are developed. Another reason for emphasizing vector\nperformance in these benchmark kernels is that it is not very meaningful to average, even\nin a harmonic average sense, the performance of a supercomputer on a scalar code with\nits performance on a vector code.\nThis program not only tests the hardware execution speed of a computer, but it\nalso tests the effectiveness of the Fortran compiler. It is clear that a phenomenally fast\nhardware design is worthless unless it is coupled with a Fortran compiler that can fully\n2\n\nutilize the advanced hardware design. Furthermore, it is becoming increasingly clear that\nvectorization and other optimizations must either be completely automatic or be very\neasy to direct. If effective utilization of a computer requires massive redesign of otherwise\nwell-written, standard Fortran-77 code, or if a high level of performance is possible only by\nconsiderable human intervention, then the actual usable power of the computer is severely\nreduced.\nThe seven test kernels of the NAS Kernel Benchmark Program have, for the most part,\nbeen developed quite recently. As a result, they represent Fortran programs that have been\ndesigned and written for modern vector computation, as opposed to the somewhat dated\ncode that is used for other popular benchmark programs. It might be argued that there\nis some inherent bias in the test towards the Cray computers, since most of these kernels\nwere written on a Cray X-MP. However, substantial care was exercised in the selection of\nthese kernels to insure that none of them had any constructs that would unduly favor the\nCray line. As much as possible, subroutines were selected that were merely straightforward\nFortran code, intelligently coded with loops that are capable of being executed with vector\noperations, but otherwise neutral towards any particular machine. In fact, in the process\nof selecting these kernels for testing, it was discovered that some of them actually caused\nunforeseen difficulties for the Cray compiler. Nevertheless, they were left in the test suite\nto maintain objectivity.\nPerformance is measured by the NAS Kernel Benchmark Program in MFLOPS (millions of floating-point operations per second). The precise number of floating-point operations for the various functions used in the test kernels is shown in Table 1. These numbers\nare based on actual counts of 64-bit floating-point operations in published algorithms.\nIt should be noted that this program only measures MFLOPS rates. Disk I/O, operating system efficiency, and other important factors of overall performance are not measured\nby this benchmark program. Also, several of the test subroutines perform a significant\namount of memory move, integer, and logical operations, none of which is included in the\nfloating-point operation count.\nThe following is a description of the seven proposed Fortran test kernels. Other features are summarized in Table 2.\n1. MXM - This subroutine performs the usual matrix product on two input matrices.\nThe subroutine employs a four-way unrolled, outer product matrix multiply algorithm that is especially effective for most vector computers. See [11 for a discussion\nof this algorithm.\n\n2. CFFT2D - This test performs a complex radix 2 FFT on a two dimensional input array, returning the result in place. The test kernel actually consists of two\nsubroutines that perform FFTs along the first and second dimension of the array,\nrespectively, taking advantage of the parallel structure of the array. See [21 for a\ndiscussion of the FFT algorithm used.\n3. CHOLSKY - This subroutine performs a Cholesky decomposition in parallel on\n3\n\nTable 1: Floating-point Operation Counts\nFIRST\nARGUMENT\nReal\nReal\nReal\n\n1\nReal\nReal\nReal\nComplex\nComplex\n\n1\nReal\nComplex\nComplex\nComplex\nComplex\nReal\nReal\nReal\nReal\nReal\nComplex\nComplex\nComplex\n\nFLOATING\nSECOND\nFUNCTION ARGUMENT PT.OPS.\n1\nReal\n+\n1\nReal\n1\nReal\n*\n2\nReal\n/\n3\nReal\n/\n\n-\n\n2\n\n**\n**\n*\n\nReal\nReal\nReal\nComplex\nComplex\nComplex\nComplex\nComplex\nComplex\n\n/\n/\n\n/\n+\n\n*\n\n/\n\nSQRT\nEXP\nLOG\nSIN\nATAN\nABS\nEXP\nLOG\n\n1\n45\n2\n4\n7\n9\n\n2\n2\n6\n\n13\n12\n18\n25\n25\n25\n15\n70\n\n65\n\n4\n\nTable 2: Kernel Features\nFEATURE\nTwo dimensional arrays\nMultidimensional arrays\nDimensions with colons\nInteger arrays\nInteger functions in indices\nIF statements in inner loops\nScientific function calls\nComplex arithmetic\nComplex function calls\nInner loop memory strides\n\nInner loop vector lengths\n\n4.\n5.\n\n6.\n7.\n\n2\nX\n\n1\nX\n\nX\n\nX\nX\n\n1\n2\n256\n\n1\n\n256 128\n256\n\nKERNEL\n3\n4\n5\nX\nX\nX\nX\nX\nX\nX\nX\nX\n1\n1\n1\n4\n2\n2\n750 500\n900\n250 28\n5\n100\n500\nX\n\n6\nX\nX\nX\nX\nX\nX\nX\n1\n\n7\nX\nX\n\n128\n\n100 128\n500\n1000\n\na set of input matrices, which are actually input to the subroutine as a single\nthree-dimensional array.\nBTRIX - This kernel performs a block tridiagonal matrix solution along one dimension of a four dimensional array.\nGMTRY - This subroutine sets up arrays for a vortex method solution and performs Gaussian elimination on the resulting array. This kernel is noted for a number\nof loops that are challenging to vectorize.\nEMIT - Also extracted from a vortex code, this subroutine creates new vortices\naccording to certain boundary conditions.\nVPENTA - This subroutine simultaneously inverts three matrix pentadiagonals in\na highly parallel fashion.\n\nIn each of the above test subroutines, the input data arrays are filled by a portable\npseudorandom number generator in the calling program. This feature insures that all\ncomputers running the NAS Kernel Benchmark Program will perform the required calculations on the same numbers. It also permits the output results to be checked for accuracy.\nEach of the seven tests is independent from the others - none depends on results calculated\nin a previous test progr~m. Thus program alterations to improve the execution speed of\none of the test kernels may be made without fear of affecting the other kernels.\n5\n\nGROUND RULES FOR PERFORMANCE TESTING\nWorlton\'s recent article [3J pointed out some of the difficulties that are involved in\nsupercomputer performance testing. Most of these problems are a result of the lack of\nwell-defined controls on these tests. For instance, in some recent test results, one vendor\nwas apparently allowed to perform some minor tuning and insertion of compiler directives,\nwhereas the other was not. In other cases confusion has resulted from researchers not\ncarefully noting exactly which version of a vendor\'s compiler was being used in their tests.\nSome vendors have claimed amazingly high performance rates for their computers, which,\nupon closer analysis, have been achieved only by massive recoding of the test kernels\nand by the usage of assembly code. As a result of these difficulties, many of the recent\ncomparisons of supercomputer performance have degenerated into shouting matches that\nhave generated more heat than light.\nIn consideration of such problems, some strict ground rules have been established for\nusing the NAS Kernel Benchmark Program to evaluate supercomputer performance. Also,\nfour levels of tests have been defined, so that the effects of varying amounts of tuning may\nbe assessed. These different levels will also enable the NAS program to differentiate the\nperformance of the hardware from that of the compiler. IT the compiler is truly effective,\nthen a relatively small amount of tuning should be sufficient to achieve close to the full\npotential of the hardware. The four test levels are defined as follows:\n1. Level 0 ("dusty deck"): For this test, the NAS Kernel Benchmark Program must be\n\nrun without any changes to improve performance. IT any alterations are required\nfor compatibility purposes (for example, to define the timing function), they must\nbe made by NAS program personnel.\n2. Level 20 ("minor tuning"): For this test, a few minor alterations may be made\nto the code to enhance performance. These changes may include, for example,\ncompiler directives to assist the compiler\'s vectorization analysis or changes to\narray dimensions to avoid disadvantageous memory strides. No more than 20 lines\nof code in the entire program file may be inserted or modified.\n3. Level SO ("major tuning"): For this test, more extensive modifications may be made\nto the code to enhance performance. For example, some loops may be rewritten to\navoid constructs that cause difficulties for the compiler or the hardware. A total\nof up to 50 lines of the program file may be inserted or modified for this test.\n4. Level 1000 ("customized code"): For this test, large scale coding changes are allowed to improve performance. Entire subroutines may be rewritten to avoid difficult constructs. There is no limit to the number of lines of code that may be\ninserted or modified.\nFor all four levels of tests, any modifications made to the program code must conform\n6\n\nto the ANSI Fortran-77 standard [4]. In particular, absolutely no assembly code will\nbe allowed within the program file, and no external programs may be referenced other\nthan the standard Fortran functions. Fortran subprograms may be referenced only if the\nFortran code for the subprograms is included in the program file and conforms to the other\nrequirements mentioned in this paper. Finally, no modification to the algorithms in the\ncode may change the number of floating-point operations performed.\nThe precision level of all floating-point data and operations in the program must be\n64 bits, with \xc2\xb7at least 47 mantissa bits. As a test of the hardware precision, and to ensure\nthat any modifications made to the program file have not\xc2\xb7 fundamentally changed the\ncalculations being performed, an accuracy check is included with each of the seven tests.\nThese checks are performed by comparing a selected result from each of the programs with\na reference value stored in the program code and then computing the fractional error. The\ntotal of the fractional errors from the seven programs must be less than 5 x 10- 10 \xe2\x80\xa2\nThe NAS Kernel Benchmark Program automatically calculates performance statistics\nand outputs this report on Fortran unit 6. This report includes the results of the accuracy\nchecks, the number of floating-point operations performed, the CPU run times, and the\nresulting MFLOPS rates. The total error, total floating-point operation count, total CPU\ntime, and the overall MFLOPS rate are also included.\nNormally only uniprocessor results are tabulated. If desired, multiprocessor performance may be estimated by simultaneously running the benchmark program on each of\nthe individual processors. A multiprocessing performance figure may then computed by\naveraging the timings from the runs on the individual processors. Although no explicit\nmultiprocessing is performed in this manner, such an exercise measures the amount of\ninterprocessor resource contention, which is a significant factor in multiprocessing. In this\nway the performance increase that can be expected from multiple processor computation\ncan be estimated without making the laborious modifications that are usually required to\ninvoke true multiprocessing.\n\n7\n\nREFERENCES\n1. Hockney, R. W., and Jesshope, C. R., Parallel Computers, Adam Hilger, Bristol,\nEngland, 1981.\n2. Brigham, E. Oran, The Fast Fourier 7ransform, Prentice-Hall, Englewood Cliffs,\nN.J., 1974.\n3. Worlton, Jack, \xc2\xb7Understanding Supercomputing Benchmarks", Datamation, September 1, 1984, p. 121.\n4. American National Standards Institute, ANSI Fortran X3.9-1978, ANSI, New York,\n1978.\n\n8\n\nAPPENDIX:\n\nPROGRAM LISTING\n\n9\n\nPROGRAM NASICER\nC\nC\nC\nC\n\nC\n\n1\nC\n\nNAS KERt\xc2\xa3L\n12/17/84\n\nCHARACTER>08 PN lSI\nREAl ERISI. FPISI. TMISI. RlISI\nCOI\'II1ON IARRAYSI oATA13&80801\nDATA PNI\'MXM\xc2\xb7. \xc2\xb7CFFT2D\xc2\xb7. \xc2\xb7DD..SlCY\xc2\xb7. \xc2\xb7BTRIX\xc2\xb7. \'GMTRY\', \'EMIT\',\n\xe2\x80\xa2 \'VPENTA\xc2\xb7. \'TOTAl\'1\n~ITE IS. 11\nFORMA T II 1SX. \xe2\x80\xa2 THE NAS KERt\xc2\xa3L BEtDf1ARIC PROGRAM\' II I\n\nCAlL MXMTST\nFFTTST\nOOTST\nBTRTST\nGMTTST\nEMITST\nVPETST\n\nCAlL\nCAlL\nCAlL\nCAlL\nCAlL\nCAlL\nC\n\n108\n\nC\n\n2\nC\nC\nC\n\nC\nC\nC\n\nC\n\nCOMMON IARRAYSI AIL.MI. 51. BIM.NI. 52, CIL.NI\nDATA 1T1100/. ANS/3S.2B2S17973S7221\n\nPROGRAM\nDAVID H BAILEY\n\nBENCIf1ARI(\n\nIER U I.\nIER 121,\nIER 131.\nIERI41,\nIER 151.\nIER lSI,\nIERm,\n\nFP Ill,\nFP 121.\nFP 131.\nFP141.\nFP 151.\nFP lSI,\nFPI71,\n\nm U))\nTM (2))\nTM (3))\nTM(4))\nTM IS))\nTM IS))\nm(7))\n\n\xe2\x80\xa2 8.\n\xe2\x80\xa2 0.\n\xe2\x80\xa2 0.\n108 I \xe2\x80\xa2 1. 7\nTE \xe2\x80\xa2 TE + ERIII\nTF \xe2\x80\xa2 TF + FPIII\nTT \xe2\x80\xa2 TT + TMIII\nRTIII \xe2\x80\xa2 1E-6 \xe2\x80\xa2 FPIII 1 mill\nCDNTlME\nERISI \xe2\x80\xa2 TE\nFPISI \xe2\x80\xa2 TF\nmlSI \xe2\x80\xa2 TT\nRlISI \xe2\x80\xa2 1E-6 \xe2\x80\xa2 TF 1 TT\nTE\nTF\nTT\n00\n\n~ITE IS, 21\nIPNIII. ERIII. FPIII. TMIII. RlI". I .1. SI\nFORMAT I\' PROGRAM\', SX, \xc2\xb7ERRtJl\xc2\xb7, lOX. \'FP OPS\xc2\xb7. 7X, \xe2\x80\xa2 SECONDS\' ,\n\xe2\x80\xa2 SX, \'MFLOPS\'II 7UX. AS, 1P2E1S.4. 0PF12.4, Fl2.2111\n\xe2\x80\xa2 IX, AB, 1P2E1S.4, 0PF12.4, Fl2.2111\n\nSTOP\nEND\nFlN:TI 00 CPTI ME II\nRETUlNS THE CPU TIME SINCE THE LAST CALL TO CPTIME.\nTHIS SUBPROGRAM MAY BE CHANGED AS NEEDED FOR A PARTlOJ..AR CIlI\'I\'lITER\nSYSTEM IIITIDJT PENALTY, PROYIDED IT PERFORMS THIS FlN:TlON.\nDATA TX/0.1\n\nT \xe2\x80\xa2 SECOOO II\n\nC\n\nC\nC\nC\n\n108\nC\n\nC\n\nC\nC\n\nCPTIME \xe2\x80\xa2 T - TX\nTX \xe2\x80\xa2 T\nRETlIlN\nEND\nSlIIR!l.JTlNE copy IN, A, BI\n~Y\n\nC\nC\nC\nC\nC\nC\nC\nC\nC\nC\nC\n\n108\n\n118\nC\nC\nC\n\n120\n\nC\n\nC\nC\n\nC\nC\nC\nC\nC\n\nC\n\nC\n\n.C\n\nPARAMETER IL.2SS, M.12S, N-64, F7.7S125., T38.1873741S24. I\n\nTIMING TEST\n\n00 128 II \xe2\x80\xa2 I, It\nCAlL MXM IA. B. C, L. M. NI\nCONTlMJE\nTM \xe2\x80\xa2 CPTIME II\nER \xe2\x80\xa2 ASS IIC 119.191 - ANS) 1 ANSI\nFP \xe2\x80\xa2 2 \xe2\x80\xa2 \xe2\x80\xa2 IT \xe2\x80\xa2 L \xe2\x80\xa2 M \xe2\x80\xa2 N\nRETlJ1N\n\nEND\n\nSUBROUTINE MXM IA. B. C. L. M. NI\nDIMENSION AIL.MI. B IM.NI. C IL.NI\n4-UAY lMDLLED MATRIX Mll.TlPLY ROUTINE FOR VECTOR CIlI\'I\'lITERS.\nM MUST BE A MlLTlPLE OF 4. CONTlGLaJS DATA ASSlrEIl.\n0 H BAILEY ll/lS/S4\n\nRETlJ1N\n\nEND\n\nSlIIR!l.JT I NE FFTTST IER. FP. TMI\n\nC\nC\n\n2-D FFT TEST PROCRAM\n\nC\nC\nC\n\nINITiAliZE\n\nSlIIR!l.JTlNE I1XMTST IER, FP, TMI\nFLDATltIi-POlNT MATRIX IU.T1PLY TEST\n\nT.F7/T30\n00 lee J \xe2\x80\xa2 1. M\n00 lee I \xe2\x80\xa2 1. L\nT \xe2\x80\xa2 MOO IF7 \xe2\x80\xa2 T, 1. I\n"II.JI.T\nCONTINUE\n00 lle J \xe2\x80\xa2 1. N\n00 110 1 \xe2\x80\xa2 I. M\nT \xe2\x80\xa2 MOO IF7 \xe2\x80\xa2 T. 1. I\nBII.J) \xe2\x80\xa2 T\nCONTINUE\nTM \xe2\x80\xa2 CPTIME II\n\n00 le8 K \xe2\x80\xa2 I, N\n00 180 I \xe2\x80\xa2 1. L\nCII.KI.8.\n108\nCONTI MJE\n00 118 J \xe2\x80\xa2 1. M. 4\n00 110 K \xe2\x80\xa2 1. N\nDO lle 1 \xe2\x80\xa2 1. L\nCII.KI \xe2\x80\xa2 CII.K) + AII.JI _ BIJ.K)\n+ AII.J+lI _ BIJ+l.KI + AII,J+21 _ BIJ+2.K)\n\xe2\x80\xa2\n\xe2\x80\xa2\n+ AII.J+31 \xe2\x80\xa2 BIJ+3,)O\nll8 CONTlN.\xc2\xa3\n\ncopy RruTlNE\n\nREAl AINI, BINI\n00 180 1 \xe2\x80\xa2 I, N\nBill \xe2\x80\xa2 Alii\nCONTI ME\nRETlIlN\nEND\n\nINITIAliZATION\nTHE ARRAYS A ANO B ARE FILLED IIITH PSEl..OO-RAtOIM 18 \xe2\x80\xa2\xe2\x80\xa2 1. I DATA\nUSING A RANDOM NUMBER GENERATOR BASED ON THE RECURSION\nXIN+lI \xe2\x80\xa2 5**7 \xe2\x80\xa2 XINI lMOD 2.-301\nTHIS RECURSION UILL GENERATE 2**2S IAPPRDX. 26S MILLIONI NIJ\'1BERS\nBEFDRE REPEA TI t.C. FDR TH I 5 SCHEME TO LIORX PRDPERL Y\xe2\x80\xa2 THE HARDLIARE\nI1.JLTlPLY OPERATION MUST BE CORRECT TO 47 BITS OF PRECISION.\nTHIS SAME SCHEME IS USED TO INITIAlI2E DATA ~YS FOR AlL TESTS.\n\nPARAMETER IM.12S. N-2SS, M1.12S. F7.7S125., T38.1873741824. I\nCOMPLEX X. Y. CT\nCOMMON IARRAYSI XIM1.N). IIl1MI. !l2INI. IPI2~1\nDATA 1T/108/, ANS/0.8947999412192771\n\nAMN.M_N\n\na\n\n.-4\n\nRMN - 1. I AnN\n\nT2 - F7.1 T39\n00 199 J - 1. N\n00 1e9 I - 1. M\nn .. MOO IF7 \xe2\x80\xa2 T2. 1.)\nT2 - MOO IF7 \xe2\x80\xa2 n. 1.)\nXII.J) - CMPLX m. T2)\nCONTINUE\nCAlL CFFT201 Ie. M. MI. N. X. U1. IP)\nCALL CFFT2D2 lB. M. MI. N. X. U2. IP)\nTM - CPTIME II\n\n189\n\nC\nC\nC\n\nC\n\n149\n00 129 IC - 1. IT\n00 119 J - 1. N\n00 119 I - 1. M\nXII.J) -RMN.XII.J)\nCONTlMJE\n\nCAlL CFFT201\nCAlL CFFT2D2\nCAlL CFFT202\nCALL CFFT201\nCONTlMJE\n\n129\nC\n\n159\n\xc2\xb7C\n\n11. M. MI. N. X. U1. IP)\n11. M. MI. N. X. U2. IP)\nI-I. M. MI. N. X. U2. IP)\n1-1. M. MI. N. X. U1. IP)\n\nC\nC\nC\n119\nC\n129\n\nC\nC\nC\n\nIF\n\nIS - e\n\nTHEN INITIALIZE ONLY\n\nT - 2 \xe2\x80\xa2 \xe2\x80\xa2 PI \xe2\x80\xa2 II -11 I N\n\nCOMPLEX XIM1.N). UIM). CT. CX\n\nIBe\nC\nC\nC\n\nllB\n\nM2.M/2\nIF liS .EO. B) THEN\n00 1Be I \xe2\x80\xa2 1. M2\nT - 2 \xe2\x80\xa2\xe2\x80\xa2 PI \xe2\x80\xa2 II -11 I M\nUIII -trf\'LX lCOS ITI. SIN Ill)\nCONTI NUE\nRETlIlN\nENDIF\n\nC\n129\n\nIS - 1 OR -1\n\n00 119 I \xe2\x80\xa2 1. M\nIPI1.11 - I\nCONTI NlE\nL - 1\n11 - 1\n12 - 3 - 11\n00 139 J \xe2\x80\xa2 L. M2. L\nCX - UIJ-L+lI\nIF liS .LT. e) CX - CDNJG ICX)\n00 139 I - J-L+1. J\nII - IPIIl.1I\nIPII2.I+J-Ll - II\n1M - IPII1.I+M2)\nIPII2.I+J) - 1M\n00 139 I( - 1. N\nCT - XIII.I() - XIIM.IC)\nXIII.I() - XIII.I() + XIIM.I()\n\nUIII _ CMPLX ICOS Ill. SIN Ill)\nCONTlMJE\nRETURN\nENOIF\nPEFORM FORIJARO OR BACI(UARQ FFTS ACCORD I NG TO\n\n00 llB I - 1. N\n\nTHEN INITiAliZE ONLY\n\nPERFORM FDRUARO III BACICIJARO FFTS ACCORDING TO\n\nTHEN\n\n00 lee I _ 1. N2\n\nPERFOOMS COMPLEX RADIX 2 FFTS ON THE FIRST DIMENSION OF THE 2-D ARRAY X\n0 H BAILEY 11/15/84\n\nIS - 9\n\nCOMPLEX XIMI. N). UIN). CT. CX\nINTEGER IPIZ.N)\nDATA PII3.141592S535897931\n\nN2-N/2\nIF liS .EO. e)\n\nINTEGER IPI2.M)\nDATA PII3.141592SS3S897931\n\n189\n\nPERFORMS COMPLEX RADIX 2 FFTS ON THE SECOND DIMENSION OF THE 2-0 ARRAY X\n0 H BAILEY 11/15/84\n\nSUBROUTINE CFFT201 liS. M. MI. N. X. U. IP)\n\nIF\n\nSUBROUTlllE CFFT202 liS. M. MI. N. X. U. IP)\n\nC\nC\nC\nC\n\nRETlFlN\nEr-Il\n\nC\n\nRETURN\nEND\n\nC\n\nTM - CPTIME II\nER - ASS IlREAlIX 119.19)) - ANS) I ANS)\nFP - IT \xe2\x80\xa2 AMN \xe2\x80\xa2 12. + 19\xe2\x80\xa2 \xe2\x80\xa2 LOG IAMNI/LOG 12.))\n\nC\n\nC\nC\nC\n\n00 159 I - 1. M\nII - IPIIl.1I\nIF III .GT. II THEN\n00 14e I( - 1. N\nCT - XII.I()\nXII.I() - XIII.I()\nXIII.I() \xc2\xb7CT\nCDNTlMJE\nENDIF\nCONTI MJE\n\nTEST ITERATIONS\n\nllB\nC\n\nC\nC\nC\nC\n\nXIIM.K) - CT \xe2\x80\xa2 CX\nCONTINUE\nL - 2 \xe2\x80\xa2 L\n11- 12\nIF IL .LE. M2) GOTO 129\n\n139\n\n13B\n\nIPI1.11 - I\nCONTI NUE\nL - 1\n\n11 - 1\n12 - 3 - 11\n00 13B J - L. N2. L\nCX - U IJ-L+lI\nIF liS .LT. 9) CX - CONJG ICX)\n00 13B I - J-L+l. J\nII - IPIIl.1I\nIPI12.I+J-Ll - II\n1M - IPIIl.I+N2)\nIPII2.I+J) - 1M\n00 13B I( - 1. M\nCT - XII(. II) - XIK.IM)\nXIK.II) - XIIC.II) + XIK.IM)\nXIK.IM) - CT. CX\nCONTI NUE\nL - 2 \xe2\x80\xa2 L\n11 - 12\nIF IL .LE. N2) GOTO 12B\n\nC\n00 15e I - 1. N\nII - IPIIl.1I\nIF III .GT. II THEN\n00 14B K _ 1. M\nCT - XIK.II\nXII(. II _ XII(. II)\nXIK.II) - CT\n\nr-i\nr-i\n\nIS _ 1 OR -1\n\n148\n158\nC\nC\n\nC\n\nC\nC\n\nC\nC\nC\n\nctrlTl!I.E\nOOIF\n!nITI!I.E\n\nC\n\nRETIJlN\n00\n\n4\n\nSlEROOTlt\xc2\xa3 OOTST IER, FP, Tnl\n\nS\n\nDIlLSKY TEST PR!X;IW!\nPARAMETER UOA.258, N\'1AT.258, M-4, N.48, NlHS.3, F7.78125.,\nI T38.1873741824. I\nctnIlN IARRAYSI AI8.IDA, -M.8, 8.NI, BI8.NlHS, 8.N\'1AT, 8.NI,\nI\nAX 18. IDA, -M.8, 8.NI, BXIB.NRHS. 8.NMAT, 8.NI\nDATA 1T1288/, ANSlSln.88S31n45621\nINITiAliZE\n\nLA \xe2\x80\xa2 UOA+lI * IM+lI * IN+lI\nLB. 11IlHS+1I * IN\'1AT+lI * IN+lI\nT.F7/T38\n\nDO 188 K \xe2\x80\xa2 8, N\n00 188 J \xe2\x80\xa2 -M, 8\nDO 188 I \xe2\x80\xa2 8, IDA\n188\n\n118\nC\nC\nC\n\n128\n\nC\n\nT \xe2\x80\xa2 MIn IF7 * T, 1.1\nAXU,J,KI \xe2\x80\xa2 T\n!nITI!I.E\nDO 118 K _ 8, N\n00 118 J - 8, N\'1AT\nDO 118 I \xe2\x80\xa2 8, NlHS\nT - MIn IF7 * T, 1.1\nBXU,J,KI \xe2\x80\xa2 T\n!nITlME\nTM - CPTlIE ()\n\nC STIllE INVERSE IF DIAGONAL ELEMENTS\n\nC\n\n00 4 L - B. NMAT\nEPSSILI \xe2\x80\xa2 EPS \xe2\x80\xa2 AIL,B,JI\n00 S JJ \xe2\x80\xa2 lB. -1\nDO S L \xe2\x80\xa2 B, NMAT\nAIL,B,JI _ AIL,8,JI - AIL,JJ.JI . . 2\n00 1 L \xe2\x80\xa2 B, N\'1AT\nAIL,B,JI _ 1. 1 SIIIT I ASS IEPSSILI + AIL,8,JII\n\n1\nC\n\nC SCl.UTlON\nC\n00 Ii I \xe2\x80\xa2 B, NRHS\n00 7 K - B. N\n00 8 L \xe2\x80\xa2 B, N\'1AT\nBU.L.KI \xe2\x80\xa2 BU.L.KI * AIL,B,KI\na\n00 7 JJ \xe2\x80\xa2 I, MIN 1M, N-ICI\n00 7 L - B. N\'1AT\nBII,L,K+JJI \xe2\x80\xa2 BII,L,K+JJI - AIL,-JJ,K+JJI. BII,L,KI\n7\nC\n\n00 Ii K - N, B, -1\nDO 9 L - B, N\'1AT\nBII,L.KI - BII,L,KI * AIL,B,KI\n00 Ii JJ \xe2\x80\xa2 I, MIN 1M, KI\n00 Ii L - B. NMAT\nBII,L,K-JJI \xe2\x80\xa2 BII,L,K-JJI - AIL,-JJ,KI \xe2\x80\xa2 BU,L,KI\n\n9\nIi\nC\n\nRETIJlN\n00\n\nC\nC\nC\nC\n\nSlI!ID.JTI t\xc2\xa3 BTRTST IER, FP, Tnl\nBTRIX TEST PRtmAM\n\nBEGIN TIMIIil TEST\n00 128 J - I, IT\nCAlL copy lLA, AX, AI\nCAlL copy ILB, BX, BI\nCAlL DIlLSKY (IDA, N\'1AT, M, N, A, NlHS, IDA, BI\n!nITI!I.E\n\nI\n\nC\nC\nC\n\nTn - CPTJIE ()\nER \xe2\x80\xa2 ASS ((BU,19,191 - ANSI 1 ANSI\nFP - IT * IN\'1AT + 11 \xe2\x80\xa2 4483.\n\nC\nC\nC\nC\nC\nC\n\nC\n\nRETIJlN\n00\nSlIlRtllTJNE DIlLSKY UDA, N\'1AT, M, N, A, NRHS, 108, BI\n\nDlLESICY IEcnFOS I TI ON/SlIISTI TUTI ON SlI!ID.JTI t\xc2\xa3.\n11/28/84\n\nD H BAILEY MIniFIED Fill HAS ICERt\xc2\xa3l. TEST\n\nDATA EPS/IE-131\nC\nC DlLESICY IEcnFOSI TION\nC\nDO 1 J . 8, N\nIB - MAX I -M, -J I\n\nc\n\nC IFF DIAWW.. ELEIENTS\nC\n\n3\n\n2\n\n188\n\nREAl AI8.IDA, -M.8, 8.NI, BI8.NlHS, 8.108, 8.NI, EPSSI8.2561\n\n00 2 I \xe2\x80\xa2 18, -1\noo3JJ-18-I,-1\n00 3 L - 8, N\'1AT\nAIL,I,JI - AIL,I,JI - AIL,JJ,I+JI * AIL,I+JJ,JI\n00 2 L - 8, N\'1AT\nAIL,I,JI _ AIL,I,JI \xe2\x80\xa2 AIL,8,I+JI\n\n\xc2\xb7118\nC\nC\nC\n\n12B\n\nPARAMETER IJD-3B. 1CD.38. LO.3B. MO.3B, F7.78125., T3B.1873741824. I\nCOI1\'1ON IARRAYSI SIJD.KD.LD.SI, AIS,S.MO,MOI, BIS,S,MO,MOI,\nCIS.S,MO,MOI. SXIJD.KO,LO,SI, BXIS,S,MO.MOI\nDATA JS/2I, JE/29/, LS/2I, LE/29/, 1T/2B/, ANS/-B.286282&S8&&39&21\n\nINITIAliZATION\nN11_25*MO.MO\nNS_..o*KO.LD*S\nT.F7/T38\n00 188 L \xe2\x80\xa2 I, MO\n00 188 K \xe2\x80\xa2 I, MO\n00 188 J \xe2\x80\xa2 I, S\nDO 188 I \xe2\x80\xa2 I, S\nT \xe2\x80\xa2 MIn IF7 * T, 1. I\nAU,J.K.L1 \xe2\x80\xa2 T\nT.MOD IF7*T,1.1\nBXII.J,K.LI \xe2\x80\xa2 T\nT.MOD IF7. T, 1.1\nCII,J,K,LI - T\nctrlTlME\nDO 118 L - I, S\n00 11B K \xe2\x80\xa2 I, LD\n00 118 J \xe2\x80\xa2 I, ICD\n00 118 I - I, JD\nT \xe2\x80\xa2 MOD IF7 \xe2\x80\xa2 T, 1.1\nSXU,J,K,LI - T\nctrlTlNUE\nTM - CPTlIE ()\nTlMIIil TEST\n00 12B II \xe2\x80\xa2 1. IT\nCALL copy INS. SX, SI\n00 12B K \xe2\x80\xa2 I, !CD\nCALL copy INII. BX, BI\nCALL BTRIX IJS, JE, LS, LE, KI\n!nITlNUE\n\nN\n\n.-.\n\nC\n\nC\n\nRETlJlN\n\nEND\n\nC\nC\nC\nC\nC\nC\nC\n\nSUBROUTINE BTRIX IJS. JE. LS. LE. 10\nVECTORIZED BLOCK TRI-DIAGONAL SOLVER IN TIE J DIRECTION\nFDR IC - CONSTANT PLANES\n\n11/15/84\n\nD H BAILEY\n\nI\n\nDIMENSION\n\nC\n\nC\n\nLlI lMO), L211MO), L311M1l), L41 lMO), LSlIMD) ,\nL22 II\'Il), L32 lMO), L42 IMIl), LS2 lMO), L33 IMIl),\nL43 ItII), LS3 lMO), L44 lMO), LS4 lMO), LSS lMO)\n\nPART 1.\n\nFDRIJARD BLDCIC SlJEEP\n\xe2\x80\xa2 JS,JE\n\n00 199 J\n\nSTEP 1.\n\nC\nC\nC\n\nA.\n\nB. I NTERMEDI ATE VECTOO\n34 CONTlM.E\nFill SUBSTITUTION\n00 3S L - LS.LE\nD1 _\n\nC\nC\nC\n\nLS,LE\n- 1. 1 BI1,I.J.U\n\xe2\x80\xa2 BI1.2.J.U~1I IU\n\xe2\x80\xa2 BI1.3.J.U~1I IU\n- BI1.4.J.U~11 IU\n- BI1,S,J.U~l1 IU\n- BI2.1.J,L)\n- 1. I IBI2.2,J,U - L211U.u12IU)\n\xe2\x80\xa2 IBI2.3.J.U - L211U.u13IU) \xe2\x80\xa2 L221U\n\xe2\x80\xa2 IBI2,4,J.LI - L211U.u14IL)) \xe2\x80\xa2 L221U\n\xe2\x80\xa2 IBI2.S,J.U - L21IU.ulSIU) \xe2\x80\xa2 L22IU\n- BI3,I.J.U\n\xe2\x80\xa2 BI3,2.J.U - L311U.u121U\n\xe2\x80\xa2 1. I IBI3.3,J.U - L311U.u131U - L32IU.u2JIL))\n\xe2\x80\xa2 IBI3.4.J.U - L311U.u141U - L32IU.uz4IL)) \xe2\x80\xa2 L331U\n- IBI3.5.J.LI - L311U.u15IL) - L32IU.u2SIL)) \xe2\x80\xa2 L331U\n\nC\nDO 2S L - LS.LE\nL411U - BI4.1,J.L)\nL421U - BI4.2.J.U - L411U.u121U\nL431U \xe2\x80\xa2 BI4.3.J.U - L411U.u131U - L421U.uz31U\nL441U - 1. 1 IBI4,4,J,U - L411U.u141U - L421U.uz41U\n\xe2\x80\xa2\n- L43IU~4IL))\n\nSIJ.IC.L.lI~l1IU\n\nD2\nD3\nD4\nOS\n\nISIJ.IC,L,2) - L211U.oll \xe2\x80\xa2 L22IU\nISIJ.K.L,3) - L311U.o1 - L32(U.o2) \xe2\x80\xa2 L331U\n(SIJ,K,L,4) - L411U.o1 - L421U.o2 - L431U.o3) \xe2\x80\xa2 L441U\n(S(J.K.L.5) - L511U.o1 - LS2(L).o2 - L53(U.o3\n- LS4 IU.04) \xe2\x80\xa2 LSS (L)\n\n_\n_\n_\n\n\xe2\x80\xa2\n\nBill SUBSTITUTION\nSIJ.K,L.S) - DS\nSIJ.K.L.4) \xe2\x80\xa2 D4 - U4SIU.oS\nSIJ.K.L.3) - D3 - U34IU.sIJ.IC.L.4) - UJSIU.os\nSIJ.K.L.2) \xe2\x80\xa2 D2 - U23IU.sIJ.K.L.3) - U24IU.sIJ.IC,L.4)\n\xe2\x80\xa2\n- U2SIU.oS\nSIJ,IC.L.1I \xe2\x80\xa2 Dl - UI2IU.sIJ.IC.L.2) - UI3IU.sIJ.IC.L,3)\n\xe2\x80\xa2\n- UI4IU.sIJ.IC.L.4) - UlSIU.os\n3S CONTINUE\n\nCDNPUTE L INVERSE\n\n[ECOf\'FDSE L III INTD L AND U\n\n00 29 L LlIlU\nU121L1\nU131U\nU141U\nUlSIU\nL211L)\nL221U\nU231U\nU241U\nU2SIU\nL311U\nL321U\nL331U\nU34IL)\nU3SIU\n29 CONTlM.E\n\nSOLVE FOR INTERMEDIATE VECTOR\n\nCONSTRUCT AHS\n\nIFIJ.Ea.JS) GO TO 34\nOO33M.1.5\n00 33 L - LS.LE\nSIJ.IC.L.M) _ SIJ.IC.L,M) - AIM,l,J.U.sIJ-1,IC.L.1I\n\xe2\x80\xa2\n- AIM.2,J.U.sIJ-1,IC.L.2) - AIM.3.J.U.sIJ-1,IC.L.3)\n\xe2\x80\xa2\n- AIM.4.J.L).sIJ-1.IC.L,4) - AIM.5,J,U.sIJ-1.IC.L,S)\n33 CONTlM.E\n\nC\nC\nC\n\n4 CONTlM.E\n\nSTEP 2.\n\nSTEP 3.\n\nA.\n\nCDNSTRlI:T LIII IN B\n\nIFIJ.EC.JS) GO TD 4\n00 3 M \xe2\x80\xa2 1.5\n00 3 N - 1,5\n00 3 L \xe2\x80\xa2 LS.LE\nBIM.N,J,U \xe2\x80\xa2 BIM.N.J.U - AIM.l,J,U.sI1,N,J-l,U\n\xe2\x80\xa2\n- AIM.2,J,LI.s12,N.J-l,U - AIM,3,J.U.s13,N.J-l,U\n\xe2\x80\xa2\n- AIM,4,J,LI.s14,N,J-l,L) - AIM,S,J,U.sIS.N,J-l,U\n3 CONTlM.E\n\nC.\nC\nC\nC\nC\n\nC\n\nU12 lMO), U13 lMO), U14 lMO), UlS lMO), U23 lMO),\nU24 lMO), U2S lMO), U34 lMO), U3S lMO). U4S IMIl)\n\nREAL\n\n..no\n\nC\n\nCIS,S.MO.MO)\n\nC\n\nI\nI\n\nC\nCo..\nC\n\nCOMMON IARRAYSI SI..{l.ICD.LD.S). AIS.S.MO.MO), BIS,S.MO.MO),\n\nC\n\nC\nr\nC\n\nMOOIFIED FDR HAS 1CERt\xc2\xa3L TEST\n\nPARAMETER 1..{l.39. 1CD-39. LD-39. MO-39)\nI\n\nC\nC\nC\nC\n\nU4SIU - IBI4.S.J.U - L41IU.ulSIU - L42IL).u2SIU\n- L43 (LJ oU35 (LI) \xe2\x80\xa2 L44 (L1\nLSlIU - BIS.l.J.U\nL521U - BI5.2.J.U - LSlIUoU121U\nLS3(U _ BIS.3.J.U - LSlIUoU131U - LS2IU.uz3IU\nL541U - BIS.4.J.U - LS1IU.u14IU - LS2IU.uz4IU\nI\n- LS3 (U.u34 IU\nLSSIU \xe2\x80\xa2 1. 1 IBIS.S.J.U - LSlIU.u15IU - LS2IU.u2SIU\n\xe2\x80\xa2\n- L53IU..uJSIU - L54IU.u4SIL))\n2S CONTINUE\n\xe2\x80\xa2\n\nTM - CPTlI\'\xc2\xa3 II\nER - ASS 115119.19.19.11 - ANS) I ANS)\nFP - IT \xe2\x80\xa2 til \xe2\x80\xa2 lLE - 11 \xe2\x80\xa2 19165.\n\nc\nc _..\n\nc\n\nC\n\n.. u\n\nCONSTRUCT UIII - LlII**I-I).c11+1I\nBY COLUMNS AND STORE IN B\n\n-\xe2\x80\xa2\xe2\x80\xa2\xe2\x80\xa2\xe2\x80\xa2\xe2\x80\xa2\n\nIFIJ.Ea.JE) GO TO 199\n00 49 N - 1,5\nDO 49 L - LS.LE\n\nC\nC\nC\n\nC\nC\nC\n\nSTEP 4.\n\nFill SUBSTITUTION\n\n\xe2\x80\xa2\n\xe2\x80\xa2\n\xe2\x80\xa2\n\nCl\nC2\nC3\nC4\n\n_ CI1.N.J.U~lI IU\n_ ICI2.N,J.U - L211U.c1l \xe2\x80\xa2 L221U\n\xe2\x80\xa2 ICI3.N.J.U - L311U.cl - L32IU.c2) \xe2\x80\xa2 L331U\n- ICI4.N.J.U - L411U.tl - L421U.t2 - L43IU.t3)\n\xe2\x80\xa2 L441U\nCS. ICI5.N.J.U - LSIIU.cl - LS2IU.c2 - LS3IU.c3\n- LS4IU.c4) \xe2\x80\xa2 L5SIU\nBIJD SUBSTITUTION\nB(S.N.J.U _ CS\nBI4.N.J.U - C4\nB(3.N.J.U - C3\nBI2.N.J.U \xe2\x80\xa2 C2\n- U2SIU.tS\nBI1.N.J.U - Cl\n\n- U4SILhCS\n- U34(Ui\'814.N.J.U - U3SIU.cs\n- U23IU.s13.N.J.U - U24IL).s14.N.J.U\n- UI2IU.s12.N.J.U - UI3IU.s13.N.J.U\n\nM\n.-1\n\n\xe2\x80\xa2\n- U14IlhSI4,N,J,L1 - U1SIlhCS\n48 CONTltu;\nC\nC\n\nlee CONTI tu;\n\nC\n\nC\n\nPART 2.\n\nBAOCLWlD BlOCK SI.EEP\n\nC\n\n.EIl - ..E - 1\n\n00 288 J - ..EM1,JS,-1\n00 298 M - 1,5\n00 2ee l - lS,lE\nSIJ,K,l,MI - SIJ,K,l,MI - BIM,l,J,L1.sIJ+1,K,l,lI\n- BIM,2,J,ll.sIJ+l,K,l,21 - BIM,3,J,ll.sIJ+1,K,l,31\n- BIM,4,J,ll.sIJ+1,K,l,41 - BIM,5,J,U.sIJ+1,K,l,51\n2ee CONTI tU:\nC\n\nI:\nI:\n\nI:\nI:\nI:\n\n1ee\n\n118\nI:\nI:\nI:\n128\nI:\n\nI:\nI:\n\n\xe2\x80\xa2\n\xe2\x80\xa2\n\nRETLm\n00\nSlI!ROUTlNE GMTTST IER, FP, ml\nPARAIETER INIl-1ee, NB-S, F7-7812S., T38-1873741824.1\nCOI\'f\'lEX UAll, ZCR, PROJ, ZI, Zl, ZZ\nCOI1IlN IARRAYSI MW.LlNBI, UAllIM.l,NBI, RMATRXIN.We,NJ#IlI,\nI ZCRIM.I,NBI, PROJlNU,NBl, XMAXINBI\nDATA 1T/2/, ANS/-2.577542332141741\nINITIALIZATION\nLU-2.PIJ.NB\nT2-F7/T38\n00 lee J _ I, NB\nNlJAll (J) - PIJ\nCONTI tU:\n00 118 J - I, NIl\n00 118 I - I, PIJ\nT1 - MOO IF7 \xe2\x80\xa2 T2, 1.)\nT2 - I\'lOO IF7 \xe2\x80\xa2 n, 1.)\nUAllII, JI - CI\'I\'I.X 1T1, T2)\nCONTltu;\nm - CPTlI\'IE II\nTlMIM; TEST\n00 128 I - I, IT\nI:All GMTRY\nCONTltU:\n\nm - CPTlI\'IE II\nER - ASS IIRMATRXI19,191 - ANS) I ANSI\nFP - IT \xe2\x80\xa2 1128\xe2\x80\xa2\xe2\x80\xa2 INBeNII) .. 2 + 8.666. INIlePIJ) .. 3)\nRETLm\n00\n\nSlI!ROUTlNE GMTRY\nI:\nI: C!I1PUTE SOlIO-RELATEO ARRAYS, GAUSS ElIMINATE THE MATRIX OF UAll\nI: INFLUENCE COEFFII:IENTS.\nI:\nC\n11/38/84 0 H BAILEY\nREVISED caE FOR HAS KERNEl TEST\nC\n\nc\nC\n\nPARAIETER IPIJ-188, NB-51\nCOI\'f\'lEX UAll, ZCR, PROJ, ZI, Zl, ZZ\nI:OMMON IARRAYSI NUAlLlNBI, UAllIM.l,NIlI, RMATRXIN.We,M.IeN8I,\n\xe2\x80\xa2 ZCR IPIJ,NBI, PROJ IPIJ,NBI, XMAX INBI\nDATA ARC.. IS.I, PI 13.141S92SS3Sa9793/, PER100/3.1\n\nC C!I1PUTE ARCLENGTH.\n\nC\n\n- 8\n8.\n1.E+58\n-1.E+59\nPI 1 PERloo\n\n00 9 l - I, NIl\nMATOIM - MATOIM + MW.LlLI\n00 9 K - l,NIlAlLlLl\nARC.. - ARCl + ABSlUAlllK,ll - UAlll1+M(1)lK,NUALlILll, III\nCONTINUE\n\nC\nC\n\nMATOIM\nARCl mIN ..\nYMAX PlOP -\n\n9\nC\nC C!I1PUTE CORE RADIUS.\nC\nR8 - ARC.. 1 lMATOIn.2.1\nSIGMA - R8 1 2.\nC\nC DEFINE CREATION POINTS.\nI:\n00 6 l - l,NB\n00 5 K - l,NUALlIll\nZZ - UAllI1+I1(XHK+MW.Lll\'-2,NUALllllI, II\n- UAll11+1100 IK,NUALl IllI, LI\n&\nZCRIK,ll - UAlLlK,L1 + CI\'I\'lX18., R8/ASSIZZII \xe2\x80\xa2 ZZ\nCONTltu;\n5\nI:\nI: ClECK THAT UAll AND CREATION POINTS ARE NOT CROSSED !l\xc2\xa3 TO\nI: TOO SHARP A CONCAVE ICiNIC OR AN ERROR IN OEFINIM; TI\xc2\xa3 BOOY.\nI: ALSO FUll HIGHEST, lOlEST AND RIGHT-MOST POINT.\nC\n\nXMAX III - REAL IZI:R 11. L11\nlS - 8\n00 6 K - l,NUALlILl\nmIN - MIN ImIN. AIMAGIZCRIK,lll1\nYMAX - MAX IYMAX. AIMAGIZCRIK.llIl\nXMAXIll - MAX IXMAXIll. REAlIZCRIK,lll1\nKP - 1 + MOO II(. NUAllIllI\nIF lREAlIIZCRIKP.L1 - ZCRIK.llI \xe2\x80\xa2\n1:000000IUAllIKP.L1 - UAllIK,lll).GT.8.) TI\xc2\xa3N\n&\nlS - l\nKS - K\nENOIF\nCONTltu;\n\n6\nI:\nIF IlS .NE. 81 TI\xc2\xa3N\nI:\nIIRITE 16, 1821 lS, KS\nI:\nFORMATI\xc2\xb7 ON BOOY NlI\'1BER ., 13, \xe2\x80\xa2 YOU HAVE TOO SHARP A\xc2\xb7,\n1:182\n\xe2\x80\xa2 KINK NEAR POINT\xc2\xb7, 141\nI:\n&\nSTOP\nI:\nENOIF\nI:\nC\nI: THE \xc2\xb7MAIN PERloo\xc2\xb7 IIlll BE BETIlEEN YlIMIT AND YlIMIT + PERIOO.\nI:\nYlIMIT - ImlN - PERloo + YMAXII2\nI:\nC PROJEI:T CREATION POINTS INTO MAIN PERIOO. THIS IS TECHNICAL.\nI:\n00 1 l - 1.NB\n00 1 K - l,MW.LlLI\nPROJIK.L1 - ZCRIK.L1 - O\'f\'lXI9., PERIOO.\n&\n(JNTlS. + IAIMAGIZCRIK,lll - YlIMITl 1 PERIOOI - 5.11\n1\nCONTINJE\nI:\nI: C!I1PUTE MATRIX.\nI:\nSIG2 - 12 \xe2\x80\xa2\xe2\x80\xa2 PlOP. SIGMAI . . 2\n18 - 8\n00 2 II - l,NIl\nJ9 - 8\n00 4 l2 - I,NB\nKRON - 8\nIF III .EO. l21 ICRON - 1\n00 3 J - I,NUALlll21\n\n\'<:t\nrl\n\n2. Government Accession No.\n\n1. Report No.\n\n3. Recipient\'s Catalog No.\n\nNASA TM-86711\n5. Report Date\n\n4. Title and Subtitle\n\nJuly 1985\n\nTHE NAS KERNEL BENCHMARK PROGRAM\n\n6. Performing Organization Code\n\nS. Performing Orgenization Report No.\n\n7. Author(s)\n\nDavid H. Bailey and John T. Barton\n\n85195\n10. Work Unit No.\n\n9. Performing Organization Name and Address\n\nAmes Research Center\nMoffett Field, CA 94035\n\n11. Contract or Grant No.\n\n13. Type of 1\'Ieport and Period Covered\n12. Sponsoring Agency Name and Address\n\nTechnical Memorandum\n\nNational Aeronautics and Space Administration\nWashington, DC 20546\n\n14. Sponsoring Agency Code\n\n536-01-11\n\n15. Supplementary Notes\n\nPoint of contact: John T. Barton, Ames Research Center, MS 233-1,\nMoffett Field, CA 94035, (415)694-6837 or FTS 464-6837\n16. Abstract\n\nA collection of benchmark test kernels that measure supercomputer\nperformance has been developed for the use of the NAS (Numerical Aerodynamic Simulation) program at the NASA Ames Research Center. This\narticle describes this benchmark program in detail and gives the specific\nground rules for running the program as a performance test.\n\n17. Key Words (Suggested by Author"))\n\n18. Distribution Statement\n\nUnlimited\n\nSupercomputers\nBenchmark\n\nSubject Category - 61\n19. Security Oassif. (of this report)\n\nUnclassified\n\n20. Security Classif. (of this page)\n\nUnclassified\n\n21. No. of Pages\n\n20\n\n"For sale by the National Technicil Information Service, Springfield, Virginia 22161\n\n22. Price"\n\nEnd of Document\n\n'