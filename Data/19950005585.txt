b'NASA-CR-196930\n\nSELF CALIBRATING AUTOTRAC\nA FINAL REPORT\n\nPrepared for: Leo Monford, NASA-JSC\n00\n\nt/l\nm\nc\n\no\n\no\n\nL. J. Everett\nTexas A&;M University\n\noX\nZ\ni- <\nCD <o\n\nM X\n-I 0)\n\n< iU w\n\nUJ *co O\n\nex\nQJ\n\n\xc2\xab\xe2\x80\xa2\xc2\xbb oc\no\n\nSeptember 21, 1994\n\nH3\nC OL\n\nI\n\xc2\xabM\ntf U\nU <\n\nI Ot ^\n\n< h- t\n</\xe2\x80\xa2> O >\n< V- c\nz r> \xe2\x80\x94\n\nCONTENTS\nABSTRACT\n\n1\n\nINTRODUCTION\n\n1\n\nFORMULATING THE PROBLEM\n\n2\n\nTHE GENERAL SOLUTION\nSolving for the Rotation Part of X, Rx\nSolving for the Translation Part of X\nSolving for the Translation When Rotation Magnitude is Unknown . . . .\n\n4\n5\n8\n10\n\nALGORITHM\nTo Compute Rotation\nTo Compute Translation - Method 1\nTo Compute Translation - Method 2\n\n12\n12\n13\n14\n\nEXAMPLE\nMethod 2 - When Robot Rotations are Unknown\nComputing the Unit Vectors of Rx\nMethod 1 - When Robot Rotations Are Known\n\n14\n15\n17\n18\n\nCONCLUSIONS\n\n20\n\nREFERENCES\n\n21\n\nABSTRACT\nThe work reported here demonstrates how to automatically compute the position\nand attitude of a TRAC camera relative to the robot end effector. In the robotics\nliterature this is known as the sensor registration problem. The registration problem is\nimportant to solve if TRAC images need to be related to robot position. Previously,\nwhen TRAC operated on the end of a robot arm, the camera had to be precisely\nlocated at the correct orientation and position. If this location is in error, then the\nrobot may not be able to grapple an object even though the TRAC sensor indicates it\nshould. In addition, if the camera is significantly far from the alignment it is expected\nto be at, TRAC may give incorrect feedback for the control of the robot. A simple\nexample is if the robot operator thinks the camera is right side up but the camera\nis actually upside down, the camera feedback will tell the operator to move in an\nincorrect direction.\nThe automatic calibration algorithm requires the operator to translate and rotate\nthe robot arbitrary amounts along (about) two coordinate directions. After the motion, the algorithm determines the transformation matrix from the robot end effector\nto the camera image plane.\nThis report discusses the TRAC sensor registration problem. Different aspects of\nthis work has been published in [1, 2, 3] and submitted for publication in [4].\n\nINTRODUCTION\nWhen you mount a sensor on a robot it becomes necessary to find the pose (orientation and position) of the sensor relative to the robot. This is the sensor registration\nproblem.\nMany researchers have provided closed-form solutions to the sensor registration\n1\n\nproblem; however the published solutions apply only to: (1) sensors that can measure\na complete pose (three positions and three orientations) and (2) robots that can move\nprecise distances. Neither of these requirements exists for our application.\nUnless the TRAC is aligned with a mirror, it can provide only position information.\nIf you assume the registration problem has not yet been solved, then it may not be\npossible to move the robot to align to a mirror.\nIf the robot is actually a velocity commanded telemanipulator (as in the SRMS),\nit is possible to enter a joystick command to move along an axis, but the precise\ndistance moved may be awkward to determine. As a result it is necessary to solve\nthe registration without precise knowledge of the robot\'s motion.\nThis report provides a closed-form solution to the sensor registration problem\napplicable when: (1) the sensor can provide at least position information, and (2) the\nrobot can move on and rotate about straight lines.\n\nFORMULATING THE PROBLEM\nThis report assumes T" is a 4 by 4 homogeneous transformation matrix describing\nthe coordinate transformation from frame u to frame v, this is equivalent to the pose\nof v relative to the pose of u. Also, this report assumes sensors, such as a range\nsensor, a camera, or a fixture, are fixed relative to tool, \xc2\xa3, while in use but may be\nremovable. Thus, the frame of the sensor relative to the tool (represented as T*\nwhich is what we desire to determine) is constant while in use.\nWe will discuss the pose of various objects at several manipulator positions. To\ndesignate what robot position we are referring to, we will use a subscript on the\ntransformation matrix. Some matrices are constant regardless of the robot position.\nConstant transformations will have no subscripts. For example, to designate a trans-\n\nformation ("T") when the robot is at location i, we will use "T^. The transform when\nthe robot is at location j is "2^". The relative change in the transform relative to u\n\nis:\n\n~\n\nfr\xe2\x84\xa2\n~ "\xe2\x80\xa2-+>\n\nIn an application, suppose a robot has a feedback sensor mounted on its tool.\nWhen the robot is positioned at location i, the pose relative to the sensor frame of an\nobject fixed in g is represented with the matrix "7?*. Furthermore, we presume that\nthe tool relative to the sensor frame, (ST*), is unknown but desired. The problem is\nformulated as follows:\n3\n\nT\xc2\xb0 = 9rp^irpsarp9\n\n(\\\\\n\nNow, if the manipulator is positioned at j, we have the following:\ngnpo\n\nJ. \xe2\x80\x94 grrtttrj-iasrj-io\nJ.J J. J.J\n\nAs shown in the transform graph of Figure 1, we can formulate the following:\ntrpggrrittrrts\ntrrisarpoorps\nJ-i J-j J. \xe2\x80\x942\nJ.f J.j\n\n(n\\\n\\4)\n\nEquation 2 is of the form AX = XB which shows it to be the sensor registration\nproblem [6] and [7, 8] also [9, 10]. The B transform is typically measured, while\nthe A transform is computed from joint angles. The objective is to solve for X\ngiven A and B. As shown in Figure 1, the transformations A and B describe the\nrelative displacements of an arbitrary movement (from i to j) of the tool frame (9T*)\nand sensor frame (*T\xc2\xb0), respectively. The constant matrix X in Figure 1, is the\nrelative transformation between the tool frame and the sensor frame. The published\nsolutions for A", including the analytical ones, are valid only if: (1) the sensor provides\ncomplete pose1 data and the robot provides complete tool pose accurately. This full\n1\n\nComplete pose measurement requires three position and three orientation components.\n\nFigure 1: An Arbitrary Movement of the Tool of a Robot and Formulating a Homogeneous Transform Equation of the Form AX = XB,\npose requirement means that matrices A and B are completely known and invertible.\nThus, in situations, where either A or B is not fully known, the registration problem\nis more complex, and the published solutions cannot be applied.\n\nTHE GENERAL SOLUTION\nTo find a solution to the registration problem, we need to manipulate the parts\nof the A, B and X matrices given in equation 2. The parts of the A matrix will be\nreferenced as follows:\n\n-\\R\xc2\xb0\n~ [ ooo\nwhere tPgi_\xc2\xa5\n\ni\n\nP\n\n\xc2\xb0]J-\n\n*R*\n\noo\'o\'\n\n*J*_\n\ni\n\n(3)\n\nis the 3 by 1, translation vector and \'#3.^. represents a 3 by 3 rotation\n\npart of A. The rotation and translation components of B will be represented as\nU\n\nU\n\nU\n\n-*)\n\nand \'/\xc2\xa3..; the parts of T? are R? and P?. The parts of X will be expressed as:\nRx Px\n000 1\n\nWe will need parts of URV so we will write:2\ntT\n\nV u v U\n\n= *N o\n\n(4)\n\nWe can express the homogeneous transformation equation AX = XB in terms of\nrotation and position transformation matrices as follows:\n\nI\n\nD\n\nHa\n\nP\n\nI I K\nP\n\n* a \\ \\\n\n0\n\nP\n\n*\n\n1 JL 0\n\nR x P , \\ \\ Rb Pb\n0 10\n1\n\n"*\n\n1\n\n(5)\n\nExpanding equation 5, we have,\n(6)\n\nand,\n(7)\n\nwhere /a is a 3 by 3 identity matrix.\nSolving for the Rotation Part of X, Rx\nLemma 1 // the robot translates the tool frame t, from location i, an amount (a:, y, z)\nrelative to frame t, then:\n\' x\'\n\n2\n\nh\n\ny\n\n000\n\nA=\n\nz\n1\n\nIt is common practice to express the rotational components as N (normal), O (orthogonal), and\nA (approach) directions. Using A for the third direction however, might cause confusion with the\nA matrix, the common notation used in the sensor registration problem. As a result, we must\nadopt a different notation for one or the other. We chose to call the third rotational vector, the\nGrip direction G.\n\nFirst, suppose the robot is located at location i given by: 9T-. Next allow the robot\nto move to location j by translating (x, y, z); therefore, we can write:\nx\n\ny\n\nz\n1\n\n000\nThis can be written as:\ntrriggrnt _\n.1\nJ. \xe2\x80\x94\n\n/3\n\nooo\n\ni\n\nBy the definition of A, we have:\nx\n\ny\n\nA=\n\n000\n\nQ.E.D.\n\nz\n1\n\nLemma 2 // the robot translates the tool frame t, from location i, an amount (x, y, z)\nrelative to frame t, then:\n\nI\n\n/, \xc2\xbbp\xc2\xb0 \xe2\x80\x94 *p\xc2\xb0 1\n\'3\n-r,\nj-}\n000\n1\nJ\n\nLet the tool be located at i and the object\'s location relative to the sensor be:\n\n[ 3R? *P\xc2\xb0 1\n\' ~ [ 000 1 j\nSuppose the tool frame is translated until it reaches location j and the object relative\nto the sensor is given by:\n8\n\n- apo\n\nT\xc2\xb0 =\n3\n\n000\n\napo 1\n\n1\n\nBy definition we have B = *T?\xc2\xb0Tj, from lemma 1 we know tRigi_\xc2\xa5i = hi hence from\nequation 6 we can write:\nRx = R X 3 R 8 0 ._.\n\nFigure 2: The Tool Translates Along Its x-axis; to compute the Unit Vector N\xc2\xa3 of\nPremultiplying by the inverse of Rx, we find /a = *R*0i_^.. From the definition of B,\nwe can expand the multiplication to express the translational part of B as aPa>i^j =\n"R?\xc2\xb0Pj + aP\xc2\xb0. Now from the definition of the inverse of a transformation matrix we\ncan write:\nSTO\nT\n\n.\n\n=\n\n/OT\xc2\xab\\\xe2\x80\x941\n(T\n\nF \xc2\xbbR\xc2\xb0 \xe2\x80\x94\'poops 1\nI \xe2\x80\xa2**\xe2\x80\xa2\n*l\nI\n\n> = [ ooo\n\ni\n\nJ\n\n/o\\\n(8)\n\nUsing the last two expressions together, we have aPoi^i \xe2\x80\x94 \xe2\x80\x94 a Pj + "P\xc2\xb0- Q.E.D.\nNow we will use these lemmas to solve for the rotational parts of X. As shown\nin Figure 2 equation 2, and lemma 1, we observe that if we translate an unknown\ndistance Az along the x-axis of t, we can write equation 7 as:\nQ = R*aPa. .-\n\n0\n0\n\nIf we express Rx with its component parts, we have:\n\nr A,\n0\n0\n\n\xe2\x80\xa2 \'P\'..\nox-\n\n(9)\n\nGx-\n\nwhere sPoi_^i = SP\xc2\xb0 \xe2\x80\x94 "P? is the relative position vector of the sensor frame from\nposition i to position j and is measurable. Equation 9 says that "P*,^. is perpendicular\nto Ox and Gx. Therefore, aPa. . (which is known from measurements) must be in the\ndirection of Nx. This implies Nx equals a unit vector along 8Pa. ..\n7\n\nSimilarly, we can compute Ox by translating the robot tool frame along the y axis\nof the tool an arbitrary unknown amount, Ay. The third orientation quantity, Gx,\ncan be computed easily by translating the tool frame along the z-axis, or by using\nthe orthogonal property of _RZ, that is, Gx = Nx x Ox.\n\nSolving for the Translation Part of X\nLemma 3 // the robot rotates the tool frame t, from location i, an amount given by\nR, about an axis oft, then:\n\nroi\nA=\n\nR\n\n0\n0\n1\n\n000\n\nFirst, suppose the robot is located at location i given by: 9T*. Next allow the robot\nto move to location j by rotating about an axis through the origin of t. We can write:\nTO\nR\n\n_ 97-*\n\xe2\x80\x94 J-\n\n0\n0\n\n1\n\n000\n\nThis can be written as:\ntrpggrrit\nI \xc2\xbb\xc2\xb0\n\nR\n000\n\n0\n0\n0\n1\n\n=A\n\nQ.E.D.\nLemma 4 // the robot rotates the tool frame t, from location i, an amount given by\nR, about an axis oft, then:\n\nB=\n\n(Rx) RR X f\n000\n\n8\n\nObject\n\nt,\n\n- s,\n\nFigure 3: The Tool Rotates About Its x Axis; to Compute the y and z Components\n\nFrom equation 6, we have "R^ \xe2\x80\xa2 = (Rx)~ l \'^.^ -R*- Using lemma 3 we find \'R^\n\n\xe2\x80\xa2=\n\n(Rjc)\'1 RR X - From the definition of B, we have:\n\nUsing equation 8 we can write:\n\xe2\x80\xa2P* . = -*R\xc2\xb0\xe2\x84\xa2\\-+) *P? + >P9\n\xc2\xb0l-+)\n1\n\xc2\xbb\n\nQ.B.D.\nNow we will determine Px. When tRt \xc2\xa3/i~tj. is not equal to /a, it has one and only\none eigenvalue equal to 1; therefore, (\'/?\'. . \xe2\x80\x94 /a)/ in equation 7 has a rank equal to\n\\ i\xc2\xbbi-*j\ntwo [6]. Therefore, Px in equation 7 has one degree of freedom, and we can use it to\nsolve for two components of Px.\nFor example, if we rotate the tool frame with an amount Otx from location t about\nthe x-axis of t , then \'Pj,. . = 0 and equation 7 appears as follows (by lemma 3):\n0\n0\n0\n\n0\n\n(10)\n\nFigure 3 shows the transformation graph described by equation 10. Equation 10 has\nno information for finding the x component of Px. However, we can resolve the y\n\nand z components by equating the last two non-zero rows of equation 10. Note that\nprovided the angle 8tx is known, everything in equation 10 except Px is known. For\nexample, Rx has been determined already, and *P^ . comes from lemmas 3 and 4.\nEquations 7 and 10 show that (Ra \xe2\x80\x94 73) becomes zero if the magnitude of rotation\nabout any axis is zero or a multiple of 2?r. Therefore, this condition should be avoided\nwhen solving the translation part of *T*.\nSimilarly, you can compute the x component of Px by rotating the tool frame\nabout either the y or z axis of frame f, then using the two non-zero rows of the\nequation resulting from 7.\n\nSolving for the Translation When Rotation Magnitude is Unknown\nDuring the investigation, we discovered another, more general, method for finding\nthe translational components when the robot rotations are unknown. The translations! components can be determined after performing a minimum of three rotations\nabout the tool frame.\nThe left of Figure 4 shows that a rotation about the tool frame changes only the\norientations of the tool and sensor frames, and not the object frames. This is due to\nthe fact that the object is fixed. The right half of Figure 4 shows the effect of the\nsame rotation relative to the tool frame. The position of the object relative to the\nsensor in both figures are the same. For example, let 9T$ represent the position of\nthe tool frame (relative to the ground) before any rotations are performed, and 9T* is\nafter rotation i. Now suppose the robot is moved so it rotates an angle 9 about the\nn axis of the tool (neither 9 nor n need to be known). We will represent the motion\nwith the transform R0>n. After application of the motion, the object\'s origin can be\n\n10\n\nObject\n\n-\xc2\xbb\xe2\x80\xa2\n(a) During rotation about t, only\nthe sensor frame and t frames\nchange.\n\n(b) As seen from the sensor frame,\nthe object appears to move on a\nsphere centered at t\n\nFigure 4: The Effect of a Rotation About the Tool Frame.\ncomputed as:\nt DO _ D\nt r>o\n" \xe2\x80\x94 tt-0n -\n\nwhich demonstrates tP\xc2\xb0 to be a point on a sphere centered at the origin of the tool. If\nfour points on this sphere can be measured (implying a minimum of three rotations) ,\nthe sphere\'s center (the origin of the tool) can be found.\nSince the sensor measures the position of the object relative to the sensor frame,\nmeasuring the object before and after the tool rotations enables the tool center relative\nto the sensor frame aPt to be computed. Once the center is found, lPa is computed\nas:\nt\n\nPa = - t R aa P t\n\n(11)\n\nComputing the center of a sphere given four points is a simple and well defined\nproblem. Singularities in the problem can be avoided if all four points are distinct\nand do not lie on a single plane. The method we used to compute the sphere center\nis performed using the following steps.\n11\n\n1. Number the points 1, 2, 3, and 4. A point is a 1 by 4 matrix, the first 3 elements\nare the x, y, z coordinates, the fourth element is 1. Let Pi represent point i.\n2. Pair the points into three groups such as (1,2), (2,3), (3,4).\n3. Compute midpoints (m,-) of each point group:\n\n4. Compute unit vectors (v,) between the points in each pair:\n\n5. Compute the equation of planes (C,-) normal to u, containing m,:\nCiHvi.O)- (0,0,0,t;i - m i )\n6. Solve the linear equations for the sphere center (x,y,z):\nX\n\n1\n\ny\n\n2\nL\n\nz\n\n1\n\n3 J\n\n"0"\n0\n0\n0\n\nALGORITHM\nThis section summarizes the discussion in the previous sections and puts the\nmaterial into algorithmic steps.\nTo Compute Rotation\nTo compute the rotation component of matrix *T*, translate the tool frame along\ntwo different axes, one at a time.\n1. Record the position of the object with respect to the sensor at position 1, SP\xc2\xb0.\n12\n\n2. Translate the tool in the positive x-axis to position 2. Record the new position\nof the object with respect to the sensor, \'P$.\n3. Translate the tool in the positive y-axis to position 3 and record the position,\n\n4. Compute the unit vectors of the rotation matrix of the sensor-to-tool frame,\na\n\nR*, using:\na\n\n.\xc2\xbb*_\n\nP?-\'Pl\n\na po\n\na\n~\n\n(13)\n\nand\na\n\nG* = 3Nt x S0*\n\n(14)\nrrt\n\n5. Compute the rotation matrix of the tool-to-sensor frame: tRs = ("R*) .\n\nTo Compute Translation - Method 1\nTo compute the translation part of ST*, rotate the tool frame about any two of its\naxes, one at a time.\n1. Compute the global to tool frame at position 4, (this is done using a forward\nkinematic model and joint location measurements) 9T%, and record *P%.\n2. Rotate the tool about its x-axis to position 5. Compute aT$ and record SP\xc2\xa3 .\n3. Compute the relative rotation of the tool frame from position 4 to 5, tRtgt_+s =\nrotation part of (9Tl)~l 9T\xc2\xa3.\n4. Compute the relative rotation of the sensor frame, sRa0t_+b = R x ~ lt R t g 4 _^ s R x .\n\n13\n\n5. Compute:\n\nZ + \'P2\n\n(15)\n\n6. Compute the y and z components of Px by using equation 10.\n7. Rotate the tool frame about its y-axis to location 6 and repeat steps 2 through 5.\nUse a variant of equation 10 to compute the x component of Px.\nTo Compute Translation - Method 2\n1. Record *4P\xc2\xb0 at location 4.\n2. Rotate about the x-axis of the tool to location 5 and record the objects\' position,\n\xc2\xab5pO\n\n3. Rotate about the y-axis of the tool to location 6 and record the object\'s position,\n\n4. Rotate about the z-axis of the tool to location 7 and record the object\'s position,\n\n5. Compute *P* at the sphere center of the above 4 points.\n6. Compute tP" = -tR^P*.\nEXAMPLE\nWe used a software simulation to test the algorithm proposed in this report. We\nimagine a position sensor on the last link of a robot manipulator for feedback control\n\n14\n\napplication. The real position and orientation of the sensor frame relative to the tool\nframe (matrix X) is chosen as follows:\n\na\ntrris\n\nT =\n\n0.925 -0.163 0.342 20\n0.319\n0.823 -0.470 -12\n-0.205 0.544 0.814 10\n0\n0\n0\n1\n\nThe solution for X requires movements of the tool frame 9Tt: translations and\nrotations. In practice, the tool pose 9T* and the object\'s position relative to the sensor\n(aP\xc2\xb0 in this example) are determined from the information provided by the robot\'s\ncontroller and the sensor. In simulation, however,9T* and "P\xc2\xb0 are computed by using\nequations: 9Tj = \xc2\xbbI?\'TJ._^. and aP/ = (STJ*TS)~ 9P\xc2\xb0, where \'Tj.^. is an assumed\nmovement (either translation, rotation or both) of the tool frame from position i to\nposition j, and 9P\xc2\xb0 is an assumed position relative to the global frame g of a fixed\nobject o.\nIn the following simulation, the 9T\xc2\xb0 was chosen as:\n\n9\n\nT\xc2\xb0 =\n\n1\n0\n0\n0\n\n0 0 20\n1 0 -15\n0 1 10\n00\n1\n\nThe initial robot position (9T/) was chosen as:\n\n0\n1\n0\n0\n\n0 1 2\n00-5\n1 0 3\n0 0 1\n\nMethod 2 - When Robot Rotations are Unknown\nThe required positions of the tool frame are chosen as: (1) Given above, (2)\nTranslate 10 units along the x-axis from position 1, (3) Translate 5 units along the\ny-axis from position 2, (4) Equal to point 1, (5) Rotate 30 degrees about the x-axis\n15\n\nfrom position 4, and (6) Rotate 20 degrees about the y-axis from position 5, (7)\nRotate 40 degrees about the z-axis from position 6.\nThese positions are:\n\n0\n1\n0\n0\n\n0 1\n001 0\n0 0\n\n2\n5\n3\n1\n\n0\n1\n0\n0\n\nTl =\n\n\'5 -\n\n=\n\n1\n0\n0\n0\n\n2\n5\n3\n1\n\n0\n1\n0\n0\n\n9\n\n0\n0\n1\n0\n0\n0\n1\n0\n\n1\n0\n0\n0\n\n2\n5\n8\n1\n\n0 1\n001 0\n0 0\n\n2\n5\n3\n1\n\n0\n1\n0\n0\n\n0 0.5 0.866\n1.\n0\n0\n0 0.866 -0.5\n0 0 0 1\n\n2.\n-5.\n3.\n.\n\n-0.296 0.5\n0.814 2.\n0.940\n0\n0.342 -5.\n0.171 0.866 -0.470 3.\n0\n0\n01.\n0.0945 0.573 0.814\n0.720 -0.604 0.342\n0.688 0.553 -0.470\n0\n0\n0\n1\n\n2.\n-5.\n3.\n.\n\nThe sensor output corresponding to each of these positions are:\n\xe2\x80\xa2Pf = [ -23.3 24.9 -12.7 1 ]\n16\n\n*P| = [ -32.6 26.5 -16.1\n\n1]\n\n\xe2\x80\xa2P\xc2\xb0 = [ -34.2 22.4 -13.7\n\n1]\n\n\'P4\xc2\xb0 = [ -23.3 24.9 -12.7\n\n1]\n\n8\n\nP5\xc2\xb0 = [ -19.6 28.3 -21.3\n\n1]\n\n*P6\xc2\xb0 = [ -22.0 26.6 -25.9\n\n1]\n\n>P\xc2\xb0 = [ -8.44 28.8 -23.9 1 ]\n\nComputing the Unit Vectors of Rx\nUsing equations 12, 13 and 14, *7V*, *O\', and aGi are found using the translational\ncomponents of positions 1,2, and 3 as:\nS\n\nN< = [ 0.925 -0.163 0.342 0 ]3\n\na\n\nOt = [ 0.319 0.823 -0.470 0 ]\'\n\nand\ns\n\nGt = [ -0.205 0.544 -0.814 0 ]T\n\nUsing the orthonormal properties of Rx (eg. tR8 = SR1 ) we obtain:\nf 0.925 -0.163 0.342\n0.319 0.823 -0.470\n-0.205 0.544 0.814\n\n(16)\n\nThe translational components of points 4 through 7 lie on a sphere. The center\nof the sphere is computed to be:\n\xe2\x80\xa2P* = [ -12.6 7.70 -20.62 1. ]\nUsing equations 16 and 11, we determine tPs as:\nt a\n\nP = -\'fl"P* = [ 20. -12.\n17\n\n10. -1. ]\n\nMethod 1 - When Robot Rotations Are Known\nIn the following simulation, the 3T\xc2\xb0 and initial positions 9T{ are the same as\nbefore. The position 9Tl (starting point for the rotations) was chosen to be equal to\n9\n\nT\\ given above.\nTranslating the robot tool along the x-axis and y-axis, one at a time (same amounts\n\nas before), the respective positions, *P% and 3P\xc2\xa3, are recorded as follows:\n*Ff = [ -23.3\n\n24.9 -12.7\n\n1\n\na\n\np\xc2\xb0 = [ -32.6\n\n26.5 -16.1\n\n1\n\n= [ -24.9\n\n20.8 -10.3\n\n1 ]J\n\nand\n\nAt an initial position 4, record 9T\\ and "Pf. Rotate the tool about its x-axis a\nnon-trivial amount and record 9T\xc2\xa3 and *Pg. Rotate the tool from position 5 about\nits y-axis to position 6, and record 9T$ and aPg. The resulting input values are as\nfollows:\n~ 0\n1\n0\n0\n\n1\n\n5 =\n\n0 1 2\n00-5\n1 0 3\n0 0 1\n\n0 0.5 0.866 2\n1 0\n0 - 5\n0 0.866 -0.5\n3\n0 0\n0 1\n\n-0.296 0.5\n0.814\n0.940\n0\n0.342\n0.171 0.866 -0.470\n0\n0\n0\n1\n4\n\nP 4 \xc2\xb0= [ -24.3\n\n24.4 -24.9\n\n18\n\n2\n-5\n3\n\n1 ]\'\n\na\n\nP 5 \xc2\xb0= [ -22.1 22.5 -31.8\n\n1 ]J\n\n*P6\xc2\xb0 = [ -20.5 19.6 -35.8\n\n1 ]T\n\nand\n\nUsing equations 12, 13 and 14, "TV*, aO\', and *G* are found as:\n\xe2\x80\xa2N* = [ 0.925 -0.163 0.342 0 ]T\n\'Ot = [ 0.319 0.823 -0.470 0 ]T\nand\n\n*G* = [ -0.205 0.544 -0.814 0 ]T\nUsing the orthonormal properties of Rx (eg. *RS = ( 3 R f ) T ) we obtain:\nf 0.925 -0.163 0.342 1\n0.319\n0.823 -0.470\n-0.205 0.544 0.814\nCompute the relative rotation matrices of the tool for the two rotations: that is\nthe rotation part of \'Tf^Tg and the rotation part of \'T^Tg\'. They are found as:\n1\n0\n0.\n0 0.866 -0.5\n0 0.5 0.866\nand\n\n[ 0.940 0 0.342\n0\n1 0\n-0.342 0 0.940\nBy using equation 6 (eg. 9Rs0i_+ \xe2\x80\x94\n\n), the relative rotations of the\n\nsensor are computed as:\nr 0.981 -0.191 -0.0392\n0.151 0.870 -0.470\n0.124 0.455\n0.882\n19\n\nand\n\n0.946 0.176 0.272\n-0.145 0.980 -0.132\n-0.290 0.0857 0.953\nUsing equations 15, compute\n\nand their values are\n\nand\n\na pa\n04-\xc2\xbb\xc2\xab\n\n_\n~\n\nf 0.422 1\n-6.78\n-4.38\n\n(17)\n\n3.57\n-4.41\n-5.30\n\n(18)\n\nand\npa\n\n_\n\nFinally, compute the components of Px by using equations 10, 17 and 18. We find\nPE = (20,-12,10)T.\n\nCONCLUSIONS\nWhen a TRAC sensor is mounted on a robot for feedback control applications,\nthe sensor measures objects relative to the sensor frame. Since the ultimate objective\nis to know the tool frame with respect to the object, it is necessary to compute the\nsensor frame relative to the tool. Determining the tool-to-sensor frame is a form of the\nsensor registration problem confronted by researchers using tool mounted feedback\nsensors. The published solutions to the sensor registration problem are applicable\nonly when the sensor is able to measure a complete pose and the robot tool pose is\nfully known. However, unless the TRAC is nominally normal to the mirror target,\nit can only measure position. Additionally, in the case of velocity driven robots (like\nthe SRMS), there may be no convenient access to precise tool pose information.\nThis report provides a closed-form solution for solving the sensor registration,\n*TS, when a position only sensor is used. The solution requires movements of the tool\n20\n\nframe sTt: translations and rotations.\nThe method has been demonstrated in simulation. Initial experiments have not\nbeen successful due to measurement errors. The work used a TRAC target at a 30\nfoot range. Initial simulation studies indicate the sensitivity will improve significantly\nwith a shorter range. Future work will investigate the sensitivity of the method and\nresults will be forwarded to the sponsor.\n\nREFERENCES\n[1] L. J. Everett and L. Ong, "Closed form solution for the sensor registration problem using position information only," Journal of Robotic Systems, To Appear\n1994.\n[2] L. J. Everett and L. Ong, "Closed form solutions for the sensor registration problem applicable to position sensors and velocity commanded robots," in ASME\nWinter Annual Meeting, Book No. DSC-Vol 49, pp. 287-294, November 1993.\n[3] L. J. Everett, "Calibrating a trac sensor," in 5th International Symposium on\nRobotics and Manufacturing - ISRAM\'94, Volume 1, Intelligent Automation and\nSoft Computing, pp. 63-68, August 1994.\n[4] L. J. Everett and L. Ong, "Closed form solutions for the sensor registration\nproblem," IEEE Transactions on Robotics and Automation, Submitted in 1994.\n[5] R. P. Paul, Robot Manipulators: Mathematics, Programming, and Control. MIT\nPress, 1981.\n[6] Y. C. Shiu and S. Ahmad, "Finding the mounting position of a sensor by solving\na homogeneous transform equation of the form AX=Xb," in IEEE International\nConference on Robotics and Automation, Vol. 3, pp. 1666-1671, IEEE Computer\nSociety, 1987.\n[7] J. C. K. Chou and M. Kamel, "Quaternions approach to solve the kinematic\nequation of rotation, aaaz = azab, of a sensor-mounted robotics manipulator,"\nin IEEE International Conference on Robotics and Automation, Vol. 2, pp. 656662, IEEE Computer Society, 1988.\n[8] J. C. K. Chou and M. Kamel, "Finding the position and orientation of a sensor on\na robotics manipulator using quaternions," The International Journal of Robotics\nResearch, vol. 10, pp. 240-254, June 1991.\n[9] C. C. Wang, "Extrinsic calibration of a vision sensor mounted on a robot," IEEE\nTransactions on Robotics and Automation, vol. 8, pp. 161-175, April 1992.\n21\n\n[10] H. H. Chen, "Pose determination from line-to-plane correspondences: Existence\ncondition and closed-form solutions," in IEEE International Conference on Computer Vision, (Osaka, Japan), pp. 374-378,1990.\n\n22\n\n'