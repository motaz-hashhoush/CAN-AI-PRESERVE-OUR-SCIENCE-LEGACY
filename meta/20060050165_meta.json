{"copyright": {"licenseType": "NO", "determinationType": "OTHER", "thirdPartyContentCondition": "NOT_SET"}, "subjectCategories": ["Computer Programming and Software"], "keywords": ["fault tree", "assesment", "failure", "software reliability"], "exportControl": {"isExportControl": "NO", "ear": "NO", "itar": "NO"}, "distributionDate": "2019-07-12T00:00:00.0000000+00:00", "title": "Failure Assessment", "stiType": "PREPRINT", "distribution": "PUBLIC", "submittedDate": "2013-08-23T19:12:00.0000000+00:00", "authorAffiliations": [{"sequence": 0, "submissionId": 20060050165, "meta": {"author": {"name": "Lutz, Robyn"}, "organization": {}}, "id": "6356b467c5ae4a268eb87208c93c70f2"}, {"sequence": 1, "submissionId": 20060050165, "meta": {"author": {"name": "Nikora, Allen"}, "organization": {}}, "id": "4b78304e632a42d2ad6d35be91b88296"}], "stiTypeDetails": "Preprint (Draft being sent to journal)", "technicalReviewType": "TECHNICAL_REVIEW_TYPE_NONE", "modified": "2011-08-23T00:00:00.0000000+00:00", "id": 20060050165, "sourceIdentifiers": [{"number": "hdl:2014/39682", "type": "HANDLE"}], "created": "2013-08-23T19:12:00.0000000+00:00", "center": {"code": "JPL", "name": "Jet Propulsion Laboratory", "id": "efbc9c123a0f47caafa95d99b7d2e1a1"}, "onlyAbstract": false, "sensitiveInformation": 2, "abstract": "Three questions to which software developers want accurate, precise answers are \"How can the software system fail?\", \"mat bad things will happen if the software fails?t', and \"How many failures will the software experience?\". Numerous techniques have been devised to answer these questions; three of the best known are: 1) Software Fault Tree Analysis (SFTA) 2) Software Failure Modes, Effects, and Criticality Analysis (SFMECA 3) Software Fault/Failure Modeling. SFTA and SFMECA have been successfully used to analyze the flight software for a number of robotic planetary exploration missions, including Galileo, Cassini, and Deep Space 1. Given the increasing interest in reusing software components from mission to mission, one of us has developed techniques for reusing the corresponding portions of the SFTA and SFMECA, reducing the effort required to conduct these analyses. SFTA has also been shown to be effective in analyzing the security aspects of software systems; intrusion mechanisms and effects can easily be modeled using these techniques. The Bi- Directional Safety Analysis (BDSA) method combines a forward search (similar to SFMECA) from potential failure modes to their effects, with a backward search (similar to SFTA) from feasible hazards to the contributing causes of each hazard. BDSA offers an efficient way to identify latent failures. Recent work has extended BDSA to product-line applications such as flight-instrumentation displays and developed tool support for the reuse of the failure-analysis artifacts within a product line. BDSA has also been streamlined to support those projects having tight cost and/or schedule constraints for their failure analysis efforts. We discuss lessons learned from practice, describe available tools, and identi@ some future directions for the topic. A substantial amount of research has been devoted to estimating the number of failures that a software system will experience during test and operations, as well as the number of faults that have been inserted into that system during its development. One of us has found that the amount of structural change to a system during its development is strongly related to the number of faults inserted into it. Using techniques requiring no additional effort on the part of the development organization, the required measurements of structural evolution can be easily obtained from a development effort's configuration management system and readily transformed into an estimate of fault content. So far, structure-fault relationships have been identified for source code; current work seeks to examine artifacts available earlier in the lifecycle to determine if similar relationships between structure and fault content can be found. In particular, relationships between requirements change requests and the number of faults inserted into the implemented system would provide a significant improvement in our ability to control software quality during the early development phases.", "isLessonsLearned": false, "disseminated": "METADATA_ONLY", "meetings": [{"country": "United States", "submissionId": 20060050165, "name": "1st International Forum on Integrated System Health Engineering and Management in Aerospace", "location": "Napa, CA", "id": "822546d0a178433e8fb73064b4f59073", "startDate": "2005-11-07T00:00:00.0000000+00:00"}], "publications": [{"submissionId": 20060050165, "id": "0cb18752006d463ab4eb940ad8ad40ba", "publicationDate": "2005-01-01T00:00:00.0000000+00:00"}], "status": "CURATED", "related": [], "downloads": [], "downloadsAvailable": false, "index": "submissions-2022-09-30-06-07"}