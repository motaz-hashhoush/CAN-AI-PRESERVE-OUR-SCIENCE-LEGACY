b'Mathematics and\nInformation Sciences\nSoftware for Automated\nReading of STEP Files by\nI-DEAS\xe2\x84\xa2\nA program called \xe2\x80\x9creadstep\xe2\x80\x9d enables the\nI-DEAS\xe2\x84\xa2 computer-aided-design (CAD)\nsoftware to automatically read Standard for\nthe Exchange of Product Model Data\n(STEP) files. (The STEP format is one of several used to transfer data between dissimilar\nCAD programs.) Prior to the development of\n\xe2\x80\x9creadstep,\xe2\x80\x9d it was necessary to read STEP\nfiles into I-DEAS\xe2\x84\xa2 one at a time in a slow\nprocess that required repeated intervention\nby the user. In operation, \xe2\x80\x9creadstep\xe2\x80\x9d\nprompts the user for the location of the\ndesired STEP files and the names of the IDEAS\xe2\x84\xa2 project and model file, then generates an I-DEAS\xe2\x84\xa2 program file called\n\xe2\x80\x9creadstep.prg\xe2\x80\x9d and two Unix shell programs\ncalled \xe2\x80\x9crunner\xe2\x80\x9d and \xe2\x80\x9ccontroller.\xe2\x80\x9d The program\n\xe2\x80\x9crunner\xe2\x80\x9d runs I-DEAS\xe2\x84\xa2 sessions that execute readstep.prg, while \xe2\x80\x9ccontroller\xe2\x80\x9d controls\nthe execution of \xe2\x80\x9crunner\xe2\x80\x9d and edits readstep.prg if necessary. The user sets \xe2\x80\x9crunner\xe2\x80\x9d\nand \xe2\x80\x9ccontroller\xe2\x80\x9d into execution simultaneously, and then no further intervention by the\nuser is required. When \xe2\x80\x9crunner\xe2\x80\x9d has finished,\nthe user should see only parts from successfully read STEP files present in the\nmodel file. STEP files that could not be read\nsuccessfully (e.g., because of format errors)\nshould be regenerated before attempting to\nread them again.\nThis program was written by John\nPinedo of Lockheed Martin for Johnson\nSpace Center. Further information is contained in a TSP [see page 1].\nMSC-23192\n\n30\n\nUsing a Portfolio of\nAlgorithms for Planning\nand Scheduling\n\nSoftware for Better\nDocumentation of Other\nSoftware\n\nThe Automated Scheduling and Planning Environment (ASPEN) software system, aspects of which have been reported\nin several previous NASA Tech Briefs articles, includes a subsystem that utilizes a\nportfolio of heuristic algorithms that work\nsynergistically to solve problems. The\nnature of the synergy of the specific algorithms is that their likelihoods of success\nare negatively correlated: that is, when a\ncombination of them is used to solve a\nproblem, the probability that at least one of\nthem will succeed is greater than the sum\nof probabilities of success of the individual\nalgorithms operating independently of\neach other. In ASPEN, the portfolio of algorithms is used in a planning process of the\niterative repair type, in which conflicts are\ndetected and addressed one at a time until\neither no conflicts exist or a user-defined\ntime limit has been exceeded. At each\nchoice point (e.g., selection of conflict;\nselection of method of resolution of conflict; or choice of move, addition, or\ndeletion) ASPEN makes a stochastic\nchoice of a combination of algorithms\nfrom the portfolio. This approach makes it\npossible for the search to escape from\nlooping and from solutions that are locally but not globally optimum.\nThis program was written by Robert\nSherwood, Russell Knight, Gregg Rabideau,\nSteve Chien, Daniel Tran, and Barbara\nEngelhardt of Caltech for NASA\xe2\x80\x99s Jet\nPropulsion Laboratory. Further information is contained in a TSP [see page 1].\nThis software is available for commercial licensing. Please contact Don Hart of\nthe California Institute of Technology at\n(818) 393-3425. Refer to NPO-30379.\n\nThe Literate Programming Extraction\nEngine is a Practical Extraction and\nReporting Language- (PERL-)based\ncomputer program that facilitates and\nsimplifies the implementation of a concept of self-documented literate programming in a fashion tailored to the\ntypical needs of scientists. The advantage for the programmer is that documentation and source code are written\nside-by-side in the same file, reducing\nthe likelihood that the documentation\nwill be inconsistent with the code and\nimproving the verification that the code\nperforms its intended functions. The\nadvantage for the user is the knowledge\nthat the documentation matches the\nsoftware because they come from the\nsame file. This program unifies the documentation process for a variety of programming languages, including C, C++,\nand several versions of FORTRAN. This\nprogram can process the documentation in any markup language, and incorporates the LaTeX typesetting software.\nThe program includes sample Makefile\nscripts for automating both the codecompilation (when appropriate) and\ndocumentation-generation processes\ninto a single command-line statement.\nAlso included are macro instructions for\nthe Emacs display-editor software, making it easy for a programmer to toggle\nbetween editing in a code or a documentation mode.\nThis program was written by William A.\nWood and William L. Kleb of Langley\nResearch Center. Further information is\ncontained in a TSP [see page 1].\nLAR-16438\n\nNASA Tech Briefs, March 2003\n\n'