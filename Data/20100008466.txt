b'\t\n\nmu uuuu ui iiui iiui mu iuu uiu mil uui lull uuii uu uii mi\n(\n\n(1o) Patent\n\nNo.:\t\nUS 7,624,368 B2\n(45) Date of Patent:\t\n*Nov. 24, 2009\n\n12 United States Patent\n)\n\nWhitaker et al.\n(54) OPTIMIZATION OF DIGITAL DESIGNS\n\n5,712,792 A\n5,724,251 A\n5,734,582 A\n5,801,551 A\n5,867,396 A\n5,872,716 A\n5,923,189 A\n6,049,232 A\n6,124,736 A\n6,243,849 BI\n6,259,276 BI\n6,260,185 BI\n6,313,665 BI\n6,313,666 BI\n6,320,421 BI\n6,323,690 BI\n\n(75) Inventors: Sterling R. Whitaker, Albuquerque,\nNM (US); Lowell H. Miles,\nAlbuquerque, NM (US)\n(73) Assignee: STC.UNM, Albuquerque, NM (US)\n(*) Notice: Subject to any disclaimer, the term of this\npatent is extended or adjusted under 35\nU.S.C. 154(b) by 453 days.\nThis patent is subject to a terminal disclaimer.\n(21) Appl. No.: 11/267,587\n(22) Filed:\t\n\nNov. 4, 2005\n\n1/1998\n3/1998\n3/1998\n9/1998\n2/1999\n2/1999\n7/1999\n4/2000\n9/2000\n6/2001\n7/2001\n7/2001\n11/2001\n11/2001\n11/2001\n11/2001\n\nYamashita et al.\nHeavlin\nBertolet et al.\nLin\nParlour\nYano et al.\nSasaki et al.\nSasaki et al.\nYamashita et al.\nSingh et al.\nSasaki et al.\nSasaki et al.\nSasaki et al.\nYamashita et al.\nAkita et al.\nYamashita et al.\n\nPrior Publication Data\n\n(65)\t\n\nUS 2006/0114135 Al\t\n\nJun. 1, 2006\n(Continued)\n\nRelated U.S. Application Data\n\nOTHER PUBLICATIONS\n\n(63) Continuation of application No. 10/172,746, filed on\nJun. 14, 2002, now Pat. No. 6,993,731.\n\nKazuo Yano et al., Top-Down Pass-Transistor Logic Design, IEEE\nJournal of Solid-State Circuits, vol. 31, No. 6, Jun. 1996, pp. 792-803.\n\n(60) Provisional application No. 60/298,832, filed on Jun.\n15, 2001.\n\nPrimary Examiner Thuan Do\n\n(74) Attorney, Agent, or Firm Townsend and Townsend and\n\n(51) Int. Cl.\nG06F 17150\n(52)\n\n(58)\n\nCrew, LLP\n\n(2006.01)\nU.S. Cl .\t .................... 716/18; 716/1; 716/2; 716/17\n\nField of Classification Search .....................\t 716/1,\n\n(57)\t\n\nABSTRACT\n\n716/2, 17, 18\n\nSee application file for complete search history.\n(56)\n\nAn application specific integrated circuit is optimized by\ntranslating a first representation of its digital design to a\n\nReferences Cited\n\nsecond representation. The second representation includes\n\nU.S. PATENT DOCUMENTS\n4,792,909 A\n5,128,871 A\n5,299,204 A\n5,406,497 A\n5,572,437 A\n5,581,202 A\n\nmultiple syntactic expressions that admit a representation of\na higher-order function of base Boolean values. The syntactic\nexpressions are manipulated to form a third representation of\nthe digital design.\n\n12/1988\t Serlet\n7/1992\t Schmitz\n3/1994\t Daniel\n4/1995\t Altheimer et al.\n11/1996\t Rostoker et al.\n12/1996 Yano et al.\n\n31 Claims, 18 Drawing Sheets\n-. PRE\n= FORI\n\nBEGIN WITH\nSYNTACTIC\n\nEXPRESSION FOR\nCELL\n\n^\novEm\t\n\nGO TO NEXT\nTRANSFORMATION\n\n1pENi1 \t\nINVERMION TO BE\nRE\n\nEs\n\nB0.\'\n\nM\ncoNT Ra\n\nSTATE\t\n\neos80T\nTRUIH -LE\t\nOFFER\n\nB10\t\n\nINTERCHANGE\t\n\nSTATE GROUPS\t\nOF SIZE 2"\t\n\nINVERT\nTRUTH\n\nINVERT\t\nBUFFER\t\n\nTABLE\n\nCONTROIWRH\t\n\nMAP-ENTERED\nVARIABLE\t\n\n212\t\n\n\xc2\xb0t\n\nUS 7,624,368 B2\nPage 2\nU.S. PATENT DOCUMENTS\n6,356,118 B1\n6,359,468 B1\n6,388,474 B2\n6,400,183 B2\n6,433,588 B1\n6,445,214 B2\n6,486,708 B2\n6,505,322 B2\n6,532,581 B1\n6,536,028 B1\nRE38,059 E\n6,557,145 B2\n6,564,361 B1\n\n3/2002\n3/2002\n5/2002\n6/2002\n8/2002\n9/2002\n11/2002\n1/2003\n3/2003\n3/2003\n4/2003\n4/2003\n5/2003\n\nRikinoetal.\nPark et al.\nSasaki et al.\nYamashita et al.\nYamashita et al.\nSasaki et al.\nYamashita et al.\nYamashita et al.\nToyonaga et al.\nKatsioulas et al.\nYano et al.\nBoyle et al.\nZolotykh et al.\n\n6,564,364 B1\n6,588,006 B1\n6,598,209 B1\n6,651,223 B2\n6,690,206 B2\n6,696,864 B2\n6,820,242 B2\n6,845,349 B1\n7,190,376 B1 *\n2002/0178432 Al\n2003/0085738 Al\n2003/0200510 Al\n2003/0204822 Al\n* cited by examiner\n\n5/2003\n7/2003\n7/2003\n11/2003\n2/2004\n2/2004\n11/2004\n1/2005\n3/2007\n11/2002\n5/2003\n10/2003\n10/2003\n\nDahl et al.\nWatkins\nSokolov\nYamashita et al.\nRikino et al.\nYamashita et al.\nYamashita et al.\nSasaki et al.\nTonisson\t .................... 345/629\nKim et al.\nMaki et al.\nWhitaker et al.\nWhitaker et al.\n\nU.S. Patent\t\n\nL\n\n104\t\n\n100-1\n\nUS 7 ,624,368 B2\n\nSheet 1 of 18\t\n\nNov. 24, 2009\t\n\n112\n\n108\t\n\nCK\n\nY. Y.\t\n\nQ\n\nI^\n\nMux Q D ^RBuf\nQD\nt o\t\n\nQN\nR\n\nFig. 1A\n\n112\n\n08\t\n100-2\n\nL\n\nCK\nQ\nD^R Q DBuf\n\nON\n\nFig. 1 B\n\nL\n\n104\t\n\n100-3\n\n108\n\n..\n\nY\xe2\x80\x9e Yo\tCK\nIn\n:\n\nMux Q D\n\nDR\n\nto\nR\n\nFig. 1C\n\na\n\nU.S. Patent\t\n\n100-4\n\nUS 7,624,368 B2\n\nSheet 2 of 18\t\n\nNov. 24, 2009\t\n\t\n\n104\n\n\t\n\n112\n\nYn ..\nYO\nI n\t1\t\n\nQ\n\nMux Q D Buf\nI0\t\n\nQN\n\nFig. 1D\n\n1081\n208\nL\n\nrig. ZH\n\n1081\t\n\n208\n\nL\nCK\n\nEBN\nD\n\nD\n\nQ D Q\n\nR\n\nFig. 2B\t\n\n204\n\nU.S. Patent\t\n\nNov. 24, 2009\t\n\nSheet 3 of 18\t\n\nUS 7 ,624,368 B2\n\nLO\n\nm\nLL\n\nCl\n\t\n\nco\n\nd\'\nI.L\n\no\t\n\n^\n\nco\nLL\n\n0\n0\nM\n\nU.S. Patent\t\n\nNov. 24, 2009\t\n\nSheet 4 of 18\t\n\nUS 7,624,368 B2\n\nN\nr\nM\n\nCD\n_6\nL.L\n\nO\nO\n(D\n\nU.S. Patent\t\n\nNov. 24, 2009\t\n\nSheet 5 of 18\t\n\nUS 7,624,368 B2\n\nco\n\n0\n\nL.L..\n\n0\n0\n\nU.S. Patent\t\n\nNov. 24, 2009\t\n\nSheet 6 of 18\n\n\t\n\nUS 7,624,368 B2\n\n820\n\n802 %\n\n,A)\n\n-F-L\n810\n\n812\n\nRnR\n\nR1d\n\nV\n\n804\t\n\n806\n\nFIG. 8A\n\n860\n\n842\t\n\n852\t\n\n850 848\t\n\n854\n\nU\n/ 856\n1\n84 4\t\n\nP\n\nFIG. 8B\n\n846\n\nU.S. Patent\t\n\nNov. 24, 2009\t\n\nUS 7,624,368 B2\n\nSheet 7 of 18\t\n\n872\nY[0]\t\n\nY[21\n\nY[1]\t\n\nI,\n\nFIG. 8C\n\n\t\n\nU.S. Patent\t\n\nNov. 24, 2009\t\n\nSheet 8 of 18\n\n\t\n\nUS 7,624,368 B2\n\nFROM PREVIOUS\nTRANSFORMATION\n\nBEGIN WITH\nSYNTACTIC\t\nEXPRESSION FOR\nCELL\n\n902\n\n1.,\n\nIDENTIFY\nINVERSION TO BE\nREMOVED?\n\n905\t\n\n903 CONTROL STATE\t\nVARIABLES\t\n908\t\n\nINTERCHANGE\t\nSTATE GROUPS\t\nOF SIZE 2"\t\n\n910\t\n\nREASSIGN\t\nCONTROL WITH\nMAP-ENTERED\t\nVARIABLE\n\nFIG. 9A\n\nGO TO NEXT\nTRANSFORMATION\n\nTRUTH TABLE\t\n\n907\nBUFFER\n\nINVERT\nTRUTH\nTABLE\n\nINVERT\t\nBUFFER\t\n912\t\n\n914\n\nU.S. Patent\t\n\nNov. 24, 2009\t\n\nUS 7,624,368 B2\n\nSheet 9 of 18\t\nFROM PREVIOUS\nTRANSFORMATION\nBEGIN WITH SYNTACTIC\nEXPRESSION FOR CELL\n\nREMOVE EXISTING\nREDUNDANCIES\t\n\n918\n\nPERFORM APPROPRIATE\nPERMUTATIONS\n\nENTER CONTROL\nVARIABLES INTO TRUTH\nTABLE\n\nANY CHANGES\t\nTO SYNTACTIC\nEXPRESSION?\nNO\n\nGO TO NEXT\nTRANSFORMATION\n\nFIG. 913\n\n924\n\nU.S. Patent\t\n\nNov. 24, 2009\t\n\nUS 7,624,368 B2\n\nSheet 10 of 18\t\nFROM PREVIOUS\nTRANSFORMATION\n\nBEGIN WITH SYNTACTIC\nEXPRESSIONS FOR\nMULTIPLE CELLS\n\nNO \'ANY EXPRESSION\nOUTPUT A CONTROL\nVARIABLE? /\nYES\nCONVERT\nCORRESPONDING\nCONTROL VARIABLES\t\nINTO MAP-ENTERED\nVARIABLES\n\n932\n\nCOMBINE CONTROL\n\nDEFINE STATES IN\t\nMERGED EXPRESSION\n\n1\n\n936\n\nGO TO NEXT\t\nI 938\nTRANSFORMATION l/\n\nFIG. 9C\n\nU.S. Patent\t\n\nNov. 24, 2009\t\n\nSheet 11 of 18\t\n\nUS 7 ,624,368 B2\n\nFROM PREVIOUS\nTRANSFORMATION\nBEGIN WITH SYNTACTIC\nEXPRESSION FOR CELL\n\n942\n944\nPERFORM\n\nPERMUTATIONS TO\nALIGN LOW STATES\n\nYES\t\n\nARE HALF OF\nTRUTH-TABLE STA\nLOW?\nNO\n\nCHANGE CONTROL\nVARIABLE TO RESET\nINPUT TO A\nFLIP FLOP\n\ni ARE HALF OF\nTRUTH-TABLE STA\nHIGH?\n1^\t\n\nYES\n\nPERFORM\n\nPERMUTATIONS TO\nALIGN HIGH STATES\n\nNO\n\nCHANGE CONTROL\nVARIABLE TO SET\nINPUT TO A FLIP\nFLOP\n\nGO TO NEXT\n\nTRANSFORMATION\n\nFIG. 9D\n\nU.S. Patent\n\n\t\n\nNov. 24, 2009\n\n\t\n\nSheet 12 of 18\n\n\t\n\nUS 7,624,368 B2\n\nTRANSLATE NETLIST\nTO ULG NETLIST\nSYNCHRONOUS CELL NO\nWITH HALF VSS?\nIDENTIFY DATA\t\nAND CONTROL\n\nYES\n1048\nMORE VARIABLE TO\nRESETINPUT\n\nREMOVE CONNECTION 1 1016\nCELLS TO VDD/VSS V\n1052\nREMOVE NONINVERTING BUFFERS 1 1020\n\nWITH HALF VDD?\nYES\n\nREMOVE INVERTERS\n\n1 1024\n\nMORE VARIABLE TO\t\nSET INPUT\t\n\nGROUP BY COMMON\nINPUTS\t\n\n1060\n\nIDENTIFY\t\nSUB-FUNCTIONS\n\nREMOVE REDUNDANT\nNODES\n\n1056\nI,--,\n\n1064\n\nREMOVE INVERSIONS\n\n1036\nFANOUT NODES?\n\nMAKE ALL BUFFERS\nINVERTING\t\n\nNO\n\nI j068\nV\n\nYES\n\nPERMUTE NODES AND\nREDUCE\n\nL,\n\nTRANSLATE INTO\t\nSTANDARD CELLS\n\n040\n\nFIG. 10\n\nI\n\ni\n\n1072\n\nU.S. Patent\n\nNov. 24, 2009\n\nUS 7,624,368 B2\n\nSheet 13 of 18\n\n1100\n\n1110b\n\nCOMPUTER\nREADABLE\nSTORAGE MEDIA\n1104\t\n\n1102\n\n1106\n\n1108\n\nj 110a\n\n/\t\nINPUT\t\nDEVICES\t\n\nCPU(S)\n\nOUTPUT\nDEVICES\n\nCOMPUTER\nREADABLE\nSTORAGE\nMEDIA READER\n\nSTORAGE\nDEVICES\n\n-T\n1112\n\nCOMM.\t\nSYSTEM\t\n\n1118\nPROCESSING\t\nACCELERATION\t\n\n1114\t\n\n1120\nWORKING\nMEMORY\n\n1116\n\n1124\t\n\nOPERATING\nSYSTEM\n\nOTHER CODE\n(PROGRAMS)\n\n1122\n\nFIG. 11\n\nU.S. Patent\t\n7200\n\n\t\n\nL\n\n\t\n\nNov. 24, 2009\t\n\nUS 7,624,368 B2\n\nSheet 14 of 18\t\n\nDetermine Layout Rules for\nTarget Fabrication Process\n\n\t\n\n204\n\n208\n\nLayout Kernel Cells with\nManual Customization\n\nSpecify Basic\nCell Configurations\n\n212\n\nAutomatically Generate 1216\nBasic Cells if\n\t\n\nPerform Verification and Any\nHand optimization of Basic Cells\n\t\n\nLayout Any\nSpecialized Cells\n\nFig. 12\n\n1224\n\n220\n\nU.S. Patent\n\n\t\n\nNov. 24, 2009\n\n\t\n\nSheet 15 of 18\n\n\t\n\nUS 7,624,368 B2\n\n06 N\n\nO^\nU ^\nCU\n\n0\n\na: W\n\nU M\nO\na\nC cn\n\nU ^\n\t\n\nM\nr\n\nto\n\nO Q\n\nM\ne--\n\nc\n\nM\n\nO\n\nip\n\nN O\na\nN\nT-\n\nCC3\n\nO\n\nt\n(D\n\nM\nr it\n\n.^\nC F\xe2\x80\x94\n\nN\nr-\n\nJ\n\nM\nT-\n\nO N\nUV\n\n(D o\n\nO\nO\nM\nr\n\nCU\n\nc\n\nN\n\nU\nco\nO\nM\n\xe2\x80\xa2--\n\nO\nJ 12\n\nC\n\nd\'\nO\n\nM\nr\nO\nO\nM\nr\n\nW\n\n---\n\nO\nO\n\nr\nL.l..\n\n\t\n\nU.S. Patent\n\nNov. 24, 2009\n\nUS 7 ,624,368 B2\n\nSheet 16 of 18\n\nOZ$ O\nO^\n\nU ^\n(u O\n\n06\n\n0\n\nM\nT\n\nV\ncu\n.E O\n\n0\n\nM\n\nm0\nC ^2\n\nO.O\n\nU\nCU O\nF-^ Cl)\n\nU to\n\nC\n\nco\n\nT\nM\n\nIr\n\nr-\n\nQ\n\nT\nO\n\nN O\n(^--\n\n\xc2\xb06 o\n\nQ\n\nN\n\n^\'\n\nN 0\n\xe2\x80\xa2O ca\n\np\n\ncu\n\nA Q\n\nU)O\nCl\n\n\xe2\x80\xa2N\nL\n\nO\n\nU)\n\na^\n\n0\n\nU\n\no\nco\n\nH\xc2\xb0.\n\nT\nO\nO\t\nJ F-\t\nQ ^\t\n\nW\no\n\nM\nT\n\nC\nW\t\no\t\nco\t\n\nT\n\no r---4\n\n0\nLO\n\nT\n\no\n\n^\nT\n\no .\xe2\x80\x94^\nCD\n^-\n\nCD\nU\n\nU.S. Patent\n\nNov. 24, 2009\n\nUS 7 ,624,368 B2\n\nSheet 17 of 18\n\nc\nL^\n\nN\nT\n\nco\nr\n\nC\n\nOd\nC-)\nN\n\nL\nF\n\nU\nI.L\n\nO\n\nco\n\nM\n\nco\n\nN\n\np\n\nu\xe2\x80\x94\n\nU\n\nCU\nC\n\n\xe2\x80\xa2^\n\np\n\nQ\n\nO\nco\n\nM\nr\n\na\n\nU =3\n\nM\n\n5\n\nN\n.E\nCU\n\nO\n\nQ\n\n>\n\nco\n\nO\n\n>\n\nc\n\nn\n\nL\n\n(D\n_\n\nU Q\n\ncu\n\nJ\n\n^-+\n\nco\n\nN\n\nQ\n\nC)\n\n^ U\n\nC/)\n\n^,\n\nU\n\nCD\n\nco\n\nT\n06\n\no\nU\n\no JL\n\nO\n\n\xe2\x80\xa2V5\t ca\n\ncu\n\nN .N\n\nC7 ^\n\na Q\n\nC\n\nU\n\nU)0\n\nw\n\nU\nT\n\nr\n\n0\nr\n\n_\nLL\n\nN\n\nU\n\nZ+\n\nco\n\n0\nr\n\nQ\n\n^`^\n\n1\n\nW\nM\nT\n\nO\nco\nT\n0\nco\nT\n\nU.S. Patent\t\n\nNov. 24, 2009\t\n\nSheet 18 of 18\t\n\nUS 7,624,368 B2\n\n_1904\n\n1900\t\n\nEdit Design with\nHDL Entry Tool\n1916\n\nPerform Dynamic\t\nTiming An\t\n\n\'Yes =\n\' Rework\n1906\n\n1908\t\n\nSynthesize & Optimize HDL Behavioral\t\nNetlist to Produce Structural Netlist\t\n\nAny\nProblems?\n\n1912\n\nPerform Static\t\nTiming Analysis\t\n\n;No =\nContinue\n1916\n\nPerform Dynamic\nTiming Analysis\n1920\n\nPlace &\nRoute Design\n1912\n\nPerform Static\nTiming Analysis\n1916\n\nPerform Dynamic\nTiming Analysis\n\nFabricate\nDesign\n\nFig. 19\n\n1924\n\nUS 7,624,368 B2\n1\nOPTIMIZATION OF DIGITAL DESIGNS\nCROSS-REFERENCES TO RELATED\nAPPLICATIONS\nThis application is a continuation of U.S. patent application Ser. No. 10/172,746, entitled "OPTIMIZATION OF\nDIGITAL DESIGNS" filed Jun. 14, 2002 by Sterling R. Whitaker, et al. ("the \'746 application"), the entire disclosure of\nwhich is incorporated herein by reference for all purposes.\nThe \'746 application is a nonprovisional of and claims priority to U.S. Prov. Pat. Appl. No. 60/298,832, entitled "MULTIIPLEXOR-BASED DIGITAL DESIGN," filed Jun. 15,\n2001 by Sterling R. Whitaker et al., the entire disclosure of\nwhich is also herein incorporated by reference for all purposes.\nSTATEMENTS AS TO RIGHTS TO INVENTIONS\nMADE UNDER FEDERALLY SPONSORED\nRESEARCH AND DEVELOPMENT\nThis invention was supported by U.S. Government under\nan award by NASA under Grant No. NAGS-9152, which\noutlines certain rights in the invention given to the U.S. Government.\nThis application is also related to the following commonly\nassigned, concurrently filed U.S. patent applications, each of\nwhich is also incorporated herein by reference in its entirety\nfor all purposes: U.S. patent. application Ser. No. 10/172,742,\nnow issued U.S. Pat. No. 6,829,750, issued Dec. 7, 2004,\nentitled "PASS-TRANSISTOR VERY LARGE SCALE\nINTEGRATION," by Gary K. Maki and Prakash R. Bhatia;\nU.S. patent application Ser. No. 10/172,494, now issued U.S.\nPat. No. 6,792,589, issued Sep. 14, 2004, entitled "DIGITAL\nDESIGN USING SELECTION OPERATORS," by Sterling\nR. Whitaker, Lowell H. Miles, and Eric G. Cameron; U.S.\npatent application Ser. No. 10/172,745, now issued U.S. Pat.\nNo. 6,892,373, issued May 10, 2005, entitled "INTEGRATED CIRCUIT CELL LIBRARY," by Sterling R. Whitaker and Lowell H. Miles ; U.S. patent application Ser. No.\n10/172,743, now issued U.S. Pat. No. 6,779,158, issuedAug.\n17, 2004, entitled "DIGITAL LOGIC OPTIMIZATION\nUSING SELECTION OPERATIONS," by Sterling R. Whitaker, Lowell H. Miles, Eric G. Cameron, and Jody W.\nGambles ; and U.S. patent application Ser. No. 10/172,744,\nnow issued U.S. Pat. No. 6,779,156, issued Aug. 17, 2004,\nentitled "DIGITAL CIRCUITS USING UNIVERSAL\nLOGIC GATES," by Sterling R. Whitaker, Lowell H. Miles,\nEric G. Cameron, Gregory W. Donohoe, and Jody W.\nGambles. These applications are sometimes referred to herein\nas "the Universal-Logic-Gate applications."\nBACKGROUND\nThis invention relates in general to digital circuits and,\nmore specifically, to design of digital circuits that are laid-out\nwith cells.\nMathematics is one attempt for humankind to understand\nthe universe around them. As technological advancement\noccurs, mathematical concepts and algorithms grow to enable\nand/or support those advancements. Within the context of\ndigital design, Boolean logic is the mathematical construct\nused to manipulate and optimize digital circuits. Nearly every\nelectronic device today relies upon some type of Boolean\nlogic for any embedded digital circuits. Other mathematical\nconstructs, however, are possible that allow further optimiza-\n\n2\ntion of digital designs. Changes to the processing of digital\ndesign are necessary when avoiding Boolean logic elements.\nToday application specific integrated circuit (ASIC) are\nspecified using netlists of library cells for a particular process\n5 of a foundry or fabrication facility. These netlists are used to\nfabricate integrated circuits made up of the library cells. A\nfew hundred library cells are typically available for a particular process that includeAND gates, OR gates, flip-flops (F/F),\nand buffers. When a new fabrication process is developed,\n10 engineers custom layout each of the library cells to get the\nmost optimal performance from each cell.\nBRIEF DESCRIPTION OF THE DRAWINGS\nThe present invention is described in conjunction with the\nappended figures:\nFIG. 1A is a block diagram of an embodiment of a basic\ncell composed of kernel cells;\nFIG. 1B is a block diagram of another embodiment of a\n20 basic cell composed of a memory and a buffer kernel cells;\nFIG. 1C is a block diagram of yet another embodiment of\n\xe2\x80\xa2 basic cell composed of a selection and memory kernel cells;\nFIG. 1D is a block diagram of still another embodiment of\n\xe2\x80\xa2 basic cell composed of a selection and a buffer kernel cells;\n25 FIG. 2A is a block diagram of an embodiment of a memory\ncell with a synchronous reset;\nFIG. 2B is a block diagram of another embodiment of a\nmemory cell with an asynchronous reset;\nFIG. 3 is a block diagram of an embodiment of a universal\nso logic gate layout;\nFIG. 4 is a block diagram of an embodiment of a memory\nkernel cell layout;\nFIG. 5 is a block diagram of an embodiment of a buffer\n35 kernel cell layout;\nFIG. 6 is a block diagram of an embodiment of a basic cell\nabutted together from the kernel cells of FIGS. 3-5;\nFIG. 7 is a block diagram of an embodiment of two basic\ncells laid out together;\n40\t\nFIG. 8A provides a schematic illustration of an enhancement-mode transistor;\nFIG. 8B provides a schematic illustration of a depletionmode transistor;\nFIG. 8C provides a circuit layout for a universal logic gate\n45 according to an embodiment of the invention that uses depletion-mode transistors;\nFIG. 9A is a flow diagram illustrating how inversions may\nbe removed in logical expressions implemented in embodiments of the invention;\n50\nFIG. 9B is a flow diagram illustrating how nodes may be\nreduced in logical expressions implemented in embodiments\nof the invention;\nFIG. 9C is a flow diagram illustrating how nodes may be\ncombined in logical expressions implemented in embodi55\nments of the invention;\nFIG. 9D is a flow diagram illustrating how set and reset\ninputs may be used in performing optimizations according to\nembodiments of the invention;\nFIG. 10 is a flow diagram illustrating an embodiment for a\n60\t\nULG netlist optimization;\nFIG. 11 provides a schematic illustration of a computer\nsystem on which methods of the invention may be embodied;\nFIG. 12 is a flow diagram of an embodiment of a process\n65 for preparing a ULG ASIC cell library;\nFIG. 13 is a block diagram of an embodiment of a design\nflow that uses syntactic manipulation after synthesis;\n15\t\n\nUS 7,624,368 B2\n4\n\n3\nFIG. 14 is a block diagram of another embodiment of a\ndesign flow that uses syntactic manipulation and the ULG\nASIC cell library;\nFIG. 15 is a block diagram of another embodiment of a\ndesign flow that uses the ULG ASIC cell library for the final\nnetlist;\nFIG. 16 is a block diagram of yet another embodiment of a\ndesign flow that combines synthesis and syntactic manipulation into a single tool;\nFIG. 17 is a block diagram of still another embodiment of\na design flow that uses a verification tool throughout the\ndesign flow;\nFIG. 18 is a block diagram of still another embodiment of\na design flow that uses a verification tool throughout the\ndesign flow and after fabrication; and\nFIG. 19 is a flow diagram of an embodiment of a design\nprocess.\nIn the appended figures, similar components and/or features may have the same reference label. Further, various\ncomponents of the same type may be distinguished by following the reference label by a dash and a second label that\ndistinguishes among the similar components. If only the first\nreference label is used in the specification, the description is\napplicable to any one of the similar components having the\nsame first reference label irrespective of the second reference\nlabel.\nDETAILED DESCRIPTION\nThe ensuing description provides preferred exemplary\nembodiment(s) only, and is not intended to limit the scope,\napplicability or configuration of the invention. Rather, the\nensuing description of the preferred exemplary\nembodiment(s) will provide those skilled in the art with an\nenabling description for implementing a preferred exemplary\nembodiment of the invention. It is to be understood that\nvarious changes may be made in the function and arrangement of elements without departing from the spirit and scope\nof the invention as set forth in the appended claims.\nIn some embodiments, a method is provided for optimizing\nan application specific integrated circuit. A first representation of a digital design for the circuit is translated to a second\nrepresentation of the digital design. The second representation comprises a plurality of syntactic expressions that admit\na representation of a higher-order function of base Boolean\nvalues. The plurality of syntactic expressions are manipulated\nto form a third representation of the digital design. In some\nembodiments, the third representation is translated to a fourth\nrepresentation of the digital design, with the first and fourth\nrepresentations expressed in the same syntax. For example,\nthe common syntax may correspond to netlist representations. In some instances, manipulation of the syntactic\nexpressions is aidedby identifying data and control in the first\nand/or second representations. Examples of manipulations\ninclude removing logical inversions, reducing a number of\nnodes, and reassigning data and control.\nThe methods of the present invention may be embodied in\na computer-readable storage medium having a computerreadable program embodied therein for directing operation of\na computer system. Such a computer system may include a\ncommunications system, a processor, and a storage device.\nThe computer-readable program includes instructions for\noperating the computer system as part of optimizing a digital\ndesign in accordance with the embodiments described above.\n\nI. Cells\nIn one embodiment, a basic cell is a construct that includes\none or more of a universal logic gate (ULG), a memory\nelement or flip-flop (F/F), and/or a buffer. In this embodiment,\n5 the ULG is a multiplexor or select circuit. The ULG, memory\nelement, and buffer are implemented with a relatively-small\nnumber of kernel cells, which typically have layouts that are\nindividually optimized, and often, by hand. The kernel cells\nare arranged into the higher-level basic cells having at least\n10 one of the ULG, memory element, and buffer, but the basic\ncells do not have more than one of any type of kernel cell in\nthis embodiment. For a given semiconductor process, there is\na ULGASIC cell library which is composed of the basic cells\nand specialized cells. These specialized cells may differ from\n15 the basic cell construct and could include, for example, clock\ndividers, memory arrays, analog circuits, phase-locked loops,\noscillators, analog circuits, etc.\nReferring first to FIG. 1A, an embodiment of a basic cell\n100 is shown in block diagram form. This embodiment\n20 includes all three of a ULG or selection circuit 104, a memory\ncell 108 and a buffer 112. Some of the kernel cell components\nof the basic cell 100 are shown in a generalized manner. The\nULG 104 is shown having any number of data and selection\ncontrol inputs, however the relationship between the maxi25 mum data inputs for a number of selection control inputs\nfollows the following relationship 2\'\'=I. The memory kernel\ncell 108 shown is a resetable D F/F. A buffer kernel cell 112\nshown has both an inverting and non-inverting output,\nalthough, other buffer implementations will have either an\n30 inverting or non-inverting output.\nThe ULG 104 in this embodiment is implemented with a\nmultiplexor. Multiplexors can be used to implement any\nBoolean function, but are not Boolean operators. Combinatorial logic in conventional designs is not implemented with\n35 selection functions, but uses Boolean logic gates. Further,\nmultiplexors in conventional circuits are converted to Boolean equivalents during synthesis.\nThe below Table I shows the fourteen kernel cells used in\none embodiment:\n40\n\nTABLE\nULG Component\t\n\nSymbol Description\n\nULG\t\n\nU\n\nMemory Cells\t\n\nD\nDR\n\n45\n\nDS\n50\nBuffers\t\n\n55\t\n\nB\nBN\nCB\nZB\n\n8 to 1 (U8), 4 to 1 (U4) or 2 to 1 (U2)\nMultiplexors\nD F/F (Dl)\nResetable D F/F - Synchronous (DRI),\nClock Edge Synchronization (DR2) or\nAsynchronous (DR3)\nSetable D F/F - Synchronous (DSI),\nClock Edge Synchronization (DS2) or\nAsynchronous (DS3)\nNon-inverting buffer (BI) or Hybrid\nInverting and Non-inverting buffer (132)\nInverting buffer (BNI)\nHigh-drive buffer (CBI)\nTristatable buffer (ZBI)\n\nThe embodiment of the kernel cells in the above Table I\ncould be augmented in other embodiments to include other\ncells. The ULGs could include multiplexors of any size, for\n60 example, 16 to 1, 32 to 1, 64 to 1, etc. Larger multiplexors\ncould be formed with a number of smaller multiplexors if a\nlarger multiplexor is not supported in the kernel cells. Various\nother types of memory cells could also be supported such as\nEEPROM, EPROM, PROM, DRAM, SRAM, NVRAM,\n65 magnetic core memory, 7-K F/Fs, setable and resetable F/Fs,\nvarious F/F with scan ATPG capability, etc. The 7-K, setable,\nor resetable functionality of a F/F can be implemented by a D\n\nUS 7,624,368 B2\n5\n\n6\n\nF/F and logic that can be embedded in the mux before or after\nthe D F/F. The F/Fs could also be falling edge triggered in\nsome embodiments. Also the buffers could be of various\nstrengths and sizes. Some buffers could support input and\noutput pins of the chip with various thresholds, voltages, etc.\nTable II lists the various configurations in which kernel\ncells are used to create basic cells 100-1 that use all of a ULG\n104, a memory cell 108 and a buffer cell 112 such as the\nexample in FIG.1A. Thesebasic cells 100-2 are the variations\nfound in one embodiment of the ULG ASIC cell library.\n\nform an embodiment of the ULG ASIC cell library. Other\npossible configurations are enumerated in Table IV below.\nTABLE IV\n5\nBasic Cell Configuration\nType\nMux - Mem\nUD\nUDR\n10\n\nU-D\nU - DR\n\nUDS\n\nU - DS\n\nVarious Basic Cell Layout Names\nU2D1, U4D1, U8D1\nU2DR1, U4DR1, U8DR1, U2DR1, U4DR2,\nU8DR2 U2DR3, U4DR3, U8DR3\nU2DS1, U4DS1, U8DS1, U2DS2, U4DS2,\nU8DS2, U2DS3, U4DS3, U8DS3\n\nTABLE II\nBasic Cell\t\nType\t\n\nConfiguration\nMux - Mem\nBuf\n\nUDB\t\n\nU-D-B\n\nUDBN\t\nUDZB\t\nUDRB\t\n\nU - D - BN\nU - D - ZB\nU - DR - B\n\nUDRBN\t\n\nU - DR - BN\n\nUDRZB\t\n\nU - DR - ZB\n\nUDSB\t\n\nU - DS - B\n\nUDSBN\t\n\nU - DS - BN\n\nUDSZB\t\n\nU - DS - ZB\n\nWith reference to FIG. 11), a block diagram of still another\nembodiment of a basic cell 100-4 composed of ULG and\nbuffer kernel cells 104,112 is shown. There are other possible\nconfigurations of this type of basic cell 100-4. The variations\nof this basic cell 100-4 for one embodiment of the ASIC\nlibrary are listed in Table V. From Tables II-V, around 80% of\n20 the 142 available basic cells include ULG circuits. The 142\nbasic cells are based upon the 14 kernel cells of Table I.\nAlthough the embodiment in Tables II-V show some possible basic cells, other embodiments could include additional\nbasic cells. These additional basic cells could be optimized\n25\nfor output power, power consumption, layout area, response\ntime, leakage, etc. such that there are multiple cells with the\nsame logical properties, but that are optimized for particular\ncircumstances. For example, there may be three non-inverting buffers of having different drives to support larger fanout\n3o\nand/or higher speeds. In various embodiments, there could be\nless than, for example, 100, 75, 50, 40, 30, 20, or 10 kernel\ncells. At the lower limit, there is three kernel cells in one\nembodiment with just one of each of the types of kernel cells.\n15\n\nvarious Basic Cell Layout Names\nU2D1B1, U4D1B1, U8D1B1,\nU2D1B2, U4D1B2, U8D1B2,\nU2D1BN1, U4D1BN1, U8D1BN1\nU2D1ZB1, U4D1ZB1, U8D1ZB1\nU2DR1B1, U2DR2B1, U2DR3B1,\nU2DR1B2, U2DR2B2, U2DR3B2,\nU4DR1B1, U4DR2B1, U4DR3B1,\nU4DR1B2, U4DR2B2, U4DR3B2,\nU8DR1B1, U8DR2B1, U8DR3B1,\nU8DR1B2, U8DR2B2, U8DR3B2\nU2DR1BN1, U2DR2BN1, U2DR3BN1,\nU4DR1BN1, U4DR2BN1, U4DR3BN1,\nU8DR1BN1, U8DR2BN1, U8DR3BN1\nU2DR1ZB1, U2DR2ZB1, U2DR3ZB1,\nU4DR1ZB1, U4DR2ZB1, U4DR3ZB1,\nU8DR1ZB1, U8DR2ZB1, U8DR3ZB1\nU2DS1B1, U2DS2B1, U2DS3B1,\nU2DS1B2, U2DS2B2, U2DS3B2,\nU4DS1B1, U4DS2B1, U4DS3B1,\nU4DS1B2, U4DS2B2, U4DS3B2,\nU8DS1B1, U8DS2B1, U8DS3B1,\nU8DS1B2, U8DS2B2, U8DS3B2\nU2DS1BN1, U2DS2BN1, U2DS3BN1,\nU4DS1BN1, U4DS2BN1, U4DS3BN1,\nU8DS1BN1, U8DS2BN1, U8DS3BN1\nU2DS1ZB1, U2DS2ZB1, U2DS3ZB1,\nU4DS1ZB1, U4DS2ZB1, U4DS3ZB1,\nU8DS1ZB1, U8DS2ZB1, U8DS3ZB1\n\n35\t\n\nTABLE V\nBasic Cell\t\nType\t\n\nUB\t\n40 UBN\t\n\nConfiguration\nMux - Buf\t\n\nVarious Basic Cell Layout Names\n\nU - B\t\nU - BN\t\n\nU2B1, U4B1, U8B1, U2B2, U4B2, U8B2\nU2BN1, U4BN1, U8BN1\n\nWith reference to FIG. 113, a block diagram of another\nThe building blocks of a digital circuit could be abstracted\nembodiment of a basic cell 100-2 composed of memory and\nbeyond the ULGASIC cell library. In some embodiments, the\nbuffer kernel cells 108,112 is shown. This is but one example\nof a basic cell 100-2 of this general configuration. Otherbasic 45 ULG ASIC cell library components could be combined in\nhigher-level macro cells such as adders, multipliers, registers,\ncells of this general configuration that could be found in an\nbarrel shifters, ALUs, comparators, decoders, state machines,\nembodiment of a ULGASIC cell library are listed in Table III.\ncounters, etc. There could be thousands of possible macro\ncells. Further, designs can be abstracted to a level higher than\nTABLE III\n50 the macro cells by using cores that implement higher level\nfunctions such as microprocessors, graphics processors,\nBasic Cell\nConfiguration\nType\nMemory - Buffer\nvarious Basic Cell Layout Names\ninterface busses or ports, digital signal processors, etc. These\ncores could use macro cells and/or components from the ULG\nDB\nD-B\nD1B1, D1B2\nASIC cell library. Often the cores are written in a hardware\nDBN\nD - BN\nD1BN1\nDZB\nD - ZB\nD1ZB1\n55 description language (HDL) that can be easily synthesized\nDRB\nDR - B\nDR1B1, DR2B1, DR3B1, DR1B2,\ninto any ULG ASIC cell library for a particular process.\nDR2B2, DR3B2\nWith reference to FIGS. 2A and 213, various embodiments\nDRBN\nDR-BN\nDR1BN1, DR2BN1, DR3BN1\nDRZB\nDR-ZB\nDR1ZB1, DR2ZB1, DR3ZB1\nof a memory kernel cell 108 are shown in block diagram form.\nDSB\nDS - B\nDS1B1, DS2B1, DS3B1, DS1B2,\nThese embodiments divide the D F/F 208 out from the\nDS2B2, DS3B2\n60 memory cell and implement some functionality with a sepaDSBN\nDS - BN\nDS1BN1, DS2BN1, DS3BN1\nrate buffer cell 204. In various embodiments, the buffer cell\nDSZB\nDS - ZB\nDS1ZB1, DS2ZB1, DS3ZB1\n204 could be used to customize the D F/F 208 with synchronous reset of FIG. 2A or asynchronous reset of FIG. 2B. In\nReferring next to FIG. 1C, a block diagram of yet another\nother embodiments, a separate circuit could be used to make\nembodiment of a basic cell 100-3 is shown that is composed 65 a D F/F 208 behave as a setable D F/F, a 7-K F/F or a F/F with\nof ULG and memory kernel cells 104, 108. This is just one\nscan capability. In other embodiments, the separate circuit\nexample of the various similar basic cells 100-3 that might\ncould be implemented with a selection circuit.\n\nUS 7,624,368 B2\n7\n\n8\n\nThis buffer cell 204 in an ASIC cell library could be used\nfor other purposes also. For example, an 8 to 1 mux function\ncould be implemented with a buffer cell 204 and a 4 to 1 mux\n104 in some circumstances to reduce the chip area needed to\nimplement the functionality. Table VI shows the thirteeen\nkernel cells used in this embodiment. Table VII shows a truth\ntable for the enable buffer 204 where the enable input is R, the\ninput is D and the output is Q.\nTABLE VI\nKernel Cell\nComponent\n\nSymbol Description\n\nULGs\n\nU\n\nMemory Cells\n\nD\nDS\n\nBuffers\n\nB\nBN\nEBN\nCB\nZB\n\n8 to 1 (U8), 4 to 1 (U4) or 2 to 1 (U2)\nMultiplexors\nD F/F (Dl)\nSetable D F/F - Synchronous (DSI),\nClock Edge Synchronization (DS2) or\nAsynchronous (DS3)\nNon-inverting buffer (BI) or Hybrid\nInverting and Non-inverting buffer (132)\nInverting buffer (BNI)\nInverting buffer with an enable input (EBNI)\nHigh-drive buffer (CBI)\nTristatable buffer (ZBI)\n\nTABLE VII\nR\n\nD\t\n\nQ\n\n0\n0\n1\n1\n\n0\t\n1\t\n0\t\n1\t\n\n1\n1\n1\n0\n\nII. Layout of Cells\nEach fabrication process at a fab or foundry generally has\na conventional ASIC cell library that is customized for that\nprocess. Each of the hundreds of cells in the conventional\nASIC cell library is typically manually laid out to optimize its\nconfiguration. In this embodiment, however, a small number\nof customized kernel cells are used to automatically or manually compile the basic cells 100. For a target fabrication\nprocess, care is taken to optimize the layout of kernel cells\n104, 108, 112 for factors such as power consumption, chip\narea, number of masks, number of process steps, yield,\ncapacitance, inductance, resistance, glitches, I/O placement,\netc. In some cases, the fabrication processes are similar\nenough to other fabrications processes that only minor tweaking to kernel cells is done.\nWith reference to FIG. 3 a block diagram of an embodiment of a ULG layout 300 is shown. A cloud graphic is used\nto represent the layout of the circuit to implement the 2 to 1\nULG 104. Input ports 316, 320 and I/O 324 are detailed\nwithin the circuit cloud, more specifically, ports for the inputs\n(Io and I i ) 316 and the select (Yo) 320 and a trace is shown for\nthe Q output 324. For the ULG kernel cell, the input and select\nsignals are ports 316, 320 within the ULG layout 300. The\nULG circuit 304 is attached by traces to latitudinal power\ntraces 308, 312.\nAbutment is used to link certain signals by coupling adjacent kernel cells. Adjacent placement of the cells may j oin the\nabutted I/O or a small conductive trace may join the abutted\nI/0. The kernel cells have a uniform height and differing\ndepths such that the power traces 308, 312 for each kernel cell\nalign with the next kernel cell. Also, certain I/O signals use a\nuniform latitude. For example the Q output 324 of the ULG\n\nlayout 304 would align latitudinally with an input for an\nadjacent memory or buffer kernel cell.\nReferring next to FIG. 4, a block diagram of an embodiment of a memory kernel cell layout 400 is shown. This\n5 memory circuit 404 implements a D F/F with a D input 412,\na clock input 408 and a Q output 416. Coupled to the memory\ncircuit 404 are a VDD and Vss power busses 308, 312. The\nheight of the memory kernel cell layout 400 is the same as the\nULG cell layout 300 such that the power busses for both\nI kernel cells align latitudinally.\nWith reference to FIG. 5, a block diagram of an embodiment of a buffer kernel cell layout 500 is shown. As with the\nother kernel cell circuits 304, 404, a non-inverting buffer\nkernel cell circuit 504 is coupled to power busses 308, 312\n15 with a height uniform to the other kernel circuits 304, 404.\nThe buffer circuit includes a D input 508 and a Q output 512,\nwhere the D input 508 is latitudinally aligned with the outputs\nfrom either a ULG circuit 304 or a memory circuit 404. In this\nembodiment, the Q output 512 is offset from the latitude of\n20 the D input 508.\nReferring next to FIG. 6, a block diagram of an embodiment of a basic cell 600 abutted together from three kernel\ncells 300, 400, 500 is shown. A U2 ULG, DI F/F and B1\nnon-inverting buffer kernel cells 300, 400, 500 are connected\n25 in serial to form the basic cell 600. The power busses 308, 312\nfor each kernel cell 300, 400, 500 align to form a larger whole.\nThe Q output 324 from the U2 ULG circuit 304 aligns with\nthe D input 412 to the DI memory circuit 404, and the Q\noutput 416 from the D I memory circuit 404 aligns with the D\n30 input 508 to the B1 buffer circuit 504. Other embodiments\ncould have additional power busses, for example, a substrate\nbus connection.\nWith reference to FIG. 7, a block diagram of an embodiment of two basic cells 600, 704 laid out together in a row 700\n35 is shown. During layout of a chip, all the ULG ASIC cells are\narranged. The basic cells 600, 704 are aligned in horizontal\nrows. In some cases (not depicted), there is routing of one or\nmore signals between the basic cells 600, 704. In the depicted\nembodiment, an output from a first basic cell 704 is coupled\n40 with a trace 712 to an input of a second basic cell 600. The\nclock inputs for both basic cells 600, 704 are latitudinally\naligned such that a clock bus can pass strait across a row 700\nof basic cells.\nIn some embodiments, additional size reductions are real45 ized in the ULGs by having them comprise one or more\ndepletion-mode transistors. Schematic diagrams are provided\nin FIGS. 8A and 8B that compare enhancement-mode and\ndepletion-mode transistors. FIG. 8A shows the structure of an\nn-type enhancement-mode transistor 802 that comprises a\n50 source 804, a drain 806, and a gate 810. Connections are made\nwith the source 804 and drain 806 respectively through pads\n812 and 814. The gate 810 usually comprises a metal formed\nover an oxide such as S\'0 2 . For such an n-type transistor 802,\nboth the source 804 and drain 806 comprise n-doped regions\n55 in a p-doped substrate. The transistor operates so that when at\nleast a threshold voltage is applied to the gate 810, current\nflows between the source 804 and drain 806 through an intermediate channel region. In circuits, the enhancement-mode\ntransistor 802 is denoted with symbol 820.\n60 The depletion-mode transistor 842 illustrated in FIG. 8B\nalso comprises a source 844, a drain 846, and a gate 850\nformed over an oxide 848, with connections to the source 844\nand drain 846 provided respectively by pads 852 and 854. For\nthe depletion-mode transistor, however, the channel region\n65 856 between the source 844 and drain 846 is also n-doped,\nallowing the flow of current even without a gate voltage. The\ncurrent can be stopped by applying at least a negative cutoff\n\n9\n\n\t\n\nUS 7,624,368 B2\n10\n\nvoltage to the gate 850. In circuits, the depletion-mode transistor 842 is denoted with symbol 860.\nTABLE VIII\nFIG. 8C provides an example of a circuit for a ULG eleComponent\nMeaning\nment that exploits the different properties of enhancementand depletion-mode transistors to allow a smaller circuit area 5\t\nNon-inverting output\nQ\n<QN>\nOptional inverting output\nthan a ULG design that uses only enhancement-mode tran.xxxx\nCell name\nsistors. The illustration is provided for the U8 cell, which acts\n<E>\nOptional tri-state enable\nas an 8:1 multiplexor. The U8 cell 872 comprises eight inputs\nY[n \xe2\x80\x94 1:0]\nControl variables\n874 labeled Io $, three selection controls 876 labeled\nState variables\nTruth-table state\nIx\nY[0 ... 2], and one output 878 labeled Q. The multiplexing 10\t\nNext state\nfunctions of the cell are governed by the action of 48 transis<R/S>\nOptional reset or set input\ntors, of which half are provided as depletion-mode transisOptional clock input\n<CLK>\ntors. Each of the controls 876 and its inversion is provided to\n(Parameter = Option)\nSelects an option\nTerminator\na transistor along the path of one of the inputs 874, with the\ninversions being effected by inverters 880. To effect the mul- 15\ntiplexing functions, the depletion-mode transistors are disThere are a number of features of the syntax worthy of\ntributed according to the level of the control. For the least\ncomment. The first component of the syntax indicates the\nsignificant control, the depletion-mode transistors are posioutput of the cell, using either Q or QN respectively to denote\ntioned alternately; for the next significant control, they are\n20 the output Q or Q. This is followed by the name of the cell,\npositioned alternately in pairs; for the next significant control,\nwhich is generally constructed by concatenating the names of\nthey are positioned alternately in quads; etc. Thus, for the U8\nthe kernel cells comprised by the cell. The names of the kernel\ncell 872, depletion-mode transistors forY[0] are provided for\ncells have been set forth above in Table VIII. Thus, for\ninputs Io, Iz, I4, and I 6, and for the inverted control YN[0],\nexample, a basic cell that comprises a D F/F and a nondepletion-mode transistors are provided for inputs I 1 , I3 , I5,\n25 inverting buffer would be named.DB (D\xe2\x80\x94B); a basic cell that\nand h. ForY[I], depletion-mode transistors are provided for\ncomprises a resetable D F/F and an inverting buffer would be\ninputs lo, I 1, I4, and Is , and for the inverted control YN[1 ], they\nnamed .DRBN (DR\xe2\x80\x94BN); a basic cell that comprises a ULG\nare provided for inputs I z, I3, I6, and h. Similarly, depletionmultiplexor and a setable D F/F would be named .UDS\nmode transistors are provided forY[2] for inputs I o , I 1 , I2, and\n(U\xe2\x80\x94DS); and a basic cell that comprises a ULG multiplexor,\nI3, and for YN[2] for inputs I4, I5, I 6, and h.\na D F/F, and a tristatable buffer would be named .UDZB\n30\nFor certain embodiments of the ULGs that comprise deple(U\xe2\x80\x94D^ZB). It is noted that some of these examples of basic\ntion-mode transistors, this pattern may be used for a cell of\ncells include a ULG multiplexor kernel cell while others do\n+r\nany size. For a U2" ULG that has 2" +1 inputs and n+1\nnot, but all of these may be described with the syntax.\ncontrols, depletion-mode transistors may be provided for\nIn those instances where the syntax is used to describe a\neach control/input combination as follows:\n(i) For control Y[i=0 ... n], depletion-mode transistors are 35 basic cell comprising a ULG, the number of selection control\ninputs provided to the ULG is n. In a specific embodiment, the\nprovided for inputs Ik where k<2 1 mod 2z+1;\ncontrol inputs are ordered by significance, with the most\n(ii) For control YN[i-0 ... n], depletion-mode transistors\nsignificant control on the left and the least significant control\n+r\nare provided for inputs Ik, where k\'? 2\' mod 2`\non the right. While the syntax is equally robust for describing\nIn other embodiments, a different distribution of depletion- 40 basic cells for any value of n, for purposes of explanation the\nmode transistors may be used to implement the multiplexing\nexamples provided herein generally correspond to cases in\nfunctions of the ULG.\nwhich n^3. The states of the n control inputs Y dictate which\nof 2" inputs are passed to the output of the ULG. While in\nIII. Logical Structures\nsome instances, the control inputs may be identified individuIn addition to the structural characteristics described above, 45 ally, in other instances a range of control inputs is identified\nthere are a number logical properties and features that may be\nby using a colon in the argument of Y. Specifically, "Y[a:b]"\nused both to characterize individual cells and to characterize\nis intended to refer to the full expression `Y[a] Y[a-1]\nlibraries of such cells. An example of a formalism that may be\nY[a-2] ... Y[b+2] Y[b+l] Y[b]." The set of parameters\nused in one embodiment to describe the functionality of the\nI 2 n-1 1" -2 ... Io represents the logical function to be applied by\nbasic cells and from which at least some such logical charac- 50 the cell, and as discussed in greater detail below may comterizations may be extracted is now described.\nprise a truth table for implementing a combinational logic\nAs discussed above, the selection circuits embodied by\ndevice or may comprise an identification of the next state of a\nULGs used for forming basic cells may be implemented using\nsequential circuit. In some embodiments, these logical states\nI2n-l In-2 ... Io may be assigned to logical 1\'s or 0\'s (some2:1, 4:1, 8:1, or perhaps even larger, multiplexors. The inputs\nand control of each multiplexor are programmed to achieve 55 times referred to herein as "base Boolean values"), but may\nthe desired logical characteristics of the cell. The following\nmore generally include map-entered variables as well. For the\nsyntax has been developed to describe the programming of\nbasic cell, this corresponds to a connection to VDD for a logic\nsuch inputs and selection controls in a general fashion:\n1, to a connection to VSS for a logic 0, and to a connection to\na signal for a mapped entered variable. Parameters such as the\nQ <QN> .xxxx <E> Y[n-1:0] I2n_J2, z ... I6<R/S>\n60 type of reset, i.e. asynchronous, synchronous, or clock-edge,\n<CLK>(Parameter\xe2\x80\x94Option);\nare assigned and enclosed in parentheses at the end of the\n\nstatement.\nIn addition to describing the programming of the ULG kernel\ncells, the syntax may be used to describe any of the basic cells,\nThis formalism permits the expression of a number of\nincluding both those that comprise ULG kernel cells and\nmanipulations that are possible with embodiments of the\nthose that do not comprise ULG kernel cells. Optional param- 65 invention and which are discussed in detail in order to enable\neters in the syntax are denoted with angular brackets and the\none of skill in the art to perform such manipulations. The\ncomponents of the syntax are summarized in Table I.\nnature of such manipulations may be clarified with a simple\n\n11\n\nUS 7,624,368 B2\n\t\n\n12\n\nexample for the combinational logic function C=A+B. This\t\nlogic function may be expressed in a concise hardware\t\ndescription language ("CHDL") formalism as follows:\t\nC .UB A B VDD VDD VSS VDD;\n\nthe next significant control A is inverted in the original\nexpression instead, neighboring pairs of states in the truth\ntable are interchanged:\n5\n\nC .UB AN B VSS VDD VDD VDD;\n\nIt is evident that this expression implements the general truth\nThat this is a correct implementation of the logic function in\ntable for X+Y, but with control inputs defined so that X=A\nwhich C is equal to "A or not B" is evident by comparing the\nand Y=B. If both control inputs are inverted,\nentries in the expression to the syntax discussed above. The\nname of the cell .UB indicates that the function is impleC .UB AN BN VDD VSS VDD VDD;\n10\t\nmented with a cell that comprises a universal logic gate U and\na non-inverting buffer B. On either side of the name, the\nThe truth table in this expression implements the general\nparameters involved in the function are denoted, with the\nfunction X+Y, but with control inputs defined so that X=A\nleft-most component of the expression C indicating the outand Y=B.\nput, and the variables to the right of the name A and B 15 The CHDL syntax also permits control variables to be\nindicating the inputs. The following four entries before the\nentered as elements in the truth-table states. For example, the\nterminator define the following truth table 1 2\'- 1 1 2"-2 ... Io for\nsyntax makes it easy to recognize that the result C is high\nthe combinational function, with VDD being equivalent to a\nwhenever A is high and that C takes the value of BN when A\nlogic I and VSS being equivalent to a logic 0. The individual\nis low. This may be expressed in this CHDL syntax as\ntruth-table states I are noted:\n20\t\n\nTABLE IX\n\nC .UB A VDD BN;\n\nand corresponding to the truth table shown in Table X:\nA\n\nTABLE X\nI3=\nI2=\nI, =\nIo\n\nWhen logical operations are performed on expressions in\nthis formalism, they indicate directly how the resulting\nexpression may be implemented with basic blocks in accordance with an embodiment of the invention. For example, a\nsimple logical operation i s inversion of the output, which may\nbe implemented by using an inverting buffer:\n\n25\n\nCN .UB A B VSS VSS VDD VSS;\n\nIn other instances, alternative implementations of the same\nlogical function may be achieved by performing operations\non the control inputs. For example, the control inputs A and B\nmay be permuted. Permuting the control for the function acts\nto rearrange the truth table. In an embodiment that includes\nthis example, the truth-table states I3 and Io remain in the same\nposition because they represent states where both controls are\nhigh or both are low. States I2 and I1, which represent states\nwhere one control is high and the other is low, are interchanged:\nC .UB B A VDD VSS VDD VDD;\n\nA permutation of the truth table may also result from inversion of one or more of the control inputs. In this example,\ninverting the least significant control B interchanges neighboring states in the truth table:\nC .UB A BN VDD VDD VDD VSS;\n\nThis alternative expression for may be viewed as defining an\nimplementation for C that uses the general truth table for\nX+Y, but with control inputs defined so that X=A andY=B. If\n\nA\n\n1\t\nB\t\n\n0\n1\n\n30\n\nEqually, the syntax makes it easy to recognize that the result\nC is high whenever B is low and that C takes the value of A\nwhen B is low. This may be expressed in this CHDL syntax as\nC .UB B A VDD;\n35\n\nand corresponding to the truth table shown in Table XI:\n\nCN .UBNA B VDD VDD VSS VDD;\n\nAs can be seen, the same truth table as that defined in Table IX\nis used for implementing C, but the implementation is with a\nbasic cell comprising a universal logic gate U and an inverting\nbuffer BN. An alternative implementation of C uses the same\n.UB basic cell, but instead uses a different truth table by\ninverting all of the input states:\n\nC\t\nI,=\t\nI 0 =\t\n\nTABLE XI\nC\t\n\n40\t\nI,=\t\nI 0 =\t\n\nB\n\nA\t\n1\t\n\n0\n1\n\nNot only does the CHDL syntax presented here easily admit\ncontrol variables to be presented as map-entered variables,\nbut this same ability is manifested in the implementations\nwith the cells described above. In particular, either of the two\nabove examples may be as easily implemented using a com5o bination of a ULG and buffer (".UB") as is any truth table that\nuses the basic Boolean variables 0 and I exclusively. Implementation of all of these logical functions is simply a matter\nof assigning the truth-table states and control variables in\naccordance with the universal logic elements as described\n55 above.\nThe formalism thus makes clear that embodiments of the\ninvention permit the implementation of a diverse range of\nlogical functions. Specific examples of some of these properties are now discussed in greater detail. In discussing logi60 cal properties that may be exploited in certain embodiments\nof the invention, reference is sometimes made to the formalism explained above. Such reference is made primarily for\nreasons of convenience and is not in any way intended to limit\nthe scope of the invention. In particular, it will be evident to\n65 those of skill in the art that it is possible to implement each\nlegitimate syntactical expression in the formalism with the\ncells discussed above. Accordingly, the logical properties of\n\n45\n\nUS 7,624,368 B2\n13\nthe formalism correspond directly to logical functions that\nmay be implemented with the cell arrangements in different\nembodiments.\nOne property of the formalism, and therefore also of the\ncell arrangements, is that no high-level distinction is made\nbetween combinational and sequential circuits; both such\ncircuits are merely special cases of the more general types of\nlogical functions that may be implemented. A combinational\ncircuit is one in which the output(s) are predetermined functions of the input(s). As such, the logic implemented by a\ncombinational circuit can be represented by a truth table\nsetting forth a mapping between all possible Boolean states of\nthe input(s) to the Boolean states of the output(s). This may be\ncontrasted with a sequential circuit in which the logical application of the circuit relies on a history of past inputs. The\napplication of such logic may instead be represented with a\nnext-state equation that maps the past input(s) to the\noutput(s). Embodiments of the invention described herein are\nnot restricted either to combinational or sequential logic. For\nexample, only slight differences in cells are needed to implement the following syntactic CHDL expressions:\n\n14\n\noperations that admit functions of Boolean variables among\ntheir inputs and/or outputs, in addition to admitting base\nBoolean values among their inputs and/or outputs.\nBoth the formalism presented herein and the implementa5 tion with the cells described above permit a further generalization that increases the flexibility of digital design and its\noptimization. Such a generalization may be understood with\nreference to what are defined herein as higher-order Boolean\nfunctions. Conventional digital circuit design uses only what\n10 are referred to herein as zero-order Boolean functions, which\nadmit only base Boolean values among their input(s) and/or\noutput. In contrast, some embodiments of the invention use a\nfirst-order Boolean function, which corresponds to a Boolean\nfunctional and admits zero-order Boolean functions in addi15 tion to base Booleanvalues among its inputs and/or output(s).\nOther embodiments use a second-order Boolean function,\nwhich admits first-order Boolean functions, zero-order Boolean functions, and base Boolean values among its inputs\nand/or output(s). In still other embodiments of the invention,\n20 even greater orders of Boolean functions are used, such orders\nadmitting all lower orders of Boolean functions among their\ninputs and/or output(s) in addition to admitting the base BoolQ .UB A B VDD VDD C VSS;\nean values used in conventional design. All orders of Boolean\nfunctions other than zero-order Boolean functions are someQ .UD A B VDD VDD C VSS CLK;\n25 times referred to herein collectively as "higher-order" Boolean functions.\nThe first of these expressions represents a combinational\nThis generalization may be illustrated with an example\nlogic function and the second represents a sequential logic\nbased on the C=A+B example discussed earlier:\nfunction. In other embodiments, the formalism and correJ.UB G H VDD VSS F C;\nsponding cell implementations may include both combina- 30\t\ntional and sequential aspects so that a characterization of the\nF.UB D E VSS C VDD C;\nfunction is not properly limited to either category. This additional flexibility permits certain optimizations, some of which\nC .UB A B VDD VDD VSS VDD;\nare discussed below, that are not available when limited to\neither combinational or sequential logic.\n35 In this example, the third expression corresponds to the\nThis additional flexibility also arises in part from the more\nzero-order function C=A+B, which admits only base Boolean\ngeneral character of cells made in accordance with embodivales 0 and 1 among its arguments. Such a function uses a\nments of the invention to implement selection logic, in addicombinational mapping and may be implemented using\ntion to combinational and selection logic. As used herein, a\ngates, such as with an OR gate and a NOT gate. The second\n"selection operation" refers to a function in which one or 40 expression corresponds to a first-order function, or funcmore of a plurality of inputs are passed as outputs. In certain\ntional, that admits the zero-order function C as one of its\nembodiments, the selection operation passes one of a pluralarguments, in addition to admitting the base Boolean values.\nity of inputs as an output. Such a selection operation differs\nThe first expression corresponds to a second-order function\nfrom a sequential-logic operation because it does not depend\nthat admits the first-order function F, the zero-order function\non a past history of the inputs. It also differs from combina- 45 C, andthe base Boolean values among its arguments. The first\ntional-logic operations, which do not require that the output\nand second expressions thus each correspond to expressions\ncorrespond to one of the inputs. This is easily seen for an\nfor higher-order functions. All three of the expressions may\nNAND gate, which produces an output 1 in response to two 0\nbe implemented in embodiments of the invention using the\ninputs; the output does not correspond to either of the inputs.\ncells as described above.\nIt is also true, however, for an OR gate. Although in every 50 One effect of the ability to use higher-order functions may\ninstance the output of an OR gate is equal to one of the inputs,\nbe seen with a comparison to the exclusive use of Boolean\nthe gate does not act to pass one of the inputs as an output;\noperations. Such Boolean operators operate only on the base\ninstead, a combinational mapping is performed from the\nBoolean values 0 or 1, or on variables that represent the base\ninputs to the outputs that happens to include some commonBoolean values 0 or 1, i.e. that have already had a value of 0\nality. In addition, selection operations are not limited to 55 or 1 bound to it. Boolean minimization or optimization techinstances in which the number of inputs is two and/or the\nniques are based on decomposing the expressions being mininumber of outputs is one. More generally, any plurality p,\xe2\x80\x9e\nmized to consider the meaningful possible combinations of\n(?2) of inputs may be accepted, of which a number pout (? 1)\nassignment of 0 or 1 to each Boolean variable (with the\nare passed.\npossible existence of "don\'t care" states for some variables\nEmbodiments of the invention also do not limit the inputs 60 under some circumstances reducing the meaningful possible\nand/or outputs to the base Boolean values 0 and 1. As noted in\ncombinations downward from the set of all possible combiconnection with Tables X and XI and the associated syntactic\nnations). Higher-order functions allow one to optimize, or\nexpressions, cells used in embodiments of the invention may\nminimize a circuit, without the requirement to decompose the\nimplement operations in which truth-table entries are instead\nfunction result to each possible value and considering each\nfunctions of such base Boolean values. In this respect, the 65 separately. In other words, when a circuit with the algorithms\ninvention includes embodiments that provide for the impledescribed below, one need not know what the value of the\nmentation of Boolean functionals, which are defined herein as\nfunctions or variables are; optimization is performed regard-\n\nUS 7,624,368 B2\n15\n\n16\n\nless. In conventional methods limited to the use of Boolean\nvariable to be inverted. Thus, if a controlY[k] is to be inverted,\noperators, each variable and function is decomposed into all\ngroups of size 2 k are inverted. This may be illustrated by\npossible values for the functions and variables, i.e. to define a\nconsidering a cell comprising a ULG and a buffer:\ncomplete truth table, before any optimization can be perQ .UB Y[2] Y[1] YN[o] A B C D E F G H;\nformed; in such conventional methods one must exhaustively 5\nassign a value to all variables and functions.\nIn this instance, the least significant control Y[0], defined by\nk-0, is to be inverted so that adjacent states are interchanged:\nIV. Optimization\nQ .UB Y[2] Y[1] Y[0] BAD C FEH G;\nThe expanded availability of logical operations provided\nby embodiments that use cells based on the ULGs and as 10\nIn a similar fashion, when k=I for the control to be inverted,\nrepresented by the formalism described permits increased\nadjacent pairs of states are to be interchanged:\noptimization. In many instances, these logical operations may\nbe used to determine optimized methods of implementing a\nQ .UB Y[2] YN[1] Y[0] A B C D E F G H;\ngiven function. A number of such logical operations are illustrated, and it will be understood by those of skill in the art that 15\t\nQ .UB Y[2] Y[1] Y[0] C D A B G H E F;\nstill other logical operations may derive from the formalism\nin other embodiments of the invention. Moreover, while the\nWhen k=2 for the control to be inverted, adjacent quads of\nformalism is used as a matter of convenience to illustrate the\nstates are to be interchanged:\nnature of the optimizations, it will be understood that all the\nQ .UB YN[2] Y[1] Y[0] A B C D E F G H;\nexpressions that follow may be implemented using the pre- 20\nviously described cells in the manner explained. This is true\nQ .UB Y[2] Y[1] Y[0] E F G H A B C D;\neven in instances where the expressions correspond to funcThe flow diagram in FIG. 9A provides a loop back to block\ntions not accessible by standard Boolean logic. In some cases,\n904 after a particular control has been inverted by interchanguse of the formalism shows how multiple manipulations may\nbe performed to achieve an optimization, it being necessary 25 ing states. This contemplates the possibility of performing\nInversions on multiple controls, which are therefore effected\nonly to implement the final result with the previously\nby performing the relevant interchanges in succession. The\ndescribed cells to achieve the optimized function.\ninterchanges are commutative so that the resulting syntactic\nA number of the operations that may be performed with\nexpression is independent of the order in which they are\nlogical functions as expressed using the formalism described\nherein are summarized in FIGS. 9A-91), which provide flow 30 performed:\ndiagrams to explain how some such operations may be perQ .UB YN[2] YN[1] YN[o] A B C D E F G H;\nformed. In different embodiments, various combinations of\nQ .UB Y[2] Y[1] Y[0] H G F E D C B A;\none or more such operations may be performed and the invention is not limited to any particular order or number of such\noperations. Accordingly, each of FIGS. 9A-91) indicates that 35 The resulting expression, which may be implemented using\nthe cells as described above, follows from any order of perit may be entered as part of a greater flow of operations from\nforming the control inversions and respective truth-table\na previous transformation. It is not necessary that a previous\ninterchanges.\ntransformation necessarily have been performed in any case,\nThe flow diagram of FIG. 9A notes at block 910 that in\nalthough the indication is included to note that some embodiments of the invention contemplate that previous transfonna- 40 some instances the removal of inversions may be accomplished by entering the control as a map-entered variable\ntions may have been performed. Also, while the flow diainstead of performing interchanges. In such cases, the ability\ngrams in each of FIGS. 9A-91) shows an exemplary order in\nof embodiments of the invention to accommodate non-Boolwhich operations may be performed, such an ordering is not\nean selection operations is exploited to achieve greater levels\nnecessary and alternative embodiments permit alternative\norderings. Moreover, in some embodiments, it is possible that 45 of optimization. Within the syntax used to illustrate the principles described herein, the identification of an inverted consome operations may be performed simultaneously, such as\ntrol YN with a sequence VSS VDD permits removal of the\nwhen different parts of a large structure are optimized at the\ninversion by entering the control into the truth table:\nsame time.\nFIG. 9A summarizes a number of operations that may\nQ .UB Y[1] YN[o] vss VDD A A;\ncollectively be considered to correspond to the removal of 50\ninversions. Accordingly, the method shown in FIG. 9A begins\nQ .UB Y[1] Y[0] A;\nat block 902 with a syntactic expression for a cell, perhaps,\nbut not necessarily, after certain previous logical transfonnaAs indicated, entry of the control in the truth table will usually\ntions have been effected. At block 904, an identification is\nalso require a repetition of a state A at the appropriate level.\nmade whether there are any inversions in the syntactic expres- 55 In some cases, it may be desirable to permute the truth table\nsion for removal. If not, the method proceeds to a potentially\nto achieve such VSS VDD sequences by permuting the consubsequent transformation at block 906. In the event that it is\ntrol:\ndesirable to remove an inversion, the method may proceed\nQ .UB YN[1] Y[o] vss A VDD A;\nalong one of at least three branches depending on the type of\ninversion. Branch 903 corresponds to inversions inthe control 60\t\nQ.UBY[o]YN[1] VSS VDD AA;\nor state variables Y; branch 905 corresponds to inversions in\nthe truth table; and branch 907 corresponds to inversions in\nQ .UB Y[0] Y[1] A;\nthe buffer.\nIn one embodiment, inversions of the control or state variIn the above progression, optimization of the cell is achieved\nable may proceed at block 908 by interchanging adjacent 65 by noting that the sequence VSS VDD may be achieved\ngroups in the truth table. The size of the groups to be interthrough a permutation of the truth table and by noting the\nchanged depends on the significance of the control or state\nrepetition of state A. Permuting the controls results in a truth\n\nUS 7,624,368 B2\n17\n\n18\n\nQ UB Y[1] Y[o] VDD vss A A;\ntable identical to that of the preceding example, and therefore\nthe least significant control may become a map-entered variQ .UB Y[1] Y[0] A;\nable.\nThe same principles apply with more significant levels of\ncontrol, for which optimization may remove an inversion by 5 Inthis example, arepetition ofAwiththe sequenceVDDVSS\n(instead of the sequence VSS VDD) is sufficient to enter the\nentering the more significant control as a map-entered varileast-significant control variable into the truth table. This is\nable under some circumstances. In one embodiment, for\ndone with the control variable directly, instead of with its\nexample, this is achieved when the less significant controls\ninversion as was done in block 910.\nare redundant:\n10 Thus, the general procedure illustrated in FIG. 9B begins at\nQ .UB Y[2] YN[1] Y[o] AAA A vss vss VDD\nblock 916 with a syntactic expression for a cell, with the\nVDD;\nfigure noting that it is possible (but not required) in some\nembodiments for certain other transformations to have been\nQ .UB Y[2] AY[1];\nperformed previously with the syntactic expression. At block\nThe optimization has been achieved by recognizing the exist- 15 918, existing redundancies in the control are removed. Such\nredundancies are manifested by a repetition in the truth table\nence of an analogous pattern, namely the repetition of A at a\nat the level of the redundant control, i.e. in groups of size 2k\nhigher significance level and the existence of the sequence\nfor control Y[k]. A trivial case occurs for the lowest level of\nVSS VSS VDD VDD. It will now be evident to those of skill\ncontrol:\nin the art that permutation of control may be used to restructure the truth table to identify such sequences and thereby 20\t\nQ.UBY[0]AA;\noptimize the function by removing the inversion. In addition,\nit will also be evident that these principles may be applied to\nQ.BA;\nany significance level for the control. For example, an eightfold repetition ofA coupled with the sequence VSS VSS VSS\nThis example is trivial because the cell does nothing other\nVSS VDD VDD VDD VDD will permit removal of a YN[2] 25 than produce the result A for every input; control is unnecesinversion, perhaps after permuting the controls to achieve\nsary and may be removed entirely. The same principle\nsuch a sequence in the truth table.\napplies, however, for higher levels of control. For example,\nAt block 912 of FIG. 9A, it is noted that inversion of the\nwhen k=1, the repetition of pairs of states may permit the\ntruth-table states may be achieved by inverting the buffer in\nremoval ofY[1]:\nthe cell:\n30\t\nQ .UB Y[1] Y[o] A B A B;\n\nQ .UBNY[0] AN BN;\nQ .UB Y[0] A B;\nQ .UB Y[0] A B;\n\nThis result simply uses the fact that the higher control level\nBy inverting the buffer, all entries in the truth table are 35 has no effect, with the output of the cell depending solely on\ninverted. Block 914 notes the converse function in which the\nthe least significant control. Similarly, when k=2, the repetibuffer is inverted by inverting all elements of the truth table.\ntion of quads of states may permit the removal of Y[2]:\nWhile the functional effect of blocks 912 and 914 is identical,\nQ.UBY[2]Y[1]Y[o]ABCDABCD;\nthey are conceptually converse because in one instance the\ngoal of inverting the truth table is achieved by inverting the 40\nQ .UB Y[1] Y[0] A B C D;\nbuffer and in the other instance the goal of inverting the buffer\nis achieved by inverting the truth table.\nThis result expresses the fact that the output of the cell is\nEvery operation in the FIG. 9A cycles back to block 904.\ndependent only on the two lowest control levels and that the\nAs noted with respect to block 908, this aspect emphasizes\n45 highest control has no effect. These principles may be\nthat multiple of these transformations may be used in effectextended to still larger repeated blocks and the consequent\ning optimizations and that they may be performed in different\nremoval of still more significant control levels.\norders. For example, for some cells, optimization might be\nAt block 920, permutations may be performed in the conachieved by: (1) first, inverting a buffer to invert a truth table;\ntrol to rearrange the truth table to identify sequences that\n(2) second, permuting the control so that the resulting truth\ntable includes sequences that permit the entry of control vari- 50 permit the entry of the control variables. For the entry of a\nlowest level control, sequences of VDD VSS, coupled with a\nables; and (3) finally, performing interchanges within the\npair of repeated variables A A, is sought. For the entry of the\ntruth table to remove other control inversions.\nnext level control, sequences of VDD VDD VSS VSS,\nThe entry of a control variable into a truth table as a mapcoupled with four repeated variables A A A A, is sought. For\nentered variable, such as discussed with respect to block 910\nthe next level control, sequences of VDD VDD VDD VDD\nin FIG. 9A not only has the effect of removing an inversion, 55\nVSS VSS VSS VSS, coupled with eight repeated variables A\nbut also reduces the number of nodes in the cell. There are\nA A A A A A A, is sought. Similar sequences for still higher\nother truth-table sequences that permit optimization by\ncontrol levels follow the same pattern. At block 922, the\naccepting the entry of control variables and thereby reducing\ncontrol variable(s) are entered into the truth table to account\nthe number of nodes. The flow diagram in FIG. 9B provides a\ngeneral explanation of how such sequences may be achieved. 60 for these patterns.\nThus, one example of applying blocks 920 and 922 is as\nEssentially, the same procedures are followed as discussed\nfollows:\nwith respect to block 910 for inversions: a truth-table having\nelements of certain sequences is identified and permuted to\nQ .UB Y[2] Y[1] Y[o] VDD VDD vss vss A B A B;\nrealize those sequences, which are then optimizedby entering\nthe corresponding control variable. A simple example corre- 65\t\nQ .UB Y[2] Y[0] Y[1] VDD vss VDD vss A A B B;\nsponds to the example discussed with respect to block 910,\nQ .UB Y[2] Y[0] Y[1] Y[1] A B;\nbut without the inversion:\n\nUS 7,624,368 B2\n19\n\n20\n\nIn the initial syntactic expression, the sequence VDD VDD\nVSS VSS appears, but it is not possible to remove the k=1\ncontrol because there is no corresponding sequence of four\nrepeated variables. The existence of duplicates of both and\nB, however, suggests that the controls may be permuted to\nachieve sequences of VDD VSS coupled with pairs of\nrepeated variables. This is achieved in the second line by\npermuting Y[1] and Y[0]. Accordingly, it is possible in the\nthird line to enter two occurrences of the Y[1], which is now\nthe lowest level of control, into the truth table. The corresponding cell is therefore optimized by reducing the number\nof nodes and entering the original Y[1] control variable into\nthe truth table.\nBlock 924 notes that the process of identifying and removing redundancies and permuting control variables to permit\ntheir entry into the truth table may be repeated to achieve\nfurther optimizations. The method is thus looped until these\nprocedures have optimized the syntactic expression in this\nway as much as desired. At block 926, the method thus proceeds to another type of transformation, if desired, to effect\nfurther optimizations.\nIn addition to reducing nodes for a single cell, it is possible\nin embodiments of the invention to provide optimizations by\ncombining nodes from multiple cells. The flow diagram\nshown in FIG. 9C provides a method corresponding to one\nembodiment for combining nodes. The method begins at\nblock 928 with syntactic expressions for multiple cells. As for\nthe other optimization procedures, FIG. 9C notes explicitly\nthat prior transformations may have taken place on these\nsyntactic expressions, although this is not required. In considering whether nodes can be combined, a check is made at\nblock 930 whether any of the syntactic expressions outputs a\ncontrol variable present in another of the expressions. If so,\nthe control variables are converted into map-entered variables\nat block 932. Examples of combining nodes in which such\nconversions are used are provided below, but the principles of\ncombining nodes are initially illustrated for cases where there\nis no such conversion.\nOne method for combining nodes is thus summarized by\nblocks 934 and 936 in which the control for the multiple\nsyntactic expressions is combined and then states in the\nmerged expression are defined. For example, consider the\nfollowing two syntactic CHDL expressions in which the output of the second expression, A, is one of the inputs to the first\nexpression:\n\nmerged expression in accordance with the expressions at\nblock 936:\n\nQ .UB YQ A B;\nA.UBYACD;\n\nThe expressions are merged, and the nodes thereby combined, in the following way. First, the control is combined at\nblock 934 by adding the control for the second expression to\nthe first expression YQ then functions as a k \xe2\x80\x94 I level control\nandYA functions as a k-0 level control:\nQ.UBYQYAAABB;\n\nAs can be seen, increasing the level of the YQ control by a\nsingle level to k=1 acts to duplicate each of the truth-table\nentries. The order in which the controls were combined was\ndetermined by the relationship between the inputs and outputs of the expressions. Specifically, since the expression for\nQ has the output of the expression for A as an input, YQ was\nmade the higher-level control andYA the lower-level control.\nAfter combining the controls, the states are defined in the\n\nQ.UBYQYAC D B B;\n\nIn this instance, the sequence A A is substituted with C D in\naccordance with the syntactic expression for A. The final\nexpression achieves the optimization by permitting implementation of the resulting expression with a single cell as\ndescribed above.\n10\nWhile this example showed how two expressions could be\nmerged, it may be applied more generally to any number of\nexpressions. For example, the following three expressions\nmay be merged in a similar fashion with a sequential process:\n5\n\n15\t\n\nQ .UB YQ A B;\nA.UBYACD;\nB .UB YB E F;\n\n20\n\nThe second and third expressions both have outputs that correspond to inputs of the first expression. Accordingly, in\ncombining control pursuant to block 934, the control of the\nfirst expression is used as the highest level control. First, the\n25 first and second expressions are merged by combining their\ncontrol and defining the states in the merged expression in the\nsame way as for the two-expression example:\nQ.UBYQYAAABB;\n30\t\n\nQ UBYQYACDBB;\n\nSubsequently, the third expression is merged into this combination. First, the additional control causes YQ to become a\nk=2 level control andYA to become a k=1 level control, with\n35\nYB remaining as a k-0 level control:\nQ.UBYQYAYB C C D D B B B B;\n\n40\n\n45\n\nAs seen in this expression, the additional level of control\ncauses a duplication of each of the truth-table elements. The\nstates in this expression are now defined according to block\n936 in terms of the original third expression by substituting\npairs of B\'s with the sequence E F:\nQ.UBYQYAYB C C D D E F E F;\n\nThis result thus corresponds to an expression that combines\nthe original three expressions and may be implemented as a\ncell in the manner described above.\nBoth of these examples have begun with expressions that\nSo\ncorrespond to ULG cells that may be implemented with multiplexors of the same size. There is, however, no limitation on\nembodiments of the invention that requires that they be the\nsame size. It is possible to perform optimizations for combining nodes that correspond to merging a smaller multiplexor\n55\ninto a larger multiplexor or to merging a larger multiplexor\ninto a smaller multiplexor. This may be seen in the following\nexamples in which each of the initial expressions corresponds\nto a different-sized multiplexor when such an implementation\n60 is used. For example, in the set\nQ .UB YQ[1] YQ[o] A B C D;\nA .UB YA E F;\n65\n\nthe second expression has an output that is used as an input in\nthe first expression, and corresponds to a smaller-sized multiplexor than does the first expression. The nodes are com-\n\n\t\n\nUS 7,624,368 B2\n\n21\n\n22\n\nbined in the same fashion already described. First, control is\t\ncombined in accordance with block 934: \t\n\nverting control variables to map-entered variables pursuant to\nblock 932, the expression may be written\nQ .UB YQ[o] AYQ[1] VSS YQ[I] YQ[1];\n\nQ .UB YQ[I] YQ[o] YA A A B B CC D D;\n\nSubsequently, states are defined in the merged expression, in\nthis instance by substituting pairs of A\'s with E F:\n\n5\n\nEssentially, this conversion recognizes the equivalence of\ntruth tables XIIA and XIIB:\n\nQ .UB YQ[1] YQ[o] YA E F B B CC D D;\n\nThis final expression may thus be implemented as a cell and\nachieves optimizations resulting from merging the smaller\nmultiplexor into the larger multiplexor.\nIt is similarly possible to combine nodes in a fashion that\ncorresponds to merging a larger multiplexor into a smaller\nmultiplexor in embodiments that use multiplexors:\n\n10\t\n\nTABLE XIIA\t\n\nTABLE XIIB\n\nQ YQ[0] YQ[ 1 ]\t\n0\t\n1\t\n\n15\t\n\n0\t\n\n0\t\n\n0\t\n\n1\t\n\n0\t\nA\t\n\n1\t\n1\t\n\n0\t\n1\t\n\nH\n\nQ\t\nY 11\t\nYQ111\n\nYQ[0] A\n0\t\n0\n\nY 1\t\n\n0\n\n0\t\nYQ[1]\t\n\n1\t\n1\t\n\n1\n\n0\n1\n\nQ .UB YQ A B;\n\nCombining control with the second expression at block 934\nresults in\n\nA .UB YA[1] YA[o] C D E F;\n20\n\nIn this example the output of the expression corresponding to\nthe larger multiplexor is an input to the expression corresponding to the smaller multiplexor. The nodes are combined\nin the same way, by first combining the control of the two\nexpressions in accordance with block 934. Since two levels of\ncontrol from the second expression are to be combined with\nthe first expression, YQ becomes a k=2 level control:\n\n25\n\n30\n\nYQ[1].UB YA B C;\n35\n\nQ .UB YQ[1] YQ[o] A VDD VSS VSS;\n\nQ .UB YQ[o] YQ[1] A VSS VDD VSS;\n\nThen, it is recognized that with YQ[1] as the least significant\ncontrol, the VDD VSS sequence in the h -I, positions simply\ncorresponds to YQ[I]. It is also recognized that in the I3\nposition,YQ[I] and Aare equivalent. Accordingly, after con-\n\nIn this example, the expression forYQ[I] is the same as in the\nprevious example, but the expression for Q is different. Permuting the control variables so thatYQ[I]is least significant,\nQ .UB YQ[0] YQ[I] VDD A VDD VSS;\n\n40\n\nRecognizing that the VDD VS S sequence in the h- Io positions corresponds to YQ[I] and that YQ[I] and A in the Iz\nposition are equivalent results in\nQ .UB YQ[o] A VDD YQ[I] YQ[I] YQ[I];\n\n45\n\n50\t\n\nYQ[1] .UB YA B C;\n\nThe circumstance in this example differs from the previous\nexamples because the output of the second expression,\nYQ[1], is a control of the first expression and not an input in\nthe truth table entries. The ability of embodiments to accept\nvariables in the truth-table elements is thus exploited to reexpress the first expression withYQ[I ] in the truth table. First,\nthe control variables are permuted so that YQ[I] is the least\nsignificant control:\n\nThe same procedure may also be used for the following two\nsyntactic expressions:\nQ .UB YQ[1] YQ[o] VDD VDD A VSS;\n\nQ .UB YQ YA[1] YA[0] CD EFB BB B;\n\nEach of these examples illustrates how to combine nodes in\ndifferent circumstances where the output of one of the expressions is one of the inputs to another of the expressions. In\nsome cases, however, the output of one of the expressions\nmay be one of the controls of another expression, a condition\nchecked for a block 930. In such instances, the control variable is converted into a map-entered variable at block 932\nbefore combining control and defining states. This may be\nillustrated with the following two examples, the first of which\ncorresponds to anAND sub-function and the second of which\ncorresponds to an OR sub-function.\nThus, consider merging nodes for the following two syntactic expressions:\n\nFinally, defining states at block 936 so that pairs ofYQ[I] are\nsubstituted with B C as required by the original second\nexpression results in the merged expression\nQ.UBYQ[o]AYABCVSSVSSBCBC;\n\nQ .UB YQ YA[1] YA[o] A A A A B B B B;\n\nSubsequently, the states are defined in accordance with block\n936 by substituting quads of A\'s with C D E F as dictated by\nthe second original expression:\n\nQ .UBYQ[0] AYAYQ[1]YQ[1] VSS vsYQ[1]\nYQ[1 ] YQ[1] YQ[1];\n\nThis conversion effectively recognizes the equivalence of\ntruth tables XIIIA and XIIIB:\n\nTABLE XIIIA\t\nQ YQ[0] YQ[1]\t\n0\t\n0\t\n0\t\n1\t\n\n55\t\n\n0\t\n\n1\t\n\nA\t\n1\t\n\n1\t\n1\t\n\n0\t\n1\t\n\nTABLE XIIIB\nYQ[0] A\n0\t\n0\nY 11\t\n0\t\n1\nYQ111\nY 11\t\n1\t\n0\nYQ111\nYQ[1]\t\n1\t\n1\nQ\t\n1\t\n\nH\n\nCombining control with the second expression according to\nblock 934 results in\n60\nQ .UBYQ[0] AYA VDD VDD YQ[1] YQ[1] YQ[1]\nYQ[1 ] YQ[1] YQ[1];\n\nFinally, defining states at block 938 so that pairs ofYQ[I] are\nsubstituted with B C as required by the original second\n65\nexpression results in the merged expression\nQ.UDYQ[o]AYA VDD VDD BCBCBC;\n\nUS 7,624,368 B2\n23\n\n24\n\nIt is noted that in certain instances, the method outlined in\nFIG. 9C may be combined with moving flip flops forward to\nfacilitate reductions. For example, consider application of the\nmethod to the following set of expressions\n\nthe highest level control may be entered into the map as a reset\ninput to the F/F:\n\nQ.UBY[2:I]ABCD;\nA .UD Y[0] E F CLK;\nB .UD Y[0] G H CLK;\nC .UD Y[0] I J CLK;\nD .UD Y[0] K L CLK;\n\nQ .UDRY[I:o] A B C D Y[2] CLK (RST=`C\')\n\nThe name of the cell explicitly notes that a resetable D F/F\n(DR) is used and the reset has been noted. This function may\nthen be implemented using the cells described above.\nFIG. 9D notes at block 942 that in some instances it may be\nuseful to perform permutations of the control variables to put\n10\nthe truth table into a form that allows using the reset input for\noptimization. If half the truth table states are low, but do not\nappear as a group, they may be aligned with the permutations.\nFor example, the function\n5\n\nQ.UDY[1]Y[o] VSS AVSSBCLK;\nAs previously mentioned, the notationY[2:1] is equivalent to 15\t\nthe expression Y[2] Y[I]. This set of expressions could be\nhas half of its truth table states low, but they are not aligned.\nimplemented using five cells, one that comprises a ULG and\nInterchanging the control variables aligns them\na buffer and four that comprise a ULG and a F/F. The result of\nmoving the flip flops forward is\nQ .UDY[o] Y[1] VSS VSS A B CLK;\n20\t\nQ .UD Y[2:1] A B C D CLK;\n\nso that the most significant control variable may be entered\ninto the map at block 946 as a reset input to the F/F:\n\nA .UB Y[0] E F;\n\nQ .UDRY[1] A BY[O] CLK (RST=`C\');\nB .UB Y[0] G H;\n\n25\n\nNote that in this example, the lack of alignment among the\nlow states has resulted in Y[0] being entered into the map as\npart of the optimization rather than Y[I].\nD .UB Y[0] K L;\nSimilar optimizations may be achieved if half the truth\n30 table states are high, as checked at block 948. If so, permuAccordingly, applying the method of FIG. 9C to combine the\ntations of the control variables may beperformed atblock 950\nnodes results in\nto align the high states and the control variable entered into\nthe map as a set input to a F/F at block 952. For example,\nQ:UDY[2:0] E F G H I J K L CLK;\nconsider the function\nThis expression may be implemented with a cell comprising 35\nQ .uD Y[1:o] VDD A VDD B CLK;\na ULG and a D F/F in certain embodiments of the invention.\t\nThus, the method outlined in FIG. 9C permits nodes to be\nHalf of the states in the truth table are high, i.e. VDD, so that\nreduced from multiple syntactic expressions. This includes a\noptimization with a set input may be achieved. Permuting the\nvariety of different circumstances, including cases where\ncontrol variables to align the high states in accordance with\n40\nthere are arbitrarily many syntactic expressions, where some\nblock 950 results in\nof the expressions correspond to implementations of different\nQ .UD Y[0] Y[1] VDD VEDA B CLK;\nsizes, and cases where some of the expressions have outputs\nthat correspond to either inputs or controls of other expresEntering the most significant control as a map-entered varisions. After nodes have been merged, the method may pro45 able as a set input to the F/F results in\nceed to another transformation at block 938, although this is\nnot a requirement.\nQ .UDS Y[1] A BY[O] CLK (SET\xe2\x80\x94\'C\');\nAdditional optimization functions may be realized by\nThis function may then be implemented using the cells\nusing the set and reset facilities that are provided in the\ndescribed above in an embodiment.\nformalism and which may be implemented by using those\n50\nfacilities in cells according to embodiments of the invention.\nStill other combinations of expansion, inversion, and/or\nThe use of set and reset facilities are summarized in FIG. 9D\npermutation may be used to achieve the conditions for using\nand arise primarily when half the truth table states are either\nset or reset for optimization. An example that illustrates sevhigh or low. Thus, a method for optimizing begins with a\neral of the optimization manipulations discussed above\nsyntactic expression for a cell at block 940, with FIG. 9D\nbegins with the syntactic expression\n55\nnoting explicitly that previous transformations may also have\nQ .UD AN VSS NOT_RESET CLK;\nbeen performed on the cell expression, although this is not a\nrequirement. A check is made at block 944 whether half the\nOptimization of this function may proceed by first expanding\ntruth table states are low. If so, the control variable may be\nthe NOT RESET as a control variable:\nchanged to a reset to a F/F in accordance with block 946. For\n60\nexample, consider the syntactic function\nQ .UD AN NOT RESET VSS VSS VDD VSS CLK;\nC .UB Y[0] I J;\n\nQ .UDY[2:0] VSS VSS VSS VSS A B C D CLK;\n\nInversion of the two control variables in accordance with FIG.\n9A results in two interchanges of the truth table, a first interIn this example, a cell that implements this function comchange based on single entries and a second interchange\nprises a ULG and a D F/F. As previously mentioned, the 65 based on pairs:\nnotation Y[2:0] is equivalent to Y[2] Y[I] Y[0]. Half of the\nQ .UD A RESET VSS VDD VSS VSS CLK;\ntruth table states in this expression are low, i.e. VSS, so that\n\nUS 7,624,368 B2\n25\nInterchanging the controls to prepare for entering A as a\nmap-entered variable results in\nQ .UD RESET A VSS VSS VDD VSS CLK;\n\nThe presence of the VDD VSS sequence and the repeated\nVSS element permits the control variable to be entered into\nthe map in accordance with FIG. 913:\nQ .UD RESET VSS A CLK;\n\nIt is now apparent that since there are only two states in the\ntruth table and one of them is low, that half the states are low\nand the control variable may be entered into the map as a reset\ninput to the F/F:\nQ .DRA RESET CLK (RST=`C\')\n\nSince all of the control variables have been entered into the\nmap, there is no need for a ULG element in implementing this\noptimized expression. Instead, it may be implemented in one\nembodiment using only a resetable D F/F, even though the\noriginal expression corresponded to an implementation comprising both a ULG and a D F/F.\nEach syntactical expression of the formalism may be\nviewed as an entry for a ULG netlist that defines a digital\ncircuit. The ULG netlist uses basic cells and follows the\nCHDL syntax. Such a ULG netlist may be at least partially\noptimized by successively performing some of the individual\nmanipulations described above. In some embodiments, the\nresulting optimized ULG netlist may be implemented directly\nusing the cells described above. In other embodiments, however, the manipulation of the ULG netlist may be viewed as\nintermediate step in optimizing a digital design that has been\nexpressed in another netlist format. In such instances, the\nother netlist format using another cell library and/or another\nsyntax (e.g., VHDL or Verilog) is initially translated to the\nULG netlist format. After performing some optimization\nsteps, the optimized ULG netlist may be translated back into\nthe original format for implementation. In this way, an\nembodiment is provided that achieves optimization of digital\ndesigns within preexisting netlist formats.\nThere are a variety of ways in whichthe individual manipulations of the syntactic expressions comprised by a ULG\nnetlist may be performed and the degree to which the corresponding digital design is optimized may depend on how\nthose manipulations are executed. While in some instances it\nis possible for the manipulations to be performed by hand by\na digital designer, it is expected that at least some level of\nautomation may be used. In one embodiment, for example, a\ncomputer program may be provided that allows a digital\ndesigner to select the types of manipulations to be performed\nand sections of the ULG netlist on which to perform them,\nwith the execution of the manipulations being performed\nautomatically. In another embodiment, a predetermined algorithm is used in a completely automated way to perform the\nmanipulations or optimizations.\nOne example of such a predetermined algorithm is illustrated with the flow diagram provided in FIG. 10, although it\nwill be appreciated by those of skill in the art that numerous\nother algorithms may alternatively be used. In some specific\ninstances, alternative algorithms use the same manipulations\nbut perform them in a different order. In some other specific\ninstances, alternative algorithms use a different set of\nmanipulations. The algorithm shown in FIG. 10 may begin at\nblock 1004 by translating an existing netlist to a ULG netlist\nif the design to be optimized was not initially created using\nthe ULG formalism. In one embodiment, translating from the\nexisting netlist to the ULG netlist is performed as a one-to-\n\n26\none translation between syntactic expressions. For one\nembodiment, this translation may be viewed conceptually in\nterms of the elements used in that embodiment to implement\nthe original and ULG netlists\xe2\x80\x94every logic gate, such as\n5 NAND, OR, etc. is converted into a multiplexor-based implementation amenable to optimizations provided by the syntactic manipulations discussed above.\nAt block 1008, data and control elements are discerned in\nthe resulting ULG netlist. The distinction between such data\n10\nand selection control elements was previously discussed with\nrespect to Table VIII. In one embodiment, such discernment\nmay be performed with a high-level design language. In certain embodiments, there are additional advantages in the sub15 Sequent optimization where the data and control are identified\nfrom the original behavioral netlist. Once the data and control\nelements have been identified, the operations identified in\nblocks 1016-1068 may be performed by using the syntactic\nmanipulations described above. Thus, at block 1016, connec20 tion cells to base Boolean values are removed by incorporating the corresponding functions into the syntactic expressions. Similarly, non-inverting buffers are removed at block\n1020 and also incorporated directly into the syntactic expressions. At block 1024, inverters are removed by syntactically\n25 inverting the relevant data elements in individual syntactic\nexpressions. The removal of redundant nodes at block 1028\nmay proceed by reducing, combining, and permuting nodes\nin the syntactic expressions. Methods for such reductions,\ncombinations, and permutations for certain embodiments\n3o\nwere described above in connection with FIGS. 9Band9C.At\nblock 1032, inversions are removed. The inversions removed\nmay include control/state variable inversions, truth table\ninversions and buffer inversions, for which methods of\nremoving were described above in connection with FIG. 9A.\n35\nA loop comprising blocks 1036 and 1040 may be executed\nto identify and merge fanout nodes. A "fanout node"\ndescribes a configuration in which a single output is directed\nto multiple parts of truth tables and, in some instances, optimizations may be realized by merging such fanout nodes. A\n40\ncheck is first performed at block 1036 to identify whether the\nULG netlist includes any fanout nodes, in which case they are\nreduced at block 1040 by performing permutations and\nreductions as described in connection with FIG. 9C. The loop\n45 between blocks 1036 and 1040 is included because the reductions performed at block 1040 may produce some new fanout\nnodes that may be identified and merged through additional\npermutations and reductions. The method thus loops until no\nfanout nodes are identified at block 1036.\n50 After the fanout nodes have thus been merged, a check is\nmade at block 1044 to identify syntactic expressions corresponding to synchronous cells in which half the truth-table\nstates are low. If such an expression is identified, the corresponding control variable is moved to be a reset input at block\n55 1048. A method for doing so is described in connection with\nFIG. 9D and may include performing permutations to align\nthe low truth-table states. A similar check is made at block\n1052 to identify syntactic expressing corresponding to synchronous cells in which half the truth-table states are high. If\n60 such an expression is identified, the corresponding control\nvariable is move to be a set input at block 1056. A method for\ndoing so is also described in connection with FIG. 9D and\nmay include performing permutations to align the high truthtable states.\n65 At block 1060, the syntactic expressions are grouped by\ncommon inputs. Such grouping permits identification of subfunctions at block 1064. The common subfunctions have\n\nUS 7,624,368 B2\n27\nshared characteristics that may be extracted before reducing\nother nodes. At block 1068, buffers are made to be inverting\nbuffers.\nIf the original ULG netlist produced at block 1004 was\nnonoptimal, performing the above manipulations may pro- 5\nduce a different ULG netlist that is amenable to implementation with smaller area, greater speed, and/or lower power\nrequirements. In some embodiments, it is possible that not all\nof the manipulations will be performed, that some may be\nperformed multiple times, and that they may be performed in i0\na different order than described. Once the method has produced a new ULG netlist, it may be implemented at block\n1072 by translating the syntactic expressions in the ULG\nnetlist with the cells described above. In such embodiments,\nthe method functions not only to optimize the digital design 15\nbut also to provide a multiplexor-based implementation of it.\nIn some alternative embodiments, the resulting ULG netlist\nmay be amenable to translation back into the original netlist\nsyntax for implementation using Boolean logic gates. In these\nembodiments, the method may be viewed as providing an 20\noptimization of a digital design while retaining its underlying\nstructural characteristics.\nIn some embodiments, it is desirable for the techniques\nused for the syntactic manipulations to be embedded in an 25\noptimization tool or synthesizer. Accordingly, the methods of\nthe invention for converting a netlist into a ULG netlist and for\noptimizing the ULG netlist may be performed by a computer,\none example of a suitable configuration for which is shown in\nFIG. 11. This figure broadly illustrates how individual system 30\nelements may be implemented in a separated or more integrated manner. The computer 1100 is shown comprised of\nhardware elements that are electrically coupled via bus 1112,\nincluding a processor 1102, an input device 1104, an output\ndevice 1106, a storage device 1108, a computer-readable 35\nstorage media reader 1110a, a communications system 1114,\na processing acceleration unit 1116 such as a DSP or specialpurpose processor, and a memory 1118. The computer-readable storage media reader 1110a is further connected to a\ncomputer-readable storage medium 1110b, the combination 40\ncomprehensively representing remote, local, fixed, and/or\nremovable storage devices plus storage media for temporarily\nand/or more permanently containing computer-readable\ninformation. A communications system 1114 may comprise a\nwired, wireless, modem, and/or other type of interfacing con- 45\nnection.\nThe computer 1100 also comprises software elements,\nshown as being currently located within working memory\n1120, including an operating system 1124 and other code\n1122, such as a program designed to implement optimization 50\nmethods of the invention. It will be apparent to those skilled\nin the art that substantial variations may be used in accordance with specific requirements. For example, customized\nhardware might also be used and/or particular elements might\nbe implemented in hardware, software (including portable 55\nsoftware, such as applets), or both. Further, connection to\nother computing devices such as network input/output\ndevices may be employed.\nExample: The method described with respect to FIG. 10\nwas used to optimize a netlist for a microcontroller. A syn- 60\nthesized netlist of commercial library cells was translated to\nthe ULG netlist formalism and optimized by performing the\ndescribed syntactic manipulations. The size of implementing\nthe optimized ULG netlist with the cells described herein was\nthen compared with the size of the original implementation. 65\nThe overall size was reduced by about 37%, a significant\nreduction.\n\n28\nV. Digital Design with Syntactic Manipulation\nReferring next to FIG. 12, a flow diagram of an embodiment of a process for preparing a ULG ASIC cell library is\nshown. In this embodiment, a new fabrication process is\nbeing adapted to use the kernel cell/basic cell topology. The\ndepicted portion of the process begins in step 1204 where a\nlayout engineer or technician analyzes the layout rules for the\ntarget fabrication process. The fabrication process could have\ndifferent amounts of metalization layers, different semiconductor compositions, different transistor types, and different\ntopologies such as SOI, etc. that are considered during layout.\nThe kernel cells are laid out, at least partially, by hand to\noptimize the circuitry in step 1208. Some embodiments could\nstart the kernel cell layout with a computer routed design that\nis hand-customized. Care is taken to have kernel cells of a\nconsistent height and to adhere to abutment guidelines such\nthat clock signals and some of the I/O are latitudinally\naligned. Other embodiments could rely upon autorouting\nentirely to build the kernel cells.\nThe kernel cells can be assembled in a number of ways to\npotentially create hundreds of basic cells 100 in the ULG\nASIC cell library. The basic cell configurations are specified\nin step 1212. This could be done by editing a script fed to the\ntool that combines the kernel cells into basic cells. In step\n1216, the kernel cells are automatically assembled into basic\ncells 100 in this embodiment. Some embodiments could\nassemble the kernel cells manually or in-art manually. Once\nthe basic cells are generated, they are verified in step 1220.\nThis verification validates the digital and analog performance\nof the basic cells. Any problems uncovered in verification can\nbe fixed in the kernel and/or basic cells. To complete the ULG\nASIC cell library, any specialized cells are laid-out in step\n1224.\nIn one embodiment, selection logic is used in digital circuits to replace some or all combinatorial logic. A significant\nproportion of the basic cells use a ULG 104. In contrast,\nconventional semiconductor circuits do not use ASIC cell\nlibraries that include ULG circuits. In one embodiment, the\nULG circuits come in various sizes, that have between two\nand eight inputs and between one and three select lines.\nThe extensive use of ULGs or selection circuits in this\ninvention could be characterized in a number of ways in the\nvarious embodiments, those characterizations include:\n(1) A digital IC design using an ASIC cell library that\nincludes a proportion of cells with selection circuits. In\nvarious embodiments, the proportion of the cells with\nselection circuits in the ASIC cell library could include,\nfor example, 5% or more, 10% or more, 25% or more,\n50% or more, 75% or more, 80% or more, 90% or more.\n(2) A digital IC design using an ASIC cell library that\nincludes a percentage of basic cells that each include two\nor more kernel cells. For example, that percentage could\nbe more than 5%, 10%, 20%, 30%, 40%, 50%, 60%,\n70%, 80%, or 90%.\n(2) A digital design that includes a proportion of selection\ncircuits. Where the proportion is defined in terms of\ncircuit area, power consumption or number of kernel\ncells. In various embodiments, theproportion of a digital\ndesign that includes selection circuits could include I%\nor more, 2% or more, 5% or more, 10% or more, 20% or\nmore, 30% or more, 40% or more, or 50% or more.\n(3) A digital design implemented in a semiconductor circuit where the digital building blocks include memory\ncells, one input Boolean operators and selection circuits.\nThe selection circuits are non-Boolean operators and\nhave three or more inputs. In some cases, there could be\na small proportion of the digital building blocks could be\n\n\t\n\n29\n\n\t\n\nUS 7,624,368 B2\n30\n\n\t\n\tBoolean operators, such as 1% or less, 2% or less, 5% or\nAbehavioral netlist is converted by the synthesis tool 1308\n\t\nless, 10% or less, or 20% or less.\ninto a structural netlist using the conventional cell library\n\t\nThose digital designs could be embodied in the form of, for\n1324 in this embodiment. The behavioral constructs are con\t\nexample, a structural netlist, a behavioral netlist, a HDL\nverted to Boolean constructs and optimized. From the connetlist, a full-custom ASIC, a semi-custom ASIC, an IP core 5 ventional cell library 1324, cells are used for the optimized\n\t\ncircuit, an integrated circuit, a hybrid chip, one or more\nBoolean constructs. In some cases, typical timing values are\n\t\nmasks, a FPGA, or a circuit card having a number of inteused by the synthesis tool 1308 to identify potential problems\n\t\ngrated circuits. The full-custom and semi-custom ASICs are\t\nin the conversion process using static timing analysis.\ndefined as custom integrated circuits herein and could use at\nDynamic timing analysis could also be performed on the\nleast some standard cells. Structural netlists enumerate low- io structural netlist to confirm functionality wasn\'t compro\t\nlevel cells to use and how they are interconnected. Behavioral\nmised during the conversion.\n\t\nnetlists have high-level descriptions of the functionality of a\nThe optimization tool 1312 uses syntactic manipulation to\n\t\ncircuit similar to high-level programming languages. Case\nimprove the design in at least one of the following areas:\nstatements, IF-THEN-ELSE statements can be easily trans- \t\npower consumption, leakage current, fanout, chip area, numlated from behavioral constructs to ULG circuits. Examples 15 ber of masks, number of process steps, yield, capacitance,\n\t\nof HDL netlists include RTL, VHDL, Verilog and CHDL. The\ninductance, resistance, glitches, etc. In this embodiment, variHDL netlists may be high-level behavioral netlists or low-\t\nables can be fed to the optimization tool 1312 in order to set\n\t\nlevel structural netlists. ASIC designs can be full-custom or\nthe priorities among these design factors. These variables\n\t\nsemi-custom designs. The full-custom designs have a full set\ncould be set on a scale of one-to-ten to indicate relative value\nof masks done for each design, whereas the semi-custom\t 20 along a sliding scale.\ndesigns have some reusable masks that define an array of\nSome embodiments could optimize for various factors by\ngates that are custom interconnected with some unique \t\t\nuse of alternative cells in the ULG library. Certain cells could\nmasks. Where a semi-custom ASIC is done, the gates would\nbe optimized for various design factors such as power coninclude ULG circuits. IP core circuits are netlists or \t\nsumption, leakage current, fanout, chip area, number of\nmaskwork that define a reusable function such as a micropro- 25 masks, number of process steps, yield, capacitance, induccessor, bus interface, etc. that is typically provided by a third- \t\ntance, resistance, glitches, etc. During the optimization, the\nparty vendor. An integrated circuit is simply a semiconductor \t\nalternative cells could be used based upon how the digital\n\t\nchip. Where more than one chip is in a package, that package\ndesigner set the priority variables.\nis referred to as a hybrid integrated circuit or multi-chip- \t\nIn this embodiment, the optimization tool optimizes the\nmodule. Circuit cards can couple together a number of inte- so structural netlist from the synthesis tool to produce an optigrated circuits soldered thereon, where the integrated circuits\t\nmized structural netlist that uses the same conventional cell\nuse ULGs.\t\nlibrary 1324. The synthesized structural netlist is read and\nThere are several approaches to integrating syntactic \t\nconverted into an intermediate netlist that uses an embodi\t\nmanipulation into digital design. In some embodiment, the\nment of the ULG ASIC cell library. This embodiment of the\ndesigner anticipates using syntactic manipulation at the start 35 ULG cell library can be somewhat simplified as the variation\nof the design process. Using HDL constructs, such as case\t \t\nused in anASIC could be unnecessary when only optimizing.\nstatements, allows easy mapping to the HDL ASIC cell\nSyntactic manipulation is performed upon the intermediate\nlibrary. Digital designers often mix-and-match tools from \t\nnetlist according to the optimization priorities, if specified.\n\t\nseveral vendors to develop a design flow suited to a particular\nSome embodiments could perform a default optimization that\ndigital designer. With that in mind, the various below embodi- 40 may or may not be modifiable by the digital designer. Once\n\t\nments integrate the concepts of this invention in various ways\nthe intermediate netlist is optimized, it is converted to an\nand to varying degrees. As those skilled in the art can appre- \t\noptimized structural netlist that uses the conventional cell\nlibrary 1324.\nciate, the processing of the design can be somewhat auto- \t\n\t\nmated by using scripts to run the various tools on various\nStatic & dynamic timing analysis is run on the optimized\n\t\n45 structural netlist. The static timing analysis takes into account\ndesign files.\nWith reference to FIG. 13, a block diagram of an embodi- \t\ntiming relationships for the optimized structural netlist and\n\t\nment of a design flow 1300 that uses syntactic manipulation\nidentifies portions of the circuit that may fail to meet the\n\t\nafter synthesis is shown. Included in this design flow are an\t\ntiming requires of the circuit. Parameters can be entered into\nHDL entry tool 1304, a synthesis tool 1308, a conventional\nthe synthesis and/or optimization tools 1308, 1312 to prioricell library 1324, an optimization tool, a static & dynamic 50 tize certain portions of the circuit to make meeting static\n\t\ntiming analysis tool 1316, and a place & route tool 1320. In\ntiming requirements easier.\n\t\nthis embodiment, the digital designeruses all the tools of their\nDynamic timing analysis can come in a few forms. Input\n\t\nnormal design flow, but includes the optimization tool 1312 \t\nwaveforms can be designed to stimulate the design, whereafafter the synthesis tool 1308. The optimization tool 1312\nter the digital designer checks for correct output waveforms.\n55 To automate this process, test vectors can be developed and\nperforms the syntactic manipulation in this design flow. \t\nThe HDL entry tool 1304 is a software edit tool that allows \t\napplied to the inputs of the circuit whereafter output test\nthe digital designer to enter HDL as a behavioral netlist. The \t\nvectors are tested against the actual output. Discrepancies are\nHDL could be VHDL, Verilog or Concise Hardware Descrip- \t\nnoted as errors and fixed by tweaking the behavioral code and\ntion Language (CHDL). CHDL is a HDL that is tuned for the \t\nsynthesis/optimization tools 1308, 1312 such that errors are\ndesign constructs beneficial for designs with ULG cells. The 6o not introduced into the process.\n\t\nHDL entry tool 1304 could receive feedback from the other\nOnce the digital designer is happy with the structural\n\t\ntools to identify portions of the code that have problems found\nnetlist, the place & route tool 1320 performs a physical layout\n\t\nby those other tools. Other design capture tools could be used\nof the circuit. A location for each cell in the optimized strucinstead of a HDL entry tool, for example, state machine tools,\t\ntural netlist is chosen and traces are laid-out to interconnect\nRTL tools, schematic capture tools, etc. Dynamic timing 65 those cells according to the netlist. These types of tools 1320\nanalysis could be performed on the behavioral netlist to con-\t\nare automated or semi-automated. More accurate timing valfirm proper functionality. \t\nues are available after place & route because the trace lengths\n\n\t\n\n31\n\nUS 7,624,368 B2\n32\n\ninterconnecting the cells is known. Further static/dynamic\nReferring next to FIG. 18, a block diagram of still another\nanalysis 1316 can be performed to assure that new errors\nembodiment of a design flow 1800 is shown that uses an\nweren\'t introduced during the place and route process. Once\ninteractive direct verification tool 1804 throughout the design\na suitable layout is achieved, masks can be produced and\nflow and after fabrication. This embodiment shows the fabrifabrication can start. Dynamic testing on the resulting chip c cation 1808 and final test 1812 in the design flow. The fabrimay be performed to test functionality after fabrication.\ncation 1808 is performed after the design is thoroughly tested.\nAfter production, the chips can be tested again. Test vectors\nReferring next to FIG. 14, a block diagram of another\nare applied to the chip inputs and scan ports in the dynamic\nembodiment of a design flow 1400 is shown that uses syntacanalysis in final test 1812. Where an error can be isolated to a\ntic manipulation and the ULG ASIC cell library. In this\nembodiment, a ULG cell library 1404 is used during synthesis io pin or node in final test 1812, the interactive direct verification\ntool 1804 can show the engineer the progression of the design\n1308. By targeting the ULG cell library, the synthesized\nthat relates to that failure.\nstructural netlist is in a format readily understood by the\nWith reference to FIG. 19, a flow diagram of an embodioptimization tool 1312 such that a conversion to an intermement of a design process 1900 is shown. In the depicted\ndiate netlist is unnecessary. The optimization tool 1312 performs the syntactic manipulation before converting from the 15 portion of the design process 1900, the sequential steps are\nshow along with the test and rework steps. In step 1904, the\nintermediate format to the conventional cell library 1324. The\ndigital design is entered using an entry tool. A HDL such as\noptimized structural netlist is uses the conventional cell\nVerilog, VHDL or CHDL is used to enter the behavioral\nlibrary 1324, which is understood by the place & route tool\nnetlist for the circuit being designed. Throughout the design\n1320 and the fab or foundry.\nWith reference to FIG. 15, a block diagram of another 20 entry phase, dynamic timing analysis is performed in step\n1916 to verify that the behavioral netlist is probably being\nembodiment of a design flow 1500 is shown that uses the\nprepared correctly. At this stage, the dynamic timing analysis\nULG ASIC cell library 1404 for the final netlist used by the\nis probably done in a waveform simulation tool. Various\nfab or foundry. In this embodiment, the ULG ASIC cell\nscenarios are designed with the simulation tool to test various\nlibrary 1404 has been produced for the target process at the\nfab or foundry. The synthesis tool 1308 converts the behav- 25 conditions of the digital design. During the timing analysis of\nstep 1916, problems could be found in step 1906. Rework of\nioral netlist into a synthesized structural netlist that uses the\nthe behavioral code could be performed by returning to step\nULG ASIC cell library 1404. The optimization tool can pro1904 where problems are found. Processing continues from\ncess the netlist without any conversion between cell libraries\nstep 1916 to step 1908 where no problems are found.\nsuch that the resulting optimized structural netlist also uses\n30 Synthesis and optimization is performed in step 1908 to\nthe ULG ASIC cell library.\nconvert the behavioral netlist to an optimized structural\nReferring next to FIG. 16, a block diagram of yet another\nnetlist. Conversion between cell libraries can also be perembodiment of a design flow 1600 is shown that combines\nformed in this step. Some embodiments may perform the\nsynthesis and syntactic manipulation into a single tool 1604.\nsynthesis and optimization as separate steps. Static and\nThe synthesis & optimization tool 1604 takes the behavioral\n35 dynamic timing analysis are performed in steps 1912 and\nnetlist from the HDL entry tool 1304 and converts it to an\n1916. Ifproblems are found, reworkmay be done in step 1904\nintermediate structural netlist using the ULG ASIC cell\nor step 1908. Rework in step 1908 could include changing\nlibrary 1404. The intermediate structural netlist is optimized\nparameters fed to the synthesis & optimization tool 1604 or\nusing syntactic manipulation with the tool 1604 to produce an\ncorrecting problems with libraries.\noptimized structural netlist that uses the ULG cell library\n40 Once generally satisfied with the optimized structural\n1404. In this embodiment, the HDL entry tool 1304 uses\nnetlist, processing continues to step 1920 for place & route of\nCHDL.\nthe design. In this step, the trace lengths and drive requireIn some embodiments, the synthesis & optimization tool\nments are more accurately analyzed to improve the verifica1604 may not have a ULG cell library 1404 for the target\nASIC process. In that case, the synthesis & optimization tool 45 tion that can be performed on the digital design. Once again\nstatic and dynamic timing analysis is performed in step 1912\n1604 would convert the intermediate netlist to an optimized\nand 1916 to verify the laid-out design still behaves properly.\nnetlist using the conventional cell library 1324.\nWhere there are problems as detected in step 1906, rework\nWith reference to FIG. 17, a block diagram of still another\ncould be performed in steps 1904, 1908 or 1920. The interembodiment of a design flow 1700 is shown that uses an\nactive direct verification tool 1804 can assist the digital\ninteractive direct verification tool 1704 throughout the design 50 designer find where flaws were likely introduced into the\nflow 1700. Verification allows debugging a digital design\nnetlist. Where there are no problems after layout, the design is\nthroughout the design flow. In this embodiment, the interacfabricated in step 1924.\ntive direct verification tool 1704 tracks the evolution of the\nHaving described several embodiments, it will be recogdesign from a behavioral netlist through to a structural netlist\nnized by those of skill in the art that various modifications,\nthat has been placed and routed. The HDL entry tool uses 55 alternative constructions, and equivalents may be used withCHDL and the design flow uses the ULG cell library 1504 for\nout departing from the spirit of the invention. Accordingly, the\nthe target fabrication process. The various forms of the design\nabove description should not be taken as limiting the scope of\nembodied in the evolving netlist are accessible to the interacthe invention, which is defined in the following claims.\ntive direct verification tool 1704.\nWhat is claimed is:\nAny identified portion of the circuit can be traced through 60\t\n1. A method for optimizing a digital circuit design, the\nthe various steps of the design flow 1700 using the interactive\nmethod comprising steps of:\ndirect verification tool. For example, a case statement in the\nCHDL behavioral code can be followed through to the varitranslating a first representation of the digital circuit design\nous structural netlists to see how that case statement was\nto a second representation of the digital circuit design,\nimplemented. Conversely, a portion of a structural netlist can 65 the second representation comprising a plurality of synbe followed back to preceding structural netlists or even the\ntactic expressions that admit a representation of a\nbehavioral netlist.\nhigher-order function of base Boolean values;\n\n\t\n\n33\n\n\t\n\nUS 7,624,368 B2\n34\n\n\tsyntactically manipulating the plurality of syntactic \t\nsyntactically manipulating the plurality of syntactic\n\t\nexpressions to form a third representation of the digital\nexpressions to form a third representation of the digital\ncircuit design, wherein the manipulating step comprises \t\ncircuit design, wherein manipulating step comprises\nreducing a number of nodes within the plurality of syn- \t\nreducing a number of nodes within the syntactic expres5\t\ntactic expressions. \t\nsions.\n\t\n2. The method for optimizing a digital circuit design as\n15. The method for optimizing the digital circuit design as\nrecited in claim 1, further comprising a step of identifying \t\nrecited in claim 14, wherein a majority of the syntactic\n\t\ndata and control in the second representation of the digital\nexpressions identify higher-order functions of base Boolean\ncircuit design.\t\nvalues.\n3. The method for optimizing a digital circuit design as \t 10\t\n16. The method for optimizing the digital circuit design as\n\t\nrecited in claim 2, wherein manipulating the plurality of\nrecited in claim 14, further comprising a step of translating\nsyntactic expressions comprises reassigning data and control. \t\nthe third representation of the digital circuit design to a fourth\n4. The method for optimizing a digital circuit design as \t\nrepresentation of the digital circuit design, wherein the first\n\t\nrecited in claim 3, wherein manipulating the plurality of\nand fourth representations comprise netlists.\nsyntactic expressions comprises assigning a control variable\t 15\t\n17. The method for optimizing the digital circuit design as\n\t\nfor at least one of the syntactic expressions as a flip-flop input\nrecited in claim 14, wherein the second and third representato such syntactic expression. \t\ntions identify sets of cell elements that comprise multipiexers\n\t\n5. The method for optimizing a digital circuit design as\nfor implementing the digital circuit design.\n\t\nrecited in claim 1, further comprising a step of identifying\n18. The method for optimizing the digital circuit design as\ndata and control in the first representation of the digital circuit 20 recited in claim 14, wherein the manipulating step comprises\ndesign.\t\na step of removing logical inversions within the syntactic\n6. The method for optimizing a digital circuit design as \t\nexpressions.\nrecited in claim 1, \t\n19. The method for optimizing the digital circuit design as\nfurther comprising a step of translating the third represen-\t\nrecited in claim 14, wherein the plurality of syntactic exprestation of the digital circuit design to a fourth represen- 25 sions are implemented with kernel cells chosen from the\n\t\ntation of the digital circuit design, wherein the first and\ngroup consisting of selection circuits, memory cells and buff\t\nfourth representations are expressed using the same syners.\ntax.\t\n20. The method for optimizing the digital circuit design as\n7. The method for optimizing a digital circuit design as \t\nrecited in claim 14, wherein the third representation correrecited in claim 6, wherein the first and fourth representations 30 sponds to a physical circuit.\ncomprise netlists.\t\n21. A computer-readable e storage medium having a com8. The method for optimizing a digital circuit design as \t\nputer-readable program embodied therein for directing\nrecited in claim 7, wherein the first and fourth representations \t\t\noperation of a computer system including a processor and at\nidentify Boolean logic elements for implementing the digital\nleast one input device, wherein the computer-readable procircuit design.\t\n35 gram includes instructions for operating the computer system\n\t\n9. The method for optimizing a digital circuit design as\nfor optimizing a digital circuit design in accordance with the\nrecited in claim 1, wherein the second and third representa- \t\nfollowing:\ntions identify sets of cell elements that comprise muitiplexers \t\nreceiving a first representation of the digital circuit design\nfor implementing the digital circuit design.\t\nfrom the at least one input device;\n10. The method for optimizing a digital circuit design as\t \t 40\t\ntranslating the first representation of the digital circuit\nrecited in claim 1, wherein manipulating the plurality of\ndesign to a second representation of the digital circuit\n\t\nsyntactic expressions comprises removing logical inversions\ndesign, the second representation comprising a plurality\nwithin the syntactic expressions. \t\nof syntactic expressions that admit a representation of a\n\t\n11. The method for optimizing a digital circuit design as\nhigher-order function of base Boolean values; and\n45\t\nrecited in claim 1, wherein: \t\nexecuting and syntactically manipulating the plurality of\nthe digital circuit design is implemented with basic cells,\t\nsyntactic expressions to form a third representation of\n\t\neach basic cell includes two or more kernel cells, and\nthe digital circuit design, wherein manipulating step\n\t\nthe kernel cells s chosen from the group consisting of\ncomprises reducing a number of nodes within the syn\t\nselection circuits, memory cells and buffers.\ntactic expressions.\n12. The method for optimizing a digital circuit design as\t 50\t\n22. The computer-readable storage medium having the\nrecited in claim 1, wherein the plurality of syntactic expres- \t\ncomputer readable program embodied therein for directing\nsions are implemented with kernel cells chosen from the \t\noperation of the computer system including the processor and\ngroup consisting of selection circuits, memory cells and buff- \t\nat least one input device as recited in claim 21, wherein the\ners.\t\ncomputer-readable program further includes instructions for\n13. The method for optimizing a digital circuit design as 55 translating the third representation of the digital circuit design\nrecited in claim 1, wherein the third representation corre-\t\nto a fourth representation of the digital design, wherein the\nsponds to a physical circuit. \t\nfirst and fourth representations comprise netlists.\n\t\n14. A method for optimizing a digital circuit design, the\n23. The computer-readable storage medium having the\n\t\nmethod comprising steps of\ncomputer readable program embodied therein for directing\ntranslating a first representation of the digital circuit design 60 operation of the computer system including the processor and\nto a second representation of the digital circuit design, \t\nat least one input device as recited in claim 21, wherein the\nthe second representation comprising a plurality of syn- \t\nfirst and fourth representations identify sets of cell elements\n\t\ntactic expressions, wherein at least half of the syntactic\nthat comprise muitiplexers for implementing the digital\n\t\nexpressions identify a higher-order function of base\ndesign.\n65 24. The computer-readable storage medium having the\nBoolean values; \t\n\t\nidentifying data and control in at least one of the first and\ncomputer readable program embodied therein for directing\n\t\nsecond representations; and\noperation of the computer system including the processor and\n\nUS 7,624,368 B2\n35\n36\nat least one input device as recited in claim 21, wherein the\nat least one input device as recited in claim 21, wherein\nmanipulating the plurality of syntactic expressions comprises\nsecond and third representations identify sets of cell elements\nreassigning data and control.\nthat comprise multiplexers for implementing the digital\n29. The computer-readable storage medium having the\ndesign.\n25. The computer-readable storage medium having the 5 computer readable program embodied therein for directing\noperation of the computer system including the processor and\ncomputer readable program embodied therein for directing\nat least one input device as recited in claim 21, wherein the\noperation of the computer system including the processor and\nplurality of syntactic expressions are implemented with kerat least one input device as recited in claim 21, wherein\nnel cells chosen from the group consisting of selection cirmanipulating the plurality of syntactic expressions comprises io cuits, memory cells and buffers.\nremoving logical inversions within the syntactic expressions.\n30. The computer-readable storage medium having the\n26. The computer-readable storage medium having the\ncomputer readable program embodied therein for directing\ncomputer readable program embodied therein for directing\noperation of the computer system including the processor and\noperation of the computer system including the processor and\nat least one input device as recited in claim 21, wherein:\nthe computer-readable program further includes instrucat least one input device as recited in claim 21, wherein 15\t\ntions for receiving commands from the at least one input\nmanipulating the plurality of syntactic expressions comprises\ndevice; and\nreducing a number of nodes within the syntactic expressions.\nmanipulating the plurality of syntactic expressions to form\n27. The computer-readable storage medium having the\nthe third representation of the digital circuit design is\ncomputer readable program embodied therein for directing\nperformed in accordance with the commands.\noperation of the computer system including the processor and 20\t\n31. The computer-readable storage medium having the\nat least one input device as recited in claim 21, wherein the\ncomputer readable program embodied therein for directing\ncomputer-readable program further includes instructions for\noperation of the computer system including the processor and\nidentifying data and control in the second representation.\nat least one input device as recited in claim 21, wherein the\n28. The computer-readable storage medium having the\n25 third representation corresponds to a physical circuit.\ncomputer readable program embodied therein for directing\noperation of the computer system including the processor and\n\nUNITED STATES PATENT AND TRADEMARK OFFICE\n\nCERTIFICATE OF CORRECTION\nPATENT NO.\t\n: 7,624,368 B2\t\nAPPLICATION NO. :11/267587\nDATED\t\n: November 24, 2009\nINVENTOR(S)\t\n: Sterling R. Whitaker and Lowell H. Miles\n\nPage 1 of 1\n\nIt is certified that error appears in the above-identified patent and that said Letters Patent is hereby corrected as shown below:\n\nAt col. 33, line 38, replace "muitiplexers" with --multiplexers-At col. 34, line 17, replace "muitiplexers" with --multiplexers-At col. 34, line 63, replace "muitiplexers" with --multiplexers--\n\nSigned and Sealed this\nFifth Day of January, 2010\n\nDavid J. Kappos\nDirector of the United States Patent and Trademark Office\n\n'