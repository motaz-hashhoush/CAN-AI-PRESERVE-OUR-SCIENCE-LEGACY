b'eddy Users Manual\nScott M. Murman, Laslo T. Diosady, Anirban Garai, Corentin\nCarton de Wiart, Patrick J. Blonigan, and Dirk Ekelschot\nNASA Ames Research Center, Mo\xef\xac\x80ett Field, CA, USA\nJune, 2018\n\nContents\n1 Install\n1.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n1.2 Compiling . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n1.3 Conventions and Nomenclature . . . . . . . . . . . . . . . . .\n\n1\n1\n2\n2\n\n2 Pre-processing\n2.1 De\xef\xac\x81ning a Mesh . . . . . . .\n2.1.1 Unstructured Mesh .\n2.1.2 Higher-order meshes\n2.1.3 Mesh2Domain2Mesh\n\n.\n.\n.\n.\n\n4\n4\n4\n5\n6\n\n.\n.\n.\n.\n.\n.\n.\n\n8\n8\n10\n11\n12\n13\n13\n14\n\n.\n.\n.\n.\n\n3 Running eddy\n3.1 Input \xef\xac\x81les . . . . . . . . . .\n3.1.1 Single region . . . . .\n3.1.2 Multiple regions . . .\n3.1.3 Optional Inputs . . .\n3.2 Running a solver . . . . . .\n3.2.1 Eddy Command Line\n3.3 Test Cases . . . . . . . . . .\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n. . . . . . .\n. . . . . . .\n. . . . . . .\n. . . . . . .\n. . . . . . .\nArguments\n. . . . . . .\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n\n4 Post-processing\n4.1 Diagnostics . . . . . . . . . . . . . . . . . . . . . . . . . . .\n4.1.1 Instantaneous data, restart \xef\xac\x81les and full space-time solution . . . . . . . . . . . . . . . . . . . . . . . . . .\n4.1.2 Data integrated in space and/or in time . . . . . . .\n4.1.3 Residual norm . . . . . . . . . . . . . . . . . . . . . .\n4.2 Flow visualization . . . . . . . . . . . . . . . . . . . . . . . .\n4.2.1 plotter . . . . . . . . . . . . . . . . . . . . . . . . . .\n1\n\n15\n. 15\n.\n.\n.\n.\n.\n\n15\n16\n17\n18\n18\n\nCONTENTS\n\n2\n\n4.2.2\n\nplotvisit . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n\n5 Available solvers in eddy\n5.1 Advection-di\xef\xac\x80usion . . . . . . . . . . . . . . . .\n5.2 Navier-Stokes . . . . . . . . . . . . . . . . . . .\n5.2.1 Shock-capturing . . . . . . . . . . . . . .\n5.2.2 Variational Multiscale Modeling (VMM)\n5.2.3 Perfectly Matching Layer (PML) . . . .\n5.3 Wall model . . . . . . . . . . . . . . . . . . . .\n5.4 Linear Elasticity . . . . . . . . . . . . . . . . .\n5.5 Linear Shell . . . . . . . . . . . . . . . . . . . .\n5.6 6DoF . . . . . . . . . . . . . . . . . . . . . . . .\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n.\n.\n.\n.\n.\n.\n.\n.\n.\n\n20\n20\n21\n25\n25\n25\n26\n26\n28\n30\n\nChapter 1\nInstall\n1.1\n\nIntroduction\n\neddy is a collection of tools - nonlinear solvers, meshing, post-processing, visualization, optimization, etc. - for performing scale-resolving simulations of\nmulti-physics applications. The framework is designed to enable advanced\nR&D on a variety of topics by leveraging a mature capability for scaleresolving simulations, and simultaneously be an appropriate tool for application analysis and support. Currently, eddy is at a relatively low technicalreadiness level (TRL), and users and developers should maintain appropriate\nexpectations.\nThe technical details behind eddy are outlined in several publications\nwhich can be consulted for more information [1\xe2\x80\x9310]. The solvers are built\naround an unstructured high-order capability, and heavily utilize the tensorproduct sum-factorization approach for e\xef\xac\x83ciency. The unsteady formulation utilizes a fully implicit space-time approach with a matrix-free NewtonKrylov method. A primitive steady-state solver is available for testing purposes, but is not expected to converge for all but simple veri\xef\xac\x81cation cases.\nThe Navier-Stokes \xef\xac\x82uid solvers do not support either RANS or hybrid-RANS\ncapability, only LES and wall-modeled LES approaches.\nAll of the solvers within eddy support three modes of operation: a primal\nsolve of the full nonlinear problem, and two linearization approaches of the\nprimal solve - the adjoint and the tangent solution. Details on how to select\nand use these three modes are outlined in Sec. 3.\n\n1\n\nCHAPTER 1. INSTALL\n\n1.2\n\n2\n\nCompiling\n\neddy is written in C, and relies upon several 3rd-party libraries listed below,\n\xe2\x80\xa2 MPI\n\xe2\x80\xa2 hdf5 - must set -enable-parallel\n\xe2\x80\xa2 parmetis\n\xe2\x80\xa2 glib\n\xe2\x80\xa2 libyaml\n\xe2\x80\xa2 cgns - must set CGNS_ENABLE_64BIT, CGNS_ENABLE_HDF5,\nCGNS_ENABLE_SCOPING, and HDF5_NEED_MPI\n\xe2\x80\xa2 visit (optional)\nIn addition, eddy builds an optimized library to support the tensorproduct operations. This is located in the gen directory and must be compiled\nand installed before building eddy .\neddy uses a standard Make\xef\xac\x81le build system. Machine-dependent customizations, such as the location of the libraries listed above, compiler options, etc. , are speci\xef\xac\x81ed in a \xef\xac\x81le machine.mk in the src sub-directory. Examples of several customizations are provided for OSX, linux, etc. and these\ncan be copied or linked to machine.mk. Running make install will locate binaries and libraries in standard bin, lib, include paths relative to the top-level\ndirectory.\nAll of the binaries built within eddy support the --help command-line\noption which will list a description of the program, the available commandline options, and immediately exit.\n\n1.3\n\nConventions and Nomenclature\n\nAll of the input \xef\xac\x81les for eddy are in YAML format, to support syntax highlighting and provide a structure for the input data.\nAll of the inputs in the YAML \xef\xac\x81le can be parsed with a (relatively) general\nfunction parser. For example, it is possible to de\xef\xac\x81ne variables, and then use\nthose variables in mathematical expressions, as in\n\nCHAPTER 1. INSTALL\n\n3\n\nMach: 0.69\nAlpha: 5*pi/180.0\nVelocity:\nUref: Mach*cos(Alpha)\nVref: Mach*sin(Alpha)\nWref: 0\nThe output that the executable translates this to, ignoring the temporary\nvariables, is printed to standard output. All of the variables that can be set\nin the YAML input \xef\xac\x81le, including any unset defaults, are printed to standard\noutput.\neddy is a multi-physics solver, and each set of di\xef\xac\x80erent physics (governing\nequations) is termed a region. Thus the computational domain is split into\nmultiple regions, and then the separate regions are coupled together. Further,\neach region may require the speci\xef\xac\x81cation of physical boundary conditions.\nA single physics simulation follows this same paradigm, specifying a single\nregion without any couplings speci\xef\xac\x81ed.\nThe binary data for the mesh, simulations reults, etc. is stored in specialized HDF5 \xef\xac\x81les. Currently, a single mesh, \xef\xac\x82ow solution, etc. is created for\neach physics region, as outlined in Sec. 2.\n\nChapter 2\nPre-processing\n2.1\n\nDe\xef\xac\x81ning a Mesh\n\nIn order to de\xef\xac\x81ne a mesh we need:\n1. information about the topology/connectivity which describes how difference entities (vols/faces/edges/vertices) are connected to one another\n2. the coordinates which describe the actual geometry of the problem at\nhand\nFor high-order meshing it is convenient to think of these as two somewhat\nseparate things.\nWithin eddy we describe the mesh in terms of a topology/connectivity\nand an oracle which we can query to obtain geometry information to whatever\n\xef\xac\x81delity is required (i.e. high-order geometry representation).\nThere are currently two paths for generating meshes that eddy can understand\n\xe2\x80\xa2 using a 2nd-order unstructured mesh\n\xe2\x80\xa2 building a higher-order mesh based on a structured oracle\n\n2.1.1\n\nUnstructured Mesh\n\nCurrently the only support for general unstructured meshes is through reading unstructured CGNS \xef\xac\x81les. In the eddy/bin directory there is a utility\n4\n\nCHAPTER 2. PRE-PROCESSING\n\n5\n\ncgns2mesh which converts an unstructured cgns mesh to an eddy supported\nmesh.h5 \xef\xac\x81le. Currently only single zone, linear, 3D, unstructured meshes are\nsupported at this time. There is no oracle (i.e. the oracle is an identity\nmapping).\n\n2.1.2\n\nHigher-order meshes\n\nIn order to generate curved higher-order meshes we use an oracle based on\na structured multi-block mesh. The process of generating an oracle involves\ntwo steps:\n1. calling cgns2oracle to generate an oracle.h5\n2. calling oracle2mesh to generate a mesh.h5.\ncgns2oracle takes the following arguments\n\xe2\x80\xa2 -i input\xef\xac\x81le : the \xef\xac\x81lename of the input cgns \xef\xac\x81le containing the multiblock\ngrid\n\xe2\x80\xa2 -o output\xef\xac\x81le: the \xef\xac\x81le to write the oracle to (usually oracle.h5)\n\xe2\x80\xa2 \xe2\x80\x93PerJ/\xe2\x80\x93PerK/\xe2\x80\x93PerL : \xef\xac\x82ags indicating periodic boundary conditions on\nall blocks in the J/K/L direction.\nAdditionally cgns2oracle reads inputs from the \xef\xac\x81le oracle.yaml. The additional inputs that can be read are additional periodic connectivities which\ncan be speci\xef\xac\x81ed using the following:\n- connection\nblock_one: name1\ncon_plane_one: 1\nblock_two: name2\ncon_plane_one: -1\norientation: 0\nis_periodic: 1\nA block of this form must be added for every desired additional connection. Here name1/name2 correspond to the zone names in the cgns \xef\xac\x81le,\nplane1/plane2 correspond to the direction index of the normal (i.e. 1/2/3 ->\nJ/K/L) while the sign denotes the start/end. Orientation is a number from\n\nCHAPTER 2. PRE-PROCESSING\n\n6\n\n[0,7] which denote the relative orientations of the two faces of the blocks. Periodic is set to 1 if this is a periodic boundary, or 0 if this involve a one-way\ncoupling from block1 to block2.\noracle2mesh creates mesh.h5 starting from an oracle by splitting each\nzone into a number of hexahedral elements. The number of elements on each\nzone is speci\xef\xac\x81es in the \xef\xac\x81le mesh.yaml which has the following form:\n- Zone\nNj :\nNk :\nNl :\n\n: name1\n2\n3\n4\n\n- Zone\nNj :\nNk :\nNl :\n\n: name2\n3\n4\n1\n\nwhere a \xe2\x80\x9c-Zone\xe2\x80\x9d must be speci\xef\xac\x81ed for each block in the multi-block mesh,\ncorresponding to the given name. Nj/Nk/Nl correspond to the number of\nelements in each direction. Hanging nodes are not allowed and some minimal\nerror checking occurs to ensure that you have speci\xef\xac\x81ed a valid mesh.\nNote that at this point the coordinates of the higher-order mesh (and\ngeometry order) have not been speci\xef\xac\x81ed. These are determined at run time.\n\n2.1.3\n\nMesh2Domain2Mesh\n\nFor multiphysics simulations we currently generate a separate mesh.h5 \xef\xac\x81le\nfor each region. Typically we start from a single mesh.h5 which we want to\nsplit. The utility which can accomplish this is called mesh2domain2mesh.\nThe utility has two functions:\n1. allows you to name topologies within a domain (which Pointwise can\xe2\x80\x99t\nseem to do for us)\n2. write a mesh \xef\xac\x81le for a single region.\nThe input for mesh2domain2mesh is the \xef\xac\x81le mesh2domain2mesh.yaml and\nhas the following form:\n\nCHAPTER 2. PRE-PROCESSING\n\n7\n\nMeshFile: mesh.h5\nMaps:\n- Map: surfacename1\nParent1 : volumename1\nParent2 : volumename2\n- Map: surfacename2\nParent1 : volumename2\nParent2 : volumename3\nRegions:\n- Region: volumename2\nMeshFile denotes the input \xef\xac\x81le. The input \xef\xac\x81le will read all \xe2\x80\x9cvolume conditions\xe2\x80\x9d and \xe2\x80\x9cboundary conditions\xe2\x80\x9d that were speci\xef\xac\x81ed in the cgns \xef\xac\x81le. However, we may need to name certain interior boundaries or lower order entities\n(i.e. edges) which pointwise does not allow us to do. We name these entities\nby creating \xe2\x80\x9cmaps\xe2\x80\x9d where each \xe2\x80\x9cmap\xe2\x80\x9d corresponds to a newly named entity,\nwhich are de\xef\xac\x81ned as the intersection of two parents. A region can correspond to any map provided we have also created maps (i.e. named) all of its\nboundaries. For each region we construct a mesh_regionname.h5 \xef\xac\x81le which\nis read by eddy. For example, the above input would create a \xef\xac\x81le named\nmesh_volumename2.h5.\n\nChapter 3\nRunning eddy\nThe following section discusses how to run a case with eddy for a given mesh.\nThe working directory in which you wish to run eddy should contain the\nmesh.h5 \xef\xac\x81le(s) and the necessary YAML input \xef\xac\x81les.\n\n3.1\n\nInput \xef\xac\x81les\n\nRunning eddy requires at least two YAML input \xef\xac\x81les. The \xef\xac\x81rst \xef\xac\x81le needs\nto be named eddy.yaml and it should contain global information about the\ncase you are running, such as the number of time iterations, time stepping\nscheme, and the name of the region(s) included in the domain.\nFirstly, the temporal discretization needs to be speci\xef\xac\x81ed in the UnsteadyControl section:\nUnsteadyControl:\nScheme: # Time Stepping Scheme.\nTimeStep: # Time step size.\nIterations: # Number of time iterations.\nThe time stepping scheme options are currently Steady, ExplicitRK, ImplicitRK, or SpaceTime. The option Steady corresponds to a steady\nstate solver and it ignores the TimeStep and Iterations inputs. Note that\nthe space-time scheme performs an integral over a polynomial basis in the\ntemporal direction of the space-time element, akin to the typical spatial\n\xef\xac\x81nite-element scheme. As such, there is a distinction between data stored\nwithin the temporal projection of the space-time element, which we refer to\n8\n\nCHAPTER 3. RUNNING EDDY\n\n9\n\nas a time slab and contains Nt volume states corresponding to the temporal\ndof, and the projection in the temporal direction to the end of the time slab,\nwhich contains a single volume state.\nThe other mandatory entry in eddy.yaml is the Regions section:\nRegions:\n- Region: # Region Name (Mandatory)\nAdditional options under Partition depend on whether the domain is a\nsingle region or contains multiple regions. These will be discussed in sections\n3.1.1 and 3.1.2.\nIn addition to the eddy.yaml \xef\xac\x81le, one input \xef\xac\x81le is needed for each region.\nThis \xef\xac\x81le should be named region-name.yaml, where region-name is the region name speci\xef\xac\x81ed in eddy.yaml. The region input \xef\xac\x81le region-name.yaml\nshould contain information speci\xef\xac\x81c to a given region, such as the discretization scheme, the physics module to be used, and any boundary conditions.\nThe \xef\xac\x81rst entry to region-name.yaml should be the mesh \xef\xac\x81le name:\nMeshFile: # mesh file name\nThe discretization scheme is specifed as follows:\nDiscretization:\nDiscretizationType:\nBasisType:\n# LagrangeGauss (default) or LagrangeGLL\nSpatialDealias: # 1.0 collocation (default), > 1.0 dealiasing\nTemporalDealias: # 1.0 collocation (default), > 1.0 dealiasing\nN: # number of 1D basis functions (p+1) ,\n# a/k/a spatial order of accuracy\nNt: # number of temporal basis functions (only used for space-time)\nN_geom: # N (default) or some other order of accuracy\n# for the mesh curvature\nNt_geom # Nt (default) or some other order of accuracy\n# for the mesh curvature in time\nNote that the spatial and temporal orders of accuracy N and Nt are typically\nset to multiples of 2 since the low-level matrix math kernels used by eddy are\noptimized for these accuracy orders.\nThe Equation section speci\xef\xac\x81es the physics solver for a region, sets its\nimportant parameters (under ReferenceConditions), and sets the initial\nconditions.\n\nCHAPTER 3. RUNNING EDDY\n\n10\n\nEquation:\nEquationType: # Physics module to be used\nReferenceConditions: # Parameters for physics module\n# (e.g. Reynolds Number)\nInitialConditions: # Specify Parameters and/or spatial functions,\n# depending on physics module\nVolumeOutputs: # quantities of interest to be computed\n# on the region volume (e.g. kinetic energy)\nThe entries in the ReferenceConditions, InitialConditions and VolumeOutputs sections depend on the physics module speci\xef\xac\x81ed in EquationType. Consult chapter 5 for speci\xef\xac\x81c details on each physics module/solver.\nFinally, Boundary conditions are speci\xef\xac\x81ed in the BCs section:\nBCs:\n- Boundary: # Boundary name\nType: # Boundary type (e.g. Dirichlet)\n# depends on physics module\nOutputs: # outputs to be computed on this boundary\n# (e.g. shear stess)\nThe boundary name in the YAML \xef\xac\x81le needs to correspond to the boundary\nname in the mesh \xef\xac\x81le. There should be a Boundary entry for each boundary\nin the region. Each boundary type may have additional input parameters.\nFor example, the NavierStokes boundary condition FullState can specify all\n\xef\xac\x81ve primitive states (Rho,Uref,Vref,Wref,P) to over-ride the default values\nspeci\xef\xac\x81ed in the ReferenceConditions subsection of Equation.\n\n3.1.1\n\nSingle region\n\nTo run eddy for a single region domain, only two input \xef\xac\x81les are needed,\neddy.yaml and region-name.yaml.\nRegions:\n- Region: # Region Name (Mandatory)\nPartition: # Optional\nNProcs: # Number of cores to be used by this region\nDedicatedIO: # (Optional) Number of cores dedicated\n# to concurrent IO (Default 0)\n\nCHAPTER 3. RUNNING EDDY\n\n11\n\nDedicatedDiag: # (Optional) Number of cores dedicated\n# to concurrent diagnostics (Default 0)\nIt is not necessary to specfy anything other than the region name after Region: for a single region domain. However, if one wants to used dedicated\ncores for concurrent IO or diagnostics, the \xef\xac\x81elds under Partition need to be\nspeci\xef\xac\x81ed. NProcs should be the total number of core to be used and must\nmatch the number of cores speci\xef\xac\x81ed for MPI at run time. DedicatedIO and\nDedicatedDiag are the number of cores out of the Nprocs cores speci\xef\xac\x81ed\nfor the region that will run concurrent IO and diagnostics while the solver\nruns on the remaining cores.\n\n3.1.2\n\nMultiple regions\n\nTo run eddy for a domain with multiple regions, one eddy.yaml \xef\xac\x81le is required,\nalong with one region-name.yaml for each region. In eddy.yaml\xe2\x80\x99, the Regions\nsection must have a - Region entry for each region with the following:\nRegions:\n- Region: # Region Name (Mandatory)\nPartition:\nNProcs: # Number of cores to be used by this region\nDedicatedIO: # (Optional) Number of cores dedicated\n# to concurrent IO (Default 0)\nDedicatedDiag: # (Optional) Number of cores dedicated\n# to concurrent diagnostics (Default 0)\nEach region must have a number of cores NProcs speci\xef\xac\x81ed and the sum of\nthe NProcs entry for each region must match the number of cores speci\xef\xac\x81ed\nfor MPI at run time. The entries DedicatedIO and DedicatedDiag are\nthe number of cores out of the Nprocs cores speci\xef\xac\x81ed for the region that\nwill run concurrent IO and diagnostics while the solver runs on the remaining\ncores.\nIn addition to the entries discussed previously, eddy.yaml needs to include\na Couplings section that speci\xef\xac\x81es how the regions are coupled:\nCouplings:\n- Coupling: # specify name here\nType: # type of coupling\n\nCHAPTER 3. RUNNING EDDY\n\n12\n\n# (e.g. Riemann for NavierStokes to NavierStokes)\nRegion1: # Pair of regions to be coupled\nRegion2: #\nInterface: # name of boundary or volume\n# on which coupling takes place\nThere should be one - Coupling: entry for each coupling between two\nregions.\nNote that any boundaries that act as interfaces for a coupling should be\nincluded in the BCs section of the region-name.yaml \xef\xac\x81le with Type set to\nCoupling:\nBCs:\n- Boundary: # Interface boundary name\nType: Coupling\n\n3.1.3\n\nOptional Inputs\n\nNonlinear and linear solver parameters can be speci\xef\xac\x81ed in the NonlinearSolver section:\nNonlinearSolver:\nLinearSolver: # linear solver type (Default GMRES)\nnNonlinearIter: # Maximum number of Newton iterations\n# (Default 35)\nnGMRESInner: # Number of Linear solver iterations for\n# each Newton iteration (Default 100)\nNonlinearTol: # Absolute residual tolerance\n# (Default 1E-14)\nInitialGlobPar: # Initial values of globalization parameter\n# (Default 1.0)\nLambdaIncrease: # Rate to increase globalization parameter by\n# (Default 10.0)\nForceUpdate: # Ignore convergence status of linear solver\n# (Default False)\nCurrent linear solver options include GMRES, Conjugate Gradient (ConjugateGradient), and the Biconjugate gradient stabilized method (BiCGStab).\n\nCHAPTER 3. RUNNING EDDY\n\n13\n\nParameters for computing and outputing Volume outputs, boundary outputs, and mean \xef\xac\x81les (with time-averaged variables) can be speci\xef\xac\x81ed in the\nCheckpointControl section:\nCheckpointControl:\nWriteInterval: # Frequency that the solution at the end\n# of a time slab should be written to disk\nTimeSlab: # Boolean: true if all time slabs should saved to disk\n# (Need to save these to run tangent or adjoint)\nAverageStart: # end of averaging window in eddy time units\nAverageEnd: # end of averaging window in eddy time units\nAverageWindow: # type of averaging window:\n# Square, Hann, or HannSquare\nNote that \xe2\x80\x9ceddy time units\xe2\x80\x9d refers to the time units used by the solver and\nshould be consistent with the time step size speci\xef\xac\x81ed in eddy.yaml under\nTimeStep. If AverageStart is speci\xef\xac\x81ed, eddy will compute and save an\nhdf5 \xef\xac\x81le to disk containing the mean of the quatities speci\xef\xac\x81ed in the VolumeOutputs \xef\xac\x81eld of the Equation section in each region-name.yaml. If\nno AverageEnd is speci\xef\xac\x81ed, the mean will be a running average.\n\n3.2\n\nRunning a solver\n\nThe eddy solver executable must be run with MPI in the working directory\ncontaining the input \xef\xac\x81les and the mesh \xef\xac\x81le.\n\n3.2.1\n\nEddy Command Line Arguments\n\nBy default, eddy will run from the initial condition speci\xef\xac\x81ed in your input\n\xef\xac\x81les for the number of iterations speci\xef\xac\x81ed in eddy.yaml. These defaults can\nbe overwritten using the arguments in table 3.1.\nFor example, to run eddy on 4 cores starting from step 10 and \xef\xac\x81nishing on\nstep 20:\nmpiexec -np 4 eddy -r 10 -t 20\n\nCHAPTER 3. RUNNING EDDY\nFlag\nShort Flag\nndt\nt\nreload\nr\nadjoint\nN/A\ntangent\nN/A\n\n14\n\nDescription\nSpecify time step to run to\nSpecify time step to restart from\nRun adjoint solver\nRun tangent solver\n\nTable 3.1: Command line arguments for eddy . Note that the ndt (t) \xef\xac\x82ag\noverrides the number of iterations speci\xef\xac\x81ed in the eddy.yaml \xef\xac\x81le.\n\n3.3\n\nTest Cases\n\nThere are two main types of software testing distributed with eddy: unit tests\nwhich verify the implementation, and regression (QA) tests which examine\nalgorithm behavior, model assumptions, timing, etc.\nThe units tests are run using the command make check from the src\ndirectory.\nThe regression tests use a script system to run the jobs in parallel.\nThe cases directory contains the QA tests which are run. The directory\nutils/regression_test contains scripts which can run these cases interactively,\nor on NASA\xe2\x80\x99s pleiades supercomputer using PBS. Note that di\xef\xac\x80erent hardware and compiler optimizations are likely to lead to \xef\xac\x82oating-point di\xef\xac\x80erences in the results from these regression tests, but these machine precision\ndi\xef\xac\x80erences are not of concern.\n\nChapter 4\nPost-processing\nThis chapter describes the post-processing tools attached to eddy and how\nto extract data from your simulations. The \xef\xac\x81rst section lists all the ouputs\nand diagnostics available in eddy and how to specify them in the input \xef\xac\x81le.\nThe second section is dedicated to \xef\xac\x82ow visualization and how to transform\nthe high-order output \xef\xac\x81elds into a format that can be read by standard \xef\xac\x82ow\nvisualization tools, such as FieldView, VisIt or ParaView.\n\n4.1\n\nDiagnostics\n\nThis section describes how to extract data from the simulation and write\nthem to disk. These \xef\xac\x81les can be monitor \xef\xac\x81les (residual, volume integral,\netc.) or \xef\xac\x81les containing the full \xef\xac\x81eld (full time slab, instantaneous, or mean\ndata).\n\n4.1.1\n\nInstantaneous data, restart \xef\xac\x81les and full spacetime solution\n\nTo export the solution at a given time, you need to specify the output frequency in the region yaml \xef\xac\x81le, in the CheckPointControl section.\nIf you want to output the solution every 100 steps, it will give:\nCheckpointControl:\nWriteInterval: 100\n\n15\n\nCHAPTER 4. POST-PROCESSING\n\n16\n\nThe solution obtained at the end of the time-slab will be stored using the\nfollowing naming convention: soln_region_000100.h5, with region the name\nof the region. This \xef\xac\x81le can then be use to restart the simulation using the -r\nstep argument.\nTo export the full space-time solution (slab) at every time step, you need\nto add the following line in the eddy yaml \xef\xac\x81le:\nCheckpointControl:\nWriteInterval: 100\nTimeSlab: True\nThis for instance, will export the full slab every time step and the instantaneous solution every 100 steps. The full slab solution will be stored using\nthe following naming convention: slab_region_000001.h5.\n\n4.1.2\n\nData integrated in space and/or in time\n\nIntegral of data in space and/or in time on the volume or at a boundary\ncan be speci\xef\xac\x81ed in the region yaml \xef\xac\x81le. When available for your equation\ntype, you can specify the volume output groups you want to export using\nthe VolumeOutputs key. For instance:\nEquation:\nEquationType: NavierStokes\nReferenceConditions:\n...\nInitialConditions:\n...\nVolumeOutputs: "Primitive, ReynoldsStress, Vorticity"\nIf available for your boundary conditions, you can also export quantities of\ninterest on your boundaries by specifying them in the region.yaml \xef\xac\x81le as well,\nby using the Outputs key in the boundary block. For instance:\nBCs:\n- Boundary: wall\nType: AdiabaticWall\nOutputs: "Geometry, Flux, y+"\n\nCHAPTER 4. POST-PROCESSING\n\n17\n\nFor data integrated in time (objectives, mean \xef\xac\x81elds, etc.), a windowing\ncan be speci\xef\xac\x81ed in the eddy.yaml \xef\xac\x81le. Here is an example of input to de\xef\xac\x81ne\na window in the yaml \xef\xac\x81le:\nCheckpointControl:\nAverageStart: 10.5\nAverageEnd: 15.5\nAverageWindow: Square\nWhen no window is speci\xef\xac\x81ed, only data integrated in space will be exported.\nFor volume outputs, the temporal evolution of the integrated quantities\nwill be written to a \xef\xac\x81le region.volume, with region the name of your region.\nFor boundary outputs, the data will be exported to a \xef\xac\x81le wall.boundary,\nwhere in this case wall being the name of the boundary. For both the boundary and the volume outputs, the name of the quantities in the \xef\xac\x81le will be\nwritten in the header. As we are using a space-time \xef\xac\x81nite element method,\nthe space integral quantities are computed at every temporal Gauss points\nof each time slab (using 2Nt pionts).\nSpecifying a window in the input \xef\xac\x81le will give access to two more outputs. Firstly, a \xef\xac\x81le containing quantities integrated in time and space will\nbe created. The results are stored in a .tavg \xef\xac\x81le (e.g. region.volume.tavg,\nwall.boundary.tavg, etc.), containing one sample per time slab (corresponding at the total integral at the end of the time slab). Note that the objective\ncomputed is the integral of the quantity of interest in time, not the average.\nSecondly, the temporal average of the quantities of interest will be exported\nusing the same frequency as the solution/restart \xef\xac\x81le. The average data, both\non the volume and on the boundaries, will be stored in \xef\xac\x81les using the following name convention: mean_region_000100.h5 (here for the timestep 100).\nYou can then visualize the average data using our post-processing tools (see\nnext section).\n\n4.1.3\n\nResidual norm\n\nWhen running a case, a residual \xef\xac\x81le, called eddy.resid will systematically be\ncreated in order to check the convergence of the system. The \xef\xac\x81le is structured\nas follow:\nstep 1 time 0.1\n\nCHAPTER 4. POST-PROCESSING\n\n18\n\nouter =\n0, Rnorm = 3.5717752097e-05, ...\ngmres-iter = 0, Rnorm = 3.5717752097e-05\ngmres-iter = 1, Rnorm = 2.3685488690e-05\n...\nouter =\n1, Rnorm = 3.4586197307e-05, ...\ngmres-iter = 0, Rnorm = 3.4586197307e-05\ngmres-iter = 1, Rnorm = 1.7008026260e-05\n...\nstep 2 time 0.2\n...\nThe outer lines represent the non-linear residual, the gmres-iter the linear\nresidual. Some tools are available in the eddy/utils directory to process the\nresidual \xef\xac\x81le. For instance, the gnuplot script liveplot.gnu allows to plot in\nreal time the evolution of the residual.\n\n4.2\n\nFlow visualization\n\nTo visualize a \xef\xac\x81eld, two utilities are available. The \xef\xac\x81rst one is called plotter\nand will convert a restart \xef\xac\x81le or a mean \xef\xac\x81le into the OVERFLOW \xef\xac\x81le format,\nprovided that the case has a structured multi-block oracle. The second tool,\nplotvisit, allows you to connect to a visit client, even remotely. You can then\ndirectly visualize the data on the supercomputer without downloading the\n\xef\xac\x81les. Currently plotvisit is exceedingly slow for cutting planes, hence the\ncontinued support for the legacy plotter tool.\n\n4.2.1\n\nplotter\n\nThe plotter tool is part of the eddy executables. The options to run\nUsage:\nplotter [OPTION?] Plotter\nHelp Options:\n-h, --help\n\nShow help options\n\nCHAPTER 4. POST-PROCESSING\nApplication Options:\n-s, --SaveFiles\n-r, --reload\n-m, --mean\n-a, --adjoint\n--output\n--dealias\n\n19\n\nSave window to outputfile when timestepping\nreload step (-1 for outputting mesh only)\nprocess mean flowfied\nload adjoint if it exists\noutput you desire to save in p3d format\noutput you desire to save in p3d format\n\nThe \xe2\x80\x93output allows you to specify which type output group you want to export. Typically, for Navier-Stokes, the Conservative output group is speci\xef\xac\x81ed\nand then the other quantities are reconstructed in FieldView or Paraview.\n\n4.2.2\n\nplotvisit\n\nUsage:\nplotvisit [OPTION?] PlotVisit\nHelp Options:\n-h, --help\n\nShow help options\n\nApplication Options:\n-s, --SaveFiles\n-r, --reload\n-f, --frequency\n-m, --mean\n-a, --adjoint\n-w, --wait\n\nSave window to outputfile when timestepping\nreload step (-1 for outputting mesh only)\nfrequency of outputs\nprocess mean flowfied\nload adjoint if it exists\nwait 10 seconds in order to attach debugger\n\nChapter 5\nAvailable solvers in eddy\nThis chapter brie\xef\xac\x82y describes available solvers and their inputs in eddy .\n\n5.1\n\nAdvection-di\xef\xac\x80usion\n\nAn advection-di\xef\xac\x80usion solver using a space\xe2\x80\x93time DG and CG spectral\xe2\x80\x93element\nmethod has been implemented.\nThe de\xef\xac\x81nitions of input parameters are as followed:\nEquation:\nEquationType: #Available: AdvectionDiffusion_CG, AdvectionDiffusion_DG\nReferenceConditions:\nU-Velocity: #Spatial and temporal expression of velocity in x-direction.\nV-Velocity: #Spatial and temporal expression of velocity in y-direction.\nW-Velocity: #Spatial and temporal expression of velocity in z-direction.\nViscosity: #Value of viscosity\nInitialConditions: #Initial condition for the simulation.\nInitialSolution: #Spatial expression of initial solution. Default: 0.0\nVolumeOutputs: #Volume outputs. Available: State, Gradient, Error\nBCs:\n- Boundary: #Name of the boundary. Set up at the mesh generation process.\nType: #Boundary condition. Available: Dirichlet, Neumann, Periodic.\n#Default: Periodic\nOutputs: #Outputs of the boundary. Available: Geometry, Flux, BCState.\nDe\xef\xac\x81nitions and inputs of available boundary conditions are as followed:\n20\n\nCHAPTER 5. AVAILABLE SOLVERS IN EDDY\n\n21\n\n1. Dirichlet: It imposes solution at the boundary. Inputs are:\nState: #Spatial and temporal expression of the solution.\n#Default: 0.0\n2. Neumann: It imposes \xef\xac\x82ux at the boundary. Inputs are:\nFlux: #Spatial and temporal expression of the flux.\n#Default: 0.0\n\n5.2\n\nNavier-Stokes\n\nThe conservative form of compressible Navier-Stokes equations are solved using a space\xe2\x80\x93time DG spectral\xe2\x80\x93element method. By default, entropy\xe2\x80\x93variable\nformulation is used to satisfy the second law of thermodynamics (under exact\nintegration) discretely. A conservative\xe2\x80\x93variable formulation is also available,\nbut not all the functionality has been implemented. By default, inviscid\n\xef\xac\x82uxes are computed using the entropy\xe2\x80\x93stable approach of Ismail and Roe,\nand the viscous \xef\xac\x82uxes are computed using an interior penalty method following Bassi and Rebay. Roe \xef\xac\x82ux, Lax\xe2\x80\x93Friedrichs \xef\xac\x82ux, Central\xe2\x80\x93di\xef\xac\x80erence \xef\xac\x82ux\netc. are also available. Further details can be found at [3].\nThe de\xef\xac\x81nitions of input parameters are as followed:\nEquation:\nEquationType: NavierStokes\nReferenceConditions:\nDimension: #Dimension of the problem (2 or 3 dimensional).\n#Default: 3.\nVelocity: # Reference velocity. Ma_{ref} is computed using these.\nUref: #x-component of reference velocity\nVref: #y-component of reference velocity\nWref: #z-component of reference velocity\nReynolds: #Reynolds number per unit length (Ma_{ref}/\\nu).\n#Required to compute kinematic viscosity.\n#For inviscid flow set it to 0.\nPrandtl: #Prandtl number. Default: 0.71\nGamma: #Specific heat ratio. Default: 1.4\nTemperature: #Reference temperature.\n\nCHAPTER 5. AVAILABLE SOLVERS IN EDDY\n\n22\n\n#Required to compute Sutherland Constant. Default: 288.\nTemperatureUnits: #Unit of Reference Temperature. Default: Kelvin\nVariableType: #Type of variable used to solve NS.\n#Available: Entropy, Conservative. Default: Entropy.\nInvJumpFluxType: #Type of inviscid flux.\n#Available: IsmailRoe, IsmailRoeNoDiss,LaxFriedrichs,\n#Central,Roe,DSMV_1,DSMV_3,DSMV_5.\n#Note all the fluxes are not available for Conservative variable\n# Default: IsmailRoe.\nSourceFunction: #Volumetric source terms.\n#Available: Channel, Poiseuille. Default: None.\nRe_tau: #Turbulent Reynolds number. Needed if SourceFuction: Channel.\nInitialConditions: #Initial condition for the simulation.\n#Note that the function purser can handle simple function.\n#For complicated functions use InitialSolution.\nDensity: #Spatial profile for density. Default: 1.0\nXVel: #Spatial profile for x-velocity. Default: 1.0\nYVel: #Spatial profile for x-velocity. Default: 0.0\nZVel: #Spatial profile for x-velocity. Default: 0.0\nPressure: #Spatial profile for pressure. Default: 1.0/1.4\nInitialSolution: #Hardcoded initial condition for specific profiles.\n# Available: Channel, Jet.\nJetDiameter: #Diameter of the jet at the inlet.\n#See "Turbulence" by Pope, Section 5.1\nJetVelocity: #Centerline velocity of jet at the inlet.\n#See "Turbulence" by Pope, Section 5.1\nJetOriginX: #Self-similarity origin of jet in x-direction.\n#See "Turbulence" by Pope, Section 5.1\nVolumeOutputWeight: #Weight function on the volume. Default: 1.0\nVolumeOutputs: #Volume outputs. Available: Geometry, Conservative,\n#Entropy, Primitive, HITBudget, Isentropic, Vorticity, SecondMoment,\n#ThirdMoment, ReynoldsStress, VelocityGradients, Gradients1,\n#Gradients2, PressureStrain, DissipationTerms, PressureTransport,\n#KineticEnergy, AdjointL2Norm\nTemporalOutputWeight: #Weight function on the volume. Default: 1.0\nTemporalOutputs: #Temporal outputs. Available: Geometry,\n#Conservative, Entropy, Primitive, KineticEnergy\nOutputXdir: #x-component of normal vector for Force output\n\nCHAPTER 5. AVAILABLE SOLVERS IN EDDY\n\n23\n\n#computation of AdiabaticWall boundary condition. Default: 0.0\nOutputYdir: #y-component of normal vector for Force output\n#computation of AdiabaticWall boundary condition. Default: 0.0\nOutputZdir: #z-component of normal vector for Force output\n#computation of AdiabaticWall boundary condition. Default: 0.0\nBCs:\n- Boundary: #Name of the boundary. Set up at the mesh generation process.\nType: #Boundary condition. Available: FullState, FullStateRoundJet,\n#SlipWall, AdiabaticWall, IsothermalWall, PressureOutflow,\n#Riemann, RiemannRoundJet, Coupling, WallModel,\n#Periodic. Default: Periodic\nOutputs: #Outputs of the boundary. Available: Geometry,\n#Flux, y+, Force, FrictionForce, ForceVector for\n#AdiabaticWall and WallModel.\nDe\xef\xac\x81nitions and inputs of available boundary conditions are as followed:\n1. FullState: This uses numerical Riemann formulation to compute the\n\xef\xac\x82uxes at the freestream or in\xef\xac\x82ow or out\xef\xac\x82ow boundaries. Required\ninputs are:\nDensity: #Density at the boundary. Default: 1.0\nUref: # x-velocity at the boundary.\n#Default: Uref from ReferenceConditions.\nVref: # y-velocity at the boundary.\n#Default: Vref from ReferenceConditions.\nWref: # z-velocity at the boundary.\n#Default: Wref from ReferenceConditions.\nPressure: # pressure at the boundary.\n#Default: 1.0/Gamma\n2. Riemann: This uses Riemann invariant formulation to compute the\n\xef\xac\x82uxes at the freestream or in\xef\xac\x82ow or out\xef\xac\x82ow boundaries. Required\ninputs are:\nDensity: #Density at the boundary. Default: 1.0\nUref: # x-velocity at the boundary.\n#Default: Uref from ReferenceConditions.\nVref: # x-velocity at the boundary.\n\nCHAPTER 5. AVAILABLE SOLVERS IN EDDY\n\n24\n\n#Default: Vref from ReferenceConditions.\nWref: # x-velocity at the boundary.\n#Default: Wref from ReferenceConditions.\nPressure: # pressure at the boundary.\n#Default: 1.0/Gamma\n3. FullStateRoundJet: This is similar to the FullState boundary condition\nwith the jet pro\xef\xac\x81les. Required inputs are:\nDensity: #Density at the boundary. Default: 1.0\nJetOriginX: #Self-similarity origin of jet in x-direction.\n#Default: 1.0.\nJetVelocity: #Jet centerline velocity at the boundary.\n#Default: Uref from ReferenceConditions.\nJetDiameter: #Jet diameter at the boundary. Default:1.0.\nPressure: #pressure at the boundary. Default: 1.0/Gamma\nIsInlet: #Boolean to flag to use similarity solution (FALSE)\n#or tanh profile (TRUE).\nEpsilon: #Parameter for tanh profile\n4. PressureOut\xef\xac\x82ow: This uses Riemann invariant formulation and enforce\nprescribed pressure to compute the \xef\xac\x82uxes at the out\xef\xac\x82ow boundaries.\nRequired inputs are:\nDensity: #Density at the boundary. Default: 1.0\nUref: # x-velocity at the boundary.\n#Default: Uref from ReferenceConditions.\nVref: # y-velocity at the boundary.\n#Default: Vref from ReferenceConditions.\nWref: # z-velocity at the boundary.\n#Default: Wref from ReferenceConditions.\nPressure: # pressure at the boundary. Default: 1.0/Gamma\n5. SlipWall: This enforces slip wall boundary condition with a ramp. Required inputs are:\nRampTime: #Timescale of the ramp. Default: 0.0 (means don\xe2\x80\x99t use ramp)\nFreeStreamU: # x-velocity at the boundary.\n\nCHAPTER 5. AVAILABLE SOLVERS IN EDDY\n\n25\n\n#Default: Uref from ReferenceConditions.\nFreeStreamV: # y-velocity at the boundary.\n#Default: Vref from ReferenceConditions.\nFreeStreamW: # z-velocity at the boundary.\n#Default: Wref from ReferenceConditions.\n6. AdiabaticWall: This enforces adiabatic wall boundary condition. Required inputs are:\nHeatFlux: #Normalized wall heat flux. Default: 0.0\n7. IsothermalWall: This enforces isothermal wall boundary condition. Required inputs are:\nWallTemp: #Normalized wall temperature. Default: 1.0\n\n5.2.1\n\nShock-capturing\n\nAn arti\xef\xac\x81cial viscosity method with a shock sensor for DG spectral\xe2\x80\x93element\nmethod is currently getting implemented. Details of the shock capturing\nscheme can be found at [?].\n\n5.2.2\n\nVariational Multiscale Modeling (VMM)\n\nVariational Multiscale Model is a reformulation of the Large Eddy Simulation (LES) methods, in which resolved and unresolved scales are computed\nby Galerkin projection operation instead of \xef\xac\x81ltering operation. To apply the\nmethod in general complex \xef\xac\x82ows a dynamic procedure is developed following\nGermano procedure from classical LES. The dynamic VMM approach for entropy stable DG spectral\xe2\x80\x93element method is currently getting implemented.\nDetails of the VMM approach can be found at [?].\n\n5.2.3\n\nPerfectly Matching Layer (PML)\n\nPerfectly Matched Layer method solves another set of auxiliary equations to\nensure minimal spurious re\xef\xac\x82ections from the in\xef\xac\x82ow and out\xef\xac\x82ow boundary\nconditions. Details of the the PML technique can be found at [6].\nSince PML inherits from Navier-Stokes, its inputs are same as NavierStokes with some additions. These additional inputs are de\xef\xac\x81ned as follows:\n\nCHAPTER 5. AVAILABLE SOLVERS IN EDDY\n\n26\n\nEquation:\nEquationType: NavierStokes_PML\nPML type: Type of PML to identify damping direction.\n#Available: x-pml, y-pml, z-pml, x-radial-pml.\n#Default: x-pml.\nMa_x: Mean Mach number in the x-direction over the PML region.\nMa_y: Mean Mach number in the y-direction over the PML region.\nMa_z: Mean Mach number in the z-direction over the PML region.\n...rest are same as Navier-Stokes\n\n5.3\n\nWall model\n\nAn equilibrium wall model based on Reichardt velocity pro\xef\xac\x81le has been implemented using a space\xe2\x80\x93time DG spectral\xe2\x80\x93element method. Details can be\nfound at [11].\nDe\xef\xac\x81nitions of the input parameters are as followed:\nEquation:\nEquationType: WallModel_Reichardt\nInitialState: #Initial guess for the friction velocity\nVolumeOutputs: #Volume outputs. Available: Geometry, Friction.\n\n5.4\n\nLinear Elasticity\n\nA linear elasticity approach has been implemented using a space\xe2\x80\x93time CG\nspectral\xe2\x80\x93element method for moving domain, FSI and wall roughness applications. Details of the linear elasticity technique can be found at [12].\nDe\xef\xac\x81nitions of the input parameters are as followed:\nEquation:\nEquationType: Elasticity\nReferenceConditions:\nYoungModulus: #Young modulus. Default: 10.0\nPoissonRatio: #Poissom ratio. Default: 0.3\nScaleByJacobian: #To scale Young modulus by Jacobian.\n#Available: TRUE, FALSE\nInitialConditions: #Initial condition for the simulation.\n\nCHAPTER 5. AVAILABLE SOLVERS IN EDDY\n\n27\n\nInitialDisplacement-X: #Spatial expression of initial displacement\n#in x-direction. Default: 0.0\nInitialDisplacement-Y: #Spatial expression of initial displacement\n#in y-direction. Default: 0.0\nInitialDisplacement-Z: #Spatial expression of initial displacement\n#in z-direction. Default: 0.0\nBCs:\n- Boundary: #Name of the boundary. Set up at the mesh generation process.\nType: #Boundary condition. Available: SpecifiedDisplacement,\n#SpecifiedNormalDisplacement, SpecifiedNormalDisplacementOnly,\n#SpecifiedTraction, Periodic. Default: Periodic.\nOutputs: #Outputs of the boundary. Available: Geometry, Displace,\n#Displace2 for SpecifiedNormalDisplacement,\n#SpecifiedNormalDisplacementOnly.\nDe\xef\xac\x81nitions and inputs of available boundary conditions are as followed:\n1. Speci\xef\xac\x81edDisplacement: It enforces boundary displacement strongly.\nInputs are:\nX-Displacement: #Spatial and temporal expression for displacement\n#in x-direction. Default: 0.0\nY-Displacement: #Spatial and temporal expression for displacement\n#in y-direction. Default: 0.0\nZ-Displacement: #Spatial and temporal expression for displacement\n#in z-direction. Default: 0.0\n2. Speci\xef\xac\x81edNormalDisplacement: It enforces boundary normal displacement weekly. Tangential displacements are not enforced. Inputs are:\nNormalDisplacement: #Spatial and temporal expression for the\n#normal displacement. Default: 0.0\n3. Speci\xef\xac\x81edNormalDisplacementOnly: It enforces boundary normal displacement weekly. Tangential displacements are enforced to be zero in\nweek sense. Inputs are:\nNormalDisplacement: #Spatial and temporal expression for the\n#normal displacement. Default: 0.0\n\nCHAPTER 5. AVAILABLE SOLVERS IN EDDY\n\n28\n\n4. Speci\xef\xac\x81edTraction: It enforces traction force at the boundary weekly.\nInputs are:\nX-Traction: #Spatial and temporal expression for traction in\n#x-direction. Default: 0.0\nY-Traction: #Spatial and temporal expression for traction in\n#y-direction. Default: 0.0\nZ-Traction: #Spatial and temporal expression for traction in\n#z-direction. Default: 0.0\n\n5.5\n\nLinear Shell\n\nA structural solver based on linear-shell model has been implemented using\na C 1 \xe2\x80\x93DG spectral\xe2\x80\x93element method. Details of the shell model can be found\nat [13].\nDe\xef\xac\x81nitions of the input parameters are as followed:\nEquation:\nEquationType: LinearShell\nMaterialDensity: #Density of the material. Default: 1.25\nYoungModulus: #Young modulus of the material. Default: 178906.23535\nPoissonRatio: #Poisson ratio of the material. Default: 0.3\nThickness: #Thickness of the material. Default: 0.12556\nInitialConditions: #Initial condition for the simulation.\nX-Velocity: #Spatial expression of velocity in x-direction.\n#Default: 0.0\nY-Velocity: #Spatial expression of velocity in y-direction.\n#Default: 0.0\nZ-Velocity: #Spatial expression of velocity in z-direction.\n#Default: 0.0\nX-Displacement: #Spatial expression of displacement in x-direction.\n#Default: 0.0\nY-Displacement: #Spatial expression of displacement in y-direction.\n#Default: 0.0\nZ-Displacement: #Spatial expression of displacement in z-direction.\n#Default: 0.0\nVolumeForcing: #Volumetric force\nX-Force: #Spatial and temporal expression of force in x-direction.\n\nCHAPTER 5. AVAILABLE SOLVERS IN EDDY\n\n29\n\n#Default: 0.0\nY-Force: #Spatial and temporal expression of force in y-direction.\n#Default: 0.0\nZ-Force: #Spatial and temporal expression of force in z-direction.\n#Default: 0.0\nVolumeOutputs: #Volume outputs. Available: Displacement,\n#Membrane, Bending, ShellNormal, Error, Loading\nBCs:\n- Boundary: #Name of the boundary. Set up at the mesh generation process.\nType: #Boundary condition. Available: SpecifiedDisplacement,\n#SpecifiedTraction, ClampedEnd, Periodic. Default: Periodic\nOutputs: #Outputs of the boundary. Available: Displacement.\nDe\xef\xac\x81nitions and inputs of available boundary conditions are as followed:\n1. Speci\xef\xac\x81edDisplacement: It imposes displacement at the boundary. Inputs are:\nX-Displacement: #Spatial and temporal expression for displacement\n#in x-direction. Default: 0.0\nY-Displacement: #Spatial and temporal expression for displacement\n#in y-direction. Default: 0.0\nZ-Displacement: #Spatial and temporal expression for displacement\n#in z-direction. Default: 0.0\n2. Speci\xef\xac\x81edTraction: It imposes traction force at the boundary. Inputs\nare:\nX-Traction: #Spatial\n#in x-direction.\nY-Traction: #Spatial\n#in y-direction.\nZ-Traction: #Spatial\n#in z-direction.\n3. ClampedEnd:\n\nand temporal expression for traction\nDefault: 0.0\nand temporal expression for traction\nDefault: 0.0\nand temporal expression for traction\nDefault: 0.0\n\nCHAPTER 5. AVAILABLE SOLVERS IN EDDY\n\n5.6\n\n30\n\n6DoF\n\nA six-dof solver has been implemented using a space\xe2\x80\x93time DG spectral\xe2\x80\x93\nelement method.\nDe\xef\xac\x81nitions of the input parameters are as followed:\nEquation:\nEquationType: SixDof\nReferenceConditions:\nMass: #Mass. Default: 1.0\nX-MomentofInertia: #x-component of moment of inertia. Default: 1.0\nY-MomentofInertia: #y-component of moment of inertia. Default: 10.0\nZ-MomentofInertia: #z-component of moment of inertia. Default: 100.0\nInitialConditions: #Initial condition for the simulation.\nX-Position: #x-position. Default: 0.0\nY-Position: #y-position. Default: 0.0\nZ-Position: #z-position. Default: 0.0\nX-Velocity: #x-velocity. Default: 0.0\nY-Velocity: #y-velocity. Default: 0.0\nZ-Velocity: #z-velocity. Default: 0.0\nX-AngularVelocity: #x-angularvelocity. Default: 0.0\nY-AngularVelocity: #y-angularvelocity. Default: 0.0\nZ-AngularVelocity: #z-angularvelocity. Default: 0.0\nX-Axis: #x-axis. Default: 0.0\nY-Axis: #y-axis. Default: 0.0\nZ-Axis: #z-axis. Default: 1.0\nAngle: #angle. Default: 0.0\nVolumeOutputs: #Volume outputs. Available: State, Error\n\nBibliography\n[1] L. Diosady and S. Murman, \xe2\x80\x9cDesign of a Variational Multiscale Method\nfor Turbulent Compressible Flows,\xe2\x80\x9d AIAA Paper 2013-2870, June 2013.\n[2] L. Diosady and S. Murman, \xe2\x80\x9cDNS of Flows over Periodic Hills using a\nDiscontinuous Galerkin Spectral-Element Method,\xe2\x80\x9d AIAA Paper 20142784, June 2014.\n[3] L. Diosady and S. Murman, \xe2\x80\x9cHigher-Order Methods for Compressible\nTurbulent Flows Using Entropy Variables,\xe2\x80\x9d AIAA Paper 2105-0294,\n2015.\n[4] Diosady, L.T. and Murman, S.M., \xe2\x80\x9cGeneral element shapes within a\ntensor-product higher-order space-time discontinuous-Galerkin formulation,\xe2\x80\x9d AIAA Paper 2015-3044, 2015.\n[5] Ceze, M., Diosady, L.T., and Murman, S.M., \xe2\x80\x9cDevelopment of a HighOrder Space-Time Matrix-Free Adjoint Solver,\xe2\x80\x9d AIAA Paper 2016-0833,\n2016.\n[6] Garai, A., Diosady, L.T., Murman, S.M., and Madavan, N., \xe2\x80\x9cDevelopment of a Perfectly Matched Layer Technique for a DiscontinuousGalerkin Spectral-Element Method,\xe2\x80\x9d AIAA Paper 2016-1338, 2016.\n[7] Murman, S.M., Diosady, L.T., Garai, A., and Ceze, M., \xe2\x80\x9cA Space-Time\nDiscontinuous-Galerkin Approach for Separated Flows,\xe2\x80\x9d AIAA Paper\n2016-1059, 2016.\n[8] Garai, A., Diosady, L.T., Murman, S.M., and Madavan, N., \xe2\x80\x9cDNS of\nFlow in a Low-Pressure Turbine Cascade with Elevated In\xef\xac\x82ow Turbulence Using a Discontinuous-Galerkin Spectral-Element Method,\xe2\x80\x9d in\nProceedings of ASME Turbo Expo 2016, no. GT2016-56700, 2016.\n31\n\nBIBLIOGRAPHY\n\n32\n\n[9] Diosady, L.T. and Murman, S.M., \xe2\x80\x9cTensor-Product Preconditioners for\nHigher-Order Space-Time Discontinuous Galerkin Methods,\xe2\x80\x9d Journal of\nComputational Physics, vol. 330, no. 1, pp. 296\xe2\x80\x93318, 2017.\n[10] Carton de Wiart, C., Diosady, L.T., Garai, A., Burgess, N.K., Blonigan,\nP., Ekelschot, D., and Murman, S.M., \xe2\x80\x9cDesign of a modular monolithic\nimplicit solver for multi-physics applications,\xe2\x80\x9d AIAA Paper 2018-1400,\n2018.\n[11] Carton de Wiart, C., and Murman, S.M., \xe2\x80\x9cAssessment of Wallmodeled LES Strategies Within a Discontinuous-Galerkin Spectralelement Framework,\xe2\x80\x9d AIAA Paper 2017-1223, 2017.\n[12] Diosady, L.T., and Murman, S.M., \xe2\x80\x9cA linear-elasticity solver for higherorder space-time mesh deformation,\xe2\x80\x9d AIAA Paper 2018-0919, 2018.\n[13] Burgess. N. K., Diosady, L.T., and Murman, S.M., \xe2\x80\x9cA C 1 -discontinuousGalerkin Spectral-element Shell Structural Solver,\xe2\x80\x9d AIAA Paper 20173727, 2017.\n\n'