b'PHYSICAL INTELLIGENT SENSORS\nPavan Bandhil, Sanjeevi Chitikeshi and Ajay Mahajan\xe2\x99\xa6\nDepartment of Mechanical Engineering and Energy Processes\nSouthern Illinois University Carbondale\nCarbondale, IL 62901\nFernando Figueroa\nNASA\nJohn C Stennis Space Center\nTechnology Development and Transfer\nCode HA30, Bldg. 8306\nStennis Space Center, Mississippi 39529-6000\nAbstract\nThis paper proposes the development of intelligent sensors as part of an integrated systems\napproach, i.e. one treats the sensors as a complete system with its own sensing hardware (the\ntraditional sensor), A/D converters, processing and storage capabilities, software drivers, selfassessment algorithms, communication protocols and evolutionary methodologies that allow\nthem to get better with time. Under a project being undertaken at the NASA\xe2\x80\x99s Stennis Space\nCenter, an integrated framework is being developed for the intelligent monitoring of smart\nelements. These smart elements can be sensors, actuators or other devices. The immediate\napplication is the monitoring of the rocket test stands, but the technology should be generally\napplicable to the Integrated Systems Health Monitoring (ISHM) vision. This paper outlines\nprogress made in the development of intelligent sensors by describing the work done till date on\nPhysical Intelligent Sensors (PIS). The PIS discussed here consists of a thermocouple used to\nread temperature in an analog form which is then converted into digital values. A\nmicroprocessor collects the sensor readings and runs numerous embedded event detection\nroutines on the collected data and if any event is detected, it is reported, stored and sent to a\nremote system through an Ethernet connection. Hence the output of the PIS is data coupled with\nconfidence factor in the reliability of the data which leads to information on the health of the\nsensor at all times. All protocols are consistent with IEEE 1451.X standards. This work lays the\nfoundation for the next generation of smart devices that have embedded intelligence for\ndistributed decision making capabilities.\n1. Introduction\nRecent interest in smart sensor networks, and developments in technologies such as MEMS,\nmicroelectronics, nanotechnology, communication networks and distributed computing, have\nencouraged interest in the development of Integrated System Health Monitoring (ISHM)\nsystems. Hence the need for intelligent sensors as a critical component for Integrated System\nHealth Management (ISHM) is well recognized by now. An ISHM system is an example of an\nintelligent sensing system application. The purpose of such a system is to detect and measure\ncertain quantities, and to use the information and knowledge obtained from the measured data,\n\xe2\x99\xa6\n\nCorresponding author\n\n1\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\nand any prior knowledge, to make intelligent, forward-looking decisions and initiate actions.\nEven the definition of what constitutes an intelligent sensor (or smart sensor) is well\ndocumented and stems from an intuitive desire to get the best quality measurement data that\nforms the basis of any complex health monitoring and/or management system. If the sensors, i.e.\nthe elements closest to the measurand, are unreliable then the whole system works with a\ntremendous handicap. Hence, there has always been a desire to distribute intelligence down to\nthe sensor level, and give it the ability to assess its own health thereby improving the confidence\nin the quality of the data at all times.\nSensors are a critical component of complex and sophisticated systems of today\' technology\ns\nand their role is ever evolving in the smart systems of tomorrow. General theories to treat\nintelligent sensor systems have been reported in the literature since the mid 80\xe2\x80\x99s [1-3]. Parallel\nwork was done in industry where sensors have been developed with built in expert systems and\nlook-up tables [4, 5]. These sensors, called smart sensors, were described as simple sensing\ndevices with built-in intelligence. This intelligence included simple decision-making\ncapabilities, data processing, conflict resolution, communications, or distribution of information.\nFigueroa and Mahajan [6] defined an autonomous sensor as a sensor that had an expert system\nwith extensive qualitative tools that allowed it to evolve with time into a better and more\nefficient system. It differed, at least in philosophy, from the previous models by having a\ndynamic knowledge base as well as embedded qualitative and analytical functions that gave it a\nhigher degree of operational independence, self-sufficiency and robustness. The underlying\nphilosophy behind the autonomous sensor was probably closest to Henderson\' [7,8] logical\ns\nsensor models that also endeavored to give more problem-solving capabilities to the sensor, but\nstill stayed away from any type of dynamic models.\nDeCoste [9] described a system, called DATMI that dynamically maintained a concise\nrepresentation of the space of local and global interpretations across time that were consistent\nwith the observations. Each of the observations was obtained from a sensor, and therefore the\nnumber of observations was equal to the number of sensors in the control system. The truth of\nthe observations and the validity of the sensors were obtained by cross-referencing with possible\nand impossible states of the system. DATMI was designed for a complete control system\ncomprising of multiple sensors and actuators, and was the inspiration for the formalized theory\ncalled DATA-SIMLAMT (Dynamic Across Time Autonomous - Sensing, Interpretation, Model\nLearning and Maintenance Theory) which was designed for and is applicable to each sensor in\nthe control system [10].\nThe key requirements of an advanced health monitoring system are that it should be able to\ndetect damaging events, characterize the nature, extent and seriousness of the damage, and\nrespond intelligently on whatever timescale is required, either to mitigate the effects of the\ndamage or to effect its repair. These requirements have been discussed in some detail in earlier\nreports by Abbott [11-12]. According to Price, et al [13] a pure monitoring system is expected\nonly to report damage rather than to formulate a response, but it is preferable that the ultimate\nobjective of responding to damage be borne in mind from the outset. The statement of key\nrequirements serves to sub-divide the problem as follows:\ni) Detection of damaging events: This requires some knowledge of the environment in\nwhich the system will be operating, the threats it will face, and the development of\nsensors and a strategy for using them to detect damage events well within the time\n\n2\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\nii)\n\niii)\n\niv)\nv)\n\nvi)\n\nrequired for the system to respond. For events that require a rapid response, the best\nsolution will often involve the use of passive, embedded sensors.\nCharacterization of the damage: This may or may not be a separate process from event\ndetection. It may use different sensors, or the same sensors may be used in a different\nway. It is more likely to employ active sensors, which may be embedded in the structure\nor could be mobile and autonomous.\nPrioritization of the seriousness of the damage: The first step of an intelligent response is\nto determine the seriousness of the damage in terms of its ability to compromise the\nmission of the vehicle, and consequently to determine the urgency (both relative and\nabsolute) with which a response is required.\nIdentification of the cause of the damage: An intelligent system should be able to utilize\ndata from a vast array of sensors to deduce information about the events that have\noccurred and the resulting damage, on a whole-of-vehicle basis.\nFormulation of the response: The nature of the response will depend on a number of\nfactors such as the range of possible response mechanisms, the nature and severity of the\ndamage, the available response time, etc. A response may consist of a sequence of\nactions. Major damage may demand an immediate \xe2\x80\x9cpanic response\xe2\x80\x9d, such as the rapid\nisolation of a whole section of the vehicle, followed by a more considered damage\nevaluation and repair strategy.\nExecution of the response: In addition to repair, a holistic response may involve changes\nto the flight or operational characteristics of the vehicle, either to mitigate the effects of\nthe damage or to assist in the avoidance of further damage.\n\nThe concept of PIS is nearly the same as described above [13] which states that it is most\nimportant to recognize that the purpose of a health monitoring system is to detect damage, so it\nmust be able to function effectively in the presence of the damage. It should also be capable of\ndistinguishing between (inevitable) failures of the system itself and damage to the vehicle\nstructure. It must therefore be robust, adaptive, flexible, re-configurable and self-diagnosing.\nThese requirements have led to the adoption of an approach based on a multiagent system\n(MAS) that consists of modular units that may be referred to as cells. These cells will not only\nform the physical structure of a vehicle, but will also have sensing, processing and\ncommunications capabilities.\nThe algorithms which run in the proposed physical intelligent sensors (PIS) are based upon the\nconcept given by Maul [14]. The techniques published in [15-17] are also helpful in learning the\nimplementation of the algorithms and the fundamental PIS structure. Some work has been done\non the PIS to detect a single fault but there was no provision to detect multiple faults [18] hence\nthis paper proposes to implement several event detection algorithms which can detect various\nkinds of faults on a sensor. In recent years it can be seen there is a large demand for integrated\nsystem health management systems (ISHM) [19-23] with applications in various fields like\nmonitoring the structural health, nuclear power industry, ship harbor, furnace, turbine engine,\nthermal plants, etc.\nThis paper proposes the development of intelligent sensors as an integrated system approach.\nOver the years some work has been done in this area, but most of the work has been for\ncustomized applications. It is certainly now time to think of generic models for such types of\nsensors that can be quickly fitted in to any application. Under a project being undertaken at the\nStennis Space Center (SSC), an integrated framework is being developed for the intelligent\n\n3\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\nmonitoring of smart elements. These smart elements can be sensors, actuators or other devices.\nThe immediate application is the monitoring of the rocket test stands, but the technology should\nbe generally applicable to the ISHM vision. According to NASA as shown in Figure 1, from a\nperspective of intelligence or autonomy, the ISHM system should provide the following\nfunctions:\n\xe2\x80\xa2 System Monitoring\n\xe2\x80\xa2 Data Qualification\n\xe2\x80\xa2 Information Extraction\n\xe2\x80\xa2 Classification, Isolation and Diagnosis\n\xe2\x80\xa2 Mission Projection and Prognosis\n\xe2\x80\xa2 Communication and Information Transfer\n\xe2\x80\xa2 System Recovery and Response\n\nHM Processing\nRequirements\n\nHM\nProcessing\nRequirements\n\nMonitored System\nDesign\n\nHealth Management\nSystem\n\n1. Scalability/Evolution\n2. System Robustness\n3. False Alarms/Missed\ndetection\n\n1. Vehicle Interface\n2. External Information\n\nISHM Requirements\n\nHM\nInterface\nRequirements\n\nHM\nPerformance\nRequirements\n\n1. Available CPU and Memory\n2. Communication and storage\n3. Required Response time\n\n1. System definition\n2. Fault Detection and isolation\n3. Available remediation\n\nSensor\nselection and\ndefinition\n\nHM Higher\nLevel Information\n\nFigure 1: Overall structure of health management system\nThis paper also outlines progress made in the development of intelligent sensors by describing\nthe following:\n\xe2\x80\xa2 A strategy for using a qualitative approach to process data and recognize problems in the data\nand/or in the health of the sensor itself.\n\xe2\x80\xa2 The introduction of a condition assessment sheet for each sensor that functions as a report\ncard, and allows the system to make critical decisions during or after a run.\n\xe2\x80\xa2 The development of an integrated environment to run these intelligent sensors monitoring\nreal processes.\n\n4\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\n2. Overall ISHM Structure\n\nThe governing Intelligent Systems Health Monitoring (ISHM) vision for an entire process needs\nto be in an environment conducive to embedded intelligence and decision making. Such an\noverall system for the a rocket test stand is being designed at Stennis Space Center, using the G2\nenvironment (from Gensym, Inc.) but the scope of this work resides solely on the single sensor\nlevel. All of the external systems connect to G2 through a bridging program written in C\\C++.\nThe central system collects the data from the sensors and external programs and then applies it to\nthe model of the system contained in its knowledgebase. Since this paper deals primarily in the\nsingle sensor realm a detailed discussion of the overall system will not be given.\nDifferent types of sensors comprising a dynamic system will be instantiated as smart sensors\nthat will fit within an object oriented integrated framework that uses embedded knowledge to\nmonitor all the elements within the system. The concept of smart sensors may be extended to\nother types of elements as well as processes. Each element will have a specification sheet (SS)\nthat will be fitted in to IEEE 1451.X standardized Transducer Electronic Data Sheets (TEDS),\nand a new entity called the Condition Assessment Sheet (CAS) that will be fitted into the Health\nElectronic Data Sheets (HEDS). The CAS shows the condition (or the health) of the element\nand its confidence in its own working for the duration of the operation. This \xe2\x80\x9chealth\xe2\x80\x9d\ninformation is provided over and beyond the numeric output of the sensor. These smart elements\nwill have decision making capability derived from embedded knowledge bases and their own\nintrinsic specification sheets.\nNetworks of elements with autonomous character will cooperate to perform as a system\ncomposed of a collection of processes, each managing a collection of sensors, actuators, and\nother components. The emphasis is on knowledge bases that support each element of the\nhierarchy and the relationships between them. A key feature of the proposed framework is the\nevaluation of condition for all elements performed both autonomously and using feedback from\nother higher-order elements. The proposed effort will develop and validate a hierarchical\nintelligent architecture composed of a system, processes, and sensors. Each element, as\nmentioned before, will be a smart or intelligent entity, where they possess the capacity to\nperform actions, assess those actions, and modify actions based on self assessment and external\nassessment of results by others. Implementing this level of intelligence involves embedding\nagents within each element that communicate, integrate, and adapt based on access to\nknowledge bases and autonomous learning algorithms.\nThe smart elements are being developed in the MATLAB environment which is very conducive\nfor research purposes, while the system integration is being done using the G2 software, which\nis designed to handle complex intelligent systems. G2 software has been chosen since it offers\nthe opportunity to develop layered behaviors analogous to the hierarchical autonomous\narchitecture we seek to develop. SSC provides an ideal test bed for this development effort due\nto ready access to a broad range of rocket engine test stands, associated data acquisition systems,\nand archival data. In addition, there is a large experienced user base, which can be drawn from\nto develop, refine, and validate the architecture elements.\nThe ISHM is envisioned to have two types of sensors: Physical Intelligent Sensors (PIS) and\nVirtual Intelligent Sensors (VIS). The PIS are actual sensors with embedded microprocessors,\nwhile the VIS are virtual software-based sensors that function as PIS where it is physically\nimpossible or uneconomical to replace existing sensors with PIS. This paper concentrates on the\ndescription of the PIS entities.\n5\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\n3. Physical Intelligent Sensor (PIS) Structure\nThe PIS or smart sensor is a combination of a sensing element, a data acquisition chip, a\nmicroprocessor and an Ethernet connection that allows one to directly connect the sensor to an\nEthernet Bus. A PC is connected to the microprocessor to down load the software to the RAM\nand also debug the program. Once the software is running, this PC is removed and all the data is\ncollected by a remote PC thru the Ethernet Bus. Several such smart sensors can be connected to\nthe same Ethernet Bus and controlled by the single remote PC.\n\nS\nE\nN\nS\nO\nR\n\nM\nI\nC\nR\nO\nPROCESSOR\n\nA\nD\nC\n\nR\nE\nM\nO\nT\nE\nPC2\n\nPC1\n\nFigure 2: Block diagram of the PIS system\nFigure 2 is the block diagram of the PIS system. As shown in the block diagram the first block is\nthe sensor connected to the Analog to Digital Converter (ADC), where the analog data from the\nsensor is converted into digital data. The ADC is then connected to the microprocessor which is\nconnected to a computer with a programming cable (RS-232). The program is downloaded onto\nthe microprocessor. In this current work ADC7794 is being used for Analog to Digital\nconversion. It is a serial out converter. The microprocessor being used is the RCM3300 [24].\nThis microprocessor is compatible with Dynamic \xe2\x80\x98C\xe2\x80\x99 (8.61) software along with assembly\nlanguage. Hence, one can do the software coding directly in Dynamic \xe2\x80\x98C\xe2\x80\x99 (8.61), thus reducing\nthe complexity of the problem, and can see the results on the computer (a stdout window). One\ncan also send the programmed data from the microprocessor to a remote system using a TCP\\IP\nProtocols thru an Ethernet bus. The analog data from the sensor is given to the ADC. According\nto the specifications of the ADC, if the analog data from the sensor exceeds 5V then the analog\nvoltage is scaled to 5V and is sent to the ADC. The same case is applied when the actual voltage\nis dropped below 0V i.e. dropped to a negative voltage, then the voltage is scaled to 0V and is\nsent to the ADC. The analog data is converted into digital data and is stored in the\nmicroprocessor\xe2\x80\x99s (RCM3300) Flash memory (512K) in the form of a file. This data forms the\ninput for the event detection routines embedded in the PIS.\n\n6\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\n4. PIS Hardware Description\nThe hardware used in the PIS consists of an ADC7794, a microprocessor RCM3300 and a PC\nhaving windows 2000 and above operating system with a dynamic C 8.61 environment. Figure 3\nshows the functional block diagram of the AD7794. The analog output from the sensor is given\nto the multiplexer and then this output is sent to the buffer. Then in order to amplify the signal\nfrom the sensor one has to pass this thru an operational amplifier due to the possibility of small\nstrength signals. These pre-conditioned signals are sent to the ADC where these analog signals\nare sampled and are converted into digital signals which are then fed to the microprocessor. This\ndata is processed using the smart software program. The digital data can be available at the\n(digital out) DOUT pin of the AD7794 chip. When the data is ready at the DOUT pin then the\nSCLK pin goes high indicating to the microprocessor that the data is ready. The microprocessor\nthen accepts the data and makes the (digital in) DIN pin high indicating the data transfer is\ncomplete. This process continues until there is data available at the DOUT pin.\n\nFigure 3: Functional block diagram of the AD7794\nThe SCLK has a Schmitt-triggered input, making the interface suitable for opto-isolated\napplications. The serial clock can be continuous with all the data transmitted in a continuous\ntrain of pulses. Alternatively, it can be a non continuous clock with the information being\ntransmitted to or from the ADC in smaller batches of data. The internal clock can be made\navailable at the Clock In/Clock Out pin. Alternatively, the internal clock can be disabled and the\nADC can be driven by an external clock. This allows several ADCs to be driven from a common\nclock, allowing simultaneous conversions to be performed. The Chip Select Input is an active\nlow logic input used to select the ADC. CS can be used to select the ADC in systems with more\nthan one device on the serial bus or as a frame synchronization signal in communicating with the\ndevice. CS can be hardwired low, allowing the ADC to operate in a 3-wire mode with SCLK,\nDIN, and DOUT used to interface with the device. The main interface part in the smart sensor is\nthe interfacing between the ADC and Microprocessor. The output data from the ADC is a 24bit\nserial data, so there are three pin connections between the ADC and the microprocessor. The\nfollowing are descriptions of the pins:\n\n7\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\ni) Interrupt pin from the ADC indicating that the data is ready at the ADC for transfer\n(SCLK pin from the ADC).\nii) Data transfer pin (DOUT/READY pin from ADC).\niii) Data acknowledgement pin from the microprocessor (DIN to the ADC).\nWhen there is data ready at the ADC then the\ninterrupt pin is high indicating that the data is ready\nfor the microprocessor. When the microprocessor\nreceives the interrupt signal from the ADC then the\nserial data is transferred to the microprocessor\nthrough the data transfer pin of ADC. When the data\nis transferred then the microprocessor sends a data\nacknowledgement signal to the ADC indicating the\ncompletion of the data transfer. As the data transfer\nincludes serial/parallel data transfer, the clock of the\nmicroprocessor and ADC are synchronized, so that\nthere is a minimal probability of data loss. The clock\nadjustment and the port pins (I/O) of microprocessor\nare controlled by the software (Dynamic \xe2\x80\x98C\xe2\x80\x99) in the\nmicroprocessor. The actual physical set-up of this\ninterface connection is shown in Figure 4.\n\nADC\n0801\n(Can be\n\nAD7794\n\nMICROPR\nOCESSOR\nRCM3300\n\nFigure 4: Interface between ADC and\nthe Microprocessor\n\nThe microprocessor and the PC1 are\nconnected by an RS232 programming\ncable. The code that has to be stored on the\nmicroprocessor has to be first written on\nPC1 and is then downloaded to the\nmicroprocessor. It is compiled and run by\nusing the SRAM (or) FLASH (each of\n512KB) of the microprocessor. There is a\nmemory back up of 8MB in the form of\nserial flash on the RCM3300 core module\nto create files and to store data. This then\nhas to be transferred to the remote PC2 for\nfurther analysis using TCP\\IP protocols and\nan Ethernet cable connected to the\nmicroprocessor and the remote PC2. The\nphysical set-up is shown in Figure 5.\n\nPC1\n\nMICROPROC\nESSOR\nRCM3300\n\nREMOTE\nPC2\n\nFigure 5: Sending results to the remote\ncomputer\n8\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\nRabbit Memory Organization\nTypical Rabbit systems have two types of physical memory: flash memory and static RAM\nmemory.\na. Flash Memory: Flash memory in a Rabbit-based system may be small-sector type or largesector type. Small-sector memory typically has sectors of 128 to 1024 bytes. Individual sectors\nmay be separately erased and written. In large-sector memory the sectors are often 16K, 64K or\nmore. Small-sector memory provides better support for program development and debugging\nwhile large-sector memory is less expensive and has faster access time. The best solution will\nusually be to lay out a design to accept several different types of flash memory including the\nflexible small-sector memories and the fast large-sector memories.\nb. SRAM: Static RAM memory may or may not be battery-backed. If it is battery-backed it\nretains its data when power is off. Static RAM chips typically used for Rabbit systems are 32K,\n64K, 128K, 256K or 512K. When the memory is battery-backed power is supplied at 2-3V from\na backup battery. The shutdown circuitry must keep the chip select line high while preserving\nmemory contents with battery power.\nA basic Rabbit system has two static memory chips, one flash memory chip and one RAM\nmemory chip. Additional static memory chips may be added. If an application requires storing a\nlot of data in flash memory, another flash memory chip can be added (e.g. an external XD-Flash\nCard) creating a system with three memory chips, i.e. two flash memory chips and one RAM\nchip.\nThere are four main memory segments:\n1. The Root Memory Segment: The root memory segment has a typical size of 24K. The\nlarger the root memory segment smaller the data segment and vice-versa. Root memory\nsegment address zero is always mapped to a 20-bit address zero. Usually the root memory\nsegment is mapped to flash memory since root code and root constants do not change\nexcept when the system is reprogrammed. It may be mapped to RAM for debugging, or to\ntake advantage of the faster access time offered by RAM. The root memory segment holds\na mixture of codes and constants. C functions or assembly language programs that are\ncompiled to the root memory segment are interspersed with data constants. Data constants\nare inserted between blocks of code. Data constants defined inside a C function are put\nbefore the end of the code belonging to the function. Data constants defined outside of C\nfunctions are stored as encountered in the source code. Except in small programs, the bulk\nof the code is executed using the extended memory segment. But code in the root memory\nsegment operates slightly faster. Also the root memory segment has special properties that\nmake it better for some types of code.\n2. The Data Segment: The data segment is mapped to RAM and contains C variables.\nTypically it starts at 8K or above and ends at 52K (0xCFFF). Data allocation starts at or\nnear the top and proceeds in a downward direction. It is also possible to place executable\ncode in the data segment if it is copied from flash to the data segment. This can be\ndesirable for code that is self modifying, code to implement debugging aids or code that\ncontrols write to the flash memory and cannot execute from flash. In some cases RAM\nmay require fewer wait states so code executes faster if copied to the RAM.\n3. The Stack Segment: The stack segment normally is from 52K to 56K (0xD000-0xDFFF).\nIt is always mapped to RAM and holds the system stack. Multiple stacks may be\n9\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\nimplemented by defining several stacks in the 4k space or by remapping the 4K space to\ndifferent locations in physical RAM memory, or by using both approaches. For example, if\n16 stacks of 1k length are needed then 4 stacks can be placed in each 4k mapping and 4\ndifferent mappings for the window can be used.\n4. The Extended Memory Segment: This 8K segment is from 56K to 64K (0xE000-0xFFFF)\nand is used to execute extended code. It is also used by routines that manipulate data\nlocated in extended memory. While executing code the mapping is shifted by 4K each time\nthe code passes the 60K point. Up to a megabyte of code can be efficiently executed by\nmoving the mapping of the 8K window using special instructions (long call, long jump and\nlong return) that are designed for this purpose.\n\nFigure 6 shows the program flow\nfor the PIS and the execution of the\nevent detection algorithms.\n\nDefine Global variables, constants; include\nlibrary files\nfunction prototypes,\n\nCheck for storage\ndevice\n\nNO\n\nGives Error\n\nYes\n\nThe following is the process\nfollowed for the building of code.\n\xe2\x80\xa2 The programmer edits the code\nin the Dynamic \xe2\x80\x98C\xe2\x80\x99 IDE, and\nsaves the source file in a text\nformat.\n\xe2\x80\xa2 The Dynamic \xe2\x80\x98C\xe2\x80\x99 IDE compiles\nthe code. If needed, the\nprogrammer can compile from\ncommand line parameters.\nUnlike most other development\nenvironments, Dynamic \xe2\x80\x98C\xe2\x80\x99\nprefers to compile every source\nfile and every library file for\neach build. There is an option\nthat allows the user to define\nprecompiled functions.\n\xe2\x80\xa2 There is no separate linker.\nEach build results in a single\nbinary file (with the \xe2\x80\x9c.BIN\xe2\x80\x9d\nextension) and a map file (with\nthe \xe2\x80\x9c.MAP\xe2\x80\x9d extension).\n\xe2\x80\xa2 The\nDynamic\n\xe2\x80\x98C\xe2\x80\x99\nIDE\ndownloads\nthe\nexecutable\nbinary file into the target system\nusing the programming cable.\n\nClears it\n\nCreate a file in\nflash\n\nNO\n\nSelect channel for data and store it in created\nfile\n\nSelect event detection routine\n\nOutputs results in STDIO or can be sent to\nremote system\n\nFigure 6: Program flow for the PIS\n\n10\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\nGives Error\n\n5. PIS Implementation and Execution\nThe PIS as described in the previous sections has been implemented with a thermocouple and\nhas the capability to work in real time. The following routines obtained from NASA\xe2\x80\x99s Glenn\nSpace Center have been implemented on the PIS:\nA. Level Shift\nB. Flat\nC. Noise\nD. Spike\nE. Drift\nTo demonstrate the PIS capabilities an artificial data set was created with all the above\nevents/anomalies as shown in Figure 7. Letters A-E signify the routines recognizing the\nevents/anomalies and the corresponding PIS outputs are shown in this section.\n\nFigure 7: Test data with multiple events detected by the PIS\nA: Level Shift\n\nThe PIS output shows that the level shift has occurred at start time 19.0 (time units) with\na previous stable value 95.0 (temperature units) and stopped at 39.0 (time units) reaching\na stable value of 2.0 (temperature units).\n\n11\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\nB: FLAT\n\nThe PIS output shows that during the interval 71.0 (time units) to 100.0 (time units) the sensor\noutput is flat. This means that the sensor is dead or is not powered up. It can be seen from the\ngraph that there is no change in the sensor data in the observed period, in other words there is\neven an absence of noise, hence the suspicious nature of the sensor output.\nC: NOISE\n\nThe PIS output shows that excessive noise was detected at 101.0 (time units) and ended at 126.0\n(time units). During this period the maximum average noise was of magnitude 13.2 (data units)\nand minimum average was 1.6 (data units). The \xe2\x80\x9cnoise\xe2\x80\x9d event detection routine returns a status\nof 1 or 2, where 1 is \xe2\x80\x9cexcessive noise\xe2\x80\x9d and 2 is \xe2\x80\x9cfine.\xe2\x80\x9d\n\n12\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\nD: Spike\n\nThe PIS output shows that there were two spikes detected in the given stream of data. The first\nspike was detected at time 153.0 (time units) which lasted till 155.0 (time units). The time stamp\nfor the start of the spike is 2.0 (data units) and the spike had a magnitude of 48.0 (data units) i.e.\n50.0 - 2.0 = 48.0. Similarly a second spike was detected at 184.0 (time units) with a magnitude of\n-52.0 (data units).\nE: Drift\n\nThe PIS output shows that a drift was detected that started at 230.0 (time units) from a value of\n2.0 (data units) and ended at 260.0 (time units). It settled at a final new value of 22.0 (data units).\n\n13\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\nConclusions\nThis paper has presented the development of intelligent sensors as part of an integrated systems\napproach, i.e. one treats the sensors as a complete system with its own sensing hardware (the\ntraditional sensor), A/D converters, processing and storage capabilities, software drivers, selfassessment algorithms, communication protocols and evolutionary methodologies that allow\nthem to get better with time. Under a project being undertaken at the NASA\xe2\x80\x99s Stennis Space\nCenter, an integrated framework is being developed for the intelligent monitoring of smart\nelements. This paper outlines progress made in the development of intelligent sensors by\ndescribing the work done till date on Physical Intelligent Sensors (PIS). The PIS discussed here\nconsists of a thermocouple used to read temperature in an analog form which is then converted\ninto digital values. A microprocessor collects the sensor readings and runs numerous embedded\nevent detection routines on the collected data and if any event is detected, it is reported, stored\nand sent to a remote system through an Ethernet connection. Hence the output of the PIS is data\ncoupled with confidence factor in the reliability of the data which leads to information on the\nhealth of the sensor at all times. All protocols are consistent with IEEE 1451.X standards. This\nwork lays the foundation for the next generation of smart devices that have embedded\nintelligence for distributed decision making capabilities.\n\nAcknowledgements\nThe authors would like to acknowledge the support of NASA for funding this work under\nGrant NNS04AB796. The authors would also like to acknowledge the contributions of\nresearchers at Rowan University for providing the smart sensor prototype and NASA Glenn\nResearch Center for providing the event detection routines.\n\nReferences\n1. Ghani, N., 1988,"Sensor integration in ESPRIT," IFAC Proceedings, Karlsruhe, FDR, pp.\n323-328.\n2. Pinkava, J., 1989,"Towards a theory of sensory robotics," Robotica, Vol. 8, pp. 245-256.\n3. Lozano-Perez, T., Mason, M. T., and Taylor, R., 1984, "Automatic synthesis of fine motion\nstrategies for robots," International Journal of Robotics Research, 3, No. 1, , pp. 2-24.\n4. AbdelRahman, M. and Smith M. L., 1991 "The Impact of AI On Sensing Technology,"\nSENSORS, pp. 16-22.\n5. Studt, T., 1994,"Smart Sensors Widen Views on Measuring Data," R&D Magazine, pp. 1820.\n6. Figueroa, F. and Mahajan, A., 1994, "Generic Model of an Autonomous Sensor,"\nMechatronics, Vol. 4, No. 3, pp. 295-315.\n7. Henderson, T and Shilcrat, E., 1984, "Logical Sensor Systems," Journal of Robotic Systems,\n1(2), pp. 169-193.\n8. Henderson, T., Hansen, C. and Bhanu, B., 1985, "The Specification of Distributed Sensing\nand Control," Journal of Robotic Systems, 2(4), pp. 387-396.\n9. DeCoste, D., 1991,"Dynamic Across-Time Measurement and Interpretation," Artificial\nIntelligence, Vol. 51, pp. 273-341.\n10. Mahajan, A. and Figueroa, F., 1995, \xe2\x80\x9cDynamic Across Time Autonomous - Sensing,\nInterpretation, Model learning and Maintenance theory (DATA-SIMLAMT),\xe2\x80\x9d Mechatronics,\nVol. 5, No. 6, pp. 665-693.\n14\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\n11. Abbott, D., 2001. \xe2\x80\x9cDevelopment and Evaluation of Sensor Concepts for Ageless Aerospace\nVehicles\xe2\x80\x9d, Report 1, CSIRO TIP Report no. TIPP 1516.\n12. Abbott, D., \xe2\x80\x9cDevelopment and Evaluation of Sensor Concepts for Ageless Aerospace\nVehicles\xe2\x80\x9d, Report 2, CSIRO TIP Report no. TIPP 1517.\n13. Price, D.C., Scott, D.A., Edwards, G.C., Batten, A., Farmer, A.J., Hedley, M., Johnson,\nM.E., Lewis, C.J., Poulton, G.T., Prokopenko, M., Valencia, P. and Wang, P., 2003. \xe2\x80\x9cAn\nIntegrated Health Monitoring system for an Ageless Aerospace Vehicle\xe2\x80\x9d Proceedings of the\nStructural Health Monitoring 2003: From Diagnostics & Prognostics to Structural Health\nManagement, ed. Fu-Kuo Chang, DEStech Publications (Lancaster, PA), pp. 310-8.\n14. Maul, W., 2005 \xe2\x80\x9cISHM/ NASA Session - Work and Technology at NASA-Algorithms for\nIntelligent Elements\xe2\x80\x9d IEEE Sensors for Industry Conference.\n15. Wang, P., Valencia, P., Prokopenko, M., Price, D.C. and Poulton, G.T., 2003. \xe2\x80\x9cSelfReconfigurable Sensor Networks in Ageless Aerospace Vehicles,\xe2\x80\x9d Proceedings of the 11th\nInternational Conference on Advanced Robotics (ICAR-03), Coimbra, Portugal.\n16. Lovatt, H., G. T. Poulton, D. C. Price, M. Prokopenko, P. Valencia, P. Wang. 2003. \xe2\x80\x9cSelfOrganising Impact Boundaries in Ageless Aerospace Vehicles,\xe2\x80\x9d In Proceedings of the 2nd\nInternational Conference on Autonomous Agents and Multi-Agent Systems (AAMAS \'03),\nMelbourne, Australia, July 2003.\n17. Newman, R.M. and Gaura, E.I., 2003 \xe2\x80\x9cUsing very large arrays of intelligent sensors\xe2\x80\x9d\nProceedings of the 2003 IEEWASME international Conference on Advanced Intelligent\nMechartonics (AIM 2003).\n18. Gaura, E.I., and Newman, R.M., 2003, \xe2\x80\x9cIntelligent sensing: Neural Network based health\ndiagnosis for sensor arrays,\xe2\x80\x9d Proceedings of the 2003 IEEE/ASME international Conference\non Advanced Intelligent Mechartonics (AIM 2003).\n19. Minh-Duc L.E., Thi-Hoang-Hoa, Thi-Huong V.U., Duc-Vang L.E., Thi-Huong, 2003 \xe2\x80\x9cAn\nAutomatic Control System Applying Decoupling Control Methodology for Ship Harbor\nManeuvers,\xe2\x80\x9d Proceedings of the 2003 IEEE/ASME international Conference on Advanced\nIntelligent Mechartonics (AIM 2003).\n20. Seliger, G., Kross, U. and Buchholz, A., 2003, \xe2\x80\x9cEfficient Maintenance Approach by Onboard Monitoring of Innovative Freight Wagon Bogie,\xe2\x80\x9d Proceedings of the 2003\nIEEE/ASME international Conference Of Advanced Intelligent Mechatronics (AIM 2003)\n21. Changfan, Z., Jing, H., Yonghong, L. and Yeqing, C., 2004, \xe2\x80\x9cIntelligent Temperature\nControl of Ignition Furnace in Sintering Machine,\xe2\x80\x9d Proceedings of 2004 IEEE Conference\non Cybernetics and Intelligent Systems, Singapore.\n22. Frank L. Greitzer, Lars J. Kangas, Kristine M. Terrones, Melody A. Maynard, Bary W.\nWilson, Ronald Pawlowski, Daniel R. Sisk, and Newton B. Brown, 1999, \xe2\x80\x9cGas Turbine\nEngine Health Monitoring and Prognostics\xe2\x80\x9d, Proceedings of the International Society of\nLogistics (SOLE) 1999 Symposium, Las Vegas, Nevada.\n23. McDonald, J.R., McArthur, S.D.J. and Burt, G.M., 2001, \xe2\x80\x9cIntelligent system applications for\npower system control and management,\xe2\x80\x9d Computing & Control Engineering Journal,\nVolume 12, Issue 2, April 2001, pp.85-91.\n24. Hyder, K. and Perrin, B., 2005, \xe2\x80\x9cEmbedded Systems Design Using the Rabbit 3000\nMicroprocessor,\xe2\x80\x9d Butterworth-Heinemann College, ISBN: 0750678720.\n\n15\n\nRELEASED - Printed documents may be obsolete; validate prior to use.\n\n'